
#ifdef _MSC_VER
	#pragma pack(push, 0x01)
#endif

namespace Dumper {
// BlueprintGeneratedClass LF_Lighting_Master.LF_Lighting_Master_C
// Size: 0x860 (Inherited: 0x3a0)
class ALF_Lighting_Master_C : public ADFMTODLightingActor {
public:

	struct FPointerToUberGraphFrame UberGraphFrame; // 0x3a0(0x08)
	struct UStaticMeshComponent* StaticMesh; // 0x3a8(0x08)
	struct USceneComponent* Scene; // 0x3b0(0x08)
	struct UArrowComponent* Arrow; // 0x3b8(0x08)
	float MinimumLumens; // 0x3c0(0x04)
	float LowLumens; // 0x3c4(0x04)
	float MidLumens; // 0x3c8(0x04)
	float HigLumens; // 0x3cc(0x04)
	bool SwitchOn; // 0x3d0(0x01)
	bool UsePresetTemp; // 0x3d1(0x01)
	enum class Temperature ChoseTemperature; // 0x3d2(0x01)
	char pad_3D3[0x1]; // 0x3d3(0x01)
	float Temperature; // 0x3d4(0x04)
	bool UseUnrealIntensity; // 0x3d8(0x01)
	char pad_3D9[0x3]; // 0x3d9(0x03)
	float IndirectLightingIntensity; // 0x3dc(0x04)
	bool DecoLight_ST_M_; // 0x3e0(0x01)
	char pad_3E1[0xf]; // 0x3e1(0x0f)
	struct FTransform Transform; // 0x3f0(0x30)
	enum class EComponentMobility SetMobility; // 0x420(0x01)
	bool HD; // 0x421(0x01)
	char pad_422[0xe]; // 0x422(0x0e)
	struct FTransform SecondrySpot; // 0x430(0x30)
	bool OpenPCFeature; // 0x460(0x01)
	bool OnlyOpenMobility; // 0x461(0x01)
	bool SetCastPreBake; // 0x462(0x01)
	char pad_463[0x1]; // 0x463(0x01)
	int32_t PreBakeShadowMapResolution; // 0x464(0x04)
	bool OpenIES; // 0x468(0x01)
	char pad_469[0x7]; // 0x469(0x07)
	struct UTextureLightProfile* IESMask; // 0x470(0x08)
	float IESIntensity; // 0x478(0x04)
	char pad_47C[0x4]; // 0x47c(0x04)
	struct UMaterialInterface* LightFunction; // 0x480(0x08)
	bool OpenSetLightAttr; // 0x488(0x01)
	char pad_489[0x3]; // 0x489(0x03)
	float TemperatureMin; // 0x48c(0x04)
	float TemperatureMax; // 0x490(0x04)
	float RectSourceWidth; // 0x494(0x04)
	float RectSourceHeight; // 0x498(0x04)
	float RectBarnDoorAngle; // 0x49c(0x04)
	float SpotOuter_Cone_Angle; // 0x4a0(0x04)
	float SpotInnerConeAngle; // 0x4a4(0x04)
	enum class EComponentMobility Mobility; // 0x4a8(0x01)
	char pad_4A9[0x3]; // 0x4a9(0x03)
	float AttenuationRaius; // 0x4ac(0x04)
	enum class LuminanceLevel LuminanceLevel; // 0x4b0(0x01)
	enum class LightingType LightingType; // 0x4b1(0x01)
	enum class EComponentMobility Static; // 0x4b2(0x01)
	char pad_4B3[0xd]; // 0x4b3(0x0d)
	struct FTransform otherTrans; // 0x4c0(0x30)
	float OtherRectSourceW; // 0x4f0(0x04)
	float OtherRectSourceH; // 0x4f4(0x04)
	float OtherRectSourceAngle; // 0x4f8(0x04)
	bool MoreBright; // 0x4fc(0x01)
	char pad_4FD[0x3]; // 0x4fd(0x03)
	struct FLinearColor Light_Color; // 0x500(0x10)
	float RectPower; // 0x510(0x04)
	bool Preview; // 0x514(0x01)
	bool IsMoveMesh; // 0x515(0x01)
	char pad_516[0x2]; // 0x516(0x02)
	float Bloom; // 0x518(0x04)
	char pad_51C[0x4]; // 0x51c(0x04)
	struct TMap<enum class LuminanceLevel, float> BloomForIBL_PC; // 0x520(0x50)
	bool OpenExtraLG; // 0x570(0x01)
	bool OverridePresetForMesh; // 0x571(0x01)
	char pad_572[0x2]; // 0x572(0x02)
	struct FLinearColor MaterialBrightValue; // 0x574(0x10)
	float Temperature_; // 0x584(0x04)
	float LowLumens_; // 0x588(0x04)
	float MidLumens_; // 0x58c(0x04)
	float HigLumens_; // 0x590(0x04)
	float AttenuationRadius_; // 0x594(0x04)
	float RectAngle_; // 0x598(0x04)
	float SpotOCAngle_; // 0x59c(0x04)
	float SpotICAngle_; // 0x5a0(0x04)
	float SpotSourceRadius; // 0x5a4(0x04)
	float PointSourceRadius; // 0x5a8(0x04)
	float BrightMul; // 0x5ac(0x04)
	bool HiddenLighting; // 0x5b0(0x01)
	bool HiddenBloom; // 0x5b1(0x01)
	bool OpenAddtionalLight; // 0x5b2(0x01)
	char pad_5B3[0xd]; // 0x5b3(0x0d)
	struct FTransform AddLTrans; // 0x5c0(0x30)
	float AddLSourceRadius; // 0x5f0(0x04)
	float AddLAttenuationRadius; // 0x5f4(0x04)
	float AddLLumens; // 0x5f8(0x04)
	float GlobalBrightMul; // 0x5fc(0x04)
	bool UseEmissiveLight; // 0x600(0x01)
	char pad_601[0x3]; // 0x601(0x03)
	float Candela; // 0x604(0x04)
	float LightmapMoreBright; // 0x608(0x04)
	float MaterialMoreBright; // 0x60c(0x04)
	float EmissiveAtteunationRadius; // 0x610(0x04)
	char pad_614[0x4]; // 0x614(0x04)
	struct USpotLightComponent* SpotLightComp; // 0x618(0x08)
	struct URectLightComponent* RectLightComp; // 0x620(0x08)
	struct UPointLightComponent* PointLightComp; // 0x628(0x08)
	struct UPointLightComponent* AddtionalLightComp; // 0x630(0x08)
	bool OpenE_MainL; // 0x638(0x01)
	char pad_639[0x7]; // 0x639(0x07)
	struct USpotLightComponent* SpotLightComp_3; // 0x640(0x08)
	float MinimumLumens_; // 0x648(0x04)
	bool OpenLowest; // 0x64c(0x01)
	bool OpenSecondrySpot; // 0x64d(0x01)
	char pad_64E[0x2]; // 0x64e(0x02)
	float FinalIntensity; // 0x650(0x04)
	float Floatu; // 0x654(0x04)
	float Floatv; // 0x658(0x04)
	float Floatx; // 0x65c(0x04)
	float Floaty; // 0x660(0x04)
	float Floatz; // 0x664(0x04)
	float FloatYY; // 0x668(0x04)
	float FloatZZ; // 0x66c(0x04)
	float FloatXX; // 0x670(0x04)
	float FloatR; // 0x674(0x04)
	float FloatG; // 0x678(0x04)
	float FloatB; // 0x67c(0x04)
	float SourceLength; // 0x680(0x04)
	bool OpenAffectTranslucent; // 0x684(0x01)
	bool OpenVolume_LF; // 0x685(0x01)
	bool ResetCullingDistance; // 0x686(0x01)
	char pad_687[0x1]; // 0x687(0x01)
	int32_t CullingDistance; // 0x688(0x04)
	float VolumetricScatteringIntensity; // 0x68c(0x04)
	enum class LF_GodLightingType VLF_GodLightType; // 0x690(0x01)
	char pad_691[0x7]; // 0x691(0x07)
	struct ULightComponent* LFV_LightComp; // 0x698(0x08)
	float VLF_RectWid; // 0x6a0(0x04)
	float VLF_RectHei; // 0x6a4(0x04)
	float VLFRectAngle; // 0x6a8(0x04)
	float VLFRectBarnDoorLength; // 0x6ac(0x04)
	float VLFPointSourceLength; // 0x6b0(0x04)
	float VLF_SpotOuter; // 0x6b4(0x04)
	float VLF_SpotInner; // 0x6b8(0x04)
	float SetVLF_LightIntensity; // 0x6bc(0x04)
	float VLFAttenuationRadius; // 0x6c0(0x04)
	char pad_6C4[0xc]; // 0x6c4(0x0c)
	struct FTransform VLF_GodLightTras; // 0x6d0(0x30)
	bool _exclude_in_reflection_OnlyPC_; // 0x700(0x01)
	bool OpenSetVLFLightColor; // 0x701(0x01)
	char pad_702[0x2]; // 0x702(0x02)
	struct FLinearColor VLF_LightColor; // 0x704(0x10)
	enum class EComponentMobility Stationary; // 0x714(0x01)
	char pad_715[0x3]; // 0x715(0x03)
	float VLFPointSourceRadius; // 0x718(0x04)
	float StaticLightSpecular; // 0x71c(0x04)
	struct UPreBakeShadowDepthMap* PreBakeShadowDepthData; // 0x720(0x08)
	float SetShadowBias; // 0x728(0x04)
	float ShadowRadiusScale; // 0x72c(0x04)
	int64_t PreviewWeatherID; // 0x730(0x08)
	struct TMap<int64_t, float> WeatherLightIntensityMap; // 0x738(0x50)
	float WeatherIntensityScale; // 0x788(0x04)
	bool UseOuterSide; // 0x78c(0x01)
	char pad_78D[0x3]; // 0x78d(0x03)
	float MaxDrawDistance; // 0x790(0x04)
	float SoftSourceRadius; // 0x794(0x04)
	bool NewVar_1; // 0x798(0x01)
	char pad_799[0x3]; // 0x799(0x03)
	struct FLinearColor FinalColor; // 0x79c(0x10)
	float FinalTemp; // 0x7ac(0x04)
	bool UseInverseSquaredFalloff; // 0x7b0(0x01)
	char pad_7B1[0x3]; // 0x7b1(0x03)
	float LightFalloffExponent; // 0x7b4(0x04)
	bool AffectRayTracingReflections; // 0x7b8(0x01)
	bool OpenVFXLensflare; // 0x7b9(0x01)
	char pad_7BA[0x6]; // 0x7ba(0x06)
	struct AFXProxyActor* FXProxyActorRef; // 0x7c0(0x08)
	char pad_7C8[0x8]; // 0x7c8(0x08)
	struct FTransform VFXLensflareTrans; // 0x7d0(0x30)
	struct UChildActorComponent* VFXDestroy; // 0x800(0x08)
	struct TMap<enum class LuminanceLevel, float> BloomForIBL_Mobile; // 0x808(0x50)
	bool OutsideBakeInMobile; // 0x858(0x01)
	char pad_859[0x3]; // 0x859(0x03)
	float EmissiveBloomForIBL; // 0x85c(0x04)

	void VFXFunction(); // Function LF_Lighting_Master.LF_Lighting_Master_C.VFXFunction // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0xfb59029636201d7c
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
