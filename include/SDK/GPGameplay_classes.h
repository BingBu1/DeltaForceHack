
#ifdef _MSC_VER
	#pragma pack(push, 0x01)
#endif

namespace Dumper {
// Class GPGameplay.GPPackageMapClient
// Size: 0x530 (Inherited: 0x458)
class UGPPackageMapClient : public UPropertyReplicationPackageMapClient {
public:

	char pad_458[0xd0]; // 0x458(0xd0)
	int32_t NetActorRenameLevel; // 0x528(0x04)
	char pad_52C[0x4]; // 0x52c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPGameInstance
// Size: 0x3e0 (Inherited: 0x1d8)
class UGPGameInstance : public UBaseGameInstance {
public:

	char pad_1D8[0x8]; // 0x1d8(0x08)
	struct TArray<struct UObject*> PreloadedObjects; // 0x1e0(0x10)
	char pad_1F0[0x140]; // 0x1f0(0x140)
	struct TMap<struct FName, struct UClass*> PredloadClassList; // 0x330(0x50)
	struct AMovementReplicationActor* MovementReplicationActor; // 0x380(0x08)
	struct UDataTable* CharacterPreSpawnTable; // 0x388(0x08)
	struct TMap<struct UClass*, struct FCharacterArray> PreSpawnedCharacters; // 0x390(0x50)

	void PreloadLevels(struct TArray<struct UObject*>& OutPreloadedObjects); // Function GPGameplay.GPGameInstance.PreloadLevels // (Final|Native|Public|HasOutParms) // @ game+0x35fd300
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AbilityEntityManager
// Size: 0x108 (Inherited: 0x30)
class UAbilityEntityManager : public UObject {
public:

	char pad_30[0xd8]; // 0x30(0xd8)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AbilityProjectileActorInterface
// Size: 0x30 (Inherited: 0x30)
class UAbilityProjectileActorInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AdrenalineWeaponDataComponent
// Size: 0x640 (Inherited: 0x5f0)
class UAdrenalineWeaponDataComponent : public UGPWeaponDataComponentBase {
public:

	enum class EOutLineEffectType OutLineEffectType; // 0x5f0(0x04)
	float AdrenalineEffectRange; // 0x5f4(0x04)
	struct FName AdrenalineEffectName; // 0x5f8(0x08)
	struct FName AdrenalineEffectParameterName; // 0x600(0x08)
	struct FName MobileFXName; // 0x608(0x08)
	bool bShowEffect; // 0x610(0x01)
	char pad_611[0x7]; // 0x611(0x07)
	struct TArray<struct AActor*> OutLineCharArray; // 0x618(0x10)
	int32_t TickCnt; // 0x628(0x04)
	char pad_62C[0x4]; // 0x62c(0x04)
	struct UFXResourceContainerComponent* MobileFXComp; // 0x630(0x08)
	int32_t MobileFXCompHandle; // 0x638(0x04)
	char pad_63C[0x4]; // 0x63c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AIDebugPanelV2
// Size: 0x3c8 (Inherited: 0x3b8)
class UAIDebugPanelV2 : public UMobileGamePadView {
public:

	struct TWeakObjectPtr<struct UGPAIAnimInstance> AnimInst; // 0x3b8(0x08)
	struct TWeakObjectPtr<struct UGPAIAnimInstance> OldAnimInst; // 0x3c0(0x08)

	void OnDebugTargetChanged(); // Function GPGameplay.AIDebugPanelV2.OnDebugTargetChanged // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x7ed88c0
	void BP_Update(float DeltaSecond); // Function GPGameplay.AIDebugPanelV2.BP_Update // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AmmoTimeLineOwnerInterface
// Size: 0x30 (Inherited: 0x30)
class UAmmoTimeLineOwnerInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AnimLODConfig
// Size: 0x60 (Inherited: 0x40)
class UAnimLODConfig : public UDeveloperSettings {
public:

	int32_t AnimLODNum; // 0x40(0x04)
	int32_t AnimLODFeatureLevelNum; // 0x44(0x04)
	int32_t AnimLODCutOffset; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct TArray<struct FAnimLODConfigParam> AnimLODConfigParams; // 0x50(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AnimNotify_BreakSkillLockState
// Size: 0x50 (Inherited: 0x40)
class UAnimNotify_BreakSkillLockState : public UAnimNotify {
public:

	struct FName NotifyName; // 0x40(0x08)
	enum class EFSMForbidReason BreakForbidReason; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AnimNotify_CharacterSimulatePhysics
// Size: 0x40 (Inherited: 0x40)
class UAnimNotify_CharacterSimulatePhysics : public UAnimNotify {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AnimNotify_CloseEyeScreenFXInfo
// Size: 0x58 (Inherited: 0x40)
class UAnimNotify_CloseEyeScreenFXInfo : public UAnimNotify {
public:

	struct FCloseEyeScreenFXInfo CloseEyeScreenFXParams; // 0x40(0x0c)
	struct FName EffectName; // 0x4c(0x08)
	char pad_54[0x4]; // 0x54(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AnimNotify_GPPlayMontage
// Size: 0x50 (Inherited: 0x40)
class UAnimNotify_GPPlayMontage : public UAnimNotify {
public:

	struct FName NotifyName; // 0x40(0x08)
	struct FName AddTag; // 0x48(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AnimNotify_GPPlayParticleEffect
// Size: 0xa0 (Inherited: 0x90)
class UAnimNotify_GPPlayParticleEffect : public UAnimNotify_PlayParticleEffect {
public:

	enum class EGPPlayParticleEffectRole ParticleEffectRole; // 0x90(0x01)
	char pad_91[0x3]; // 0x91(0x03)
	struct FName ParticleName; // 0x94(0x08)
	char pad_9C[0x4]; // 0x9c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AnimNotify_GPRemoveLoopParticleEffect
// Size: 0x48 (Inherited: 0x40)
class UAnimNotify_GPRemoveLoopParticleEffect : public UAnimNotify {
public:

	struct FName ParticleName; // 0x40(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AnimNotify_PlayRagDoll
// Size: 0x40 (Inherited: 0x40)
class UAnimNotify_PlayRagDoll : public UAnimNotify {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AnimNotify_PlayResourceParticleEffect
// Size: 0xa0 (Inherited: 0x40)
class UAnimNotify_PlayResourceParticleEffect : public UAnimNotify {
public:

	struct FName ResourceId; // 0x40(0x08)
	struct FVector LocationOffset; // 0x48(0x0c)
	struct FRotator RotationOffset; // 0x54(0x0c)
	struct FVector Scale; // 0x60(0x0c)
	char pad_6C[0x14]; // 0x6c(0x14)
	struct FName AvatarID; // 0x80(0x08)
	struct FName SocketName; // 0x88(0x08)
	bool CheckAvatarID; // 0x90(0x01)
	bool bIsTppAnim; // 0x91(0x01)
	char pad_92[0xe]; // 0x92(0x0e)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AnimNotify_RagDollDelay
// Size: 0x40 (Inherited: 0x40)
class UAnimNotify_RagDollDelay : public UAnimNotify {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AnimNotify_SimulatePhysics
// Size: 0xb8 (Inherited: 0x40)
class UAnimNotify_SimulatePhysics : public UAnimNotify {
public:

	char bMaintainVelocityOfAnim : 1; // 0x40(0x01)
	char pad_40_1 : 7; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	float MaintainedVelocityScale; // 0x44(0x04)
	char pad_48[0x50]; // 0x48(0x50)
	struct USkeletalMeshComponent* MeshComponent; // 0x98(0x08)
	struct TArray<struct UGPPhysicsSimulatableComponent*> PhysicsSimulateComponentArray; // 0xa0(0x10)
	char pad_B0[0x8]; // 0xb0(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AnimNotify_VaultSetting
// Size: 0x50 (Inherited: 0x40)
class UAnimNotify_VaultSetting : public UAnimNotify {
public:

	enum class EVaultNotifySettingType Type; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	int32_t CurveIndex; // 0x44(0x04)
	bool bIsExtraNode; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	int32_t AllFrameCount; // 0x4c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AnimNotify_ClimbLadderSetting
// Size: 0x50 (Inherited: 0x40)
class UAnimNotify_ClimbLadderSetting : public UAnimNotify {
public:

	enum class EClimbLadderNotifySettingType Type; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	int32_t CurveIndex; // 0x44(0x04)
	int32_t AllFrameCount; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AnimNotifyState_AvoidPenetration
// Size: 0x70 (Inherited: 0x38)
class UAnimNotifyState_AvoidPenetration : public UAnimNotifyState {
public:

	float InitSimulateProb; // 0x38(0x04)
	struct FName SweepStartBoneName; // 0x3c(0x08)
	struct FName SweepEndBoneName; // 0x44(0x08)
	float DetectRadius; // 0x4c(0x04)
	struct FName SimulateRootBoneName; // 0x50(0x08)
	float SimulateTime; // 0x58(0x04)
	float SimulateOpentime; // 0x5c(0x04)
	float SimulateRandomOffsettime; // 0x60(0x04)
	char bEnableRootBodyGravity : 1; // 0x64(0x01)
	char bEnableDebugDraw : 1; // 0x64(0x01)
	char pad_64_2 : 6; // 0x64(0x01)
	char pad_65[0xb]; // 0x65(0x0b)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AnimNotifyState_IKBlend
// Size: 0x40 (Inherited: 0x38)
class UAnimNotifyState_IKBlend : public UAnimNotifyState {
public:

	enum class EAnimNotifyStateIKBlend AnimNotifyIKBlendState; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	float BlendTime; // 0x3c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AnimNotifyState_MoveMeshToTarget
// Size: 0x40 (Inherited: 0x38)
class UAnimNotifyState_MoveMeshToTarget : public UAnimNotifyState {
public:

	struct FName AttachBoneName; // 0x38(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AnimNotifyState_ReloadModifyClip
// Size: 0x48 (Inherited: 0x38)
class UAnimNotifyState_ReloadModifyClip : public UAnimNotifyState {
public:

	struct FName AttachBoneName; // 0x38(0x08)
	struct UModularWeaponDataComponentAppearance* ModularWeaponDataComponent; // 0x40(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AttachableItemInterface
// Size: 0x30 (Inherited: 0x30)
class UAttachableItemInterface : public UInterface {
public:


	void AttachableItem_SetParentItemID(int32_t ParentItemID); // Function GPGameplay.AttachableItemInterface.AttachableItem_SetParentItemID // (Native|Public) // @ game+0x356f770
	void AttachableItem_OnParentDestroyed(); // Function GPGameplay.AttachableItemInterface.AttachableItem_OnParentDestroyed // (Native|Public) // @ game+0xaa2b00
	bool AttachableItem_IsDestroyed(); // Function GPGameplay.AttachableItemInterface.AttachableItem_IsDestroyed // (Native|Public) // @ game+0x1036840
	int32_t AttachableItem_GetParentItemID(); // Function GPGameplay.AttachableItemInterface.AttachableItem_GetParentItemID // (Native|Public) // @ game+0x356f740
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AttackerValueDataManager
// Size: 0x48 (Inherited: 0x38)
class UAttackerValueDataManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	struct FSoftObjectPath GetKillIconPath(uint64_t AttackerValueId); // Function GPGameplay.AttackerValueDataManager.GetKillIconPath // (Final|Native|Public|HasDefaults) // @ game+0x35741b0
	struct FSoftObjectPath GetDeathDetailIconPath(uint64_t AttackerValueId); // Function GPGameplay.AttackerValueDataManager.GetDeathDetailIconPath // (Final|Native|Public|HasDefaults) // @ game+0x3574110
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataAttackerValueManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponDataAttackerValueManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AttackLevelDetailCorrectionManager
// Size: 0x48 (Inherited: 0x38)
class UAttackLevelDetailCorrectionManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	struct FAttackLevelCorrection GetRowByGroupId(int32_t GroupID); // Function GPGameplay.AttackLevelDetailCorrectionManager.GetRowByGroupId // (Final|Native|Public|Const) // @ game+0x3574360
	struct FAttackLevelParamGroup GetRowByDelta(uint64_t GroupID, int32_t AttackLevel, int32_t ArmorLevel); // Function GPGameplay.AttackLevelDetailCorrectionManager.GetRowByDelta // (Final|Native|Public|Const) // @ game+0x3574250
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageExplodeValueManager
// Size: 0x48 (Inherited: 0x38)
class UDamageExplodeValueManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamagePhysicalValueManager
// Size: 0x48 (Inherited: 0x38)
class UDamagePhysicalValueManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageBuffValueManager
// Size: 0x48 (Inherited: 0x38)
class UDamageBuffValueManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.VehicleArmorDamageCorrectionManager
// Size: 0x50 (Inherited: 0x38)
class UVehicleArmorDamageCorrectionManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)
	struct UEnum* EGPVehicleArmorPtr; // 0x48(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.KillInfoWeaponInfoFuzzyMatchManager
// Size: 0x40 (Inherited: 0x38)
class UKillInfoWeaponInfoFuzzyMatchManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x8]; // 0x38(0x08)

	bool IsRowQualifyId(struct FKillInfoWeaponImageRow InRow, struct FFuzzyMatchIdCollection InFuzzyMatchIdCollection); // Function GPGameplay.KillInfoWeaponInfoFuzzyMatchManager.IsRowQualifyId // (Final|Native|Public) // @ game+0x35745f0
	bool GetByFuzzyMatchIdCollection(struct FFuzzyMatchIdCollection InFuzzyMatchIdCollection, struct FText& OutDescName, struct FSoftObjectPath& OutPath, enum class EWeaponItemType& OutWeaponItemType); // Function GPGameplay.KillInfoWeaponInfoFuzzyMatchManager.GetByFuzzyMatchIdCollection // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x3573f00
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AttributeDataUtil
// Size: 0x30 (Inherited: 0x30)
class UAttributeDataUtil : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AttributeOperatorEffect
// Size: 0x80 (Inherited: 0x30)
class UAttributeOperatorEffect : public UObject {
public:

	struct TArray<struct FDFMAttributeModEffect> ModEffects; // 0x30(0x10)
	struct UCurveTable* CurveTable; // 0x40(0x08)
	struct FString reason; // 0x48(0x10)
	enum class EAttributeEffectInstanceType InstanceType; // 0x58(0x01)
	enum class EAttributeEffectMainTag MainTag; // 0x59(0x01)
	char pad_5A[0x6]; // 0x5a(0x06)
	struct FGameplayTagContainer TagContainer; // 0x60(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.HeadsetAudioPostProcessTableManager
// Size: 0x50 (Inherited: 0x38)
class UHeadsetAudioPostProcessTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x18]; // 0x38(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AWeaponRagdollActor
// Size: 0x3c0 (Inherited: 0x378)
class AAWeaponRagdollActor : public AActor {
public:

	struct UBoxComponent* BoxCollisionComponent; // 0x378(0x08)
	struct USkeletalMeshComponent* BaseSkeletalMeshComponent; // 0x380(0x08)
	float WeaponRagdollVerticalSpeed; // 0x388(0x04)
	float WeaponRagdollHorizontalSpeed; // 0x38c(0x04)
	struct FVector WeaponRagdollAngularVelocity; // 0x390(0x0c)
	struct FVector WeaponRagdollBoxExtend; // 0x39c(0x0c)
	float LinearDamping; // 0x3a8(0x04)
	float Mass; // 0x3ac(0x04)
	bool UseCustomGravityScale; // 0x3b0(0x01)
	char pad_3B1[0x3]; // 0x3b1(0x03)
	float CustomGravityScale; // 0x3b4(0x04)
	char pad_3B8[0x8]; // 0x3b8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.BaseGameSession
// Size: 0x390 (Inherited: 0x390)
class ABaseGameSession : public AGameSession {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ConstraintCanvasCache
// Size: 0xa0 (Inherited: 0x38)
class UConstraintCanvasCache : public UWorldSubsystem {
public:

	char pad_38[0x68]; // 0x38(0x68)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.UserWidgetHelperLib
// Size: 0x30 (Inherited: 0x30)
class UUserWidgetHelperLib : public UBlueprintFunctionLibrary {
public:


	void STATIC_SetCanvasSlotPos(struct UObject* Widget, struct FVector2D& ScreenSpacePosition, struct FVector2D AlignPos, struct UObject* WorldContexntObject); // Function GPGameplay.UserWidgetHelperLib.SetCanvasSlotPos // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3574dd0
	void STATIC_RemoveUserWidget(struct UObject* Widget); // Function GPGameplay.UserWidgetHelperLib.RemoveUserWidget // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x3574b30
	struct FVector2D STATIC_GetSpriteSize(struct UObject* Sprite); // Function GPGameplay.UserWidgetHelperLib.GetSpriteSize // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3574530
	void STATIC_AddUserWidget(struct UObject* Widget, int32_t ZOrder, int32_t LayerOrder); // Function GPGameplay.UserWidgetHelperLib.AddUserWidget // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x3573d20
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.BipodInterface
// Size: 0x30 (Inherited: 0x30)
class UBipodInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.BowArrow
// Size: 0x3d8 (Inherited: 0x378)
class ABowArrow : public AActor {
public:

	struct FName FireArrowMeshTag; // 0x378(0x08)
	struct FName ProxSensorArrowMeshTag; // 0x380(0x08)
	struct UStaticMeshComponent* FireArrowMeshComponent; // 0x388(0x08)
	struct UStaticMeshComponent* ProxSensorArrowMeshComponent; // 0x390(0x08)
	struct UFXResourceContainerComponent* ArrowFX; // 0x398(0x08)
	struct FName FireArrowFXName; // 0x3a0(0x08)
	struct FName ProxSensorArrowFXName; // 0x3a8(0x08)
	struct FVector FireArrowFXOffset; // 0x3b0(0x0c)
	struct FVector ProxSensorArrowFXOffset; // 0x3bc(0x0c)
	char pad_3C8[0x10]; // 0x3c8(0x10)

	void SetArrowType(bool IsProxSensorArrow); // Function GPGameplay.BowArrow.SetArrowType // (Final|Native|Public) // @ game+0x3574d40
	void SetArrowEffect(bool bActive); // Function GPGameplay.BowArrow.SetArrowEffect // (Final|Native|Public) // @ game+0x3574c20
	void OnChargeStateChange(bool ischarging); // Function GPGameplay.BowArrow.OnChargeStateChange // (Final|Native|Public) // @ game+0x35748c0
	void BP_SetFXRenderMatrixMode(struct UFXResourceContainerComponent* FXResource, enum class ERenderMatrixMode MatrixMode); // Function GPGameplay.BowArrow.BP_SetFXRenderMatrixMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3573e10
	void BP_OnChargeStateChange(bool ischarging); // Function GPGameplay.BowArrow.BP_OnChargeStateChange // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.BowDataComponentArrowAppearance
// Size: 0x638 (Inherited: 0x5f0)
class UBowDataComponentArrowAppearance : public UGPWeaponDataComponentBase {
public:

	int32_t ProxSensorArrowSkillID; // 0x5f0(0x04)
	int32_t FireArrowSkillID; // 0x5f4(0x04)
	struct FName BowChargingHudName; // 0x5f8(0x08)
	struct FName BowControlButtonName; // 0x600(0x08)
	struct FName BowCancelChargingButtonName; // 0x608(0x08)
	struct FName BowArrowMeshSocketName; // 0x610(0x08)
	struct UClass* ArrowActorClass; // 0x618(0x08)
	bool bEnableProne; // 0x620(0x01)
	char pad_621[0x7]; // 0x621(0x07)
	struct ABowArrow* BowArrowMesh; // 0x628(0x08)
	char pad_630[0x8]; // 0x630(0x08)

	void TryInitArrowActor(); // Function GPGameplay.BowDataComponentArrowAppearance.TryInitArrowActor // (Final|Native|Private) // @ game+0x3575240
	bool ShowZoomHUD3P(struct FName HudName, bool bActive); // Function GPGameplay.BowDataComponentArrowAppearance.ShowZoomHUD3P // (Final|Native|Public|BlueprintCallable) // @ game+0x35750c0
	bool ShowZoomHUD(struct FName HudName, bool bActive); // Function GPGameplay.BowDataComponentArrowAppearance.ShowZoomHUD // (Final|Native|Public|BlueprintCallable) // @ game+0x3575180
	void SetWeaponHUDState3P(bool bActive); // Function GPGameplay.BowDataComponentArrowAppearance.SetWeaponHUDState3P // (Final|Native|Public) // @ game+0x3574fa0
	void SetWeaponHUDState(bool bActive); // Function GPGameplay.BowDataComponentArrowAppearance.SetWeaponHUDState // (Final|Native|Public) // @ game+0x3575030
	void SetMask(bool bEnable); // Function GPGameplay.BowDataComponentArrowAppearance.SetMask // (Final|Native|Public) // @ game+0x3574f10
	void SetArrowMeshActive(bool bActive); // Function GPGameplay.BowDataComponentArrowAppearance.SetArrowMeshActive // (Final|Native|Private) // @ game+0x3574cb0
	void SetArrow(struct ABowArrow* ArrowMesh); // Function GPGameplay.BowDataComponentArrowAppearance.SetArrow // (Final|Native|Public|BlueprintCallable) // @ game+0x3574ba0
	void RegisterLiveSpectating(bool doRegister); // Function GPGameplay.BowDataComponentArrowAppearance.RegisterLiveSpectating // (Final|Native|Public) // @ game+0x3574aa0
	void OnLocalPlayerPawnChanged(struct AActor* OldCharacter, struct AActor* NewCharacter); // Function GPGameplay.BowDataComponentArrowAppearance.OnLocalPlayerPawnChanged // (Final|Native|Public) // @ game+0x35749e0
	void OnChargeStateChange(bool ischarging); // Function GPGameplay.BowDataComponentArrowAppearance.OnChargeStateChange // (Final|Native|Public) // @ game+0x3574950
	void OnCancelChargingBtnClicked(); // Function GPGameplay.BowDataComponentArrowAppearance.OnCancelChargingBtnClicked // (Final|Native|Public) // @ game+0x35748a0
	bool IsProxSensorArow(); // Function GPGameplay.BowDataComponentArrowAppearance.IsProxSensorArow // (Final|Native|Public|BlueprintCallable) // @ game+0x35745c0
	bool CheckIsSpectating(); // Function GPGameplay.BowDataComponentArrowAppearance.CheckIsSpectating // (Final|Native|Public) // @ game+0x3573ed0
	void BP_SetBowArrowMeshActive(bool Active, bool NeedEffect); // Function GPGameplay.BowDataComponentArrowAppearance.BP_SetBowArrowMeshActive // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.BowWeaponCacheFireComponent
// Size: 0x178 (Inherited: 0x168)
class UBowWeaponCacheFireComponent : public UGPWeaponFuncComponentBase {
public:

	bool bIsStateChacheEndFire; // 0x168(0x01)
	char pad_169[0x7]; // 0x169(0x07)
	struct UWeaponDataComponentState* ComponentState; // 0x170(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.BreathInfo
// Size: 0x148 (Inherited: 0x30)
class UBreathInfo : public UObject {
public:

	float CurBreathValue; // 0x30(0x04)
	enum class EBreathState BreathState; // 0x34(0x01)
	char pad_35[0x3]; // 0x35(0x03)
	float MaxBreathValue; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FHoldBreathConfig HoldBreathConfig; // 0x40(0xb8)
	float LastHoldBreathTime; // 0xf8(0x04)
	bool bHoldBreathEnable; // 0xfc(0x01)
	bool bZooming; // 0xfd(0x01)
	char pad_FE[0x2]; // 0xfe(0x02)
	/*struct FMulticastInlineDelegate*/char BreathValueFullCB[0x10]; // 0x100(0x10)
	/*struct FMulticastInlineDelegate*/char BreathValueEmptyCB[0x10]; // 0x110(0x10)
	/*struct FMulticastInlineDelegate*/char BreathStateChangedCB[0x10]; // 0x120(0x10)
	/*struct FMulticastInlineDelegate*/char BreathNotifyDisable[0x10]; // 0x130(0x10)
	char pad_140[0x8]; // 0x140(0x08)

	void ToggleHoldBreath(); // Function GPGameplay.BreathInfo.ToggleHoldBreath // (Native|Public|BlueprintCallable) // @ game+0x8951b0
	bool CheckCanHoldBreath(); // Function GPGameplay.BreathInfo.CheckCanHoldBreath // (Native|Public|BlueprintCallable) // @ game+0x17617b0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.CampConfigManager
// Size: 0x98 (Inherited: 0x38)
class UCampConfigManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x58]; // 0x38(0x58)
	struct UDataTable* DataTable; // 0x90(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.CampInfoArray
// Size: 0x40 (Inherited: 0x30)
class UCampInfoArray : public UObject {
public:

	struct TArray<struct FCampInfo> Camps; // 0x30(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.CharacterAnimSnapshotManager
// Size: 0xa0 (Inherited: 0x38)
class UCharacterAnimSnapshotManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x58]; // 0x38(0x58)
	struct UEnum* BasePoseEnum; // 0x90(0x08)
	struct UEnum* SubPoseEnum; // 0x98(0x08)

	struct FCharacterSnapShotPoseType STATIC_GetCharacterSnapShotPoseType(struct AGPCharacter* InGPCharacter); // Function GPGameplay.CharacterAnimSnapshotManager.GetCharacterSnapShotPoseType // (Final|Native|Static|Public) // @ game+0x3578fd0
	bool GetBoneTransformOnVehicle(uint64_t VehicleId, struct FName SeatName, struct FName BoneName, bool bLeanOut, struct FTransform& OutTransform); // Function GPGameplay.CharacterAnimSnapshotManager.GetBoneTransformOnVehicle // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x3578df0
	bool GetBoneTransformOnSceneWeapon(uint64_t SceneWeaponID, struct FName BoneName, struct FTransform& OutTransform); // Function GPGameplay.CharacterAnimSnapshotManager.GetBoneTransformOnSceneWeapon // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x3578c90
	bool GetBoneTransform(enum class ECharacterSnatshotBasePose Pose, enum class ECharacterSnatshotSubPose Lean, struct FName BoneName, struct FTransform& OutTransform); // Function GPGameplay.CharacterAnimSnapshotManager.GetBoneTransform // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x3578ae0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ChargeGunDataCompAmmoAppearance
// Size: 0x5f0 (Inherited: 0x5f0)
class UChargeGunDataCompAmmoAppearance : public UGPWeaponDataComponentBase {
public:


	void OnAmmoCountChange(float WeaponAmmoCount, float CarryWeaponAmmoCount); // Function GPGameplay.ChargeGunDataCompAmmoAppearance.OnAmmoCountChange // (Final|Native|Public) // @ game+0x3579260
	struct USkeletalMeshComponent* GetDynamicSkeletalMeshComponent(enum class EAdapterItemType InAdpaterType); // Function GPGameplay.ChargeGunDataCompAmmoAppearance.GetDynamicSkeletalMeshComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3579050
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.CombatRangeFinderProxy
// Size: 0x568 (Inherited: 0x30)
class UCombatRangeFinderProxy : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)
	struct UWeaponAdapterItemRangeScope* RangeScope; // 0x38(0x08)
	char pad_40[0x128]; // 0x40(0x128)
	struct UWeaponDataComponentAdapter* DcAdapter; // 0x168(0x08)
	/*struct TScriptInterface<IGPWeaponInterface>*/char WeaponOwner[0x10]; // 0x170(0x10)
	struct UWeaponAimAssistor* FireAimAssistor; // 0x180(0x08)
	struct USkeletalMeshComponent* MeshComp; // 0x188(0x08)
	char pad_190[0x10]; // 0x190(0x10)
	struct UMaterialInstanceDynamic* RangeFinderMaterial; // 0x1a0(0x08)
	struct ARangeFinderDigitalDisplayActor* HipDigitalDisplayActor_Distance; // 0x1a8(0x08)
	struct ARangeFinderDigitalDisplayActor* HipDigitalDisplayActor_PreFalling; // 0x1b0(0x08)
	struct ARangeFinderDigitalDisplayActor* DigitalDisplayActor; // 0x1b8(0x08)
	char pad_1C0[0x40]; // 0x1c0(0x40)
	struct FScoFunctionRow ScoConfig; // 0x200(0x288)
	char pad_488[0x18]; // 0x488(0x18)
	struct TArray<struct AActor*> TraceIgnoreActors; // 0x4a0(0x10)
	struct TArray<struct UPrimitiveComponent*> TraceIgnoreComps; // 0x4b0(0x10)
	struct TArray<struct FHitResult> TraceOverlapResults; // 0x4c0(0x10)
	char pad_4D0[0x98]; // 0x4d0(0x98)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.CommercializationSubsystem
// Size: 0x88 (Inherited: 0x38)
class UCommercializationSubsystem : public UWorldSubsystem {
public:

	int32_t SortOrder; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct TArray<struct UObject*> PersistentAssetArray; // 0x40(0x10)
	struct TArray<struct UObject*> TemporaryAssetArray; // 0x50(0x10)
	struct TArray<struct UObject*> WatchAssetArray; // 0x60(0x10)
	char pad_70[0x18]; // 0x70(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.CompositedBipod
// Size: 0x598 (Inherited: 0x30)
class UCompositedBipod : public UObject {
public:

	char pad_30[0x10]; // 0x30(0x10)
	float TickCheckBipodDeployTime; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct FPartBipodConfig BipodConfig; // 0x48(0x228)
	struct UWeaponAdapterItemBase* DCAdapterItem; // 0x270(0x08)
	struct UWeaponDataComponentAdapter* DcAdapter; // 0x278(0x08)
	char pad_280[0x120]; // 0x280(0x120)
	/*struct TScriptInterface<IGPWeaponInterface>*/char WeaponOwner[0x10]; // 0x3a0(0x10)
	char pad_3B0[0x18]; // 0x3b0(0x18)
	struct UGPWeaponPartBipodAnimInstance* AnimInstance; // 0x3c8(0x08)
	struct TWeakObjectPtr<struct AGPCharacter> CacheCharacter; // 0x3d0(0x08)
	struct TWeakObjectPtr<struct UGPAnimProxyComponent> CacheCharacterAnimProxy; // 0x3d8(0x08)
	struct TArray<struct UObject*> AssetCache; // 0x3e0(0x10)
	char pad_3F0[0x160]; // 0x3f0(0x160)
	struct FTimerHandle DelaycloseTickHandle; // 0x550(0x08)
	char pad_558[0x30]; // 0x558(0x30)
	struct UBlendSpaceBase* BlendSpace; // 0x588(0x08)
	char pad_590[0x8]; // 0x590(0x08)

	void TickCheckWeaponBipodDeploy(float DeltaTime); // Function GPGameplay.CompositedBipod.TickCheckWeaponBipodDeploy // (Final|Native|Public) // @ game+0x3579ac0
	void ShowBipTip(bool isShow, bool bForceChange); // Function GPGameplay.CompositedBipod.ShowBipTip // (Final|Native|Protected) // @ game+0x35798b0
	void OnMeshLoaded(uint64_t Guid); // Function GPGameplay.CompositedBipod.OnMeshLoaded // (Final|Native|Protected) // @ game+0x3579630
	void OnDelayCloseTick(); // Function GPGameplay.CompositedBipod.OnDelayCloseTick // (Final|Native|Protected) // @ game+0x3579610
	void OnBoolPropertyChanged(char PropertyType); // Function GPGameplay.CompositedBipod.OnBoolPropertyChanged // (Final|Native|Protected) // @ game+0x3579590
	void OnAssetLoad(struct TArray<struct FSoftObjectPath> AssetRef); // Function GPGameplay.CompositedBipod.OnAssetLoad // (Final|Native|Protected) // @ game+0x3579400
	void OnAnimLoadComplete(struct FSoftObjectPath& AssetPath); // Function GPGameplay.CompositedBipod.OnAnimLoadComplete // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x3579320
	bool IsTraceResultSucceed(); // Function GPGameplay.CompositedBipod.IsTraceResultSucceed // (Final|Native|Public) // @ game+0x3579230
	void DelayApplyDynamicAttribute(); // Function GPGameplay.CompositedBipod.DelayApplyDynamicAttribute // (Final|Native|Public) // @ game+0x3578a20
	void CheckCanWeaponBipodDeployByBox(float DeltaTime); // Function GPGameplay.CompositedBipod.CheckCanWeaponBipodDeployByBox // (Final|Native|Public) // @ game+0x3578980
	void CheckCanWeaponBipodDeploy(); // Function GPGameplay.CompositedBipod.CheckCanWeaponBipodDeploy // (Final|Native|Public) // @ game+0x3578960
	bool CanPlayCharacterAnim(); // Function GPGameplay.CompositedBipod.CanPlayCharacterAnim // (Final|Native|Protected) // @ game+0x35788d0
	void ApplyDynamicAttribute(bool Apply); // Function GPGameplay.CompositedBipod.ApplyDynamicAttribute // (Final|Native|Public) // @ game+0x3578840
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.CompositedFlashLight
// Size: 0x440 (Inherited: 0x30)
class UCompositedFlashLight : public UObject {
public:

	char pad_30[0x10]; // 0x30(0x10)
	float NomralFlashLightTraceInterval; // 0x40(0x04)
	enum class ECollisionChannel NomralFlashLight_TraceChannel; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	float PowerFlashLightTraceInterval; // 0x48(0x04)
	enum class ECollisionChannel PowerFlashLight_TraceChannel; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	struct UWeaponAdapterItemBase* DCAdapterItem; // 0x50(0x08)
	struct UWeaponDataComponentAdapter* DcAdapter; // 0x58(0x08)
	char pad_60[0x210]; // 0x60(0x210)
	/*struct TScriptInterface<IGPWeaponInterface>*/char WeaponOwner[0x10]; // 0x270(0x10)
	char pad_280[0x70]; // 0x280(0x70)
	struct UTextureLightProfile* FlashLightIESTexture; // 0x2f0(0x08)
	struct USpotLightComponent* LightSpotComp; // 0x2f8(0x08)
	struct UMaterialInstanceDynamic* LFM_CullLight; // 0x300(0x08)
	struct UStaticMeshComponent* LightBeamPlane; // 0x308(0x08)
	struct UMaterialInstanceDynamic* Mat_NormalFlashLight; // 0x310(0x08)
	struct AActor* PowerFlashActor; // 0x318(0x08)
	struct UArrowComponent* ArrowComp; // 0x320(0x08)
	struct USpotLightComponent* PowerFlashLightSpot; // 0x328(0x08)
	struct UMaterialInstanceDynamic* Mat_LansFlare; // 0x330(0x08)
	struct UTextureLightProfile* PowerFlashIESTexture; // 0x338(0x08)
	char pad_340[0xd0]; // 0x340(0xd0)
	struct TArray<struct AActor*> TraceIgnoreActors; // 0x410(0x10)
	struct TArray<struct UPrimitiveComponent*> TraceIgnoreComps; // 0x420(0x10)
	struct TArray<struct FHitResult> TraceOverlapResults; // 0x430(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.CompositedLaser
// Size: 0x510 (Inherited: 0x30)
class UCompositedLaser : public UObject {
public:

	char pad_30[0x20]; // 0x30(0x20)
	struct FVector LaserFlare_DefScale; // 0x50(0x0c)
	char pad_5C[0x4]; // 0x5c(0x04)
	struct UStaticMeshComponent* LaserFlare_SMC; // 0x60(0x08)
	struct UWeaponAdapterItemBase* DCAdapterItem; // 0x68(0x08)
	struct UWeaponDataComponentAdapter* DcAdapter; // 0x70(0x08)
	/*struct TScriptInterface<IGPWeaponInterface>*/char WeaponOwner[0x10]; // 0x78(0x10)
	char pad_88[0x278]; // 0x88(0x278)
	struct FLaserItemFx LaserItemFx; // 0x300(0x58)
	struct FLaserItemMesh LaserItemMesh; // 0x358(0x50)
	char pad_3A8[0x128]; // 0x3a8(0x128)
	struct TArray<struct AActor*> TraceIgnoreActors; // 0x4d0(0x10)
	struct TArray<struct UPrimitiveComponent*> TraceIgnoreComps; // 0x4e0(0x10)
	struct TArray<struct FHitResult> TraceOverlapResults; // 0x4f0(0x10)
	char pad_500[0x10]; // 0x500(0x10)

	void OnMeshLoaded(uint64_t Guid); // Function GPGameplay.CompositedLaser.OnMeshLoaded // (Final|Native|Public) // @ game+0x357f350
	void OnLaserFlareMeshLoaded(struct FSoftObjectPath& ObjectPath); // Function GPGameplay.CompositedLaser.OnLaserFlareMeshLoaded // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x357f270
	void OnLaserFlareMatLoaded(struct FSoftObjectPath& ObjectPath); // Function GPGameplay.CompositedLaser.OnLaserFlareMatLoaded // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x357f190
	void EnableLaserFlare(bool bEnable); // Function GPGameplay.CompositedLaser.EnableLaserFlare // (Final|Native|Protected) // @ game+0x357ee40
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponLaser_Haavk
// Size: 0x3a8 (Inherited: 0x100)
class UWeaponLaser_Haavk : public UActorComponent {
public:

	struct UFXResourceContainerComponent* LineFXComp; // 0x100(0x08)
	char pad_108[0x8]; // 0x108(0x08)
	struct UFXResourceContainerComponent* PointFXComp; // 0x110(0x08)
	char pad_118[0x8]; // 0x118(0x08)
	struct UFXResourceContainerComponent* MossFXComp; // 0x120(0x08)
	char pad_128[0x8]; // 0x128(0x08)
	struct UFXResourceContainerComponent* DamageFXComp; // 0x130(0x08)
	char pad_138[0x8]; // 0x138(0x08)
	struct UFXResourceContainerComponent* DestoryFXComp; // 0x140(0x08)
	char pad_148[0x8]; // 0x148(0x08)
	struct TArray<struct AActor*> TraceIgnoreActors; // 0x150(0x10)
	struct TArray<struct UPrimitiveComponent*> TraceIgnoreComps; // 0x160(0x10)
	struct TArray<struct FHitResult> TraceOverlapResults; // 0x170(0x10)
	float LaserPointOffset; // 0x180(0x04)
	char pad_184[0x8c]; // 0x184(0x8c)
	float BaseEyeHeight; // 0x210(0x04)
	enum class EHaavkTurnType TurnType; // 0x214(0x01)
	bool bIsClockwise; // 0x215(0x01)
	char pad_216[0x2]; // 0x216(0x02)
	float LaunchTime; // 0x218(0x04)
	float DelayTime_Fire; // 0x21c(0x04)
	struct FName MossResourceId; // 0x220(0x08)
	struct FName MossResourceId_AttackMode; // 0x228(0x08)
	struct FName LaserLineId; // 0x230(0x08)
	struct FName DamageResourceId; // 0x238(0x08)
	struct FName DestoryResourceId; // 0x240(0x08)
	struct UGPAudioEventAsset* LaunchAudio; // 0x248(0x08)
	struct UGPAudioEventAsset* FirstLaserAudio; // 0x250(0x08)
	struct UGPAudioEventAsset* DestoryAudio; // 0x258(0x08)
	struct UGPAudioEventAsset* TurnAudio; // 0x260(0x08)
	struct UGPAudioEventAsset* StopTrunAudio; // 0x268(0x08)
	struct UGPAudioEventAsset* AimAudio; // 0x270(0x08)
	struct UGPAudioEventAsset* StopAimAudio; // 0x278(0x08)
	struct UAnimSequenceBase* LaunchAnim; // 0x280(0x08)
	bool bIsAttackMode; // 0x288(0x01)
	bool bChangeDamageSkeletal; // 0x289(0x01)
	bool bFirstAim; // 0x28a(0x01)
	char pad_28B[0x1]; // 0x28b(0x01)
	float FirstAim_DelayTime; // 0x28c(0x04)
	bool bIsLaunch; // 0x290(0x01)
	char pad_291[0x3]; // 0x291(0x03)
	float AOAimingPitch; // 0x294(0x04)
	float AOAimingYaw; // 0x298(0x04)
	char pad_29C[0x10c]; // 0x29c(0x10c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageGlobalConfig
// Size: 0x48 (Inherited: 0x40)
class UDamageGlobalConfig : public UDeveloperSettings {
public:

	float MaxBodyArmorReduceRate; // 0x40(0x04)
	float MaxHelmentReduceRate; // 0x44(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageMakerInterface
// Size: 0x30 (Inherited: 0x30)
class UDamageMakerInterface : public UInterface {
public:


	void SetSourceVehicleId(int32_t InSourceVehicleId); // Function GPGameplay.DamageMakerInterface.SetSourceVehicleId // (Native|Public) // @ game+0x357f640
	void PostDamageMakerApplyDamage(bool& bIsServer, struct FDamageResultInfo& DamageResult); // Function GPGameplay.DamageMakerInterface.PostDamageMakerApplyDamage // (Native|Public|HasOutParms) // @ game+0x357f520
	void OnProcessBulletPointHitAction(struct FRequestPointHitActionParam& RequestPointHitParam); // Function GPGameplay.DamageMakerInterface.OnProcessBulletPointHitAction // (Native|Public|HasOutParms) // @ game+0x357f3d0
	void OnBulletPointHitActionFaild(struct FPointHitActionResult& HitActionFaild); // Function GPGameplay.DamageMakerInterface.OnBulletPointHitActionFaild // (Native|Public|HasOutParms) // @ game+0x357f100
	enum class EWeaponItemType GetWeaponItemType(struct UObject* ActorObject); // Function GPGameplay.DamageMakerInterface.GetWeaponItemType // (Native|Public) // @ game+0x357efd0
	uint64_t GetUin(); // Function GPGameplay.DamageMakerInterface.GetUin // (Native|Public|Const) // @ game+0x357efa0
	int32_t GetSourceVehicleId(); // Function GPGameplay.DamageMakerInterface.GetSourceVehicleId // (Native|Public) // @ game+0x357ef70
	enum class EDamageActorType GetActorType(struct UObject* ActorObject); // Function GPGameplay.DamageMakerInterface.GetActorType // (Native|Public) // @ game+0x357eed0
	bool DamageMakerShouldIgnoreDamage(struct FDamageSourceInfo& SourceInfo, struct FDamageResultInfo& DamageResult); // Function GPGameplay.DamageMakerInterface.DamageMakerShouldIgnoreDamage // (Native|Public|HasOutParms) // @ game+0x357ecb0
	void DamageMakerModifyDamage(struct FDamageSourceInfo& SourceInfo, struct FDamageResultInfo& DamageResult); // Function GPGameplay.DamageMakerInterface.DamageMakerModifyDamage // (Native|Public|HasOutParms) // @ game+0x357eb20
	uint64_t DamageMakerGetId(); // Function GPGameplay.DamageMakerInterface.DamageMakerGetId // (Native|Public) // @ game+0x174a650
	uint64_t DamageMakerGetGId(); // Function GPGameplay.DamageMakerInterface.DamageMakerGetGId // (Native|Public) // @ game+0x174a500
	void DamageMakerClientPreview(struct FDamageResultInfo& DamageResult); // Function GPGameplay.DamageMakerInterface.DamageMakerClientPreview // (Native|Public|HasOutParms) // @ game+0x357ea50
	void DamageMakerApplyDamage(bool& bIsServer, struct FDamageResultInfo& DamageResult); // Function GPGameplay.DamageMakerInterface.DamageMakerApplyDamage // (Native|Public|HasOutParms) // @ game+0x357e930
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageStateRecordMgr
// Size: 0x4b8 (Inherited: 0x378)
class ADamageStateRecordMgr : public ALevelSubsystem {
public:

	char pad_378[0xf0]; // 0x378(0xf0)
	struct TMap<enum class EDamageStateRecordType, struct UDamageStateRecorder*> Recorders; // 0x468(0x50)

	struct UDamageStateRecorder* NewRecorder(enum class EDamageStateRecordType InArg); // Function GPGameplay.DamageStateRecordMgr.NewRecorder // (Final|Native|Protected) // @ game+0x357f070
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageSystemImpl
// Size: 0xb0 (Inherited: 0x38)
class UDamageSystemImpl : public UWorldSubsystem {
public:

	char pad_38[0x8]; // 0x38(0x08)
	/*struct FMulticastInlineDelegate*/char OnPostMakeDamageDelegate[0x10]; // 0x40(0x10)
	/*struct FMulticastInlineDelegate*/char OnBeforeMakeDamageDelegate[0x10]; // 0x50(0x10)
	/*struct FMulticastInlineDelegate*/char OnRecvPointHitFaildDelegate[0x10]; // 0x60(0x10)
	/*struct FMulticastInlineDelegate*/char OnPostMakeRadialDamageDelegate[0x10]; // 0x70(0x10)
	char pad_80[0x8]; // 0x80(0x08)
	struct UGPGameDamageRecord* DamageRecord; // 0x88(0x08)
	char pad_90[0x8]; // 0x90(0x08)
	struct TArray<struct FPointHitActionResult> PointHitActionFaildResults; // 0x98(0x10)
	int32_t RequestFireHitCnt; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)

	void MakeRadialDamageBuffBP(/*struct TScriptInterface<IDamageMakerInterface> DamageMaker, struct AActor* MakerInstigator, struct FHitResult& HitResult, int64_t& AttakerValueId, struct TArray<struct AActor*>& IgnoreActors, int32_t& HitId, struct FMakeDamageParams& Params, int32_t BuffId*/); // Function GPGameplay.DamageSystemImpl.MakeRadialDamageBuffBP // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3585450
	void MakeRadialDamageBP(/*struct TScriptInterface<IDamageMakerInterface> DamageMaker, struct AActor* MakerInstigator, struct FHitResult& HitResult, int64_t& AttakerValueId, struct TArray<struct AActor*>& IgnoreActors, int32_t& HitId, struct FMakeDamageParams& Params*/); // Function GPGameplay.DamageSystemImpl.MakeRadialDamageBP // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x35850c0
	void MakePointDamageBPSimple(/*struct TScriptInterface<IDamageMakerInterface> DamageMaker, struct AActor* MakerInstigator, struct AActor* DamageTaker, struct FHitResult& HitResult, int64_t& AttakerValueId, int32_t& HitId, struct FMakeDamageParams& Params*/); // Function GPGameplay.DamageSystemImpl.MakePointDamageBPSimple // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x35849f0
	void MakePointDamageBP(/*struct TScriptInterface<IDamageMakerInterface> DamageMaker, struct AActor* MakerInstigator, struct TScriptInterface<IDamageTakerInterface>& DamageTaker, struct FHitResult& HitResult, int64_t& AttakerValueId, int32_t& HitId, struct FMakeDamageParams& Params*/); // Function GPGameplay.DamageSystemImpl.MakePointDamageBP // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x35846a0
	void MakePhysicalDamageBP2(/*struct TScriptInterface<IDamageMakerInterface> DamageMaker, struct AActor* MakerInstigator, struct TScriptInterface<IDamageTakerInterface> DamageTaker, struct FHitResult& HitResult, int64_t& AttakerValueId, int32_t& HitId, struct FMakeDamageParams& Params*/); // Function GPGameplay.DamageSystemImpl.MakePhysicalDamageBP2 // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3583b80
	void MakePhysicalDamageBP(/*struct TScriptInterface<IDamageMakerInterface> DamageMaker, struct AActor* MakerInstigator, struct TScriptInterface<IDamageTakerInterface>& DamageTaker, struct FHitResult& HitResult, int64_t& AttakerValueId, int32_t& HitId, struct FMakeDamageParams& Params*/); // Function GPGameplay.DamageSystemImpl.MakePhysicalDamageBP // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3583ee0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageSystemInterface
// Size: 0x30 (Inherited: 0x30)
class UDamageSystemInterface : public UInterface {
public:


	void Shutdown(struct UWorld* World); // Function GPGameplay.DamageSystemInterface.Shutdown // (Native|Public) // @ game+0x89f700
	void ShouldIgnoreDamageTrace(/*struct FHitResult& HitResult, struct TScriptInterface<IDamageMakerInterface> Maker, bool& bOutShouldIgnoreComponent, bool& bOutShouldIgnoreActor*/); // Function GPGameplay.DamageSystemInterface.ShouldIgnoreDamageTrace // (Native|Public|HasOutParms) // @ game+0x3586340
	void Reset(struct UWorld* World); // Function GPGameplay.DamageSystemInterface.Reset // (Native|Public) // @ game+0x89f670
	void RequestPointHitAction(struct FRequestPointHitActionParam& HitActionParam); // Function GPGameplay.DamageSystemInterface.RequestPointHitAction // (Native|Public|HasOutParms) // @ game+0x3585fe0
	void OnServerReceiveMakeDamageRequest(struct AActor* ChannelActor, struct TArray<struct FDamageResultInfo>& DamageResults); // Function GPGameplay.DamageSystemInterface.OnServerReceiveMakeDamageRequest // (Native|Public|HasOutParms) // @ game+0x3585d90
	void OnServerReceiveHitActionRequest(struct AActor* ChannelActor, struct FRequestPointHitActionParam RequsetHitActionParam); // Function GPGameplay.DamageSystemInterface.OnServerReceiveHitActionRequest // (Native|Public) // @ game+0x3585bf0
	void OnClientReceiveApplyDamageRequest(struct AActor* ChannelActor, struct FDamageResultInfo& DamageResult); // Function GPGameplay.DamageSystemInterface.OnClientReceiveApplyDamageRequest // (Native|Public|HasOutParms) // @ game+0x3585ae0
	void OnClientNotifyFaildHitAction(struct AActor* ChannelActor, struct AActor* DamageMakerActor, struct FPointHitActionResult S2CRequestPointHitActionFaild); // Function GPGameplay.DamageSystemInterface.OnClientNotifyFaildHitAction // (Native|Public) // @ game+0x35859c0
	void OnClientNotifyApplyHitAction(struct AActor* ChannelActor, struct FRequestPointHitActionParam RequsetHitActionParam); // Function GPGameplay.DamageSystemInterface.OnClientNotifyApplyHitAction // (Native|Public) // @ game+0x3585820
	void MakeRadialDamage(/*struct TScriptInterface<IDamageMakerInterface>& DamageMaker, struct AActor* MakerInstigator, struct FHitResult& HitResult, uint64_t& AttakerValueId, struct TArray<struct AActor*>& IgnoreActors, uint16_t& HitId, struct FMakeDamageParams& Params*/); // Function GPGameplay.DamageSystemInterface.MakeRadialDamage // (Native|Public|HasOutParms) // @ game+0x3584d30
	struct FDamageResultInfo MakePointDamage(/*struct TScriptInterface<IDamageMakerInterface>& DamageMaker, struct AActor* MakerInstigator, struct TScriptInterface<IDamageTakerInterface>& DamageTaker, struct FHitResult& HitResult, uint64_t& AttakerValueId, uint64_t& HitId, struct FMakeDamageParams& Params, struct FRequestPointHitActionParam& HitActionParam*/); // Function GPGameplay.DamageSystemInterface.MakePointDamage // (Native|Public|HasOutParms) // @ game+0x3584230
	void MakePhysicalDamage(/*struct TScriptInterface<IDamageMakerInterface>& DamageMaker, struct AActor* MakerInstigator, struct TScriptInterface<IDamageTakerInterface>& DamageTaker, struct FHitResult& HitResult, uint64_t& AttakerValueId, uint16_t& HitId, struct FMakeDamageParams& Params*/); // Function GPGameplay.DamageSystemInterface.MakePhysicalDamage // (Native|Public|HasOutParms) // @ game+0x3583820
	void MakeCustomPhyscialDamage(/*struct TScriptInterface<IDamageMakerInterface>& DamageMaker, struct AActor* MakerInstigator, struct TScriptInterface<IDamageTakerInterface>& DamageTaker, struct FDamageResultInfo DamageResultInfo*/); // Function GPGameplay.DamageSystemInterface.MakeCustomPhyscialDamage // (Native|Public|HasOutParms) // @ game+0x3583650
	void MakeBuffDamage(/*struct TScriptInterface<IDamageMakerInterface>& DamageMaker, struct AActor* MakerInstigator, struct TScriptInterface<IDamageTakerInterface>& DamageTaker, uint64_t& AttakerValueId, struct FMakeBuffDamageParams& Params*/); // Function GPGameplay.DamageSystemInterface.MakeBuffDamage // (Native|Public|HasOutParms) // @ game+0x3583430
	bool IsDebug(); // Function GPGameplay.DamageSystemInterface.IsDebug // (Native|Public) // @ game+0x1749dd0
	void Init(struct UWorld* World); // Function GPGameplay.DamageSystemInterface.Init // (Native|Public) // @ game+0x89f540
	void GetPostMakeRadialDamageDelegate(); // Function GPGameplay.DamageSystemInterface.GetPostMakeRadialDamageDelegate // (Native|Public) // @ game+0x3583000
	void GetPostMakeDamageDelegate(); // Function GPGameplay.DamageSystemInterface.GetPostMakeDamageDelegate // (Native|Public) // @ game+0x3582fc0
	void GetBeforeMakeDamageDelegate(); // Function GPGameplay.DamageSystemInterface.GetBeforeMakeDamageDelegate // (Native|Public) // @ game+0x89f500
	bool CaculateDamage(struct FDamageSourceInfo& SourceInfo, struct FDamageResultInfo& DamageResult); // Function GPGameplay.DamageSystemInterface.CaculateDamage // (Native|Public|HasOutParms) // @ game+0x3582700
	void ApplyRadialDamageBlockRate(struct FDamageSourceInfo& SourceInfo, bool& bBlock, struct FDamageResultInfo& DamageResult); // Function GPGameplay.DamageSystemInterface.ApplyRadialDamageBlockRate // (Native|Public|HasOutParms) // @ game+0x3582510
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageSystemUtil
// Size: 0x30 (Inherited: 0x30)
class UDamageSystemUtil : public UObject {
public:


	bool STATIC_IsWeaponDamage(struct FDamageSourceInfo& SourceInfo); // Function GPGameplay.DamageSystemUtil.IsWeaponDamage // (Final|Native|Static|Private|HasOutParms|BlueprintCallable) // @ game+0x3583330
	enum class EWeaponItemType STATIC_GetWeaponType(struct FDamageSourceInfo& SourceInfo); // Function GPGameplay.DamageSystemUtil.GetWeaponType // (Final|Native|Static|Private|HasOutParms|BlueprintCallable) // @ game+0x3583190
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageTakerInterface
// Size: 0x30 (Inherited: 0x30)
class UDamageTakerInterface : public UInterface {
public:


	bool ShouldIgnoreDamage(enum class EDamageGameState DamageGameState); // Function GPGameplay.DamageTakerInterface.ShouldIgnoreDamage // (Native|Public) // @ game+0x35862b0
	void SelectFirstHitResultsForExplodeDamage(struct TArray<struct FHitResult>& InHitResults, struct FHitResult& OutHitResult); // Function GPGameplay.DamageTakerInterface.SelectFirstHitResultsForExplodeDamage // (Native|Public|HasOutParms) // @ game+0x3586130
	void OnDamageTakerApplyDamageBP(bool bIsServer, struct FDamageResultInfo DamageResult); // Function GPGameplay.DamageTakerInterface.OnDamageTakerApplyDamageBP // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	bool IsDamageableComponent(struct UPrimitiveComponent* Component); // Function GPGameplay.DamageTakerInterface.IsDamageableComponent // (Native|Public) // @ game+0x3583290
	bool IgnoreDamageOnPrematch(); // Function GPGameplay.DamageTakerInterface.IgnoreDamageOnPrematch // (Native|Public) // @ game+0x174a970
	uint64_t GetUin(); // Function GPGameplay.DamageTakerInterface.GetUin // (Native|Public|Const) // @ game+0x3583160
	void GetRadialDamageSamplePoint(struct TArray<struct FRadialSamplePoint>& OutSamplePoint, enum class EDamageExplodeBlockCheckType ExplodeBlockCheckType); // Function GPGameplay.DamageTakerInterface.GetRadialDamageSamplePoint // (Native|Public|HasOutParms) // @ game+0x3583040
	char GetLivingStatus(); // Function GPGameplay.DamageTakerInterface.GetLivingStatus // (Native|Public) // @ game+0x1755340
	float GetDamageTakerInterestExtend(); // Function GPGameplay.DamageTakerInterface.GetDamageTakerInterestExtend // (Native|Public) // @ game+0x1755080
	void GetComponentsRadialDamageSamplePoint(struct UPrimitiveComponent* Component, int32_t BodyIndex, struct TArray<struct FRadialSamplePoint>& OutSamplePoint); // Function GPGameplay.DamageTakerInterface.GetComponentsRadialDamageSamplePoint // (Native|Public|HasOutParms) // @ game+0x3582e70
	enum class EDamageActorType GetActorType(struct UObject* ActorObject); // Function GPGameplay.DamageTakerInterface.GetActorType // (Native|Public) // @ game+0x357eed0
	bool DamageTakerShouldIgnoreDamage(struct FDamageSourceInfo& SourceInfo, struct FDamageResultInfo& DamageResult); // Function GPGameplay.DamageTakerInterface.DamageTakerShouldIgnoreDamage // (Native|Public|HasOutParms) // @ game+0x3582ce0
	void DamageTakerModifyDamage(struct FDamageSourceInfo& SourceInfo, struct FDamageResultInfo& DamageResult); // Function GPGameplay.DamageTakerInterface.DamageTakerModifyDamage // (Native|Public|HasOutParms) // @ game+0x3582b50
	void DamageTakerClientPreview(struct FDamageResultInfo& DamageResult); // Function GPGameplay.DamageTakerInterface.DamageTakerClientPreview // (Native|Public|HasOutParms) // @ game+0x3582a80
	void DamageTakerApplyDamageEffect(bool& bIsServer, struct FDamageResultInfo& DamageResult); // Function GPGameplay.DamageTakerInterface.DamageTakerApplyDamageEffect // (Native|Public|HasOutParms) // @ game+0x3582960
	void BeforeDamageTakerApplyDamageEffect(bool& bIsServer, struct FDamageResultInfo& InOutDamageResult); // Function GPGameplay.DamageTakerInterface.BeforeDamageTakerApplyDamageEffect // (Native|Public|HasOutParms) // @ game+0x357f520
	void AfterDamageTakerApplyDamageEffect(bool& bIsServer, struct FDamageResultInfo& InOutDamageResult); // Function GPGameplay.DamageTakerInterface.AfterDamageTakerApplyDamageEffect // (Native|Public|HasOutParms) // @ game+0x35823f0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageVaildateDataComponent
// Size: 0x128 (Inherited: 0x100)
class UDamageVaildateDataComponent : public UActorComponent {
public:

	int32_t MaxCachePosition; // 0x100(0x04)
	char pad_104[0x14]; // 0x104(0x14)
	struct AGPCharacter* CHARACTER; // 0x118(0x08)
	char pad_120[0x8]; // 0x120(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageValidateDebugActor
// Size: 0x378 (Inherited: 0x378)
class ADamageValidateDebugActor : public AActor {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageValidateDebugComponent
// Size: 0x100 (Inherited: 0x100)
class UDamageValidateDebugComponent : public UActorComponent {
public:


	void ClientDebugLagRpc(float ClientServerTime, struct AActor* CHARACTER); // Function GPGameplay.DamageValidateDebugComponent.ClientDebugLagRpc // (Net|Native|Event|Public|NetServer) // @ game+0x3582890
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageValidateDebugToolView
// Size: 0x3a0 (Inherited: 0x388)
class UDamageValidateDebugToolView : public UBaseUIView {
public:

	struct UComboBoxString* DebugActorCmd; // 0x388(0x08)
	struct UEditableTextBox* DebugActorTime; // 0x390(0x08)
	struct UButton* ProcessDebugButton; // 0x398(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageValidateSystemDataTableManager
// Size: 0x98 (Inherited: 0x38)
class UDamageValidateSystemDataTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x60]; // 0x38(0x60)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageValidateChararcterBoxDataTableManager
// Size: 0x40 (Inherited: 0x38)
class UDamageValidateChararcterBoxDataTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x8]; // 0x38(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageValidateSystemImpl
// Size: 0x1f8 (Inherited: 0x38)
class UDamageValidateSystemImpl : public UWorldSubsystem {
public:

	char pad_38[0x110]; // 0x38(0x110)
	struct TMap<uint64_t, struct FPlayerDamageValidateStat> PlayerDamageValidateStats; // 0x148(0x50)
	struct TMap<uint64_t, struct FDamageValidateStat> DamageValidateStats; // 0x198(0x50)
	struct TArray<struct UClass*> RuleClasses; // 0x1e8(0x10)

	void OnRuleClassLoaded(struct FSoftObjectPath& SoftObjectPath); // Function GPGameplay.DamageValidateSystemImpl.OnRuleClassLoaded // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x358d6d0
	void OnActorSpawnedCallback(struct AActor* SpawnedActor); // Function GPGameplay.DamageValidateSystemImpl.OnActorSpawnedCallback // (Final|Native|Public) // @ game+0x358d5d0
	void CollectStatInfo(uint64_t RuleId, enum class EDamageValidateResult Result); // Function GPGameplay.DamageValidateSystemImpl.CollectStatInfo // (Final|Native|Protected) // @ game+0x358c680
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageValidateSystemInterface
// Size: 0x30 (Inherited: 0x30)
class UDamageValidateSystemInterface : public UInterface {
public:


	struct FPointHitActionResult ValidateHitAction(enum class EDamageValidateType ValidateType, struct FRequestPointHitActionParam& RequestParam, struct AActor* ChannelActor); // Function GPGameplay.DamageValidateSystemInterface.ValidateHitAction // (Native|Public|HasOutParms) // @ game+0x358db50
	void Shutdown(struct UWorld* World); // Function GPGameplay.DamageValidateSystemInterface.Shutdown // (Native|Public) // @ game+0x89f700
	void SetEnable(bool bEnable); // Function GPGameplay.DamageValidateSystemInterface.SetEnable // (Native|Public) // @ game+0x358d9a0
	void SetDebug(bool bDebug); // Function GPGameplay.DamageValidateSystemInterface.SetDebug // (Native|Public) // @ game+0x358d910
	void Reset(struct UWorld* World); // Function GPGameplay.DamageValidateSystemInterface.Reset // (Native|Public) // @ game+0x89f670
	bool IsEnable(); // Function GPGameplay.DamageValidateSystemInterface.IsEnable // (Native|Public) // @ game+0x174e640
	bool IsDebug(); // Function GPGameplay.DamageValidateSystemInterface.IsDebug // (Native|Public) // @ game+0x92e3d0
	void Init(struct UWorld* World); // Function GPGameplay.DamageValidateSystemInterface.Init // (Native|Public) // @ game+0x89f540
	struct ADamageStateRecordMgr* GetDamageStateRecordMgr(); // Function GPGameplay.DamageValidateSystemInterface.GetDamageStateRecordMgr // (Native|Public) // @ game+0x358d360
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DataTableConstrainManager
// Size: 0x40 (Inherited: 0x38)
class UDataTableConstrainManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x8]; // 0x38(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DataTableChecker
// Size: 0x30 (Inherited: 0x30)
class UDataTableChecker : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DFLensFlareComponent
// Size: 0x5e0 (Inherited: 0x560)
class UDFLensFlareComponent : public UPrimitiveComponent {
public:

	bool EnableEffect; // 0x560(0x01)
	bool IsDirectionalLight_C; // 0x561(0x01)
	bool IsAdjustParametersInEditor; // 0x562(0x01)
	char pad_563[0x1]; // 0x563(0x01)
	float Intensity_C; // 0x564(0x04)
	struct UTexture2D* HaloTexture_C; // 0x568(0x08)
	float CircleStart_C; // 0x570(0x04)
	float CircleStartFeather_C; // 0x574(0x04)
	float CircleWidth_C; // 0x578(0x04)
	float CircleEndFeather_C; // 0x57c(0x04)
	float CircleOffSet_C; // 0x580(0x04)
	float Scale_C; // 0x584(0x04)
	struct UMaterialInterface* MI_LensFlare_C; // 0x588(0x08)
	struct UArrowComponent* LF_Arrow_C; // 0x590(0x08)
	float SizeScale_C; // 0x598(0x04)
	float DotCompareValue_C; // 0x59c(0x04)
	float HaloVisiableDistance_C; // 0x5a0(0x04)
	char pad_5A4[0x24]; // 0x5a4(0x24)
	struct UMaterialInstanceDynamic* MILensFlareHalo_C; // 0x5c8(0x08)
	char pad_5D0[0x10]; // 0x5d0(0x10)

	void UpdateLensFlareParam(); // Function GPGameplay.DFLensFlareComponent.UpdateLensFlareParam // (Final|Native|Public) // @ game+0x358dab0
	void TickLensFlare(float DeltaTime); // Function GPGameplay.DFLensFlareComponent.TickLensFlare // (Final|Native|Public) // @ game+0x358da30
	bool IsInScreen_C(float X, float Y); // Function GPGameplay.DFLensFlareComponent.IsInScreen_C // (Final|Native|Public) // @ game+0x358d500
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DFReplayNetConnection
// Size: 0x1f40 (Inherited: 0x1df0)
class UDFReplayNetConnection : public UDemoNetConnection {
public:

	char pad_1DF0[0x150]; // 0x1df0(0x150)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DFReplayNetDriver
// Size: 0x1158 (Inherited: 0x1118)
class UDFReplayNetDriver : public UDemoNetDriver {
public:

	char pad_1118[0x40]; // 0x1118(0x40)

	void UpdateLoadingInProtocolReplay(int32_t Percentage); // Function GPGameplay.DFReplayNetDriver.UpdateLoadingInProtocolReplay // (Final|Native|Protected) // @ game+0x358dad0
	void OnReplayStarted(struct UDemoNetDriver* ReplayDriver); // Function GPGameplay.DFReplayNetDriver.OnReplayStarted // (Final|Native|Protected) // @ game+0x358d650
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DrawHelperSystem
// Size: 0x388 (Inherited: 0x378)
class ADrawHelperSystem : public ALevelSubsystem {
public:

	struct TArray<struct UActorComponent*> DebugLineBatchers; // 0x378(0x10)

	struct ADrawHelperSystem* STATIC_GetDrawHelper(struct UObject* WorldContext); // Function GPGameplay.DrawHelperSystem.GetDrawHelper // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x358d390
	void FlushAll(); // Function GPGameplay.DrawHelperSystem.FlushAll // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0xbcb880
	void Flush(int32_t Group); // Function GPGameplay.DrawHelperSystem.Flush // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x358d2d0
	void DrawString(struct FVector TextLocation, struct FString Text, struct FColor Color, float Duration); // Function GPGameplay.DrawHelperSystem.DrawString // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0x358d150
	void DrawPoint(struct FVector Position, struct FLinearColor Color, float PointSize, char DepthPriority, float LifeTime, int32_t Group); // Function GPGameplay.DrawHelperSystem.DrawPoint // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0x358cf60
	void DrawMesh(struct TArray<struct FVector> Verts, struct TArray<int32_t> Indices, struct FColor Color, char DepthPriority, float LifeTime, int32_t Group); // Function GPGameplay.DrawHelperSystem.DrawMesh // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0x358cd30
	void DrawLine(struct FVector Start, struct FVector End, struct FLinearColor Color, char DepthPriority, float Thickness, float LifeTime, int32_t Group); // Function GPGameplay.DrawHelperSystem.DrawLine // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0x358cb30
	void DrawDirectionalArrow(struct FMatrix ArrowToWorld, struct FColor InColor, float Length, float ArrowSize, char DepthPriority, int32_t Group); // Function GPGameplay.DrawHelperSystem.DrawDirectionalArrow // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0x358c940
	void DrawBox(struct FBox Box, struct FTransform Xform, struct FColor Color, char DepthPriority, float LifeTime, int32_t Group); // Function GPGameplay.DrawHelperSystem.DrawBox // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0x358c740
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DSPVS
// Size: 0x118 (Inherited: 0x38)
class UDSPVS : public UWorldSubsystem {
public:

	char pad_38[0x18]; // 0x38(0x18)
	struct TMap<struct UNetConnection*, struct FDPVSConnectionInfo> Connections; // 0x50(0x50)
	struct TArray<struct AIntCharacter*> Characters; // 0xa0(0x10)
	struct TArray<struct FDPVSActorInfo> CharactersInfo; // 0xb0(0x10)
	struct TMap<struct AIntCharacter*, int32_t> CharacterToIndex; // 0xc0(0x50)
	char pad_110[0x8]; // 0x110(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DynamicUObjectRoot
// Size: 0x430 (Inherited: 0x378)
class ADynamicUObjectRoot : public AActor {
public:

	char pad_378[0xb8]; // 0x378(0xb8)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.EMPTakerInterface
// Size: 0x30 (Inherited: 0x30)
class UEMPTakerInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFiringAnimManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponFiringAnimManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFiringAnimSingleManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponFiringAnimSingleManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.FlashLightCanvasActor
// Size: 0x3f8 (Inherited: 0x378)
class AFlashLightCanvasActor : public AActor {
public:

	float FlashLightDuration; // 0x378(0x04)
	float ClearCanvasSpeed; // 0x37c(0x04)
	float RT_Resolution; // 0x380(0x04)
	float PowerFlashNearBrushSize; // 0x384(0x04)
	float PowerFlashFarBrushSize; // 0x388(0x04)
	float PowerFlashBrushAlphe; // 0x38c(0x04)
	float PowerFlashBrushScale; // 0x390(0x04)
	float PowerFlashFadingSpeed; // 0x394(0x04)
	float MobilePowerFlashCurveValue; // 0x398(0x04)
	struct FName PowerFlashCanvasEFX; // 0x39c(0x08)
	char pad_3A4[0x4]; // 0x3a4(0x04)
	struct UMaterialInterface* MatEraser; // 0x3a8(0x08)
	struct UMaterialInterface* MatBrush; // 0x3b0(0x08)
	struct UMaterialParameterCollection* MatParameter; // 0x3b8(0x08)
	struct UTexture* Brush_Tex; // 0x3c0(0x08)
	float TriggerDrawBrushStartTime; // 0x3c8(0x04)
	float RestoreCanvasContentPercent; // 0x3cc(0x04)
	bool TriggerDrawBrush; // 0x3d0(0x01)
	bool TriggerBeingFlashedEffect; // 0x3d1(0x01)
	char pad_3D2[0x2]; // 0x3d2(0x02)
	int32_t TriggerBrushOpacityCount; // 0x3d4(0x04)
	struct UTextureRenderTarget2D* rt2D; // 0x3d8(0x08)
	struct UMaterialInstanceDynamic* Mat_EraserDynamic; // 0x3e0(0x08)
	struct UMaterialInstanceDynamic* Mat_BrushDynamic; // 0x3e8(0x08)
	struct UMaterialInstanceDynamic* MobileMat_BrushDynamic; // 0x3f0(0x08)

	bool RestoreFlashLightCanvasContent(float DeltaTime); // Function GPGameplay.FlashLightCanvasActor.RestoreFlashLightCanvasContent // (Final|Native|Protected) // @ game+0x35971b0
	bool GetTextureRenderTarget2D(struct UTextureRenderTarget2D* rt2D); // Function GPGameplay.FlashLightCanvasActor.GetTextureRenderTarget2D // (Final|Native|Protected) // @ game+0x3595ae0
	bool CalculatePowerFlashScreenPosition(struct AGPCharacter* CHARACTER, struct FVector WorldPos, float Alpha); // Function GPGameplay.FlashLightCanvasActor.CalculatePowerFlashScreenPosition // (Final|Native|Public|HasDefaults) // @ game+0x3591160
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.FlashLightInterface
// Size: 0x30 (Inherited: 0x30)
class UFlashLightInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.FullScreenQuadComponent
// Size: 0x800 (Inherited: 0x7f0)
class UFullScreenQuadComponent : public UStaticMeshComponent {
public:

	char pad_7F0[0x10]; // 0x7f0(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.FuncMaskMaterialComponent
// Size: 0x170 (Inherited: 0x100)
class UFuncMaskMaterialComponent : public UActorComponent {
public:

	char pad_100[0x50]; // 0x100(0x50)
	/*struct TScriptInterface<IWeaponLogInterface>*/char WeaponLogInterface[0x10]; // 0x150(0x10)
	struct AWeaponBase* WeaponOwner; // 0x160(0x08)
	char pad_168[0x8]; // 0x168(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GameplayBlueprintHelper
// Size: 0x30 (Inherited: 0x30)
class UGameplayBlueprintHelper : public UBlueprintFunctionLibrary {
public:


	struct FVector2D STATIC_TransformWorldLocToScreenOvalLoc(struct UObject* WorldContextObject, struct FVector4 In_TargetWorldLoc, struct UWidget* In_ParentCanvas, bool& Out_bOffScreen, struct FVector2D& Out_FactorXY, float SafeRatio); // Function GPGameplay.GameplayBlueprintHelper.TransformWorldLocToScreenOvalLoc // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3597690
	void STATIC_ToggleFourFingersConsole(bool bOpen); // Function GPGameplay.GameplayBlueprintHelper.ToggleFourFingersConsole // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3597610
	void STATIC_ShowAILabHUD(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.ShowAILabHUD // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35975a0
	void STATIC_SetIsRelicateDynamicActors(struct UObject* WorldContext, bool bEnable); // Function GPGameplay.GameplayBlueprintHelper.SetIsRelicateDynamicActors // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35974e0
	void STATIC_SetHideCursorDuringCapture(struct AActor* Context, bool Hide); // Function GPGameplay.GameplayBlueprintHelper.SetHideCursorDuringCapture // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3597420
	bool STATIC_SetAnimMontageSlotName(struct UAnimMontage* InMontage, struct FName NewSlotName); // Function GPGameplay.GameplayBlueprintHelper.SetAnimMontageSlotName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3597360
	void STATIC_SetActorInitialized(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.SetActorInitialized // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35972f0
	void STATIC_SendCharacterFSMGlobalEvent(struct ACHARACTER* CHARACTER, struct FGameplayTag EventTag); // Function GPGameplay.GameplayBlueprintHelper.SendCharacterFSMGlobalEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3597240
	void STATIC_RemoveComponentFromActor(struct AActor* Target, struct UActorComponent* Component); // Function GPGameplay.GameplayBlueprintHelper.RemoveComponentFromActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3597100
	void STATIC_RecycleActorFromPool(struct UObject* WorldContextObject, struct AActor* ActorInstance); // Function GPGameplay.GameplayBlueprintHelper.RecycleActorFromPool // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3597050
	struct TArray<int32_t> STATIC_RandomPickUniqueNumbersInRange(int32_t RangeMin, int32_t RangeMax, int32_t PickSize); // Function GPGameplay.GameplayBlueprintHelper.RandomPickUniqueNumbersInRange // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3596f00
	bool STATIC_ProjectPoint(struct UObject* WorldContext, struct FVector Point, struct FVector& NavPoint); // Function GPGameplay.GameplayBlueprintHelper.ProjectPoint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3596de0
	void STATIC_OnAllLevelLoaded(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.OnAllLevelLoaded // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3596d70
	void STATIC_NotifyServerLevelVisible(struct UObject* WorldContextObject, struct FName LevelName, bool bVisible); // Function GPGameplay.GameplayBlueprintHelper.NotifyServerLevelVisible // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3596c70
	struct UObject* STATIC_NewObjectByClass(struct UObject* ObjectOwner, struct UClass* objectClass); // Function GPGameplay.GameplayBlueprintHelper.NewObjectByClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3596bb0
	bool STATIC_LineTestDeformableActor(struct UObject* WorldContext, struct FVector& ZeroBasedLineStart, struct FVector& ZeroBasedLineEnd, float& HitDistance); // Function GPGameplay.GameplayBlueprintHelper.LineTestDeformableActor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3596a40
	bool STATIC_IsValidPlayerUIN(struct FGPPlayerUIN Uin); // Function GPGameplay.GameplayBlueprintHelper.IsValidPlayerUIN // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x35969c0
	bool STATIC_IsValidGEHandle(struct FActiveGameplayEffectHandle Handle); // Function GPGameplay.GameplayBlueprintHelper.IsValidGEHandle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3596940
	bool STATIC_IsUnderFPP(struct AActor* Target); // Function GPGameplay.GameplayBlueprintHelper.IsUnderFPP // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x35968c0
	bool STATIC_IsStandalone(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.IsStandalone // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3596840
	bool STATIC_IsServer(struct UObject* WorldContextObject, bool bIncludeStandalone); // Function GPGameplay.GameplayBlueprintHelper.IsServer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3596780
	bool STATIC_IsReplayRecording(struct UObject* WorldContext); // Function GPGameplay.GameplayBlueprintHelper.IsReplayRecording // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3596700
	bool STATIC_IsReplayPlaying(struct UObject* WorldContext); // Function GPGameplay.GameplayBlueprintHelper.IsReplayPlaying // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3596680
	bool STATIC_IsRegionOverseas(); // Function GPGameplay.GameplayBlueprintHelper.IsRegionOverseas // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3596650
	bool STATIC_IsRegionCN(); // Function GPGameplay.GameplayBlueprintHelper.IsRegionCN // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3596620
	bool STATIC_IsOwnByLocalPlayer(struct AActor* Target); // Function GPGameplay.GameplayBlueprintHelper.IsOwnByLocalPlayer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x35965a0
	bool STATIC_IsLocalPlayerFPPMode(struct ACHARACTER* Char); // Function GPGameplay.GameplayBlueprintHelper.IsLocalPlayerFPPMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3596520
	bool STATIC_IsLocalPlayer(struct ACHARACTER* Char); // Function GPGameplay.GameplayBlueprintHelper.IsLocalPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35964a0
	bool STATIC_IsGameEnd(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.IsGameEnd // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3596420
	bool STATIC_IsEditor(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.IsEditor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x35963a0
	bool STATIC_IsDefaultUnderFPP(struct AActor* Target); // Function GPGameplay.GameplayBlueprintHelper.IsDefaultUnderFPP // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3596320
	bool STATIC_IsClient(struct UObject* WorldContextObject, bool bIncludeStandalone); // Function GPGameplay.GameplayBlueprintHelper.IsClient // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3596260
	bool STATIC_IsBuildRegionGlobal(); // Function GPGameplay.GameplayBlueprintHelper.IsBuildRegionGlobal // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3596230
	bool STATIC_IsBuildRegionGA(); // Function GPGameplay.GameplayBlueprintHelper.IsBuildRegionGA // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3596200
	bool STATIC_IsBuildRegionCN(); // Function GPGameplay.GameplayBlueprintHelper.IsBuildRegionCN // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35961d0
	bool STATIC_IsAbilityActive(struct UGameplayAbility* InAbility); // Function GPGameplay.GameplayBlueprintHelper.IsAbilityActive // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3596130
	void STATIC_InvalidateGEHandle(struct FActiveGameplayEffectHandle& Handle); // Function GPGameplay.GameplayBlueprintHelper.InvalidateGEHandle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x35960a0
	bool STATIC_HasLocalPlayer(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.HasLocalPlayer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3596020
	bool STATIC_HasDSAgent(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.HasDSAgent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3595fa0
	void STATIC_GPPrintString(struct UObject* WorldContextObject, struct FString inString, bool bPrintToScreen, bool bPrintToLog, struct FLinearColor TextColor, float Duration); // Function GPGameplay.GameplayBlueprintHelper.GPPrintString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x35934d0
	void STATIC_GPDrawDebugSphere(struct UObject* WorldContextObject, struct FVector Center, float radius, int32_t Segments, struct FLinearColor LineColor, float Duration, float Thickness); // Function GPGameplay.GameplayBlueprintHelper.GPDrawDebugSphere // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x35932c0
	void STATIC_GPDrawDebugPoint(struct UObject* WorldContextObject, struct FVector Position, float size, struct FLinearColor PointColor, float Duration); // Function GPGameplay.GameplayBlueprintHelper.GPDrawDebugPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3593130
	void STATIC_GPDrawDebugLine(struct UObject* WorldContextObject, struct FVector LineStart, struct FVector LineEnd, struct FLinearColor LineColor, float Duration, float Thickness); // Function GPGameplay.GameplayBlueprintHelper.GPDrawDebugLine // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3592f50
	void STATIC_GPDrawDebugCylinder(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float radius, int32_t Segments, struct FLinearColor LineColor, float Duration, float Thickness); // Function GPGameplay.GameplayBlueprintHelper.GPDrawDebugCylinder // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3592d00
	void STATIC_GPDrawDebugCircle(struct UObject* WorldContextObject, struct FVector Center, float radius, int32_t NumSegments, struct FLinearColor LineColor, float Duration, float Thickness, struct FVector YAxis, struct FVector ZAxis, bool bDrawAxis); // Function GPGameplay.GameplayBlueprintHelper.GPDrawDebugCircle // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3592a20
	void STATIC_GPDrawDebugBox(struct UObject* WorldContextObject, struct FVector Center, struct FVector Extent, struct FLinearColor LineColor, struct FRotator Rotation, float Duration, float Thickness); // Function GPGameplay.GameplayBlueprintHelper.GPDrawDebugBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3592800
	void STATIC_GPDrawDebugArrow(struct UObject* WorldContextObject, struct FVector LineStart, struct FVector LineEnd, float ArrowSize, struct FLinearColor LineColor, float Duration, float Thickness); // Function GPGameplay.GameplayBlueprintHelper.GPDrawDebugArrow // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x35925e0
	void STATIC_GotoMap(struct UObject* WorldContext, struct FString URL); // Function GPGameplay.GameplayBlueprintHelper.GotoMap // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3595e50
	bool STATIC_GetUseMouseForTouch(); // Function GPGameplay.GameplayBlueprintHelper.GetUseMouseForTouch // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3595e20
	struct FGPPlayerUIN STATIC_GetUinByPC(struct AGPPlayerController* GPPc); // Function GPGameplay.GameplayBlueprintHelper.GetUinByPC // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3595d90
	struct FGPPlayerUIN STATIC_GetUinByChar(struct AGPCharacter* GPCh); // Function GPGameplay.GameplayBlueprintHelper.GetUinByChar // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3595d00
	struct FGPPlayerUIN STATIC_GetUin(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.GetUin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3595c70
	int32_t STATIC_GetTotalPlayerCount(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.GetTotalPlayerCount // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3595bf0
	int32_t STATIC_GetTotalAlivePlayerCount(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.GetTotalAlivePlayerCount // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3595b70
	float STATIC_GetServerTimeSeconds(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.GetServerTimeSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3595a50
	struct AGPPlayerState* STATIC_GetPlayerStateByUin(struct UObject* WorldContext, struct FGPPlayerUIN Uin); // Function GPGameplay.GameplayBlueprintHelper.GetPlayerStateByUin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3595990
	struct AGPPlayerController* STATIC_GetPlayerPcByUin(struct UObject* WorldContext, struct FGPPlayerUIN Uin); // Function GPGameplay.GameplayBlueprintHelper.GetPlayerPcByUin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x35958d0
	struct AGPPlayerController* STATIC_GetPlayerControllerByUin(struct UObject* WorldContext, struct FGPPlayerUIN Uin); // Function GPGameplay.GameplayBlueprintHelper.GetPlayerControllerByUin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3595810
	struct APlayerController* STATIC_GetPlayerController(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.GetPlayerController // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3595790
	struct AGPCharacter* STATIC_GetPlayerChByUin(struct UObject* WorldContext, struct FGPPlayerUIN Uin); // Function GPGameplay.GameplayBlueprintHelper.GetPlayerChByUin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x35956d0
	struct FString STATIC_GetNow(); // Function GPGameplay.GameplayBlueprintHelper.GetNow // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3595650
	struct AGPCharacter* STATIC_GetNearestAlivedPlayerCh(struct UObject* WorldContextObject, struct FVector& OrginLoc); // Function GPGameplay.GameplayBlueprintHelper.GetNearestAlivedPlayerCh // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3595580
	bool STATIC_GetNavPathLength(struct UObject* WorldContext, struct FVector StartPos, struct FVector EndPos, float& PathLen); // Function GPGameplay.GameplayBlueprintHelper.GetNavPathLength // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3595410
	float STATIC_GetMeshScreenRatio(struct USkeletalMeshComponent* MeshComp); // Function GPGameplay.GameplayBlueprintHelper.GetMeshScreenRatio // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3595380
	struct FString STATIC_GetMarkingCharacterVoiceConfigByMarkingChatType(int32_t InMarkingChatType, bool bIsRespond); // Function GPGameplay.GameplayBlueprintHelper.GetMarkingCharacterVoiceConfigByMarkingChatType // (Final|Native|Static|Public) // @ game+0x3595270
	struct FVector STATIC_GetLowestDirectionAroundActor(struct AActor* TargetActor, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct TArray<struct AActor*>& ActorsToIgnore, float DirOffset, float TraceHeight, bool bShowDebug); // Function GPGameplay.GameplayBlueprintHelper.GetLowestDirectionAroundActor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3595000
	struct FGPPlayerUIN STATIC_GetLocalUin(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.GetLocalUin // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3594f70
	struct AGPSafeHouseCharacter* STATIC_GetLocalSHCharacter(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.GetLocalSHCharacter // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3594ef0
	struct AGPPlayerState* STATIC_GetLocalGPPlayerState(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.GetLocalGPPlayerState // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3594e70
	struct AGPPlayerController* STATIC_GetLocalGPPlayerController(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.GetLocalGPPlayerController // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3594df0
	struct AGPCharacter* STATIC_GetLocalGPCharacter(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.GetLocalGPCharacter // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3594d70
	struct AGPPlayerState* STATIC_GetLocalFocusCharacterPlayerState(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.GetLocalFocusCharacterPlayerState // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3594cf0
	struct ACharacterBase* STATIC_GetLocalFocusCharacterBase(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.GetLocalFocusCharacterBase // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3594c70
	bool STATIC_GetLocalCharacterCameraLocationAndFordward(struct UObject* WorldContextObject, struct FVector& Location, struct FVector& Forward); // Function GPGameplay.GameplayBlueprintHelper.GetLocalCharacterCameraLocationAndFordward // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3594b40
	struct AActor* STATIC_GetLocalActor(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.GetLocalActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3594ac0
	bool STATIC_GetLocal1PCharacterCameraLocationAndFordward(struct UObject* WorldContextObject, struct FVector& Location, struct FVector& Forward); // Function GPGameplay.GameplayBlueprintHelper.GetLocal1PCharacterCameraLocationAndFordward // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3594990
	struct AGPPlayerState* STATIC_GetGPPlayerState(struct AGPPlayerController* GPPc); // Function GPGameplay.GameplayBlueprintHelper.GetGPPlayerState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3594910
	struct AGPGameState* STATIC_GetGPGameState(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.GetGPGameState // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3594890
	struct FName STATIC_GetGPGameDifficulty(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.GetGPGameDifficulty // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3594800
	struct AGPPlayerController* STATIC_GetGPController(struct AGPCharacter* GPCh); // Function GPGameplay.GameplayBlueprintHelper.GetGPController // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3594780
	struct AGPCharacter* STATIC_GetGPCharacter(struct AGPPlayerController* GPPc); // Function GPGameplay.GameplayBlueprintHelper.GetGPCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3594700
	float STATIC_GetDistanceFormLocalCharacter(struct AActor* Actor); // Function GPGameplay.GameplayBlueprintHelper.GetDistanceFormLocalCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3594670
	struct UObject* STATIC_GetDefaultSingleton(struct UObject* WorldContextObject, struct UClass* Class, bool bCreate, struct UClass* RegClass); // Function GPGameplay.GameplayBlueprintHelper.GetDefaultSingleton // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3594530
	int64_t STATIC_GetDateNowBySeconds(); // Function GPGameplay.GameplayBlueprintHelper.GetDateNowBySeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3594500
	int64_t STATIC_GetDateNowByMilliseconds(); // Function GPGameplay.GameplayBlueprintHelper.GetDateNowByMilliseconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x35944d0
	bool STATIC_GetCurrentWeaponIsZooming(struct AGPCharacterBase* Char); // Function GPGameplay.GameplayBlueprintHelper.GetCurrentWeaponIsZooming // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3594450
	struct UActorComponent* STATIC_GetComponentByName(struct AActor* OwnerActor, struct UClass* ComponentClass, struct FString FindName); // Function GPGameplay.GameplayBlueprintHelper.GetComponentByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3594310
	enum class EChracterPoseType STATIC_GetCharacterCurrentBasePoseByFracture(struct ACHARACTER* Char); // Function GPGameplay.GameplayBlueprintHelper.GetCharacterCurrentBasePoseByFracture // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3594290
	enum class EChracterPoseType STATIC_GetCharacterCurrentBasePose(struct ACHARACTER* Char, bool UseArmFracture); // Function GPGameplay.GameplayBlueprintHelper.GetCharacterCurrentBasePose // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35941d0
	struct ACharacterBase* STATIC_GetCharacterBase(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.GetCharacterBase // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3594150
	enum class EChracterPoseType STATIC_GetCharacterAnimBasePose(struct ACHARACTER* Char); // Function GPGameplay.GameplayBlueprintHelper.GetCharacterAnimBasePose // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35940d0
	struct UObject* STATIC_GetCDO(struct UClass* Class); // Function GPGameplay.GameplayBlueprintHelper.GetCDO // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3593f70
	int32_t STATIC_GetCampPlayerCount(struct UObject* WorldContextObject, int32_t Camp); // Function GPGameplay.GameplayBlueprintHelper.GetCampPlayerCount // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3594010
	struct FVector STATIC_GetBoneWorldLocation(struct USkinnedMeshComponent* MeshComp, struct FName BoneName); // Function GPGameplay.GameplayBlueprintHelper.GetBoneWorldLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3593ea0
	struct UAbilitySystemComponent* STATIC_GetASC(struct UObject* Target); // Function GPGameplay.GameplayBlueprintHelper.GetASC // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3593880
	struct FName STATIC_GetAnimMontageSlotName(struct UAnimMontage* InMontage); // Function GPGameplay.GameplayBlueprintHelper.GetAnimMontageSlotName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3593c40
	bool STATIC_GetAnimItemTypeIsFPP(enum class EWeaponAnimItemType InItemType); // Function GPGameplay.GameplayBlueprintHelper.GetAnimItemTypeIsFPP // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3593bc0
	enum class EWeaponAnimItemType STATIC_GetAnimItemType(enum class EChracterPoseType InPoseType, bool bIsFPP); // Function GPGameplay.GameplayBlueprintHelper.GetAnimItemType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3593b00
	bool STATIC_GetAnimationCurve(struct UAnimSequence* inAnimSeq, struct FName CurveName, struct TArray<float>& Times, struct TArray<float>& Values); // Function GPGameplay.GameplayBlueprintHelper.GetAnimationCurve // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3593cd0
	struct AGPCharacter* STATIC_GetAnAlivedPlayerCh(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.GetAnAlivedPlayerCh // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3593a80
	struct AActor* STATIC_GetAimTarget(struct UObject* WorldContextObject, float& Distance); // Function GPGameplay.GameplayBlueprintHelper.GetAimTarget // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x35939c0
	struct AActor* STATIC_GetAimNearestTarget(struct UObject* WorldContextObject, float& Distance); // Function GPGameplay.GameplayBlueprintHelper.GetAimNearestTarget // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3593900
	struct TArray<struct FVector> STATIC_GenerateBrunchOfPoint(struct UObject* WorldContextObject, int32_t Num, struct FVector postion); // Function GPGameplay.GameplayBlueprintHelper.GenerateBrunchOfPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x35936d0
	int64_t STATIC_FStringToInt64(struct UObject* WorldContext, struct FString str); // Function GPGameplay.GameplayBlueprintHelper.FStringToInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3591cb0
	struct UActorComponent* STATIC_FindPlayerComponent(struct UClass* Class, struct UObject* WorldContextObject, struct AGPPlayerController* PC); // Function GPGameplay.GameplayBlueprintHelper.FindPlayerComponent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35924f0
	bool STATIC_FindDeltaAngleDegreesAndDirection(float A1, float A2, float& AngleOut); // Function GPGameplay.GameplayBlueprintHelper.FindDeltaAngleDegreesAndDirection // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x35923e0
	struct UActorComponent* STATIC_FindComponentByClass(struct AActor* OwnerActor, struct UClass* CompClass); // Function GPGameplay.GameplayBlueprintHelper.FindComponentByClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3592320
	void STATIC_FindCapsureInfoFromPhysicsBody(struct USkeletalMeshComponent* SkeletalMesh, struct FName TargetBone, bool& ret, struct FVector& Center, float& HalfHeight, float& radius, struct FRotator& Rotation); // Function GPGameplay.GameplayBlueprintHelper.FindCapsureInfoFromPhysicsBody // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x35920d0
	struct FString STATIC_FindAllCollisionHighPoint(struct ACHARACTER* Target); // Function GPGameplay.GameplayBlueprintHelper.FindAllCollisionHighPoint // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3592000
	struct FHitResult STATIC_FindAimingTarget(struct ACHARACTER* CharacterDoingAiming, float MaxDectDistance); // Function GPGameplay.GameplayBlueprintHelper.FindAimingTarget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3591ed0
	struct UActorComponent* STATIC_FindActorDataComponent(struct UClass* Class, struct AActor* Target); // Function GPGameplay.GameplayBlueprintHelper.FindActorDataComponent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3591e10
	bool STATIC_DoesCurveExist(struct UAnimSequence* inAnimSeq, struct FName CurveName); // Function GPGameplay.GameplayBlueprintHelper.DoesCurveExist // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3591bf0
	void STATIC_DFMOpenLevelSimple(struct UObject* WorldContextObject, struct FName LevelName, bool bAbsolute, struct FString Options); // Function GPGameplay.GameplayBlueprintHelper.DFMOpenLevelSimple // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3591950
	void STATIC_DFMOpenLevel(struct UObject* WorldContextObject, struct FName LevelName, bool bAbsolute, struct FString Options); // Function GPGameplay.GameplayBlueprintHelper.DFMOpenLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3591780
	struct FString STATIC_DebugPlayerController(struct UObject* WorldContextObject); // Function GPGameplay.GameplayBlueprintHelper.DebugPlayerController // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3591b20
	struct UMaterialInstanceDynamic* STATIC_CreateMaterialInstanceDynamic(struct UMaterialInterface* ParentMaterial, struct UObject* InOuter); // Function GPGameplay.GameplayBlueprintHelper.CreateMaterialInstanceDynamic // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35916c0
	bool STATIC_CheckTargetLocationIsInViewport2(struct UObject* WorldContext, struct FVector InTargetLocation); // Function GPGameplay.GameplayBlueprintHelper.CheckTargetLocationIsInViewport2 // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3591520
	bool STATIC_CheckTargetLocationIsInViewport(struct UObject* WorldContext, struct FVector InTargetLocation); // Function GPGameplay.GameplayBlueprintHelper.CheckTargetLocationIsInViewport // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x35915f0
	bool STATIC_CheckIfLocInCircle(struct UWidget* CheckWidget, struct FVector2D Loc); // Function GPGameplay.GameplayBlueprintHelper.CheckIfLocInCircle // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3591460
	bool STATIC_CheckIfInCircle(struct UWidget* CheckWidget, struct FGeometry MyGeometry, struct FPointerEvent& InTouchEvent); // Function GPGameplay.GameplayBlueprintHelper.CheckIfInCircle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3591270
	float STATIC_CalculateHorAngle(struct FVector VectorA, struct FVector VectorB); // Function GPGameplay.GameplayBlueprintHelper.CalculateHorAngle // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3591080
	float STATIC_CalculateAngle(struct FVector VectorA, struct FVector VectorB); // Function GPGameplay.GameplayBlueprintHelper.CalculateAngle // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3590fa0
	float STATIC_CalcOffsetLoc(float StartLoc, float InterSpace, int32_t Count, int32_t TotalCount); // Function GPGameplay.GameplayBlueprintHelper.CalcOffsetLoc // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3590e60
	bool STATIC_CalcObjectsDiff(struct TArray<struct UObject*>& NewList, struct TArray<struct UObject*>& OldList, struct TArray<struct UObject*>& Additions, struct TArray<struct UObject*>& Removes); // Function GPGameplay.GameplayBlueprintHelper.CalcObjectsDiff // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3590be0
	enum class EDirection STATIC_CalcDirectionAndAngle(struct AActor* inActor, struct FVector& InVector, float& OutAngle); // Function GPGameplay.GameplayBlueprintHelper.CalcDirectionAndAngle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3590ac0
	enum class EDirection STATIC_CalcDirection(struct AActor* inActor, struct FVector& InVector); // Function GPGameplay.GameplayBlueprintHelper.CalcDirection // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x35909f0
	bool STATIC_ApplyNewMainWeaponScale(struct AGPCharacterBase* WeaponOwner, float NewScale); // Function GPGameplay.GameplayBlueprintHelper.ApplyNewMainWeaponScale // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3590930
	struct UActorComponent* STATIC_AddComponentToActorV2(struct AActor* Target, struct UClass* CompClass, struct USceneComponent* AttachTo); // Function GPGameplay.GameplayBlueprintHelper.AddComponentToActorV2 // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3590840
	struct UActorComponent* STATIC_AddComponentToActor(struct AActor* Target, struct UClass* CompClass, struct USceneComponent* AttachTo, bool bUseExsist); // Function GPGameplay.GameplayBlueprintHelper.AddComponentToActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3590710
	struct AActor* STATIC_AcquireActorFromPool(struct UObject* WorldContextObject, struct UClass* ActorClass, struct FTransform& SpawnTransform, enum class ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, struct AActor* Owner); // Function GPGameplay.GameplayBlueprintHelper.AcquireActorFromPool // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3590490
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GameRuleSubsystemCollection
// Size: 0x110 (Inherited: 0x38)
class UGameRuleSubsystemCollection : public UWorldSubsystem {
public:

	char pad_38[0xd8]; // 0x38(0xd8)

	void OnWorldSettingsReady(struct AGPWorldSettings* InGPWorldSettings); // Function GPGameplay.GameRuleSubsystemCollection.OnWorldSettingsReady // (Final|Native|Protected) // @ game+0x359b5e0
	void OnGameRuleDeactive(enum class EGameRuleType InGameRule); // Function GPGameplay.GameRuleSubsystemCollection.OnGameRuleDeactive // (Final|Native|Protected) // @ game+0x359b080
	void OnGameRuleActive(enum class EGameRuleType InGameRule); // Function GPGameplay.GameRuleSubsystemCollection.OnGameRuleActive // (Final|Native|Protected) // @ game+0x359b000
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAbilityDetectorEffectSubsystem
// Size: 0x48 (Inherited: 0x38)
class UGPAbilityDetectorEffectSubsystem : public UWorldSubsystem {
public:

	struct TArray<struct AGPCharacter*> Characters; // 0x38(0x10)

	struct UGPAbilityDetectorEffectSubsystem* STATIC_Get(struct UObject* WorldContext); // Function GPGameplay.GPAbilityDetectorEffectSubsystem.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x359a3d0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAbilityEntityFunctionLibrary
// Size: 0x30 (Inherited: 0x30)
class UGPAbilityEntityFunctionLibrary : public UBlueprintFunctionLibrary {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAbilityGameStateComponent
// Size: 0x248 (Inherited: 0x100)
class UGPAbilityGameStateComponent : public UActorComponent {
public:

	char pad_100[0x20]; // 0x100(0x20)
	struct TMap<int32_t, struct FSkillDataRow> SkillDataRowMap; // 0x120(0x50)
	struct TMap<int32_t, struct FSkillConflictRow> ConflictRowMap; // 0x170(0x50)
	struct TArray<int32_t> RowKeys; // 0x1c0(0x10)
	struct FAbilityShareMemoryPool AbilityShareMemoryPool; // 0x1d0(0x50)
	struct UAbilityEntityManager* EntityMgr; // 0x220(0x08)
	struct TArray<struct UObject*> AbilitySystems; // 0x228(0x10)
	/*struct FMulticastInlineDelegate*/char OnAbilityEntityTemplateLoad[0x10]; // 0x238(0x10)

	struct AGPAbilityLogicTemplate* TryGetAbilityEntityTemplate(int32_t SkillId); // Function GPGameplay.GPAbilityGameStateComponent.TryGetAbilityEntityTemplate // (Native|Public) // @ game+0x359bfe0
	struct UObject* GetSystemObj(enum class EDFMAbilityLogicType Type); // Function GPGameplay.GPAbilityGameStateComponent.GetSystemObj // (Final|Native|Public) // @ game+0x359a9d0
	struct FSkillDataRow GetRowConfigFromDataTable(int32_t ID); // Function GPGameplay.GPAbilityGameStateComponent.GetRowConfigFromDataTable // (Final|Native|Public) // @ game+0x359a680
	struct FSkillConflictRow GetConflictRowConfigFromDataTable(int32_t ID); // Function GPGameplay.GPAbilityGameStateComponent.GetConflictRowConfigFromDataTable // (Final|Native|Public) // @ game+0x359a490
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AbilitySerilizeUtils
// Size: 0x30 (Inherited: 0x30)
class UAbilitySerilizeUtils : public UBlueprintFunctionLibrary {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAbilityInstance
// Size: 0x40 (Inherited: 0x30)
class UGPAbilityInstance : public UObject {
public:

	int32_t SkillId; // 0x30(0x04)
	int32_t SkillEntityID; // 0x34(0x04)
	int32_t SkillEntityIndex; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)

	enum class ESkillUIState GetSkillUIState(); // Function GPGameplay.GPAbilityInstance.GetSkillUIState // (Native|Public) // @ game+0x129b480
	struct FSkillUIInfo GetSkillUIInfo(); // Function GPGameplay.GPAbilityInstance.GetSkillUIInfo // (Native|Public) // @ game+0x359a7b0
	enum class ESkillItemUsingType GetActivated(); // Function GPGameplay.GPAbilityInstance.GetActivated // (Native|Public) // @ game+0x129b4b0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAbilityLogicTemplate
// Size: 0x460 (Inherited: 0x378)
class AGPAbilityLogicTemplate : public AActor {
public:

	char pad_378[0x4]; // 0x378(0x04)
	int32_t SkillId; // 0x37c(0x04)
	bool bCollected; // 0x380(0x01)
	char pad_381[0x17]; // 0x381(0x17)
	struct TWeakObjectPtr<struct UGPAbilityGameStateComponent> AbilityGSComponent; // 0x398(0x08)
	bool DebugNode; // 0x3a0(0x01)
	char pad_3A1[0x7]; // 0x3a1(0x07)
	struct TArray<struct FName> OverrideParams; // 0x3a8(0x10)
	struct TMap<struct FName, enum class EAbilityStateFlag> LogicFlags; // 0x3b8(0x50)
	struct TMap<struct FName, enum class EAbilityNodeExcuteType> LogicExcuteType; // 0x408(0x50)
	bool ClientCreateNodeFromRepData; // 0x458(0x01)
	bool bClientOptimizeAutoPlayCallBluePrint; // 0x459(0x01)
	bool bClientCallAutoPlay; // 0x45a(0x01)
	char pad_45B[0x5]; // 0x45b(0x05)

	void RemoveFromCharacter(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityLogicTemplate.RemoveFromCharacter // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x7ed88c0
	void OnCharacterReborn(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityLogicTemplate.OnCharacterReborn // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x7ed88c0
	void BP_GiveSameSkill(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityLogicTemplate.BP_GiveSameSkill // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x7ed88c0
	void AutoPlay(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityLogicTemplate.AutoPlay // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x7ed88c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAbilitySharedEffectComponent
// Size: 0x140 (Inherited: 0x100)
class UGPAbilitySharedEffectComponent : public UActorComponent {
public:

	char pad_100[0x10]; // 0x100(0x10)
	struct TArray<enum class EPerkSharedEffectSource> Effects; // 0x110(0x10)
	struct TArray<enum class EPerkSharedEffectSource> Applyed; // 0x120(0x10)
	char pad_130[0x10]; // 0x130(0x10)

	void OnHealthChange(struct AActor* Owner, int32_t CurrentValue, int32_t MaxValue); // Function GPGameplay.GPAbilitySharedEffectComponent.OnHealthChange // (Final|Native|Public) // @ game+0x359f4c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAbilitySupportPackBullet
// Size: 0x3e0 (Inherited: 0x378)
class AGPAbilitySupportPackBullet : public AActor {
public:

	struct FVector StartOffset; // 0x378(0x0c)
	struct FName StartSocket; // 0x384(0x08)
	float StartHeightOffset; // 0x38c(0x04)
	struct FVector EndOffset; // 0x390(0x0c)
	float Speed; // 0x39c(0x04)
	float MaxTime; // 0x3a0(0x04)
	struct FRotator RotateSpeed; // 0x3a4(0x0c)
	float CurveStrength; // 0x3b0(0x04)
	char pad_3B4[0x4]; // 0x3b4(0x04)
	struct TWeakObjectPtr<struct AActor> Target; // 0x3b8(0x08)
	char pad_3C0[0x20]; // 0x3c0(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAbilityUtil
// Size: 0x30 (Inherited: 0x30)
class UGPAbilityUtil : public UBlueprintFunctionLibrary {
public:


	void STATIC_ReleasePreLoadUI(struct UObject* World, struct FName PanelConfigName); // Function GPGameplay.GPAbilityUtil.ReleasePreLoadUI // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x359f9e0
	void STATIC_PushDataFlow(struct AActor* Target, struct FSkillDataFlowRecordItem DataFlowItem, bool bUseTimingWheel); // Function GPGameplay.GPAbilityUtil.PushDataFlow // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x359f890
	void STATIC_PreLoadUI(struct UObject* World, struct FName PanelConfigName); // Function GPGameplay.GPAbilityUtil.PreLoadUI // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x359f7e0
	bool STATIC_IsMPMode(struct UObject* WorldContextObject); // Function GPGameplay.GPAbilityUtil.IsMPMode // (Final|Native|Static|Public) // @ game+0x359f440
	void STATIC_AbilityShowUI(struct UObject* World, struct FName PanelConfigName); // Function GPGameplay.GPAbilityUtil.AbilityShowUI // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x359f210
	void STATIC_AbilityHideUI(struct UObject* World, struct FName PanelConfigName); // Function GPGameplay.GPAbilityUtil.AbilityHideUI // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x359f160
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPActionSequenceComponent
// Size: 0x120 (Inherited: 0x100)
class UGPActionSequenceComponent : public UActorComponent {
public:

	struct AGPCharacterBase* GPOwner; // 0x100(0x08)
	char pad_108[0x18]; // 0x108(0x18)

	void OnOwnerCharacterReborn(); // Function GPGameplay.GPActionSequenceComponent.OnOwnerCharacterReborn // (Final|Native|Protected) // @ game+0x359f7c0
	void OnOwnerCharacterDied(struct AGPCharacterBase* CHARACTER, struct AController* Killer, struct UDamageType* DamageType); // Function GPGameplay.GPActionSequenceComponent.OnOwnerCharacterDied // (Final|Native|Protected) // @ game+0x359f5c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPActorAntiPlacementInterface
// Size: 0x30 (Inherited: 0x30)
class UGPActorAntiPlacementInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAdvancedTickingComponent
// Size: 0x2b0 (Inherited: 0x100)
class UGPAdvancedTickingComponent : public UActorComponent {
public:

	struct FGPAdvancedTickingComponentPrePhysicsTickFunction PrePhysicsComponentTick; // 0x100(0x68)
	struct FGPAdvancedTickingComponentDuringPhysicsTickFunction DuringPhysicsComponentTick; // 0x168(0x68)
	struct FGPAdvancedTickingComponentPostPhysicsTickFunction PostPhysicsComponentTick; // 0x1d0(0x68)
	struct FGPAdvancedTickingComponentPostUpdateWorkTickFunction PostUpdateWorkComponentTick; // 0x238(0x68)
	char bCanPlayerTick : 1; // 0x2a0(0x01)
	char bCanCameraTick : 1; // 0x2a0(0x01)
	char bCanMovementTick : 1; // 0x2a0(0x01)
	char pad_2A0_3 : 5; // 0x2a0(0x01)
	char pad_2A1[0x7]; // 0x2a1(0x07)
	struct AGPCharacterBase* GPOwner; // 0x2a8(0x08)

	void OnOwnerCharacterReborn(); // Function GPGameplay.GPAdvancedTickingComponent.OnOwnerCharacterReborn // (Final|Native|Protected) // @ game+0x88f4d0
	void OnOwnerCharacterDied(struct AGPCharacterBase* CHARACTER, struct AController* Killer, struct UDamageType* DamageType); // Function GPGameplay.GPAdvancedTickingComponent.OnOwnerCharacterDied // (Final|Native|Protected) // @ game+0x359f6c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAIAnimProxyComponent
// Size: 0x3f0 (Inherited: 0x100)
class UGPAIAnimProxyComponent : public UActorComponent {
public:

	char pad_100[0x9c]; // 0x100(0x9c)
	bool bUse3CHandPose; // 0x19c(0x01)
	bool bInAIHelicopterSpawner; // 0x19d(0x01)
	char pad_19E[0x2]; // 0x19e(0x02)
	struct TMap<enum class EAnimHitPart, struct FName> HitAnims; // 0x1a0(0x50)
	struct TMap<enum class EAnimHitPart, struct FName> CrouchHitAnims; // 0x1f0(0x50)
	bool bUseSimpleHitAnim; // 0x240(0x01)
	char pad_241[0x3]; // 0x241(0x03)
	struct FName SimpleHitAnim; // 0x244(0x08)
	char pad_24C[0xa1]; // 0x24c(0xa1)
	bool bAlwaysForbidBasicAO; // 0x2ed(0x01)
	char pad_2EE[0x2]; // 0x2ee(0x02)
	float AOYawMin; // 0x2f0(0x04)
	float AOYawMax; // 0x2f4(0x04)
	float AOPitchMin; // 0x2f8(0x04)
	float AOPitchMax; // 0x2fc(0x04)
	float AORotationSpeed; // 0x300(0x04)
	bool bAlwaysForbidLeftHandIK; // 0x304(0x01)
	bool bAlwaysForbidRightHandIK; // 0x305(0x01)
	bool bAlwaysForbidFootPredictIK; // 0x306(0x01)
	char pad_307[0x1]; // 0x307(0x01)
	float MaxPlayRateExtend; // 0x308(0x04)
	float MinPlayRateShrink; // 0x30c(0x04)
	struct FName LocomotionAdditiveAnimName; // 0x310(0x08)
	bool bAlwaysForbidWeaponAdditive; // 0x318(0x01)
	char pad_319[0x7]; // 0x319(0x07)
	struct UAnimSequence* BasicLocomotionAnim; // 0x320(0x08)
	struct UAnimSequence* AdditiveLocomotionAnim; // 0x328(0x08)
	struct UAnimMontage* RootMotionMontage; // 0x330(0x08)
	struct UAnimSequence* LocoAdditiveAnim; // 0x338(0x08)
	struct UAimOffsetBlendSpace* AimOffsetAnim; // 0x340(0x08)
	struct UAnimSequence* ExtraAdditiveLocomotionAnim; // 0x348(0x08)
	char pad_350[0x8]; // 0x350(0x08)
	struct UAnimSequenceBase* ActionAnim; // 0x358(0x08)
	char pad_360[0xd]; // 0x360(0x0d)
	bool bSceneWeaponFiring; // 0x36d(0x01)
	char pad_36E[0x2]; // 0x36e(0x02)
	struct UAnimSequence* OverrideLocomotionAnim; // 0x370(0x08)
	float LocoAnimBlendTime; // 0x378(0x04)
	uint32_t RootMotionBlendIterNum; // 0x37c(0x04)
	struct TArray<struct FRootMotionAnimBlendInfo> RootMotionAnimBlendCache; // 0x380(0x10)
	char pad_390[0x50]; // 0x390(0x50)
	struct UAnimInstance* AnimInstance; // 0x3e0(0x08)
	char pad_3E8[0x8]; // 0x3e8(0x08)

	void ForceLocomotionAnim(struct UAnimSequence* Anim); // Function GPGameplay.GPAIAnimProxyComponent.ForceLocomotionAnim // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0xbd8930
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAIController
// Size: 0x4d8 (Inherited: 0x480)
class AGPAIController : public AAIController {
public:

	int32_t LastShotIndex; // 0x480(0x04)
	char pad_484[0x4]; // 0x484(0x04)
	struct TMap<int32_t, struct FVector> BulletRotatorMap; // 0x488(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAIDataComponentAnim
// Size: 0x170 (Inherited: 0x100)
class UGPAIDataComponentAnim : public UActorComponent {
public:

	struct FName AiAnimPosRowName; // 0x100(0x08)
	bool bOverrideWeaponAnimation; // 0x108(0x01)
	char pad_109[0x3]; // 0x109(0x03)
	struct FName DeathConfigName; // 0x10c(0x08)
	char pad_114[0xc]; // 0x114(0x0c)
	struct TArray<struct UObject*> RecordLocalAnimationList; // 0x120(0x10)
	char pad_130[0x20]; // 0x130(0x20)
	struct UGPAnimProxyBaseComponent* CharacterAnimProxyComponent; // 0x150(0x08)
	char pad_158[0x8]; // 0x158(0x08)
	struct TArray<struct FDeathAnimConfigWithDirRange> DeathAnims; // 0x160(0x10)

	void OnOwnerCharacterReborn(); // Function GPGameplay.GPAIDataComponentAnim.OnOwnerCharacterReborn // (Final|Native|Public) // @ game+0x88f4d0
	void OnOwnerCharacterDied(struct AGPCharacterBase* CHARACTER, struct AController* Killer, struct UDamageType* DamageType); // Function GPGameplay.GPAIDataComponentAnim.OnOwnerCharacterDied // (Final|Native|Public) // @ game+0x35a3820
	struct FName GetDeathAnimByPart(enum class ECharacterPart Part, float SourceYaw); // Function GPGameplay.GPAIDataComponentAnim.GetDeathAnimByPart // (Final|Native|Public|BlueprintCallable) // @ game+0x35a31c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAlarmTower
// Size: 0x470 (Inherited: 0x378)
class AGPAlarmTower : public AActor {
public:

	char pad_378[0x8]; // 0x378(0x08)
	struct FName BoneFXName; // 0x380(0x08)
	struct FVector FXRelativePos; // 0x388(0x0c)
	char pad_394[0x4]; // 0x394(0x04)
	struct UParticleSystemComponent* AlarmEffect; // 0x398(0x08)
	struct UParticleSystem* AlarmParticle; // 0x3a0(0x08)
	struct FLinearColor AlarmColor; // 0x3a8(0x10)
	struct FLinearColor NormalColor; // 0x3b8(0x10)
	struct FLinearColor DetructColor; // 0x3c8(0x10)
	float TimerInterval; // 0x3d8(0x04)
	char pad_3DC[0x4]; // 0x3dc(0x04)
	struct UCurveFloat* SizeCurve; // 0x3e0(0x08)
	float AlarmInterval; // 0x3e8(0x04)
	char pad_3EC[0x4]; // 0x3ec(0x04)
	struct UAsyncStaticMeshComponent* AsyncStaticMesh; // 0x3f0(0x08)
	/*struct FMulticastInlineDelegate*/char AlarmBroadcast[0x10]; // 0x3f8(0x10)
	bool IsDestruct; // 0x408(0x01)
	bool IsAlarm; // 0x409(0x01)
	char pad_40A[0x16]; // 0x40a(0x16)
	struct TMap<uint32_t, struct TWeakObjectPtr<struct AGPCharacter>> Enemies; // 0x420(0x50)

	void ServerSetDestruct(bool Destruct); // Function GPGameplay.GPAlarmTower.ServerSetDestruct // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1cb00e0
	void ServerDoAlarm(); // Function GPGameplay.GPAlarmTower.ServerDoAlarm // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0xc37ab0
	void ServerCancelAlarm(); // Function GPGameplay.GPAlarmTower.ServerCancelAlarm // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0xbcb8c0
	void RemoveEnemy(struct AGPCharacter* CHARACTER); // Function GPGameplay.GPAlarmTower.RemoveEnemy // (Final|Native|Public|BlueprintCallable) // @ game+0x35a39f0
	bool IsAlarming(); // Function GPGameplay.GPAlarmTower.IsAlarming // (Final|Native|Public|BlueprintCallable) // @ game+0x35a37e0
	void DoAlarm(); // Function GPGameplay.GPAlarmTower.DoAlarm // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0xc37770
	void DestructAlarm(); // Function GPGameplay.GPAlarmTower.DestructAlarm // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0xbcc1a0
	void ChangeEffect(struct FLinearColor Color); // Function GPGameplay.GPAlarmTower.ChangeEffect // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0x35a2c30
	void CancelAlarm(); // Function GPGameplay.GPAlarmTower.CancelAlarm // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0xbd5ba0
	bool BP_IsDestruct(); // Function GPGameplay.GPAlarmTower.BP_IsDestruct // (Native|Event|Public|BlueprintEvent) // @ game+0x35a2c00
	void AddEnemy(struct AGPCharacter* CHARACTER); // Function GPGameplay.GPAlarmTower.AddEnemy // (Final|Native|Public|BlueprintCallable) // @ game+0x35a2b80
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.CharacterAnimDataObjectSingleton
// Size: 0xb8 (Inherited: 0x30)
class UCharacterAnimDataObjectSingleton : public UObject {
public:

	char pad_30[0x10]; // 0x30(0x10)
	struct FAnimDataManager AnimDataManager; // 0x40(0x50)
	struct UDataTable* AnimDataTablePtr; // 0x90(0x08)
	struct TArray<struct UObject*> RecordCommonAnimObjArray; // 0x98(0x10)
	char pad_A8[0x10]; // 0xa8(0x10)

	void OnAnimLoadCompleted(struct FSoftObjectPath& AssetRef); // Function GPGameplay.CharacterAnimDataObjectSingleton.OnAnimLoadCompleted // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x35a8030
	struct UAnimationAsset* GetTacticalActionAnim(struct FName AnimName, bool bIsFPP, enum class EAnimTacticalActionType TacticalActionType); // Function GPGameplay.CharacterAnimDataObjectSingleton.GetTacticalActionAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35a7f20
	struct UAnimationAsset* GetRaiseWatchAnim(struct FName AnimName, bool bIsFPP, enum class EAnimRaiseWatchType RaiseWatchType); // Function GPGameplay.CharacterAnimDataObjectSingleton.GetRaiseWatchAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35a7c90
	struct UAnimationAsset* GetParachuteAnim(struct FName AnimName, bool bIsFPP, enum class EAnimParachuteType ParachuteType); // Function GPGameplay.CharacterAnimDataObjectSingleton.GetParachuteAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35a7b80
	struct UAnimationAsset* GetMarkingAnim(struct FName AnimName, bool bIsFPP, enum class EAnimMarkingType MarkingType); // Function GPGameplay.CharacterAnimDataObjectSingleton.GetMarkingAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35a7a70
	struct UAnimationAsset* GetKnockbackyAnim(struct FName AnimName, bool bIsFPP, enum class EAnimKnockbackType KnockbackType); // Function GPGameplay.CharacterAnimDataObjectSingleton.GetKnockbackyAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35a7960
	struct UAnimationAsset* GetFirefightingAnim(struct FName AnimName, bool bIsFPP, enum class EAnimFirefightingType FirefightingType); // Function GPGameplay.CharacterAnimDataObjectSingleton.GetFirefightingAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35a7850
	struct UAnimationAsset* GetCustomAnim(struct FName AnimName, bool bIsFPP); // Function GPGameplay.CharacterAnimDataObjectSingleton.GetCustomAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35a7780
	struct UAnimationAsset* GetClimbLadderAnim(struct FName AnimName, bool bIsFPP, enum class EAnimClimbLadderType ClimbLadderType); // Function GPGameplay.CharacterAnimDataObjectSingleton.GetClimbLadderAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35a7670
	struct UAnimationAsset* GetCarryBodyAnim(struct FName AnimName, bool bIsFPP, enum class EAnimCarryBodyType CarryBodyAnimType); // Function GPGameplay.CharacterAnimDataObjectSingleton.GetCarryBodyAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35a7560
	struct UAnimationAsset* GetBunkerAnim(struct FName AnimName, bool bIsFPP, enum class EAnimBunkerType BunkerTyep); // Function GPGameplay.CharacterAnimDataObjectSingleton.GetBunkerAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35a7450
	struct UAnimationAsset* GetApplySprayAnim(struct FName AnimName, bool bIsFPP, enum class EAnimApplySprayType ApplySprayType); // Function GPGameplay.CharacterAnimDataObjectSingleton.GetApplySprayAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35a7340
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimFragmentComponent
// Size: 0x120 (Inherited: 0x100)
class UGPAnimFragmentComponent : public UActorComponent {
public:

	char pad_100[0x20]; // 0x100(0x20)

	void StickOnGround(float Delay); // Function GPGameplay.GPAnimFragmentComponent.StickOnGround // (Final|Native|Public|BlueprintCallable) // @ game+0x35a81a0
	void SetAcceleration(struct FVector Acceleration); // Function GPGameplay.GPAnimFragmentComponent.SetAcceleration // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x35a8110
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.IntroVehicleAIAnimInstance
// Size: 0xa10 (Inherited: 0x280)
class UIntroVehicleAIAnimInstance : public UAnimInstance {
public:

	struct FIntroVehicleAIAnimInstanceProxy LocalProxy; // 0x280(0x790)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimInstance_PlayerIK
// Size: 0x9e0 (Inherited: 0x280)
class UGPAnimInstance_PlayerIK : public UAnimInstance {
public:

	struct FGPAnimInstanceProxy_PlayerIK AnimInstanceProxy; // 0x280(0x750)
	struct AGPCharacter* OwnerPawn; // 0x9d0(0x08)
	struct UGPCameraModeComponent* CameraModeComponent; // 0x9d8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimNotifyEventToggle
// Size: 0x48 (Inherited: 0x40)
class UGPAnimNotifyEventToggle : public UAnimNotify {
public:

	enum class EGPEventToggleState ToggleState; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimBreak
// Size: 0x40 (Inherited: 0x40)
class UGPAnimBreak : public UAnimNotify {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimNotifyLogicalBreak
// Size: 0x48 (Inherited: 0x40)
class UGPAnimNotifyLogicalBreak : public UAnimNotify {
public:

	enum class EGPAnimNotifyLogicalBreakType BreakType; // 0x40(0x01)
	bool bNotifyLeftWeapon; // 0x41(0x01)
	char pad_42[0x6]; // 0x42(0x06)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimSprintBreakGetWeapon
// Size: 0x38 (Inherited: 0x38)
class UGPAnimSprintBreakGetWeapon : public UAnimNotifyState {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimThrowMag
// Size: 0x40 (Inherited: 0x38)
class UGPAnimThrowMag : public UAnimNotifyState {
public:

	float Speed; // 0x38(0x04)
	float AddSpeedZ; // 0x3c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimTryAddAmmoPoint
// Size: 0x40 (Inherited: 0x40)
class UGPAnimTryAddAmmoPoint : public UAnimNotify {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSkillMeshVisiblePoint
// Size: 0x50 (Inherited: 0x40)
class UGPSkillMeshVisiblePoint : public UAnimNotify {
public:

	int32_t SkillId; // 0x40(0x04)
	struct FName MeshName; // 0x44(0x08)
	bool MeshVisible; // 0x4c(0x01)
	bool bWorkd; // 0x4d(0x01)
	char pad_4E[0x2]; // 0x4e(0x02)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnyActionBreakRushMontage
// Size: 0x40 (Inherited: 0x38)
class UGPAnyActionBreakRushMontage : public UAnimNotifyState {
public:

	float InBlendOutTime; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPUpdateAvatarMeshMaterialMontage
// Size: 0x78 (Inherited: 0x38)
class UGPUpdateAvatarMeshMaterialMontage : public UAnimNotifyState {
public:

	struct FName CurveNameUpdateA; // 0x38(0x08)
	struct FName CurveNameUpdateX; // 0x40(0x08)
	struct FName CurveNameUpdateY; // 0x48(0x08)
	struct FName CurveNameUpdateZ; // 0x50(0x08)
	struct FName VectorParamName; // 0x58(0x08)
	struct FName MeshName; // 0x60(0x08)
	struct FName AvatarID; // 0x68(0x08)
	char pad_70[0x8]; // 0x70(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPLockAbilityByMontange
// Size: 0x80 (Inherited: 0x38)
class UGPLockAbilityByMontange : public UAnimNotifyState {
public:

	struct TArray<enum class ECharacterSkillAbilityMask> LockAbilitys; // 0x38(0x10)
	struct TArray<enum class ECharacterSkillAbilityMask> UnLockAbilitys; // 0x48(0x10)
	struct TArray<enum class ECharacterStateMask> LockStateAbilitys; // 0x58(0x10)
	struct TArray<enum class ECharacterStateMask> UnLockStateAbilitys; // 0x68(0x10)
	bool ReleaseLock; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimAttachWeapon
// Size: 0x50 (Inherited: 0x40)
class UGPAnimAttachWeapon : public UAnimNotify {
public:

	bool bApplyToFirstWeapon; // 0x40(0x01)
	bool bResetWeaponAttach; // 0x41(0x01)
	char pad_42[0x2]; // 0x42(0x02)
	struct FName AttachSocketName; // 0x44(0x08)
	char pad_4C[0x4]; // 0x4c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimOperationInterrupt
// Size: 0x40 (Inherited: 0x38)
class UGPAnimOperationInterrupt : public UAnimNotifyState {
public:

	enum class EGPAnimOperationInterruptType InterruptType; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimNotifyLeftWeaponFire
// Size: 0x48 (Inherited: 0x40)
class UGPAnimNotifyLeftWeaponFire : public UAnimNotify {
public:

	enum class EGPAnimNotifyLogicalBreakType BreakType; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimNotifyStateFireBreak
// Size: 0x40 (Inherited: 0x38)
class UGPAnimNotifyStateFireBreak : public UAnimNotifyState {
public:

	bool bNotifyLeftWeapon; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimProxyInterface
// Size: 0x30 (Inherited: 0x30)
class UGPAnimProxyInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimTrigger
// Size: 0x3e0 (Inherited: 0x3c0)
class AGPAnimTrigger : public AGPTriggerBase {
public:

	struct TArray<struct AActor*> AnimActors; // 0x3c0(0x10)
	bool bAnimLoop; // 0x3d0(0x01)
	char pad_3D1[0x3]; // 0x3d1(0x03)
	float TriggerDelay; // 0x3d4(0x04)
	char pad_3D8[0x8]; // 0x3d8(0x08)

	void PlayAnim(struct AActor* AnimActor); // Function GPGameplay.GPAnimTrigger.PlayAnim // (Native|Event|Protected|BlueprintEvent) // @ game+0xbcbbd0
	void OnTriggerDelayTimer(); // Function GPGameplay.GPAnimTrigger.OnTriggerDelayTimer // (Final|Native|Protected) // @ game+0x35b6eb0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAttributeGlobal
// Size: 0x88 (Inherited: 0x38)
class UGPAttributeGlobal : public UGameInstanceSubsystem {
public:

	struct FSoftObjectPath GlobalAttributeSetDefaultsTableName; // 0x38(0x18)
	struct TArray<struct FSoftObjectPath> GlobalAttributeSetDefaultsTableNames; // 0x50(0x10)
	struct TArray<struct UCurveTable*> GlobalAttributeDefaultsTables; // 0x60(0x10)
	char pad_70[0x18]; // 0x70(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAttributeSetDamageFigure
// Size: 0x110 (Inherited: 0x50)
class UGPAttributeSetDamageFigure : public UGPAttributeSetBase {
public:

	struct FGameplayAttributeData DamageAddition; // 0x50(0x10)
	struct FGameplayAttributeData SourceMultiple; // 0x60(0x10)
	struct FGameplayAttributeData SourceAddition; // 0x70(0x10)
	struct FGameplayAttributeData EquipAddition; // 0x80(0x10)
	struct FGameplayAttributeData WeaknessRate; // 0x90(0x10)
	struct FGameplayAttributeData CritAddition; // 0xa0(0x10)
	struct FGameplayAttributeData WeaponCrit; // 0xb0(0x10)
	struct FGameplayAttributeData WeaponVendorCrit; // 0xc0(0x10)
	struct FGameplayAttributeData TargetReduction; // 0xd0(0x10)
	struct FGameplayAttributeData TargetResistance; // 0xe0(0x10)
	struct FGameplayAttributeData TargetMultiple; // 0xf0(0x10)
	struct FGameplayAttributeData DamageDefence; // 0x100(0x10)

	void OnRep_WeaponVendorCrit(struct FGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetDamageFigure.OnRep_WeaponVendorCrit // (Final|Native|Protected|HasOutParms) // @ game+0x35b6d60
	void OnRep_WeaponCrit(struct FGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetDamageFigure.OnRep_WeaponCrit // (Final|Native|Protected|HasOutParms) // @ game+0x35b6cc0
	void OnRep_WeaknessRate(struct FGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetDamageFigure.OnRep_WeaknessRate // (Final|Native|Protected|HasOutParms) // @ game+0x35b6c20
	void OnRep_TargetResistance(struct FGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetDamageFigure.OnRep_TargetResistance // (Final|Native|Protected|HasOutParms) // @ game+0x35b6ad0
	void OnRep_TargetReduction(struct FGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetDamageFigure.OnRep_TargetReduction // (Final|Native|Protected|HasOutParms) // @ game+0x35b6a30
	void OnRep_TargetMultiple(struct FGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetDamageFigure.OnRep_TargetMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x35b6990
	void OnRep_SourceMultiple(struct FGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetDamageFigure.OnRep_SourceMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x35b68d0
	void OnRep_SourceAddition(struct FGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetDamageFigure.OnRep_SourceAddition // (Final|Native|Protected|HasOutParms) // @ game+0x35b6830
	void OnRep_EquipAddition(struct FGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetDamageFigure.OnRep_EquipAddition // (Final|Native|Protected|HasOutParms) // @ game+0x35b5710
	void OnRep_DamageDefence(struct FGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetDamageFigure.OnRep_DamageDefence // (Final|Native|Protected|HasOutParms) // @ game+0x35b55c0
	void OnRep_DamageAddition(struct FGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetDamageFigure.OnRep_DamageAddition // (Final|Native|Protected|HasOutParms) // @ game+0x35b5520
	void OnRep_CritAddition(struct FGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetDamageFigure.OnRep_CritAddition // (Final|Native|Protected|HasOutParms) // @ game+0x35b5480
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAudioControllerComponent
// Size: 0x240 (Inherited: 0x100)
class UGPAudioControllerComponent : public UActorComponent {
public:

	float TickInterval; // 0x100(0x04)
	int32_t TransitionFootstepNum; // 0x104(0x04)
	float TransitionAllowance; // 0x108(0x04)
	float RTPCEnemyNumberUpdateInterval; // 0x10c(0x04)
	float RTPCEnemyNumberRelevantRadius; // 0x110(0x04)
	float RTPCFireNumberUpdateInterval; // 0x114(0x04)
	float RTPCFireNumberRelevantRadius; // 0x118(0x04)
	char pad_11C[0x4]; // 0x11c(0x04)
	struct TArray<struct FFakeFootstepRecord> FakeFootstepRecordArray; // 0x120(0x10)
	char pad_130[0x110]; // 0x130(0x110)

	void NotifyCharacterPlayFootstepWithAnim(struct AGPCharacter* InCharacter); // Function GPGameplay.GPAudioControllerComponent.NotifyCharacterPlayFootstepWithAnim // (Final|Native|Public) // @ game+0x35b98b0
	struct FName GetWaterRTPCName(); // Function GPGameplay.GPAudioControllerComponent.GetWaterRTPCName // (Final|Native|Public) // @ game+0x35b9890
	enum class EGPAudioFootSoundType GetLandedSoundType(float FallHeight); // Function GPGameplay.GPAudioControllerComponent.GetLandedSoundType // (Final|Native|Public) // @ game+0x35b9800
	enum class EFakeFootstepStatus GetFakeFootstepStatus(struct AGPCharacter* InCharacter); // Function GPGameplay.GPAudioControllerComponent.GetFakeFootstepStatus // (Final|Native|Public) // @ game+0x35b9770
	void ClientPlayLandedFootstep(struct AActor* inActor, float FallHeight); // Function GPGameplay.GPAudioControllerComponent.ClientPlayLandedFootstep // (Net|Native|Event|NetMulticast|Public) // @ game+0x35b96a0
	void ClientPlayJumpFootstep(struct AActor* inActor); // Function GPGameplay.GPAudioControllerComponent.ClientPlayJumpFootstep // (Net|Native|Event|NetMulticast|Public) // @ game+0xbd8ba0
	float ClampWaterRTPCValue(float InDepth); // Function GPGameplay.GPAudioControllerComponent.ClampWaterRTPCValue // (Final|Native|Public) // @ game+0x35b9610
	bool CheckUseFakeFootstep(struct AGPCharacter* InCharacter); // Function GPGameplay.GPAudioControllerComponent.CheckUseFakeFootstep // (Final|Native|Public) // @ game+0x35b9580
	bool CheckSatisfiedFootstepInterval(struct AGPCharacter* InCharacter, float CurrentTime, float TimeScalar); // Function GPGameplay.GPAudioControllerComponent.CheckSatisfiedFootstepInterval // (Final|Native|Public) // @ game+0x35b9480
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAudioSubtitleSystem
// Size: 0x3d8 (Inherited: 0x378)
class AGPAudioSubtitleSystem : public AActor {
public:

	char pad_378[0x18]; // 0x378(0x18)
	/*struct FMulticastInlineDelegate*/char OnNewSubtitleEnqueueEvent[0x10]; // 0x390(0x10)
	/*struct FMulticastInlineDelegate*/char OnStopCurrentAudioEvent[0x10]; // 0x3a0(0x10)
	struct UDataTable* QuestNoticeDataTable; // 0x3b0(0x08)
	struct UDataTable* AIDialogDataTable; // 0x3b8(0x08)
	char pad_3C0[0x18]; // 0x3c0(0x18)

	void ServerPlaySubtitle(struct FText Subtilte, struct UGPAudioEventAsset* AudioEvent, enum class ESubtitlePriorityType PriorityType, enum class ESubtitleHudType HUDType, struct AActor* SpeakerActor, float SubtitleDuration); // Function GPGameplay.GPAudioSubtitleSystem.ServerPlaySubtitle // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x35bf020
	void ServerAddAudioSubtitle(struct FName SubtitleKey, enum class ESubtitlePriorityType PriorityType, enum class ESubtitleHudType HUDType, struct AActor* SpeakerActor, float SubtitleDuration); // Function GPGameplay.GPAudioSubtitleSystem.ServerAddAudioSubtitle // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x35beea0
	struct FAudioSubtitleInfo GetPendingQueueTop(); // Function GPGameplay.GPAudioSubtitleSystem.GetPendingQueueTop // (Final|Native|Public|BlueprintCallable) // @ game+0x35be500
	int32_t GetPendingQueueLength(); // Function GPGameplay.GPAudioSubtitleSystem.GetPendingQueueLength // (Final|Native|Public|BlueprintCallable) // @ game+0x35be4e0
	struct AGPAudioSubtitleSystem* STATIC_GetAudioSubtitleSystem(struct UObject* WorldContextObject); // Function GPGameplay.GPAudioSubtitleSystem.GetAudioSubtitleSystem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35be0d0
	void ClientPlaySubtitle(struct FText Subtilte, struct UGPAudioEventAsset* AudioEvent, enum class ESubtitlePriorityType PriorityType, enum class ESubtitleHudType HUDType, struct AActor* SpeakerActor, float SubtitleDuration); // Function GPGameplay.GPAudioSubtitleSystem.ClientPlaySubtitle // (Net|Native|Event|Public|NetClient) // @ game+0x35bd930
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPBattleFieldSystemConfigDataAsset
// Size: 0x70 (Inherited: 0x30)
class UGPBattleFieldSystemConfigDataAsset : public UObject {
public:

	bool IsSpectateUnderFPP; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct UClass*> RadarActorClassFilter; // 0x38(0x10)
	struct UClass* SpectatingCameraActorClass; // 0x48(0x08)
	struct FSoftClassPath ReplayListViewSoftClass; // 0x50(0x18)
	struct UCurveFloat* AmbientLightFOVDistanceOffsetCurve; // 0x68(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPBattleFieldSystem
// Size: 0x260 (Inherited: 0x38)
class UGPBattleFieldSystem : public UWorldSubsystem {
public:

	char pad_38[0x8]; // 0x38(0x08)
	struct UGPBattleFieldSystemConfigDataAsset* DefaultBattleFieldConfig; // 0x40(0x08)
	bool IsSpectateUnderFPP; // 0x48(0x01)
	bool HasLocalPlayer; // 0x49(0x01)
	bool HasLocalPawn; // 0x4a(0x01)
	bool HasLocalFocusPlayerPawn; // 0x4b(0x01)
	bool HasLocalFocusActor; // 0x4c(0x01)
	bool HasLocalFocusGPCharacter; // 0x4d(0x01)
	bool bIsLiveSpectating; // 0x4e(0x01)
	bool bIsSpectatingAI; // 0x4f(0x01)
	bool bIsSpectatingAILabAI; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	int32_t bIsBeingSpectating; // 0x54(0x04)
	bool bIsOBFreeCamera; // 0x58(0x01)
	bool bIsInObserverMode; // 0x59(0x01)
	char pad_5A[0x6]; // 0x5a(0x06)
	struct TArray<struct FSpectatorBriefInfo> AllPlayerBriefInfo; // 0x60(0x10)
	struct TArray<struct FSpectatorBriefInfo> AllAIBriefInfo; // 0x70(0x10)
	struct TArray<struct FSpectatorBriefInfo> AllNPCBriefInfo; // 0x80(0x10)
	struct AGPNetworkPlayerController* LocalPlayerController; // 0x90(0x08)
	struct AGPCharacterBase* LocalPlayerPawn; // 0x98(0x08)
	struct AGPCharacterBase* LocalFocusPlayerPawn; // 0xa0(0x08)
	char pad_A8[0x8]; // 0xa8(0x08)
	struct AActor* LocalFocusActor; // 0xb0(0x08)
	struct AGPCharacterBase* LocalFocusGPCharacter; // 0xb8(0x08)
	char pad_C0[0x28]; // 0xc0(0x28)
	struct TArray<struct AActor*> CurrentRadarActors; // 0xe8(0x10)
	struct TArray<struct AGPCharacterBase*> CurrentRadarCharacter; // 0xf8(0x10)
	struct TArray<struct AGPCharacterBase*> CurrentClientAICharacters; // 0x108(0x10)
	struct TArray<struct AGPCharacterBase*> CurrentClientAllCharacters; // 0x118(0x10)
	struct TArray<struct AGPCharacterBase*> CurrentClientPlayerCharacters; // 0x128(0x10)
	struct TMap<int64_t, struct AGPCharacterBase*> CurrentClientAllCharacterMap; // 0x138(0x50)
	struct TMap<int64_t, struct AGPPlayerState*> CurrentClientAllPSMap; // 0x188(0x50)
	float RTPCEnemyNumberUpdateInterval; // 0x1d8(0x04)
	float RTPCEnemyNumberRelevantRadius; // 0x1dc(0x04)
	char pad_1E0[0x4]; // 0x1e0(0x04)
	int32_t RTPCEnemyNumberValue; // 0x1e4(0x04)
	char pad_1E8[0x8]; // 0x1e8(0x08)
	struct AGPGameMode* CurrentGameMode; // 0x1f0(0x08)
	struct TArray<struct FServerPlayerFullDataInfo> PlayerFullData; // 0x1f8(0x10)
	struct TArray<struct FServerPlayerFullDataInfo> AIFullData; // 0x208(0x10)
	struct ACameraActor* GodLikeCameraActor; // 0x218(0x08)
	char pad_220[0x10]; // 0x220(0x10)
	struct TArray<struct FClientAdjustPositionInfo> ClientAdjustPositionInfos; // 0x230(0x10)
	struct UNZSkyBoxComponent* SkyBoxComponent; // 0x240(0x08)
	char pad_248[0x8]; // 0x248(0x08)
	struct TArray<struct AActor*> SpectatingRelevantActorList; // 0x250(0x10)

	void UpdateSpectWeaponInfoFlag(struct AGPNetworkPlayerController* Player, bool bReplicate); // Function GPGameplay.GPBattleFieldSystem.UpdateSpectWeaponInfoFlag // (Final|Native|Public) // @ game+0x35bff90
	void UpdateSpectWeaponInfo(struct AGPNetworkPlayerController* Player, struct AActor* NewViewTarget); // Function GPGameplay.GPBattleFieldSystem.UpdateSpectWeaponInfo // (Final|Native|Public) // @ game+0x35bfed0
	void UpdateSpectMemberInfo(struct AGPNetworkPlayerController* Player, struct AActor* NewViewTarget); // Function GPGameplay.GPBattleFieldSystem.UpdateSpectMemberInfo // (Final|Native|Public) // @ game+0x35bfe10
	void UnRegisterSpectatingRelevantActor(struct AActor* inActor); // Function GPGameplay.GPBattleFieldSystem.UnRegisterSpectatingRelevantActor // (Final|Native|Public) // @ game+0x35bfc80
	void TryLeaveLiveSpectateMode(struct AGPNetworkPlayerController* Player); // Function GPGameplay.GPBattleFieldSystem.TryLeaveLiveSpectateMode // (Final|Native|Public|BlueprintCallable) // @ game+0x35bfbe0
	void TryLeaveAISpectateMode(struct AGPNetworkPlayerController* Player); // Function GPGameplay.GPBattleFieldSystem.TryLeaveAISpectateMode // (Final|Native|Public|BlueprintCallable) // @ game+0x35bfb60
	void TryEnterLiveSpectateMode(struct AGPNetworkPlayerController* Player); // Function GPGameplay.GPBattleFieldSystem.TryEnterLiveSpectateMode // (Final|Native|Public|BlueprintCallable) // @ game+0x35bfae0
	void TryEnterAISpectateMode(struct AGPNetworkPlayerController* Player); // Function GPGameplay.GPBattleFieldSystem.TryEnterAISpectateMode // (Final|Native|Public|BlueprintCallable) // @ game+0x35bfa60
	void SpectateActor(struct AGPNetworkPlayerController* Player, struct AActor* NewViewTarget, float BlendTime, enum class EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing); // Function GPGameplay.GPBattleFieldSystem.SpectateActor // (Final|Native|Public|BlueprintCallable) // @ game+0x35bf8a0
	void SetLocalFocusActor(struct AGPNetworkPlayerController* Player, struct AActor* NewViewTarget, float BlendTime, enum class EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing); // Function GPGameplay.GPBattleFieldSystem.SetLocalFocusActor // (Final|Native|Public|BlueprintCallable) // @ game+0x35bf380
	void ResetToLocalPlayerPawn(struct AGPNetworkPlayerController* Player); // Function GPGameplay.GPBattleFieldSystem.ResetToLocalPlayerPawn // (Final|Native|Public|BlueprintCallable) // @ game+0x35bee20
	void RegisterSpectatingRelevantActor(struct AActor* inActor); // Function GPGameplay.GPBattleFieldSystem.RegisterSpectatingRelevantActor // (Final|Native|Public) // @ game+0x35beda0
	void RefreshSpectMemberInfo(struct AGPNetworkPlayerController* Player); // Function GPGameplay.GPBattleFieldSystem.RefreshSpectMemberInfo // (Final|Native|Public) // @ game+0x35bed20
	void NotifySpectatingRelevantActor(); // Function GPGameplay.GPBattleFieldSystem.NotifySpectatingRelevantActor // (Final|Native|Protected) // @ game+0x35beb60
	bool LiveSpectateSpectificTargetUin(struct AGPNetworkPlayerController* Player, uint64_t TargetUin); // Function GPGameplay.GPBattleFieldSystem.LiveSpectateSpectificTargetUin // (Final|Native|Public) // @ game+0x35beaa0
	bool LiveSpectateSpectificTargetNetGUID(struct AGPNetworkPlayerController* Player, uint32_t TargetNetGUID); // Function GPGameplay.GPBattleFieldSystem.LiveSpectateSpectificTargetNetGUID // (Final|Native|Public) // @ game+0x35be9e0
	bool LiveSpectateSpectificTarget(struct AGPNetworkPlayerController* Player, struct AActor* Target); // Function GPGameplay.GPBattleFieldSystem.LiveSpectateSpectificTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x35be920
	bool LiveSpectateNext(struct AGPNetworkPlayerController* Player, bool nextTarget); // Function GPGameplay.GPBattleFieldSystem.LiveSpectateNext // (Final|Native|Public|BlueprintCallable) // @ game+0x35be860
	bool LiveSpectateLikeGod(struct AGPNetworkPlayerController* Player, float TargetHeight, bool useSpectificPoint, struct FVector TargetPoint); // Function GPGameplay.GPBattleFieldSystem.LiveSpectateLikeGod // (Final|Native|Public|HasDefaults) // @ game+0x35be6e0
	bool LiveSpectateAINext(struct AGPNetworkPlayerController* Player, bool nextTarget); // Function GPGameplay.GPBattleFieldSystem.LiveSpectateAINext // (Final|Native|Public|BlueprintCallable) // @ game+0x35be620
	int64_t GetCurrentLocalPlayerUin(); // Function GPGameplay.GPBattleFieldSystem.GetCurrentLocalPlayerUin // (Final|Native|Public|BlueprintCallable) // @ game+0x35be290
	int32_t GetCurrentLocalPlayerTeamID(); // Function GPGameplay.GPBattleFieldSystem.GetCurrentLocalPlayerTeamID // (Final|Native|Public|BlueprintCallable) // @ game+0x35be260
	struct AGPCharacterBase* GetCurrentLocalPlayerPawn(); // Function GPGameplay.GPBattleFieldSystem.GetCurrentLocalPlayerPawn // (Final|Native|Public|BlueprintCallable) // @ game+0x35be240
	struct UGPPlayerInput* GetCurrentLocalPlayerInput(); // Function GPGameplay.GPBattleFieldSystem.GetCurrentLocalPlayerInput // (Final|Native|Public|BlueprintCallable) // @ game+0x35be210
	int32_t GetCurrentLocalPlayerInnerTeamIndex(); // Function GPGameplay.GPBattleFieldSystem.GetCurrentLocalPlayerInnerTeamIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x35be1e0
	struct AGPNetworkPlayerController* GetCurrentLocalPlayerController(); // Function GPGameplay.GPBattleFieldSystem.GetCurrentLocalPlayerController // (Final|Native|Public|BlueprintCallable) // @ game+0x35be1c0
	struct AGPCharacterBase* GetCurrentLocalFocusPlayerPawn(); // Function GPGameplay.GPBattleFieldSystem.GetCurrentLocalFocusPlayerPawn // (Final|Native|Public|BlueprintCallable) // @ game+0x89b010
	struct AGPCharacterBase* GetCurrentLocalFocusGPCharacter(); // Function GPGameplay.GPBattleFieldSystem.GetCurrentLocalFocusGPCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x35be1a0
	struct AActor* GetCurrentLocalFocusActor(); // Function GPGameplay.GPBattleFieldSystem.GetCurrentLocalFocusActor // (Final|Native|Public|BlueprintCallable) // @ game+0x35be180
	struct UGPBattleFieldSystem* STATIC_Get(struct UObject* WorldContextObject); // Function GPGameplay.GPBattleFieldSystem.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35bde80
	struct AActor* FilterLocalFocusActorFromViewTarget(struct AGPNetworkPlayerController* InPlayerController, struct AGPCharacterBase* InPlayerPawn, struct AActor* InViewTarget); // Function GPGameplay.GPBattleFieldSystem.FilterLocalFocusActorFromViewTarget // (Native|Public|BlueprintCallable) // @ game+0x35bdd70
	struct AActor* FilterLocalFocusActorFromPlayer(struct AGPNetworkPlayerController* InPlayerController, struct AGPCharacterBase* InPlayerPawn); // Function GPGameplay.GPBattleFieldSystem.FilterLocalFocusActorFromPlayer // (Native|Public|BlueprintCallable) // @ game+0x35bdca0
	void ClientTestSpectateTargetActor(struct AActor* Target); // Function GPGameplay.GPBattleFieldSystem.ClientTestSpectateTargetActor // (Final|Native|Public|BlueprintCallable) // @ game+0x35bdb50
	void ClientTestResetSpectate(); // Function GPGameplay.GPBattleFieldSystem.ClientTestResetSpectate // (Final|Native|Public|BlueprintCallable) // @ game+0x35bdb30
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCameraComponent
// Size: 0xc20 (Inherited: 0xc10)
class UGPCameraComponent : public UCameraComponent {
public:

	char bUseGlobalControlRotation : 1; // 0xc10(0x01)
	char pad_C10_1 : 7; // 0xc10(0x01)
	char pad_C11[0xf]; // 0xc11(0x0f)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCampInfoUtil
// Size: 0x30 (Inherited: 0x30)
class UGPCampInfoUtil : public UObject {
public:


	void STATIC_ServerSetCampTypeAndTeamID(struct AActor* Source, enum class ECampType CampType, int32_t TeamId); // Function GPGameplay.GPCampInfoUtil.ServerSetCampTypeAndTeamID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35c8cc0
	bool STATIC_IsTeammate(struct AActor* Source, struct AActor* Target); // Function GPGameplay.GPCampInfoUtil.IsTeammate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35c66e0
	bool STATIC_IsNeutralCamp(struct AActor* Source); // Function GPGameplay.GPCampInfoUtil.IsNeutralCamp // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35c65a0
	bool STATIC_GetTeamInfoByTeamId(struct UObject* WorldContext, int32_t TeamId, struct FTeamInfo& InTeamInfo); // Function GPGameplay.GPCampInfoUtil.GetTeamInfoByTeamId // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x35c5f00
	bool STATIC_GetTeamInfo(struct AActor* Source, struct FTeamInfo& InTeamInfo); // Function GPGameplay.GPCampInfoUtil.GetTeamInfo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x35c5d80
	int32_t STATIC_GetTeamID(struct AActor* Source); // Function GPGameplay.GPCampInfoUtil.GetTeamID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35c5d00
	enum class ECampType STATIC_GetCampType(struct AActor* Source); // Function GPGameplay.GPCampInfoUtil.GetCampType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35c5480
	bool STATIC_GetCampInfo(struct AActor* Source, struct FCampInfo& InCampInfo); // Function GPGameplay.GPCampInfoUtil.GetCampInfo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x35c52e0
	void STATIC_GatherCampMembers(struct AActor* Source, struct TArray<struct FTeamMemberInfo>& members); // Function GPGameplay.GPCampInfoUtil.GatherCampMembers // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x35c50c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCapsuleComponent
// Size: 0x590 (Inherited: 0x588)
class UGPCapsuleComponent : public UCapsuleComponent {
public:

	bool NotUpdateOverlapsWhenCollisionSettingsChanged; // 0x588(0x01)
	char pad_589[0x7]; // 0x589(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCharacterAudioConfig
// Size: 0x90 (Inherited: 0x38)
class UGPCharacterAudioConfig : public UWorldSubsystem {
public:

	struct TMap<int64_t, struct UDataTable*> ExpertVoiceDataTable; // 0x38(0x50)
	char pad_88[0x8]; // 0x88(0x08)

	struct UDataTable* GetExpertVoiceDataTable(int64_t ExpertId); // Function GPGameplay.GPCharacterAudioConfig.GetExpertVoiceDataTable // (Final|Native|Public|BlueprintCallable) // @ game+0x35d0c40
	struct UGPCharacterAudioConfig* STATIC_Get(struct UObject* WorldContextObject); // Function GPGameplay.GPCharacterAudioConfig.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35d0800
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCharacterAudioProxy
// Size: 0x30 (Inherited: 0x30)
class UGPCharacterAudioProxy : public UBlueprintFunctionLibrary {
public:


	void STATIC_WantRandomCharacterSpeak(struct UObject* WorldContext, struct FString AudioTypeString); // Function GPGameplay.GPCharacterAudioProxy.WantRandomCharacterSpeak // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35d8520
	void STATIC_WantCharacterSpeak(struct AGPCharacter* InCharacter, struct FString AudioTypeString); // Function GPGameplay.GPCharacterAudioProxy.WantCharacterSpeak // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35d83d0
	void STATIC_UpdateNextTriggerAICrackTime(struct AActor* inActor); // Function GPGameplay.GPCharacterAudioProxy.UpdateNextTriggerAICrackTime // (Final|Native|Static|Public) // @ game+0x35d82c0
	void STATIC_StopCharacterSpeak(struct AGPCharacter* InCharacter, struct FString AudioTypeString); // Function GPGameplay.GPCharacterAudioProxy.StopCharacterSpeak // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35d76c0
	void STATIC_SetLastFootstepPlayTime(struct AGPCharacter* InCharacter, float InTime); // Function GPGameplay.GPCharacterAudioProxy.SetLastFootstepPlayTime // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35d6d70
	void STATIC_ServerWantCharacterSpeak(struct AGPCharacter* InCharacter, struct FString AudioTypeString); // Function GPGameplay.GPCharacterAudioProxy.ServerWantCharacterSpeak // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35d6600
	void STATIC_ServerStopCharacterSpeak(struct AGPCharacter* InCharacter, struct FString AudioTypeString); // Function GPGameplay.GPCharacterAudioProxy.ServerStopCharacterSpeak // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35d64b0
	void STATIC_ServerPlayLandedFootstep(struct AActor* inActor, float FallHeight); // Function GPGameplay.GPCharacterAudioProxy.ServerPlayLandedFootstep // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35d60f0
	void STATIC_ServerPlayJumpFootstep(struct AActor* inActor); // Function GPGameplay.GPCharacterAudioProxy.ServerPlayJumpFootstep // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35d6080
	void STATIC_ScaleWeaponFireAttenuationScale(struct AGPCharacter* TargetCharacter, float AttenuationScalar); // Function GPGameplay.GPCharacterAudioProxy.ScaleWeaponFireAttenuationScale // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35d5910
	void STATIC_ScaleCrouchFootsteps(struct AGPCharacter* TargetCharacter, bool bScale, float AttenuationScalar, float VolumeScalar); // Function GPGameplay.GPCharacterAudioProxy.ScaleCrouchFootsteps // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35d57d0
	void STATIC_RequestOutdoorObstruction(struct AGPCharacterBase* InCharacter, enum class EGPAudioBlueprintType InReason, float LastTime); // Function GPGameplay.GPCharacterAudioProxy.RequestOutdoorObstruction // (Final|Native|Static|Public) // @ game+0x35d56e0
	void STATIC_RequestFakeFootstep(struct AGPCharacter* InCharacter, enum class EFakeFootstepReason InReason, bool bRequest); // Function GPGameplay.GPCharacterAudioProxy.RequestFakeFootstep // (Final|Native|Static|Public) // @ game+0x35d55e0
	void STATIC_RegisterCharacterVOService(struct AGPCharacter* InCharacter); // Function GPGameplay.GPCharacterAudioProxy.RegisterCharacterVOService // (Final|Native|Static|Public) // @ game+0x35d5550
	void STATIC_PlayFPPFootStep(struct AActor* inActor, bool bIsLeftFootstep); // Function GPGameplay.GPCharacterAudioProxy.PlayFPPFootStep // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35d3770
	void STATIC_PlayFootstep(struct AActor* inActor, enum class EGPAudioFootSoundType AudioType, struct UPhysicalMaterial* PhysMat, struct UPhysicalMaterialAudioDataAsset* BindConfig, bool bForceUseAudioType); // Function GPGameplay.GPCharacterAudioProxy.PlayFootstep // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35d3db0
	void STATIC_PlayCharacterTurningAudio(struct AGPCharacterBase* InCharacter); // Function GPGameplay.GPCharacterAudioProxy.PlayCharacterTurningAudio // (Final|Native|Static|Public) // @ game+0x35d3430
	void STATIC_PlayAutonomousLandedFootstep(struct AGPCharacter* InCharacter, float FallHeight, bool bIsFallHigh); // Function GPGameplay.GPCharacterAudioProxy.PlayAutonomousLandedFootstep // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35d3330
	void STATIC_PlayAutonomousJumpFootstep(struct AGPCharacter* InCharacter, bool bIsJumpHigh); // Function GPGameplay.GPCharacterAudioProxy.PlayAutonomousJumpFootstep // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35d3270
	void STATIC_NotifySoundVisualizationWithNoRealActor(struct UObject* WorldContext, enum class ESoundVisualizationType EventType, struct FVector SoundLocation); // Function GPGameplay.GPCharacterAudioProxy.NotifySoundVisualizationWithNoRealActor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x35d2c80
	void STATIC_NotifySoundVisualizationWithAudioTypeName(struct AActor* SourceActor, struct AActor* ActorToBlame, struct FName& AudioTypeName, struct FVector SoundLocation); // Function GPGameplay.GPCharacterAudioProxy.NotifySoundVisualizationWithAudioTypeName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x35d2b20
	void STATIC_NotifySoundVisualizationWithAudioTypeEnum(struct AActor* SourceActor, struct AActor* ActorToBlame, enum class EGPAudioBlueprintType EType, struct FVector SoundLocation); // Function GPGameplay.GPCharacterAudioProxy.NotifySoundVisualizationWithAudioTypeEnum // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x35d29e0
	void STATIC_NotifySoundVisualization(struct AActor* SourceActor, struct AActor* ActorToBlame, enum class ESoundVisualizationType EventType, struct FVector SoundLocation); // Function GPGameplay.GPCharacterAudioProxy.NotifySoundVisualization // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x35d28a0
	void STATIC_NotifyFootStepSoundVisualization(struct AActor* SourceActor, struct AActor* ActorToBlame, enum class EGPAudioFootSoundType FootSoundType, struct FVector SoundLocation); // Function GPGameplay.GPCharacterAudioProxy.NotifyFootStepSoundVisualization // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x35d26e0
	void STATIC_NotifyCharacterPlayFootstepWithAnim(struct AGPCharacter* InCharacter); // Function GPGameplay.GPCharacterAudioProxy.NotifyCharacterPlayFootstepWithAnim // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35d2670
	void STATIC_NotifyCharacterAnimLODChanged(struct AGPCharacter* InCharacter, int32_t NewLOD); // Function GPGameplay.GPCharacterAudioProxy.NotifyCharacterAnimLODChanged // (Final|Native|Static|Public) // @ game+0x35d25c0
	void STATIC_LocalCharacterStateAudioChanged(struct AGPCharacter* LocalCharacter, enum class EStateAudioEventType StateAudioType, bool bEnterState); // Function GPGameplay.GPCharacterAudioProxy.LocalCharacterStateAudioChanged // (Final|Native|Static|Public) // @ game+0x35d2190
	bool STATIC_GetUseSoftCoverBushAudio(); // Function GPGameplay.GPCharacterAudioProxy.GetUseSoftCoverBushAudio // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35d1470
	float STATIC_GetRandomFlybyTriggerCD(struct AActor* inActor); // Function GPGameplay.GPCharacterAudioProxy.GetRandomFlybyTriggerCD // (Final|Native|Static|Public) // @ game+0x35d1180
	float STATIC_GetLastFootstepPlayTime(struct AGPCharacter* InCharacter); // Function GPGameplay.GPCharacterAudioProxy.GetLastFootstepPlayTime // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35d10c0
	enum class EGPAudioFootSoundType STATIC_GetLandedSoundType(struct AActor* inActor, float FallHeight); // Function GPGameplay.GPCharacterAudioProxy.GetLandedSoundType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35d1000
	bool STATIC_GetIsInWater(struct AGPCharacter* InCharacter); // Function GPGameplay.GPCharacterAudioProxy.GetIsInWater // (Final|Native|Static|Public) // @ game+0x35d0f80
	enum class EFakeFootstepStatus STATIC_GetFakeFootstepStatus(struct AGPCharacter* InCharacter); // Function GPGameplay.GPCharacterAudioProxy.GetFakeFootstepStatus // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35d0cd0
	bool STATIC_GetEnableFootstepLog(); // Function GPGameplay.GPCharacterAudioProxy.GetEnableFootstepLog // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35d0c10
	float STATIC_GetCharacterVelocity(struct AGPCharacter* InCharacter); // Function GPGameplay.GPCharacterAudioProxy.GetCharacterVelocity // (Final|Native|Static|Public) // @ game+0x35d0af0
	struct FVector STATIC_GetCharacterLocation(struct AGPCharacter* InCharacter); // Function GPGameplay.GPCharacterAudioProxy.GetCharacterLocation // (Final|Native|Static|Public|HasDefaults) // @ game+0x35d0a60
	void STATIC_DeregisterCharacterVOService(struct AGPCharacter* InCharacter); // Function GPGameplay.GPCharacterAudioProxy.DeregisterCharacterVOService // (Final|Native|Static|Public) // @ game+0x35d0440
	bool STATIC_CheckUseFakeFootstep(struct AGPCharacter* InCharacter); // Function GPGameplay.GPCharacterAudioProxy.CheckUseFakeFootstep // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35cff90
	bool STATIC_CheckSatisfiedFootstepIntervalWithState(struct AGPCharacter* InCharacter, float CurrentTime); // Function GPGameplay.GPCharacterAudioProxy.CheckSatisfiedFootstepIntervalWithState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35cfed0
	bool STATIC_CheckSatisfiedFootstepInterval(struct AGPCharacter* InCharacter, float CurrentTime, float TimeScalar); // Function GPGameplay.GPCharacterAudioProxy.CheckSatisfiedFootstepInterval // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35cfde0
	bool STATIC_CheckCurrentTimeCanTriggerAICrack(struct AActor* inActor); // Function GPGameplay.GPCharacterAudioProxy.CheckCurrentTimeCanTriggerAICrack // (Final|Native|Static|Public) // @ game+0x35cfd60
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCharacterBubbleComponent
// Size: 0x198 (Inherited: 0x100)
class UGPCharacterBubbleComponent : public UActorComponent {
public:

	char bInLowAmmo : 1; // 0x100(0x01)
	char bInLowHealth : 1; // 0x100(0x01)
	char bIsDead : 1; // 0x100(0x01)
	char pad_100_3 : 5; // 0x100(0x01)
	char pad_101[0x3]; // 0x101(0x03)
	float LowHealthPercent; // 0x104(0x04)
	float LowAmmoPercent; // 0x108(0x04)
	float BubbleShowRange; // 0x10c(0x04)
	char pad_110[0x10]; // 0x110(0x10)
	struct TWeakObjectPtr<struct AGPMarkerManager> MarkerManager; // 0x120(0x08)
	struct TWeakObjectPtr<struct AGPCharacter> LocalChar; // 0x128(0x08)
	/*struct TSoftObjectPtr<AGPCharacter>*/char ClientLockTarget[0x28]; // 0x130(0x28)
	/*struct TSoftObjectPtr<AGPCharacter>*/char LockTarget[0x28]; // 0x158(0x28)
	bool bRecived; // 0x180(0x01)
	bool bUsed; // 0x181(0x01)
	char pad_182[0x2]; // 0x182(0x02)
	int32_t LastAddAmmo; // 0x184(0x04)
	struct UClass* Bullet; // 0x188(0x08)
	char pad_190[0x8]; // 0x190(0x08)

	void OnRep_StateChange(); // Function GPGameplay.GPCharacterBubbleComponent.OnRep_StateChange // (Final|Native|Public) // @ game+0x35dbe70
	void OnRep_DeadStateChange(); // Function GPGameplay.GPCharacterBubbleComponent.OnRep_DeadStateChange // (Final|Native|Public) // @ game+0x35dbe50
	void OnHealthChange(struct AActor* Owner, int32_t CurrentValue, int32_t MaxValue); // Function GPGameplay.GPCharacterBubbleComponent.OnHealthChange // (Final|Native|Public) // @ game+0x35dbd50
	void OnCharacterAmmoCountChange(struct AWeaponBase* Weapon, float WeaponAmmoCount, float CarryWeaponAmmoCount); // Function GPGameplay.GPCharacterBubbleComponent.OnCharacterAmmoCountChange // (Final|Native|Public) // @ game+0x35dbc50
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCharacterCarryComponent
// Size: 0x100 (Inherited: 0x100)
class UGPCharacterCarryComponent : public UActorComponent {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCharacterCommonInterface
// Size: 0x30 (Inherited: 0x30)
class UGPCharacterCommonInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCharacterMovementSpeedBaselineDataAsset
// Size: 0xc0 (Inherited: 0x38)
class UGPCharacterMovementSpeedBaselineDataAsset : public UDataAsset {
public:

	struct FString Description; // 0x38(0x10)
	float StandStrafeSpeedScale; // 0x48(0x04)
	float StandBackwardSpeedScale; // 0x4c(0x04)
	float StandSilentWalkStrafeSpeedScale; // 0x50(0x04)
	float StandSilentWalkBackwardSpeedScale; // 0x54(0x04)
	float CrouchRunStrafeSpeedScale; // 0x58(0x04)
	float CrouchRunBackwardSpeedScale; // 0x5c(0x04)
	float CrouchSilentWalkStrafeSpeedScale; // 0x60(0x04)
	float CrouchSilentWalkBackwardSpeedScale; // 0x64(0x04)
	float ProneStrafeSpeedScale; // 0x68(0x04)
	float ProneBackwardSpeedScale; // 0x6c(0x04)
	float StandSprintSpeedMax; // 0x70(0x04)
	float StandMoveSpeedMax; // 0x74(0x04)
	float StandMoveSpeedMin; // 0x78(0x04)
	float CrouchMoveSpeedMax; // 0x7c(0x04)
	float CrouchMoveSpeedMin; // 0x80(0x04)
	float ProneMoveSpeedMax; // 0x84(0x04)
	float ProneMoveSpeedMin; // 0x88(0x04)
	float FallMoveSpeedMax; // 0x8c(0x04)
	float FallMoveSpeedMin; // 0x90(0x04)
	float WeakBasicSpeed; // 0x94(0x04)
	float LeisureSpeed; // 0x98(0x04)
	float AlertSpeed; // 0x9c(0x04)
	float AlertTrottSpeed; // 0xa0(0x04)
	float StandHalfSquatWalkSpeed; // 0xa4(0x04)
	float StandHalfSquatWalkStrafeSpeedScale; // 0xa8(0x04)
	float StandHalfSquatWalkBackwardSpeedScale; // 0xac(0x04)
	float CrouchHalfSquatWalkSpeed; // 0xb0(0x04)
	float CrouchHalfSquatWalkStrafeSpeedScale; // 0xb4(0x04)
	float CrouchHalfSquatWalkBackwardSpeedScale; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAICharacterMovementSpeedDataAsset
// Size: 0x88 (Inherited: 0x38)
class UGPAICharacterMovementSpeedDataAsset : public UDataAsset {
public:

	float LeisurePatrolSpeed; // 0x38(0x04)
	float AlertWalkSpeed; // 0x3c(0x04)
	float AlertWalkLeftwardSpeed; // 0x40(0x04)
	float AlertWalkRightwardSpeed; // 0x44(0x04)
	float AlertWalkBackwardSpeed; // 0x48(0x04)
	float AlertTrottSpeed; // 0x4c(0x04)
	float AlertSprintSpeed; // 0x50(0x04)
	float FightCrouchSpeed; // 0x54(0x04)
	float FightCrouchLeftwardSpeed; // 0x58(0x04)
	float FightCrouchRightwardSpeed; // 0x5c(0x04)
	float FightCrouchBackwardSpeed; // 0x60(0x04)
	float FightWalkSpeed; // 0x64(0x04)
	float FightWalkLeftwardSpeed; // 0x68(0x04)
	float FightWalkRightwardSpeed; // 0x6c(0x04)
	float FightWalkBackwardSpeed; // 0x70(0x04)
	float FightRunSpeed; // 0x74(0x04)
	float FightRunLeftwardSpeed; // 0x78(0x04)
	float FightRunRightwardSpeed; // 0x7c(0x04)
	float FightRunBackwardSpeed; // 0x80(0x04)
	float FightSprintSpeed; // 0x84(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCharacterMovementLimitDataAsset
// Size: 0x48 (Inherited: 0x38)
class UGPCharacterMovementLimitDataAsset : public UDataAsset {
public:

	float SpeedLimitFactor; // 0x38(0x04)
	bool DisabledStandSilentWalk; // 0x3c(0x01)
	bool DisabledStandRun; // 0x3d(0x01)
	bool DisabledStandSprint; // 0x3e(0x01)
	bool DisabledCrouchSilentWalk; // 0x3f(0x01)
	bool DisabledCrouchRun; // 0x40(0x01)
	bool DisabledProneSilentWalk; // 0x41(0x01)
	bool DisabledProneRun; // 0x42(0x01)
	char pad_43[0x5]; // 0x43(0x05)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCharacterDetectEffectComponent
// Size: 0x108 (Inherited: 0x100)
class UGPCharacterDetectEffectComponent : public UActorComponent {
public:

	bool bShowMarker; // 0x100(0x01)
	bool bInMarkerLst; // 0x101(0x01)
	char pad_102[0x6]; // 0x102(0x06)

	void SupportPackSim(struct AActor* From, struct AActor* To); // Function GPGameplay.GPCharacterDetectEffectComponent.SupportPackSim // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x35dfd20
	void SetDetectMarkerEnable(bool bEnable); // Function GPGameplay.GPCharacterDetectEffectComponent.SetDetectMarkerEnable // (Final|Native|Public) // @ game+0x35df710
	void SetDetectLstEnable(bool bEnable); // Function GPGameplay.GPCharacterDetectEffectComponent.SetDetectLstEnable // (Final|Native|Public) // @ game+0x35df680
	void OnRep_bShowMarker(); // Function GPGameplay.GPCharacterDetectEffectComponent.OnRep_bShowMarker // (Final|Native|Public) // @ game+0x35df460
	void OnRep_bInMarkerLst(); // Function GPGameplay.GPCharacterDetectEffectComponent.OnRep_bInMarkerLst // (Final|Native|Public) // @ game+0x35df440
	void ClientSetDetectLstEnable(bool bEnable); // Function GPGameplay.GPCharacterDetectEffectComponent.ClientSetDetectLstEnable // (Final|Native|Public) // @ game+0x35de210
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCharacterMovementConfig
// Size: 0x68 (Inherited: 0x30)
class UGPCharacterMovementConfig : public UObject {
public:

	bool DsUseClientPassObstacleType; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float TimeToAdjustWhenCollisionBetweenCS; // 0x34(0x04)
	float DsMaxAllowedDirectMoveAdjustSpeed; // 0x38(0x04)
	float DsMaxAllowedDirectSetAdjustFrequency; // 0x3c(0x04)
	float DsMaxAllowedDirectSetAdjustSpeed; // 0x40(0x04)
	float DsMaxAllowedDirectSetAdjustDistance; // 0x44(0x04)
	bool DsAllowDirectUseClientLocation; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
	struct TArray<uint64_t> PlayerWhiteList; // 0x50(0x10)
	bool DsTrustClientLocationAfterPhys; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCharacterSkillInterface
// Size: 0x30 (Inherited: 0x30)
class UGPCharacterSkillInterface : public UInterface {
public:


	void SetSkillControlActor(struct AActor* Actor); // Function GPGameplay.GPCharacterSkillInterface.SetSkillControlActor // (Native|Public) // @ game+0x89f670
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCharacterVehicleInterface
// Size: 0x30 (Inherited: 0x30)
class UGPCharacterVehicleInterface : public UInterface {
public:


	void StartBoom(); // Function GPGameplay.GPCharacterVehicleInterface.StartBoom // (Native|Public) // @ game+0x174a9e0
	void SetStingerMissileCanLock(bool can); // Function GPGameplay.GPCharacterVehicleInterface.SetStingerMissileCanLock // (Native|Public) // @ game+0x174b2d0
	void SetAbilityOffControlledVehicle(struct AActor* Actor); // Function GPGameplay.GPCharacterVehicleInterface.SetAbilityOffControlledVehicle // (Native|Public) // @ game+0x92e650
	void SetAbilityControlledVehicle(struct AActor* Actor); // Function GPGameplay.GPCharacterVehicleInterface.SetAbilityControlledVehicle // (Native|Public) // @ game+0x89f670
	void RetriveItems(); // Function GPGameplay.GPCharacterVehicleInterface.RetriveItems // (Native|Public) // @ game+0x174af80
	bool IsVehicleOperate(); // Function GPGameplay.GPCharacterVehicleInterface.IsVehicleOperate // (Native|Public) // @ game+0x17614f0
	bool IsVehicleDestroy(); // Function GPGameplay.GPCharacterVehicleInterface.IsVehicleDestroy // (Native|Public) // @ game+0x174ea60
	bool IsOperateControlledVehicle(); // Function GPGameplay.GPCharacterVehicleInterface.IsOperateControlledVehicle // (Native|Public) // @ game+0x174e640
	bool IsAbilityControlledVehicle(); // Function GPGameplay.GPCharacterVehicleInterface.IsAbilityControlledVehicle // (Native|Public) // @ game+0x92e3d0
	bool GetStingerMissileCanLock(); // Function GPGameplay.GPCharacterVehicleInterface.GetStingerMissileCanLock // (Native|Public) // @ game+0x1755340
	void GetOffAbilityVehicle(); // Function GPGameplay.GPCharacterVehicleInterface.GetOffAbilityVehicle // (Native|Public) // @ game+0x174a9a0
	int32_t GetCharacterPlayerId(); // Function GPGameplay.GPCharacterVehicleInterface.GetCharacterPlayerId // (Native|Public) // @ game+0x35e3e40
	struct AActor* GetAbilityOffControlledVehicle(); // Function GPGameplay.GPCharacterVehicleInterface.GetAbilityOffControlledVehicle // (Native|Public) // @ game+0x174a5a0
	struct AActor* GetAbilityControlledVehicle(); // Function GPGameplay.GPCharacterVehicleInterface.GetAbilityControlledVehicle // (Native|Public) // @ game+0xaa1400
	void CureVehicle(); // Function GPGameplay.GPCharacterVehicleInterface.CureVehicle // (Native|Public) // @ game+0x174aa00
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCharacterVoiceComponent
// Size: 0x1e0 (Inherited: 0x100)
class UGPCharacterVoiceComponent : public UActorComponent {
public:

	struct TMap<enum class EStateAudioEventType, struct FCharacterStateAudioEventConfig> StateAudioEventConfigMap; // 0x100(0x50)
	char pad_150[0x14]; // 0x150(0x14)
	int32_t SprintBreathFootstepInterval; // 0x164(0x04)
	int32_t CrouchBreathFootstepInterval; // 0x168(0x04)
	char pad_16C[0x4]; // 0x16c(0x04)
	struct FString PlayerStateGroupName; // 0x170(0x10)
	char pad_180[0x10]; // 0x180(0x10)
	struct AGPCharacter* GPCharacter; // 0x190(0x08)
	char pad_198[0x30]; // 0x198(0x30)
	struct TArray<struct UGPAudioEventAsset*> AudioAssetCache; // 0x1c8(0x10)
	char pad_1D8[0x8]; // 0x1d8(0x08)

	void WantCharacterSpeakWithName(struct FString AudioTypeString); // Function GPGameplay.GPCharacterVoiceComponent.WantCharacterSpeakWithName // (Final|Native|Public|BlueprintCallable) // @ game+0x35e5ac0
	void WantCharacterSpeak(enum class ECharacterAudioType AudioType); // Function GPGameplay.GPCharacterVoiceComponent.WantCharacterSpeak // (Final|Native|Public|BlueprintCallable) // @ game+0x35e5a40
	void StopCharacterSpeakWithName(struct FString AudioTypeString); // Function GPGameplay.GPCharacterVoiceComponent.StopCharacterSpeakWithName // (Final|Native|Public|BlueprintCallable) // @ game+0x35e5ac0
	void StopCharacterSpeak(enum class ECharacterAudioType AudioType); // Function GPGameplay.GPCharacterVoiceComponent.StopCharacterSpeak // (Final|Native|Public|BlueprintCallable) // @ game+0x35e5a40
	void OnHeroIdChanged(uint64_t HeroID); // Function GPGameplay.GPCharacterVoiceComponent.OnHeroIdChanged // (Final|Native|Public) // @ game+0x2279c80
	void OnAvatarIdChanged(uint64_t AvatarID); // Function GPGameplay.GPCharacterVoiceComponent.OnAvatarIdChanged // (Final|Native|Public) // @ game+0x35e4440
	void CharacterStateAudioChanged(enum class EStateAudioEventType StateAudioType, bool bEnterState); // Function GPGameplay.GPCharacterVoiceComponent.CharacterStateAudioChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x35e3970
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCheatManager
// Size: 0x80 (Inherited: 0x80)
class UGPCheatManager : public UCheatManager {
public:


	void ShowSceneDebug(); // Function GPGameplay.GPCheatManager.ShowSceneDebug // (Final|Exec|Native|Public) // @ game+0x35e5a20
	void RelativeTeleport(struct FVector Disp); // Function GPGameplay.GPCheatManager.RelativeTeleport // (Final|Exec|Native|Public|HasDefaults) // @ game+0x35e55d0
	void PlayTwoHandedGesture(struct FName ResId); // Function GPGameplay.GPCheatManager.PlayTwoHandedGesture // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x35e4d50
	void PlayOneHandedGesture(struct FName ResId); // Function GPGameplay.GPCheatManager.PlayOneHandedGesture // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x35e4cd0
	void PlayCharacterVoice(struct FName ResId); // Function GPGameplay.GPCheatManager.PlayCharacterVoice // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x35e4c50
	void NextDebugTargetAI(); // Function GPGameplay.GPCheatManager.NextDebugTargetAI // (Final|Exec|Native|Public) // @ game+0x35e4320
	void GiveWeaponByRec(int64_t RecID, int32_t EquipPosition); // Function GPGameplay.GPCheatManager.GiveWeaponByRec // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x35e4070
	void GiveWeapon(int64_t PresetId, int32_t EquipPosition); // Function GPGameplay.GPCheatManager.GiveWeapon // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x35e3fb0
	void EnableDamageValidation(bool bEnable, bool bDebug); // Function GPGameplay.GPCheatManager.EnableDamageValidation // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x35e3c60
	void ApplySpray(struct FName ResId); // Function GPGameplay.GPCheatManager.ApplySpray // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x35e38f0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPClientSeamlessTravel
// Size: 0x1a8 (Inherited: 0x38)
class UGPClientSeamlessTravel : public UGameInstanceSubsystem {
public:

	char pad_38[0x140]; // 0x38(0x140)
	struct UClass* NextLSConfig; // 0x178(0x08)
	char pad_180[0x28]; // 0x180(0x28)

	void WaitStreamingComplete(struct UObject* WorldContext); // Function GPGameplay.GPClientSeamlessTravel.WaitStreamingComplete // (Final|Native|Protected) // @ game+0x35e5eb0
	void SwitchToDSClientPlayerInner(struct UObject* WorldContext); // Function GPGameplay.GPClientSeamlessTravel.SwitchToDSClientPlayerInner // (Final|Native|Protected) // @ game+0x35e5c60
	void SwitchToDSClientPlayer(struct UObject* WorldContext); // Function GPGameplay.GPClientSeamlessTravel.SwitchToDSClientPlayer // (Final|Native|Protected) // @ game+0x35e5be0
	void OnPostLeaveGameFlow(enum class EGameFlowStageType InGameFlowStage); // Function GPGameplay.GPClientSeamlessTravel.OnPostLeaveGameFlow // (Final|Native|Protected) // @ game+0x35e4b30
	void OnPostEnterGameFlow(enum class EGameFlowStageType InGameFlowStage); // Function GPGameplay.GPClientSeamlessTravel.OnPostEnterGameFlow // (Final|Native|Protected) // @ game+0x35e4ab0
	void OnPostConnectDS(struct UNetConnection* InNetConnection); // Function GPGameplay.GPClientSeamlessTravel.OnPostConnectDS // (Final|Native|Protected) // @ game+0x35e4a30
	void OnNetDriverShutdown(struct UNetDriver* NetDriver); // Function GPGameplay.GPClientSeamlessTravel.OnNetDriverShutdown // (Final|Native|Protected) // @ game+0x35e48d0
	void OnDSConnected(struct UNetConnection* InNetConnection); // Function GPGameplay.GPClientSeamlessTravel.OnDSConnected // (Final|Native|Protected) // @ game+0x35e4620
	void OnActorSpawned(struct AActor* NewActor); // Function GPGameplay.GPClientSeamlessTravel.OnActorSpawned // (Final|Native|Protected) // @ game+0x35e43c0
	void OnActorChannelSpawnNewPC(struct APlayerController* NewPC); // Function GPGameplay.GPClientSeamlessTravel.OnActorChannelSpawnNewPC // (Final|Native|Protected) // @ game+0x35e4340
	bool STATIC_IsInSeamlessTravel(); // Function GPGameplay.GPClientSeamlessTravel.IsInSeamlessTravel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35e4260
	struct UGPClientSeamlessTravel* STATIC_Get(struct UWorld* WordContext); // Function GPGameplay.GPClientSeamlessTravel.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35e3dc0
	void ClassAddSeamlessFlag(struct UClass* InClass, enum class ESeamlessFlag InFlag); // Function GPGameplay.GPClientSeamlessTravel.ClassAddSeamlessFlag // (Final|Native|Public|BlueprintCallable) // @ game+0x35e3a40
	void ActorAddSeamlessFlag(struct AActor* inActor, enum class ESeamlessFlag InFlag); // Function GPGameplay.GPClientSeamlessTravel.ActorAddSeamlessFlag // (Final|Native|Public|BlueprintCallable) // @ game+0x35e3830
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPComBoardComponent
// Size: 0x530 (Inherited: 0x100)
class UGPComBoardComponent : public UActorComponent {
public:

	char pad_100[0x10]; // 0x100(0x10)
	struct FGPLocomotionJumpInfo JumpInfo; // 0x110(0x30)
	struct UCapsuleComponent* ProneCapsuleCollisionComponent; // 0x140(0x08)
	struct UCurveFloat* StandToProneSpeedAddCurve; // 0x148(0x08)
	char LeanPeekAnimTypeValueRep; // 0x150(0x01)
	char pad_151[0xf]; // 0x151(0x0f)
	struct FGPZiplineInfo ZiplineInfo; // 0x160(0xa0)
	struct FGPZiplineActorInfo ZiplineActorInfo; // 0x200(0xc0)
	struct FGPZiplineActorInfo ServerZiplineActorInfo; // 0x2c0(0xc0)
	struct FGPZiplineSimulatedInfo ZiplineSimulatedInfo; // 0x380(0x40)
	struct AZiplineDraftGear* DraftGearActor; // 0x3c0(0x08)
	float ValidationDistance; // 0x3c8(0x04)
	char pad_3CC[0x1c]; // 0x3cc(0x1c)
	struct FGPRadarCheckParams RadarCheckParams; // 0x3e8(0x18)
	char pad_400[0x4]; // 0x400(0x04)
	bool bHideMySelf; // 0x404(0x01)
	char pad_405[0x3]; // 0x405(0x03)
	struct TArray<uint32_t> HiddenCharacterGUIDs; // 0x408(0x10)
	char pad_418[0x10]; // 0x418(0x10)
	bool bTouchBush; // 0x428(0x01)
	bool bBehindSoftCover; // 0x429(0x01)
	char pad_42A[0x6]; // 0x42a(0x06)
	struct FResourceCommercializationItem ZoyaSwarmsAnim; // 0x430(0x100)

	void UpdateSimulatedZiplineInfo(struct FGPZiplineSimulatedInfo InSimulatedInfo); // Function GPGameplay.GPComBoardComponent.UpdateSimulatedZiplineInfo // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x35e5df0
	void SyncZiplineInfoToClient(struct FGPZiplineActorInfo InZiplineInfo); // Function GPGameplay.GPComBoardComponent.SyncZiplineInfoToClient // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x35e5ce0
	void ServerGetOnZipline(struct FGPZiplineActorInfo InZiplineInfo); // Function GPGameplay.GPComBoardComponent.ServerGetOnZipline // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35e5890
	void ServerGetOffZipline(enum class EEndZiplineReason EndZiplineReason); // Function GPGameplay.GPComBoardComponent.ServerGetOffZipline // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35e5810
	void SendClientMovedLengthToServer(float ClientMovedLength, struct FVector ServerLocation); // Function GPGameplay.GPComBoardComponent.SendClientMovedLengthToServer // (Net|Native|Event|Public|NetServer|HasDefaults) // @ game+0x35e5660
	void ReactivateZipline(); // Function GPGameplay.GPComBoardComponent.ReactivateZipline // (Final|Native|Public) // @ game+0x35e54c0
	void Radar_GetAllTypeActorsWithinDistance(struct UClass* ActorType, float Distance, struct TArray<struct AActor*>& OutActorArray); // Function GPGameplay.GPComBoardComponent.Radar_GetAllTypeActorsWithinDistance // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x35e5370
	void Radar_GetAllCharactersWithinDistance(float Distance, struct TArray<struct ACHARACTER*>& OutCharacterArray); // Function GPGameplay.GPComBoardComponent.Radar_GetAllCharactersWithinDistance // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x35e5250
	void Radar_CheckIsInViewport(struct AActor* inActor, bool& bInViewport, struct FVector2D& ViewportPosition, bool bForceUpdate); // Function GPGameplay.GPComBoardComponent.Radar_CheckIsInViewport // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x35e50e0
	void Radar_CheckCharacterVisibility(struct ACHARACTER* InCharacter, bool& bIsVisible, struct TArray<struct AActor*>& IgnoreActors, bool bForceUpdate); // Function GPGameplay.GPComBoardComponent.Radar_CheckCharacterVisibility // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x35e4f20
	void Radar_CheckActorVisibility(struct AActor* inActor, bool& bIsVisible, bool bForceUpdate); // Function GPGameplay.GPComBoardComponent.Radar_CheckActorVisibility // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x35e4e10
	void ProcessZiplineExit(); // Function GPGameplay.GPComBoardComponent.ProcessZiplineExit // (Final|Native|Public) // @ game+0x35e4df0
	void ProcessZiplineCooldown(); // Function GPGameplay.GPComBoardComponent.ProcessZiplineCooldown // (Final|Native|Public) // @ game+0x35e4dd0
	void OnRep_TouchBushChanged(); // Function GPGameplay.GPComBoardComponent.OnRep_TouchBushChanged // (Final|Native|Public) // @ game+0x35e4c30
	void OnRep_SoftCoverStatusChanged(); // Function GPGameplay.GPComBoardComponent.OnRep_SoftCoverStatusChanged // (Final|Native|Public) // @ game+0x35e4c10
	void OnRep_ReceiveServerZiplineInfo(); // Function GPGameplay.GPComBoardComponent.OnRep_ReceiveServerZiplineInfo // (Final|Native|Public) // @ game+0x17621d0
	void OnRep_HideMyselfFromOthers(); // Function GPGameplay.GPComBoardComponent.OnRep_HideMyselfFromOthers // (Final|Native|Public) // @ game+0x35e4bf0
	void OnRep_HiddenCharacterGUIDs(); // Function GPGameplay.GPComBoardComponent.OnRep_HiddenCharacterGUIDs // (Final|Native|Public) // @ game+0x35e4bd0
	void OnCharacterLanded(float FallHeight, bool bIsFallHigh); // Function GPGameplay.GPComBoardComponent.OnCharacterLanded // (Final|Native|Public) // @ game+0x35e4550
	void OnCharacterJump(bool bIsJumpHigh); // Function GPGameplay.GPComBoardComponent.OnCharacterJump // (Final|Native|Public) // @ game+0x35e44c0
	bool IsMovableActor(struct AActor* Actor); // Function GPGameplay.GPComBoardComponent.IsMovableActor // (Native|Public) // @ game+0x35e4280
	bool IsDynamicObstacleActor(struct AActor* Actor); // Function GPGameplay.GPComBoardComponent.IsDynamicObstacleActor // (Native|Public) // @ game+0x35e41c0
	void HideMySelfFromOthers(bool bHide); // Function GPGameplay.GPComBoardComponent.HideMySelfFromOthers // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35e4130
	void GMHideMySelfFromOthers(bool bHide); // Function GPGameplay.GPComBoardComponent.GMHideMySelfFromOthers // (Final|Native|Public|BlueprintCallable) // @ game+0x35e3d30
	void Client2ServerLeanPeekTypeValue(char PeekValue); // Function GPGameplay.GPComBoardComponent.Client2ServerLeanPeekTypeValue // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35e3be0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCommercializationComponent
// Size: 0x478 (Inherited: 0x100)
class UGPCommercializationComponent : public UActorComponent {
public:

	struct FSoftObjectPath DefaultVoiceImage; // 0x100(0x18)
	struct FCommercializationWatchRow CachedWatchRow; // 0x118(0xc0)
	struct UMeshComponent* CachedWatchMeshComp; // 0x1d8(0x08)
	char pad_1E0[0x8]; // 0x1e0(0x08)
	struct FName LookWatchId; // 0x1e8(0x08)
	struct FName SkillMeshName; // 0x1f0(0x08)
	struct TArray<struct FCommercializationItemInfo> CommercializationItems; // 0x1f8(0x10)
	struct TMap<uint64_t, char> HeroItemMap; // 0x208(0x50)
	struct FName GeneralResourceId; // 0x258(0x08)
	char pad_260[0x4]; // 0x260(0x04)
	float DetectionLength; // 0x264(0x04)
	/*struct TSoftObjectPtr<UMaterialInstance>*/char SprayStatic[0x28]; // 0x268(0x28)
	/*struct TSoftObjectPtr<UMaterialInstance>*/char SprayDynamic[0x28]; // 0x290(0x28)
	struct FSprayPaint SprayPaint; // 0x2b8(0xe8)
	struct FSprayConfig SprayConfig; // 0x3a0(0x34)
	char pad_3D4[0x4]; // 0x3d4(0x04)
	struct TMap<enum class ECommercializationResourceRarity, struct FDecalSizeSetting> DecalSizeSettings; // 0x3d8(0x50)
	struct TMap<struct FName, struct FShuffleList> ShuffleConfig; // 0x428(0x50)

	void Server2ClientsApplySpray(struct FSprayInfo SprayInfo); // Function GPGameplay.GPCommercializationComponent.Server2ClientsApplySpray // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x35e5730
	void RecordEmoteUsageData(int32_t ActionType, uint64_t ResourceId, uint32_t Rarity); // Function GPGameplay.GPCommercializationComponent.RecordEmoteUsageData // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35e54e0
	void OnRep_CommercializationItems(); // Function GPGameplay.GPCommercializationComponent.OnRep_CommercializationItems // (Final|Native|Public) // @ game+0x35e4bb0
	void OnPossessedBy(); // Function GPGameplay.GPCommercializationComponent.OnPossessedBy // (Native|Public) // @ game+0x35e4a10
	void OnPlayerHeroIdChanged(uint64_t Uin, uint64_t HeroID); // Function GPGameplay.GPCommercializationComponent.OnPlayerHeroIdChanged // (Final|Native|Public) // @ game+0x35e4950
	void OnKillInfoNotify(struct TArray<struct FKillInfo>& NewAddKillInfo); // Function GPGameplay.GPCommercializationComponent.OnKillInfoNotify // (Final|Native|Public|HasOutParms) // @ game+0x35e46e0
	void OnItemsUpdated(); // Function GPGameplay.GPCommercializationComponent.OnItemsUpdated // (Final|Native|Public|BlueprintCallable) // @ game+0x35e46c0
	void OnEnterIrisSafeHouse(); // Function GPGameplay.GPCommercializationComponent.OnEnterIrisSafeHouse // (Final|Native|Public) // @ game+0x35e46a0
	void Client2ServerApplySpray(struct FSprayInfo SprayInfo); // Function GPGameplay.GPCommercializationComponent.Client2ServerApplySpray // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35e3b00
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCommercializationItem
// Size: 0x4d0 (Inherited: 0x378)
class AGPCommercializationItem : public AActor {
public:

	char pad_378[0x10]; // 0x378(0x10)
	struct USkeletalMeshComponent* FPPMeshComp; // 0x388(0x08)
	struct USkeletalMeshComponent* TPPMeshComp; // 0x390(0x08)
	char pad_398[0x138]; // 0x398(0x138)

	void OnSprayPaintLoadCompleted(struct TArray<struct FSoftObjectPath> Paths); // Function GPGameplay.GPCommercializationItem.OnSprayPaintLoadCompleted // (Final|Native|Public) // @ game+0x35f11c0
	void OnItemLoadCompleted(struct TArray<struct FSoftObjectPath> Paths); // Function GPGameplay.GPCommercializationItem.OnItemLoadCompleted // (Final|Native|Public) // @ game+0x35f1030
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPControlInputInterface
// Size: 0x30 (Inherited: 0x30)
class UGPControlInputInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPControllerAudioComponent
// Size: 0x200 (Inherited: 0x100)
class UGPControllerAudioComponent : public UActorComponent {
public:

	struct TMap<uint32_t, struct FCharacterSpeakStatus> CharacterSpeakStatusMap; // 0x100(0x50)
	char pad_150[0x28]; // 0x150(0x28)
	struct AGPPlayerController* OwnerController; // 0x178(0x08)
	char pad_180[0x1c]; // 0x180(0x1c)
	struct FName RadioRTPCName; // 0x19c(0x08)
	float TickVOInterval; // 0x1a4(0x04)
	float TickVOIntervalFor3P; // 0x1a8(0x04)
	char pad_1AC[0x4]; // 0x1ac(0x04)
	struct TMap<uint32_t, struct FGPClippedWeaponFakeEventRecord> PlayerFakeEventRecords; // 0x1b0(0x50)

	void WantCharacterSpeak(struct AGPCharacter* InCharacter, struct FString AudioTypeString); // Function GPGameplay.GPControllerAudioComponent.WantCharacterSpeak // (Final|Native|Public) // @ game+0x35f23e0
	void StopCharacterSpeak(struct AGPCharacter* InCharacter, struct FString AudioTypeString); // Function GPGameplay.GPControllerAudioComponent.StopCharacterSpeak // (Final|Native|Public) // @ game+0x35f2150
	void ServerWantCharacterSpeak(struct AGPCharacter* InCharacter, struct FString AudioTypeString); // Function GPGameplay.GPControllerAudioComponent.ServerWantCharacterSpeak // (Final|Native|Public) // @ game+0x35f1c60
	void ServerStopPlayerVoice(uint32_t CharacterGUID, struct FString AudioTypeString); // Function GPGameplay.GPControllerAudioComponent.ServerStopPlayerVoice // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x35f1b60
	void ServerStopCharacterSpeak(struct AGPCharacter* InCharacter, struct FString AudioTypeString); // Function GPGameplay.GPControllerAudioComponent.ServerStopCharacterSpeak // (Final|Native|Public) // @ game+0x35f1a00
	void ServerRequestRegisterCharacterVOService(uint32_t CharacterGUID, uint64_t CharacterUin, uint64_t HeroID); // Function GPGameplay.GPControllerAudioComponent.ServerRequestRegisterCharacterVOService // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x35f1900
	void ServerRequestDeregisterCharacterVOService(uint32_t CharacterGUID); // Function GPGameplay.GPControllerAudioComponent.ServerRequestDeregisterCharacterVOService // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x35f1870
	void ServerRegisterCharacterVOService(struct AGPCharacter* InCharacter); // Function GPGameplay.GPControllerAudioComponent.ServerRegisterCharacterVOService // (Final|Native|Public) // @ game+0x35f17f0
	void ServerPlayPlayerVoice(uint32_t CharacterGUID, struct FString AudioTypeString, int32_t RandomIndex); // Function GPGameplay.GPControllerAudioComponent.ServerPlayPlayerVoice // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x35f16b0
	void ServerDeregisterCharacterVOService(struct AGPCharacter* InCharacter); // Function GPGameplay.GPControllerAudioComponent.ServerDeregisterCharacterVOService // (Final|Native|Public) // @ game+0x35f1630
	void OnTimerTriggered(uint32_t CharacterGUID); // Function GPGameplay.GPControllerAudioComponent.OnTimerTriggered // (Final|Native|Protected) // @ game+0x35f1350
	bool GetEnableCharacterVOService(); // Function GPGameplay.GPControllerAudioComponent.GetEnableCharacterVOService // (Final|Native|Protected) // @ game+0x35ef550
	void ClientWantRandomCharacterSpeak(struct FString AudioTypeString); // Function GPGameplay.GPControllerAudioComponent.ClientWantRandomCharacterSpeak // (Final|Native|Public) // @ game+0x35ef020
	void ClientStopPlayerVoice(uint32_t CharacterGUID, struct FString AudioTypeString, bool bRequestFromServer); // Function GPGameplay.GPControllerAudioComponent.ClientStopPlayerVoice // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x35eeed0
	void ClientRegisterCharacterVOService(struct AGPCharacter* InCharacter); // Function GPGameplay.GPControllerAudioComponent.ClientRegisterCharacterVOService // (Final|Native|Public) // @ game+0x35eee50
	void ClientPlayPlayerVoice(uint32_t CharacterGUID, uint64_t CharacterUin, uint64_t HeroID, struct FString AudioTypeString, bool bRequestFromServer, bool bTeammateWithListener, int32_t RandomIndex); // Function GPGameplay.GPControllerAudioComponent.ClientPlayPlayerVoice // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x35eec10
	void ClientDeregisterCharacterVOService(struct AGPCharacter* InCharacter); // Function GPGameplay.GPControllerAudioComponent.ClientDeregisterCharacterVOService // (Final|Native|Public) // @ game+0x35eeb90
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.PartsDataTableManager
// Size: 0xa0 (Inherited: 0x38)
class UPartsDataTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x68]; // 0x38(0x68)

	struct FPartsDataRow GetPartDataRow(uint64_t ItemID, struct UObject* WorldContextObject); // Function GPGameplay.PartsDataTableManager.GetPartDataRow // (Final|Native|Public) // @ game+0x35eff20
	struct TArray<int64_t> GetAllPendantPartIDs(); // Function GPGameplay.PartsDataTableManager.GetAllPendantPartIDs // (Final|Native|Public) // @ game+0x35ef3a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.PartsRuleTableManager
// Size: 0xe8 (Inherited: 0x38)
class UPartsRuleTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0xb0]; // 0x38(0xb0)

	void GetRuleRows(uint32_t RuleId, struct TArray<struct FPartsRuleRow>& OutRuleList); // Function GPGameplay.PartsRuleTableManager.GetRuleRows // (Final|Native|Public|HasOutParms) // @ game+0x35f0630
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GunPresetTableManager
// Size: 0xb0 (Inherited: 0x38)
class UGunPresetTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x48]; // 0x38(0x48)
	uint64_t MaxItemID; // 0x80(0x08)
	struct TArray<struct FString> AllGunNames; // 0x88(0x10)
	char pad_98[0x18]; // 0x98(0x18)

	bool UpdateGunID(struct FText NewID, uint64_t OldID); // Function GPGameplay.GunPresetTableManager.UpdateGunID // (Final|Native|Public) // @ game+0x35f22b0
	void SortKey(); // Function GPGameplay.GunPresetTableManager.SortKey // (Final|Native|Public) // @ game+0x35f2130
	void SetRecPart(struct FText NewRec, uint64_t PresetId); // Function GPGameplay.GunPresetTableManager.SetRecPart // (Final|Native|Public) // @ game+0x35f1fb0
	void SetGunName(struct FText NewName, int32_t GunIndx, uint64_t PresetId); // Function GPGameplay.GunPresetTableManager.SetGunName // (Final|Native|Public) // @ game+0x35f1e40
	void RemoveRowByPresetId(uint64_t PresetId); // Function GPGameplay.GunPresetTableManager.RemoveRowByPresetId // (Final|Native|Public) // @ game+0x35f1510
	void RemoveRow(int32_t GunIndx, uint64_t PresetId); // Function GPGameplay.GunPresetTableManager.RemoveRow // (Final|Native|Public) // @ game+0x35f1450
	struct TArray<struct FGunPresetRow> GetGunsByWeaponId(uint64_t WeaponID); // Function GPGameplay.GunPresetTableManager.GetGunsByWeaponId // (Final|Native|Public) // @ game+0x35efcd0
	struct FGunPresetRow GetGunByItemId(uint64_t ItemID); // Function GPGameplay.GunPresetTableManager.GetGunByItemId // (Final|Native|Public) // @ game+0x35efc10
	struct FGunPresetRow GetGunByIndex(int32_t GunIndex); // Function GPGameplay.GunPresetTableManager.GetGunByIndex // (Final|Native|Public) // @ game+0x35efb50
	int32_t AddRow(struct FGunPresetRow NewRow); // Function GPGameplay.GunPresetTableManager.AddRow // (Final|Native|Public) // @ game+0x35ee6f0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GunPreviewTableManager
// Size: 0x50 (Inherited: 0x38)
class UGunPreviewTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x18]; // 0x38(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.MagazineDropTableManager
// Size: 0x1a0 (Inherited: 0x38)
class UMagazineDropTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x168]; // 0x38(0x168)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GunDescTableManager
// Size: 0x58 (Inherited: 0x38)
class UGunDescTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x20]; // 0x38(0x20)

	void SortKey(); // Function GPGameplay.GunDescTableManager.SortKey // (Final|Native|Public) // @ game+0x35f2110
	void RemoveRows(uint64_t DescId); // Function GPGameplay.GunDescTableManager.RemoveRows // (Final|Native|Public) // @ game+0x35f1590
	void AddRow(struct FGunDescRow& Row); // Function GPGameplay.GunDescTableManager.AddRow // (Final|Native|Public|HasOutParms) // @ game+0x35ee5b0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.PartSocketTableManager
// Size: 0x108 (Inherited: 0x38)
class UPartSocketTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0xd0]; // 0x38(0xd0)

	uint32_t GetSocketIdByName(struct FName& SocketName); // Function GPGameplay.PartSocketTableManager.GetSocketIdByName // (Final|Native|Public|HasOutParms) // @ game+0x35f0940
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.RecFunctionTableManager
// Size: 0x200 (Inherited: 0x38)
class URecFunctionTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x1c8]; // 0x38(0x1c8)

	bool HasVirtualPart(uint64_t RecID, uint32_t ParentSocketId, uint64_t& OutItemId); // Function GPGameplay.RecFunctionTableManager.HasVirtualPart // (Final|Native|Public|HasOutParms) // @ game+0x35f09e0
	struct TArray<struct FRecFunctionRow> GetSameSerieList(uint32_t SerieId); // Function GPGameplay.RecFunctionTableManager.GetSameSerieList // (Final|Native|Public) // @ game+0x35f0760
	struct FRecFunctionRow GetRow(uint64_t FunctionId); // Function GPGameplay.RecFunctionTableManager.GetRow // (Final|Native|Public) // @ game+0x35f0290
	uint64_t GetFunctionIdByPresetID(uint64_t DefaultPresetID, uint64_t MPDefaultPresetID); // Function GPGameplay.RecFunctionTableManager.GetFunctionIdByPresetID // (Final|Native|Public) // @ game+0x35efa90
	struct URecFunctionTableManager* STATIC_Get(); // Function GPGameplay.RecFunctionTableManager.Get // (Final|Native|Static|Public) // @ game+0x35ef370
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.CrosshairPresetTableManager
// Size: 0x48 (Inherited: 0x38)
class UCrosshairPresetTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ScoFunctionTableManager
// Size: 0x50 (Inherited: 0x38)
class UScoFunctionTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x18]; // 0x38(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.PartsFunctionTableManager
// Size: 0x140 (Inherited: 0x38)
class UPartsFunctionTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x108]; // 0x38(0x108)

	bool STATIC_IsLazy(); // Function GPGameplay.PartsFunctionTableManager.IsLazy // (Final|Native|Static|Public) // @ game+0x35f0b20
	void BPGetFuncRows(uint64_t FuncId, struct TArray<struct FPartsFunctionRow>& OutFuncList); // Function GPGameplay.PartsFunctionTableManager.BPGetFuncRows // (Final|Native|Public|HasOutParms) // @ game+0x35ee970
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.PartsAnimFunctionTableManager
// Size: 0x50 (Inherited: 0x38)
class UPartsAnimFunctionTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x18]; // 0x38(0x18)

	void GetFuncRows(uint64_t FuncId, struct TArray<struct FPartsAnimFunctionRow>& OutFuncList); // Function GPGameplay.PartsAnimFunctionTableManager.GetFuncRows // (Final|Native|Public|HasOutParms) // @ game+0x35ef7e0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.PartsFunctionGroupTableManager
// Size: 0x48 (Inherited: 0x38)
class UPartsFunctionGroupTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.PartsTextureSizeTableManager
// Size: 0x48 (Inherited: 0x38)
class UPartsTextureSizeTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.PartsMergeableTableManager
// Size: 0x48 (Inherited: 0x38)
class UPartsMergeableTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.RTIConfigTableManager
// Size: 0x50 (Inherited: 0x38)
class URTIConfigTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x18]; // 0x38(0x18)

	void AddRow(struct FRTIConfigRow NewRow); // Function GPGameplay.RTIConfigTableManager.AddRow // (Final|Native|Public) // @ game+0x35ee850
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.PartsUIAnimTableManager
// Size: 0x48 (Inherited: 0x38)
class UPartsUIAnimTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.PartsFxFunctionTableManager
// Size: 0x48 (Inherited: 0x38)
class UPartsFxFunctionTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.PartsClassConfigTableManager
// Size: 0x48 (Inherited: 0x38)
class UPartsClassConfigTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.PartsSeriesTableManager
// Size: 0x48 (Inherited: 0x38)
class UPartsSeriesTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponExtraModleTableManager
// Size: 0xa0 (Inherited: 0x38)
class UWeaponExtraModleTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x68]; // 0x38(0x68)

	void GetExtraModelRowsByRecId(uint64_t RecID, struct TArray<struct FWeaponExtraModelRow>& OutRows); // Function GPGameplay.WeaponExtraModleTableManager.GetExtraModelRowsByRecId // (Final|Native|Public|HasOutParms) // @ game+0x35ef580
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GunPresetBoundsTableManager
// Size: 0x50 (Inherited: 0x38)
class UGunPresetBoundsTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x18]; // 0x38(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.PartsStyleTableManager
// Size: 0x98 (Inherited: 0x38)
class UPartsStyleTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x60]; // 0x38(0x60)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.PartsAppearnceTableManager
// Size: 0x48 (Inherited: 0x38)
class UPartsAppearnceTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.PartsMeshSocketNameInfoManager
// Size: 0x48 (Inherited: 0x38)
class UPartsMeshSocketNameInfoManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	struct FWeaponPartsSkeletalMeshSocketNameInfo GetRowByItemId(uint64_t ItemID, uint64_t SkinApperanceId); // Function GPGameplay.PartsMeshSocketNameInfoManager.GetRowByItemId // (Final|Native|Public) // @ game+0x35f0450
	struct FName GetRootBoneName(uint64_t ItemID, uint64_t SkinApperanceId, enum class EWeaponPartMeshType MeshType); // Function GPGameplay.PartsMeshSocketNameInfoManager.GetRootBoneName // (Final|Native|Public) // @ game+0x35f0180
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AttackAdapterFunctionManager
// Size: 0x48 (Inherited: 0x38)
class UAttackAdapterFunctionManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	struct FAttackerInfo GetAttackerInfo(uint64_t ItemID, int32_t CurrentDurability); // Function GPGameplay.AttackAdapterFunctionManager.GetAttackerInfo // (Final|Native|Public) // @ game+0x35ef480
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponSkinDataManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponSkinDataManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFancyColorSkinManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponFancyColorSkinManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponSkinAppearanceManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponSkinAppearanceManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.MeleeWeaponSkinManager
// Size: 0x48 (Inherited: 0x38)
class UMeleeWeaponSkinManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponVoidPartsTableManager
// Size: 0x98 (Inherited: 0x38)
class UWeaponVoidPartsTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x60]; // 0x38(0x60)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.TuneFunctionTableManager
// Size: 0x58 (Inherited: 0x38)
class UTuneFunctionTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)
	struct TArray<struct UObject*> CacheObjects; // 0x48(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.TunePartFunctionLocIDTableManager
// Size: 0x48 (Inherited: 0x38)
class UTunePartFunctionLocIDTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.SilencerVolumeScaleRowManager
// Size: 0x48 (Inherited: 0x38)
class USilencerVolumeScaleRowManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GunsmithPartFixTransformRowManager
// Size: 0x48 (Inherited: 0x38)
class UGunsmithPartFixTransformRowManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.SuggestionPresetTableManager
// Size: 0x48 (Inherited: 0x38)
class USuggestionPresetTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.PartSocketsUIAudioTableManager
// Size: 0x48 (Inherited: 0x38)
class UPartSocketsUIAudioTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPDemoNetConnection
// Size: 0x1f38 (Inherited: 0x1df0)
class UGPDemoNetConnection : public UDemoNetConnection {
public:

	char pad_1DF0[0x148]; // 0x1df0(0x148)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPDemoNetDriver
// Size: 0x1140 (Inherited: 0x1118)
class UGPDemoNetDriver : public UDemoNetDriver {
public:

	struct AMovementReplicationActor* MovementReplicationActor; // 0x1118(0x08)
	char pad_1120[0x20]; // 0x1120(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPDestructibleComponent
// Size: 0x400 (Inherited: 0x100)
class UGPDestructibleComponent : public UGPPhysicsSimulatableComponent {
public:

	struct TArray<struct FNPCHitMontageSectionName> HitMontageSectionNameArray; // 0x100(0x10)
	/*struct FMulticastInlineDelegate*/char NotifyPlayHitMontage[0x10]; // 0x110(0x10)
	/*struct FMulticastInlineDelegate*/char NotifyPlayDestructionBegin[0x10]; // 0x120(0x10)
	/*struct FMulticastInlineDelegate*/char NotifyPlayDestructionEnd[0x10]; // 0x130(0x10)
	/*struct FMulticastInlineDelegate*/char NotifyPlayDestructionPhysicsSimulation[0x10]; // 0x140(0x10)
	char pad_150[0x10]; // 0x150(0x10)
	float DebrisLifeTime; // 0x160(0x04)
	/*enum class EDestructLoadMode*/char LoadMode[0x1]; // 0x164(0x01)
	char pad_165[0x3]; // 0x165(0x03)
	/*struct TSoftObjectPtr<UStaticMesh>*/char PreBreakStaticMesh[0x28]; // 0x168(0x28)
	/*struct TSoftObjectPtr<USkeletalMesh>*/char PreBreakSkeletalMesh[0x28]; // 0x190(0x28)
	/*enum class EDestructPriorityType*/char PhysicsPriorityType[0x1]; // 0x1b8(0x01)
	/*enum class EDestructPhysicsType*/char PhysicsType[0x1]; // 0x1b9(0x01)
	/*enum class EDestructPhysicsSimulateType*/char PhysicsSimualteType[0x1]; // 0x1ba(0x01)
	char pad_1BB[0x1]; // 0x1bb(0x01)
	float DelayPlayPhysicsTime; // 0x1bc(0x04)
	float MaxPhysicsBlendTimer; // 0x1c0(0x04)
	float RigidBodyMass; // 0x1c4(0x04)
	float ImpulseStrength; // 0x1c8(0x04)
	float ImpulseRadius; // 0x1cc(0x04)
	/*struct TSoftObjectPtr<UParticleSystem>*/char BreakableParticlePath[0x28]; // 0x1d0(0x28)
	/*struct TSoftObjectPtr<UParticleSystem>*/char BreakableParticlePath_Mobile[0x28]; // 0x1f8(0x28)
	/*struct TSoftObjectPtr<UParticleSystem>*/char BreakableParticlePath_HD[0x28]; // 0x220(0x28)
	struct FName BreakableParticleFXID; // 0x248(0x08)
	float ParticleSpawnRate; // 0x250(0x04)
	bool ParticleSpawnAtDesrtuctBoundCenter; // 0x254(0x01)
	char pad_255[0x3]; // 0x255(0x03)
	struct FName ParticleSpawnRateParamName; // 0x258(0x08)
	struct FVector ParticleBoxVector; // 0x260(0x0c)
	struct FVector ParticleBoxVectorLow; // 0x26c(0x0c)
	struct FName ParticleBoxAreaParamName; // 0x278(0x08)
	struct FVector BPOriginScale; // 0x280(0x0c)
	struct FVector FinalScaleFactor; // 0x28c(0x0c)
	bool bUseScale; // 0x298(0x01)
	char pad_299[0x1]; // 0x299(0x01)
	bool bUseRotate; // 0x29a(0x01)
	char pad_29B[0x1]; // 0x29b(0x01)
	struct FVector RotateRate; // 0x29c(0x0c)
	/*struct TSoftObjectPtr<UGPAudioEventAsset>*/char BreakableSoundPath[0x28]; // 0x2a8(0x28)
	struct UGPAudioEventAsset* CachedBreakableSound; // 0x2d0(0x08)
	/*enum class EDestructPriorityType*/char AnimationPriorityType[0x1]; // 0x2d8(0x01)
	char pad_2D9[0x7]; // 0x2d9(0x07)
	/*struct TSoftObjectPtr<USkeletalMesh>*/char BreakableMeshPath[0x28]; // 0x2e0(0x28)
	struct UClass* BreakableAnimInstance; // 0x308(0x08)
	/*enum class EDestructAnimForwardType*/char AnimDirForwardType[0x1]; // 0x310(0x01)
	bool bIsEnableAnimationMultiDirectionBlend; // 0x311(0x01)
	char pad_312[0x2]; // 0x312(0x02)
	float MaxMulDirAnimationBlendTimer; // 0x314(0x04)
	/*struct TSoftObjectPtr<UAnimationAsset>*/char BreakableAnimPath[0x28]; // 0x318(0x28)
	/*struct TArray<struct FDestructAnimationInfo>*/char BreakableOverideAnimPath[0x10]; // 0x340(0x10)
	bool bIsPlayHitAnim; // 0x350(0x01)
	char pad_351[0x7]; // 0x351(0x07)
	struct UGPSkeletalMeshComponent* NewSkeletalMeshComponent; // 0x358(0x08)
	struct UStaticMeshComponent* NewStaticMeshComponent; // 0x360(0x08)
	char pad_368[0x98]; // 0x368(0x98)

	bool ShouldEnableSimulatePhysics(); // Function GPGameplay.GPDestructibleComponent.ShouldEnableSimulatePhysics // (Final|Native|Protected) // @ game+0x35f20e0
	void SetDestructionState(/*enum class EDestructState NewState*/); // Function GPGameplay.GPDestructibleComponent.SetDestructionState // (Final|Native|Public|BlueprintCallable) // @ game+0x35f1dc0
	void ResetDestruction(); // Function GPGameplay.GPDestructibleComponent.ResetDestruction // (Final|Native|Public|BlueprintCallable) // @ game+0x35f1610
	void PlayHitAnimation(float HealthRate); // Function GPGameplay.GPDestructibleComponent.PlayHitAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x35f13d0
	void OnDestructionTimeOut(); // Function GPGameplay.GPDestructibleComponent.OnDestructionTimeOut // (Final|Native|Protected) // @ game+0x35f1010
	void OnDebrisOverlap(struct UPrimitiveComponent* OverlappedComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function GPGameplay.GPDestructibleComponent.OnDebrisOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x35f0e10
	void OnDebrisCollide(struct UPrimitiveComponent* HitComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function GPGameplay.GPDestructibleComponent.OnDebrisCollide // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x35f0c40
	void OnBeforeSimulatePhysics(); // Function GPGameplay.GPDestructibleComponent.OnBeforeSimulatePhysics // (Final|Native|Protected) // @ game+0x35a3800
	void OnAnimationEnd(); // Function GPGameplay.GPDestructibleComponent.OnAnimationEnd // (Final|Native|Protected) // @ game+0x35f0c20
	bool IsSkeletalMeshBelongToComponent(struct USkeletalMeshComponent* USkeletalMeshComp); // Function GPGameplay.GPDestructibleComponent.IsSkeletalMeshBelongToComponent // (Final|Native|Public) // @ game+0x35f0b80
	bool IsNeedSimulateRootBone(); // Function GPGameplay.GPDestructibleComponent.IsNeedSimulateRootBone // (Final|Native|Protected) // @ game+0x35f0b50
	bool IsAlreadyDestruct(); // Function GPGameplay.GPDestructibleComponent.IsAlreadyDestruct // (Final|Native|Public|BlueprintCallable) // @ game+0x35f0af0
	bool EarlyOutPhysicsSimulationIfCan(); // Function GPGameplay.GPDestructibleComponent.EarlyOutPhysicsSimulationIfCan // (Final|Native|Public|BlueprintCallable) // @ game+0x35ef340
	void EarlyOutDestruction(); // Function GPGameplay.GPDestructibleComponent.EarlyOutDestruction // (Final|Native|Public|BlueprintCallable) // @ game+0x35ef320
	bool EarlyOutAnimationIfCan(); // Function GPGameplay.GPDestructibleComponent.EarlyOutAnimationIfCan // (Final|Native|Public|BlueprintCallable) // @ game+0x35ef2f0
	void DestructByDir(struct FTransform RelativeTransform, struct FVector& InHitLocation, struct FVector& InHitNormal); // Function GPGameplay.GPDestructibleComponent.DestructByDir // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x35ef160
	void Destruct(); // Function GPGameplay.GPDestructibleComponent.Destruct // (Final|Native|Public|BlueprintCallable) // @ game+0x35ef140
	void BeginPreLoadAsset(); // Function GPGameplay.GPDestructibleComponent.BeginPreLoadAsset // (Final|Native|Public|BlueprintCallable) // @ game+0x35eeb70
	void BeginPreBreakState(); // Function GPGameplay.GPDestructibleComponent.BeginPreBreakState // (Final|Native|Public|BlueprintCallable) // @ game+0x35eeb50
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPDialogSyncActionLib
// Size: 0x30 (Inherited: 0x30)
class UGPDialogSyncActionLib : public UBlueprintFunctionLibrary {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPDialogSubsystem
// Size: 0x3b0 (Inherited: 0x378)
class AGPDialogSubsystem : public ALevelSubsystem {
public:

	/*struct FMulticastInlineDelegate*/char AddDialogActionDelegate[0x10]; // 0x378(0x10)
	/*struct FMulticastInlineDelegate*/char DialogEndDelegate[0x10]; // 0x388(0x10)
	struct AActor* CurrentDialogActor; // 0x398(0x08)
	struct TArray<struct UGPDialogAsyncActionBase*> DialogActions; // 0x3a0(0x10)

	void StartDialog(struct FString DialogID, struct AActor* DialogActor); // Function GPGameplay.GPDialogSubsystem.StartDialog // (Final|Native|Public|BlueprintCallable) // @ game+0x35f7790
	struct AGPDialogSubsystem* STATIC_Get(struct UObject* WorldContextObject); // Function GPGameplay.GPDialogSubsystem.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35f6d90
	void EndCurrentDialog(); // Function GPGameplay.GPDialogSubsystem.EndCurrentDialog // (Final|Native|Public|BlueprintCallable) // @ game+0x35f69d0
	void BP_StartDialog(struct FString DialogID); // Function GPGameplay.GPDialogSubsystem.BP_StartDialog // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void BP_OnAddDialogAction(struct UGPDialogAsyncActionBase* DialogAction); // Function GPGameplay.GPDialogSubsystem.BP_OnAddDialogAction // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void BP_EndCurrentDialog(); // Function GPGameplay.GPDialogSubsystem.BP_EndCurrentDialog // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPEmitterWithAudio
// Size: 0x3d8 (Inherited: 0x3c8)
class AGPEmitterWithAudio : public AEmitter {
public:

	struct UGPAudioEventAsset* ParticleSystemActivateAudio; // 0x3c8(0x08)
	struct UGPAudioEventAsset* ParticleSystemDeactivateAudio; // 0x3d0(0x08)

	void BP_OnPartcleSystemDeactivate(); // Function GPGameplay.GPEmitterWithAudio.BP_OnPartcleSystemDeactivate // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void BP_OnPartcleSystemActivate(); // Function GPGameplay.GPEmitterWithAudio.BP_OnPartcleSystemActivate // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPExplosionEffectComponent
// Size: 0x190 (Inherited: 0x100)
class UGPExplosionEffectComponent : public UActorComponent {
public:

	bool bShouldPlayEffect; // 0x100(0x01)
	bool bShouldPlayerEffectLastState; // 0x101(0x01)
	bool bEnableFalloff; // 0x102(0x01)
	char pad_103[0x5]; // 0x103(0x05)
	struct FString PostEffectName; // 0x108(0x10)
	struct TMap<enum class EExplosionType, struct FExplosionTypeInfo> ExplosionInfoMap; // 0x118(0x50)
	struct UClass* CameraShakeType; // 0x168(0x08)
	float OuterDistance; // 0x170(0x04)
	float TotalTime; // 0x174(0x04)
	float RemainTime; // 0x178(0x04)
	float Intensity; // 0x17c(0x04)
	float CurrentIntensity; // 0x180(0x04)
	float MaxIntensity; // 0x184(0x04)
	char pad_188[0x8]; // 0x188(0x08)

	void PlayRadialBlurEffect(float InIntensity, bool bShouldPlay); // Function GPGameplay.GPExplosionEffectComponent.PlayRadialBlurEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x35f7290
	void PlayExplosionEffect(enum class EExplosionType ExplosionType, struct FVector ExplosionLocation); // Function GPGameplay.GPExplosionEffectComponent.PlayExplosionEffect // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x35f71c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPFightStateComponent
// Size: 0x118 (Inherited: 0x100)
class UGPFightStateComponent : public UActorComponent {
public:

	enum class EGPCharacterFightStateType CurrentFightStateType; // 0x100(0x01)
	enum class EGPAIMotionType CurrentMotionType; // 0x101(0x01)
	char pad_102[0x2]; // 0x102(0x02)
	int32_t StandbyAnimID; // 0x104(0x04)
	enum class EGPCharacterLeisureMoveType LeisureMoveType; // 0x108(0x01)
	enum class EGPCharacterAlertStateType CurrentAlertState; // 0x109(0x01)
	enum class EGPCharacterInCoverPoseType CurrentInCoverState; // 0x10a(0x01)
	bool bCanUseSpecialLeisureMovement; // 0x10b(0x01)
	enum class EAILeisureMovementType LeisureMovementType; // 0x10c(0x01)
	char pad_10D[0x1]; // 0x10d(0x01)
	enum class EGPCharacterFightStateType CurrentMotionFightState; // 0x10e(0x01)
	char pad_10F[0x9]; // 0x10f(0x09)

	void SetState(enum class EGPCharacterFightStateType StateType); // Function GPGameplay.GPFightStateComponent.SetState // (Final|Native|Public|BlueprintCallable) // @ game+0x35f7710
	void SetPlayerToLeisureState(bool bEnable); // Function GPGameplay.GPFightStateComponent.SetPlayerToLeisureState // (Final|Native|Public|BlueprintCallable) // @ game+0x35f7680
	void SetMotionType(enum class EGPAIMotionType NewMotionType); // Function GPGameplay.GPFightStateComponent.SetMotionType // (Final|Native|Public|BlueprintCallable) // @ game+0x35f7600
	void SetLeisureMoveType(enum class EGPCharacterLeisureMoveType moveType); // Function GPGameplay.GPFightStateComponent.SetLeisureMoveType // (Final|Native|Public|BlueprintCallable) // @ game+0x35f7580
	void SetInCoverState(enum class EGPCharacterInCoverPoseType StateType); // Function GPGameplay.GPFightStateComponent.SetInCoverState // (Final|Native|Public|BlueprintCallable) // @ game+0x35f7500
	void SetAlertState(enum class EGPCharacterAlertStateType StateType); // Function GPGameplay.GPFightStateComponent.SetAlertState // (Final|Native|Public|BlueprintCallable) // @ game+0x35f7480
	void ServerReplicatePlayerInCutSceneStateType(enum class EGPCharacterFightStateType StetaType); // Function GPGameplay.GPFightStateComponent.ServerReplicatePlayerInCutSceneStateType // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x35f73e0
	void OnRep_FightState(); // Function GPGameplay.GPFightStateComponent.OnRep_FightState // (Final|Native|Public) // @ game+0x35f71a0
	enum class EGPCharacterMoveDirStateType GetMoveDirState(); // Function GPGameplay.GPFightStateComponent.GetMoveDirState // (Final|Native|Public|BlueprintCallable) // @ game+0x35f7170
	enum class EGPAICharaLocomotionType STATIC_GetLocomotionType(enum class EGPCharacterFightStateType FightState, enum class EGPCharacterAlertStateType AlertState, enum class EGPCharacterInCoverPoseType InCoverState, bool bIsCrouch, bool bIsHalfSquat, bool bIsSprint); // Function GPGameplay.GPFightStateComponent.GetLocomotionType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35f6fb0
	enum class EGPAIMotionType GetCurrentMotionType(); // Function GPGameplay.GPFightStateComponent.GetCurrentMotionType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35f6f90
	enum class EGPCharacterFightStateType GetCurrentMotionFightState(); // Function GPGameplay.GPFightStateComponent.GetCurrentMotionFightState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35f6f70
	enum class EGPAICharaLocomotionType GetCurrentLocomotionType(); // Function GPGameplay.GPFightStateComponent.GetCurrentLocomotionType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35f6f40
	enum class EGPCharacterFightStateType GetCurrentFightStateType(); // Function GPGameplay.GPFightStateComponent.GetCurrentFightStateType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35f6f20
	enum class EGPAICharaLocomotionType STATIC_GetAICurrentLocomotionType(struct AGPCharacter* AIChara); // Function GPGameplay.GPFightStateComponent.GetAICurrentLocomotionType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35f6e10
	bool EnableProneRotator(); // Function GPGameplay.GPFightStateComponent.EnableProneRotator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35f69a0
	bool EnableAdditiveGunPos(); // Function GPGameplay.GPFightStateComponent.EnableAdditiveGunPos // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35f6970
	bool CanSpotTurn(); // Function GPGameplay.GPFightStateComponent.CanSpotTurn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35f6940
	bool CanSpeaking(); // Function GPGameplay.GPFightStateComponent.CanSpeaking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35f6910
	bool CanGunShooting(); // Function GPGameplay.GPFightStateComponent.CanGunShooting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35f68d0
	bool CanChangeClip(); // Function GPGameplay.GPFightStateComponent.CanChangeClip // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35f68a0
	bool CanAimTarget(); // Function GPGameplay.GPFightStateComponent.CanAimTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35f6870
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPFootIKInstance
// Size: 0xa60 (Inherited: 0x280)
class UGPFootIKInstance : public UAnimInstance {
public:

	struct FGPFootIKInstanceProxy LocalProxy; // 0x280(0x7e0)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ForkDSLogic
// Size: 0x3e8 (Inherited: 0x3d8)
class UForkDSLogic : public UDSLogicBase {
public:

	char pad_3D8[0x10]; // 0x3d8(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPFSMConduitInstance
// Size: 0xe0 (Inherited: 0xd8)
class UGPFSMConduitInstance : public USMConduitInstance {
public:

	struct UGPFSMInstance* FSMOwner; // 0xd8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPFSMSkillTaskBase
// Size: 0x50 (Inherited: 0x38)
class UGPFSMSkillTaskBase : public UBlueprintAsyncActionBase {
public:

	struct UGPFSMStateInstance* StateInstance; // 0x38(0x08)
	struct UGPFSMInstance* FSMOwner; // 0x40(0x08)
	struct UGPBlackboardComponent* BlackBoard; // 0x48(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPFSMLightStateInstance
// Size: 0xf0 (Inherited: 0xd0)
class UGPFSMLightStateInstance : public USMStateInstance {
public:

	struct UGPFSMInstance* FSMOwner; // 0xd0(0x08)
	char pad_D8[0x10]; // 0xd8(0x10)
	enum class EFSMCharacterState CurCharacterState; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPFSMStateMachineInstance
// Size: 0x4d0 (Inherited: 0xd8)
class UGPFSMStateMachineInstance : public USMStateMachineInstance {
public:

	struct UGPFSMInstance* FSMOwner; // 0xd8(0x08)
	struct UGPBlackboardComponent* BlackBoard; // 0xe0(0x08)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_Timeout[0x10]; // 0xe8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_StartSprint[0x10]; // 0xf8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndSprintToStop[0x10]; // 0x108(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndSprintToMoving[0x10]; // 0x118(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_Finish[0x10]; // 0x128(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_NormalToADS[0x10]; // 0x138(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_AdsToNormal[0x10]; // 0x148(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_BeginVault[0x10]; // 0x158(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndVault[0x10]; // 0x168(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_BeginOperate[0x10]; // 0x178(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndOperate[0x10]; // 0x188(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_CancelOperate[0x10]; // 0x198(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_BeginZipline[0x10]; // 0x1a8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndZipline[0x10]; // 0x1b8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_CancelZipline[0x10]; // 0x1c8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_ToLooting[0x10]; // 0x1d8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_ToReborn[0x10]; // 0x1e8(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_BuffFinish[0x10]; // 0x1f8(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Cast[0x10]; // 0x208(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Charged[0x10]; // 0x218(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Charging[0x10]; // 0x228(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Restored[0x10]; // 0x238(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_SpawnObjectFinish[0x10]; // 0x248(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Terminate[0x10]; // 0x258(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Ultimate[0x10]; // 0x268(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_NormalBreak[0x10]; // 0x278(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Timeout[0x10]; // 0x288(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Break[0x10]; // 0x298(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_BeginCharging[0x10]; // 0x2a8(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_BeginCooling[0x10]; // 0x2b8(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_BeginPreparing[0x10]; // 0x2c8(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_EndPrepare[0x10]; // 0x2d8(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_CancelPrepare[0x10]; // 0x2e8(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Yes[0x10]; // 0x2f8(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_No[0x10]; // 0x308(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_SkillEnerngyChange[0x10]; // 0x318(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Failed[0x10]; // 0x328(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_EnergyChanged[0x10]; // 0x338(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Death[0x10]; // 0x348(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Uncharged[0x10]; // 0x358(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_BeginRelaxIdle[0x10]; // 0x368(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndRelaxIdle[0x10]; // 0x378(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_ToLeftLean[0x10]; // 0x388(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_ToRightLean[0x10]; // 0x398(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndLean[0x10]; // 0x3a8(0x10)
	/*struct FMulticastInlineDelegate*/char GpfsmTransitionEvent_EndClimbLadder[0x10]; // 0x3b8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_CarryBodyGetOnVehicle[0x10]; // 0x3c8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_CarryBodyGetOffVehicle[0x10]; // 0x3d8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_BeginBeHit[0x10]; // 0x3e8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndBeHit[0x10]; // 0x3f8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_CancelBeHit[0x10]; // 0x408(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_StartAutoDriveVehicle[0x10]; // 0x418(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_CancelAutoDriveVehicle[0x10]; // 0x428(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_GetOnFlyBase[0x10]; // 0x438(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_GetOffFlyBase[0x10]; // 0x448(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_BeginUseSkill[0x10]; // 0x458(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndUseSkill[0x10]; // 0x468(0x10)
	/*struct FMulticastInlineDelegate*/char GpfsmTransitionEvent_BeginAssassinate[0x10]; // 0x478(0x10)
	/*struct FMulticastInlineDelegate*/char GpfsmTransitionEvent_EndAssassinate[0x10]; // 0x488(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_SkillToSkillADS[0x10]; // 0x498(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_SkillADSToSkill[0x10]; // 0x4a8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndRescue[0x10]; // 0x4b8(0x10)
	enum class EFSMCharacterState CurCharacterState; // 0x4c8(0x01)
	char pad_4C9[0x7]; // 0x4c9(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPFSMLightStateMachineInstance
// Size: 0xf0 (Inherited: 0xd8)
class UGPFSMLightStateMachineInstance : public USMStateMachineInstance {
public:

	struct UGPFSMInstance* FSMOwner; // 0xd8(0x08)
	struct UGPBlackboardComponent* BlackBoard; // 0xe0(0x08)
	enum class EFSMCharacterState CurCharacterState; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPFSMTransitionInstance
// Size: 0xb8 (Inherited: 0xb0)
class UGPFSMTransitionInstance : public USMTransitionInstance {
public:

	struct UGPFSMInstance* FSMOwner; // 0xb0(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPFXProxyActor
// Size: 0x478 (Inherited: 0x458)
class AGPFXProxyActor : public AFXProxyActor {
public:

	struct FSoftObjectPath GPAudioEventAsset; // 0x458(0x18)
	struct UGameAkComponent* GameAkComponent; // 0x470(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPGameDamageRecord
// Size: 0x180 (Inherited: 0x30)
class UGPGameDamageRecord : public UObject {
public:

	char pad_30[0x150]; // 0x30(0x150)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPGameEngine
// Size: 0x1030 (Inherited: 0xfb0)
class UGPGameEngine : public UGameEngine {
public:

	struct UClass* ReconnectionSystemClass; // 0xfb0(0x08)
	struct FSoftClassPath ReconnectionSystemClassName; // 0xfb8(0x18)
	struct UClass* ReconnectionSystemConfigClass; // 0xfd0(0x08)
	struct FSoftClassPath ReconnectionSystemConfigClassName; // 0xfd8(0x18)
	char pad_FF0[0x40]; // 0xff0(0x40)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPGameModeSettingSubsystem
// Size: 0x3d0 (Inherited: 0x378)
class AGPGameModeSettingSubsystem : public ALevelSubsystem {
public:

	struct FGPGameModeLogicConfig LogicConfig; // 0x378(0x30)
	struct UClass* GPEffectTriggerClass; // 0x3a8(0x08)
	struct FGPGameModeMissionConfig MissionConfig; // 0x3b0(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPGameplayConfigComponent
// Size: 0x470 (Inherited: 0x100)
class UGPGameplayConfigComponent : public UActorComponent {
public:

	struct AGPCharacter* CharacterOwner; // 0x100(0x08)
	struct FAbilityKnockbackSettingConfig KnockbackSettingConfig; // 0x108(0x88)
	int32_t ServerRushCheckSkill; // 0x190(0x04)
	float C302FallingHeight; // 0x194(0x04)
	struct TArray<int32_t> C302FallingBuff; // 0x198(0x10)
	struct TArray<int32_t> C302FallBuff; // 0x1a8(0x10)
	struct TArray<int32_t> C302PassiveBuff; // 0x1b8(0x10)
	float C302PassiveBuffCD; // 0x1c8(0x04)
	float C302FallBuffHegith; // 0x1cc(0x04)
	float C302PassiveBuffCDTime; // 0x1d0(0x04)
	float FallingDamgeCheckHeight; // 0x1d4(0x04)
	float FallingDamgeCheckHeight1; // 0x1d8(0x04)
	float FallingDamgeCheckHeight2; // 0x1dc(0x04)
	struct TArray<enum class ECharacterStateMask> C4PreFireForbid; // 0x1e0(0x10)
	struct TArray<enum class ECharacterStateMask> C4FireForbid; // 0x1f0(0x10)
	bool C4Forbid_OnlyClient; // 0x200(0x01)
	bool SkillForbit_OnlyClient; // 0x201(0x01)
	char pad_202[0x6]; // 0x202(0x06)
	struct TArray<enum class EFSMCharacterState> ResetFallingStates; // 0x208(0x10)
	float SOLKnockDownAssitTime; // 0x218(0x04)
	char pad_21C[0x4]; // 0x21c(0x04)
	struct TArray<struct FName> FPPSkillMeshNames; // 0x220(0x10)
	struct TArray<struct FName> TPPSkillMeshNames; // 0x230(0x10)
	struct FName SkillPanelName; // 0x240(0x08)
	struct FName KnockBackEnermyVoice; // 0x248(0x08)
	struct FName RushVoice; // 0x250(0x08)
	float RushVoiceTimeX; // 0x258(0x04)
	float RushVoiceTimeY; // 0x25c(0x04)
	struct TArray<int32_t> BattleFiledSupportSkills; // 0x260(0x10)
	struct TArray<int32_t> FastResuceFromDead; // 0x270(0x10)
	float MaxRushHeight; // 0x280(0x04)
	float JumpMaxRushHeight; // 0x284(0x04)
	struct TArray<enum class ECharacterStateMask> CommonLockAbilitys; // 0x288(0x10)
	struct TArray<enum class ECharacterStateMask> SkillRTTCommonUnLockAbilitys; // 0x298(0x10)
	int32_t Rep3pExcuteNum; // 0x2a8(0x04)
	char pad_2AC[0x4]; // 0x2ac(0x04)
	struct TArray<int32_t> CanSlidingTackleHeroList; // 0x2b0(0x10)
	int64_t GoldC301ID; // 0x2c0(0x08)
	bool bSkillUsePreload; // 0x2c8(0x01)
	char pad_2C9[0x7]; // 0x2c9(0x07)
	struct UGPAudioEventAsset* StartAudio; // 0x2d0(0x08)
	struct UGPAudioEventAsset* EndAudio; // 0x2d8(0x08)
	struct UGPAudioEventAsset* CdAudio; // 0x2e0(0x08)
	struct UGPAudioEventAsset* FaildAudio; // 0x2e8(0x08)
	bool bInitAudio; // 0x2f0(0x01)
	char pad_2F1[0x7]; // 0x2f1(0x07)
	/*struct TSoftObjectPtr<UGPAudioEventAsset>*/char StartAudioEvent[0x28]; // 0x2f8(0x28)
	/*struct TSoftObjectPtr<UGPAudioEventAsset>*/char EndAudioEvent[0x28]; // 0x320(0x28)
	/*struct TSoftObjectPtr<UGPAudioEventAsset>*/char CDDoneAudioEvent[0x28]; // 0x348(0x28)
	/*struct TSoftObjectPtr<UGPAudioEventAsset>*/char FaildAudioEvent[0x28]; // 0x370(0x28)
	bool StingerUseThirdWeapon; // 0x398(0x01)
	bool StingerUseCameraDir; // 0x399(0x01)
	char pad_39A[0x2]; // 0x39a(0x02)
	int32_t StingerWeaponType; // 0x39c(0x04)
	int32_t StingerLockTryTime; // 0x3a0(0x04)
	bool StingerOnlyCheckAmmo; // 0x3a4(0x01)
	bool DSStingerChecker; // 0x3a5(0x01)
	bool StingerCheckDir; // 0x3a6(0x01)
	char pad_3A7[0x1]; // 0x3a7(0x01)
	int64_t StingerCheckType; // 0x3a8(0x08)
	int64_t StingerCheckTypeValue; // 0x3b0(0x08)
	bool AttachMeshAddToRoot; // 0x3b8(0x01)
	char pad_3B9[0x3]; // 0x3b9(0x03)
	struct FLinearColor AmmoColorFirst; // 0x3bc(0x10)
	struct FLinearColor AmmoColorSecond; // 0x3cc(0x10)
	struct FLinearColor AmmoColorThird; // 0x3dc(0x10)
	char pad_3EC[0x4]; // 0x3ec(0x04)
	struct TMap<int32_t, struct FFastRescueResouce> ExpertFastRescueResouce; // 0x3f0(0x50)
	struct TArray<int32_t> ExpertRecoverHealthRescue; // 0x440(0x10)
	bool bServerUnEquipSkillWeapon; // 0x450(0x01)
	bool bClientUnEquipSkillWeapon; // 0x451(0x01)
	char pad_452[0x6]; // 0x452(0x06)
	struct TArray<enum class EGPWeaponInnerEvent> PreFireLockEvent; // 0x458(0x10)
	float LongJumpTime; // 0x468(0x04)
	char pad_46C[0x4]; // 0x46c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPGameplayDelegates
// Size: 0x16c0 (Inherited: 0x38)
class UGPGameplayDelegates : public UWorldSubsystem {
public:

	/*struct FMulticastInlineDelegate*/char OnClientSelfDied[0x10]; // 0x38(0x10)
	/*struct FMulticastInlineDelegate*/char OnClientSelfReborn[0x10]; // 0x48(0x10)
	char pad_58[0x30]; // 0x58(0x30)
	/*struct FMulticastInlineDelegate*/char OnClientOBTeamItemCheckStatusChanged[0x10]; // 0x88(0x10)
	/*struct FMulticastInlineDelegate*/char OnClientCharacterLiveStatusChanged[0x10]; // 0x98(0x10)
	/*struct FMulticastInlineDelegate*/char OnClientAICharacterBorn[0x10]; // 0xa8(0x10)
	/*struct FMulticastInlineDelegate*/char OnClientAICharacterDied[0x10]; // 0xb8(0x10)
	/*struct FMulticastInlineDelegate*/char OnSeamlessEnterMapOpen[0x10]; // 0xc8(0x10)
	/*struct FMulticastInlineDelegate*/char OnSeamlessEnterMapClose[0x10]; // 0xd8(0x10)
	/*struct FMulticastInlineDelegate*/char OnSeamlessEnterComplete[0x10]; // 0xe8(0x10)
	/*struct FMulticastInlineDelegate*/char OnClientReceiveWeaponStoreItemsInArmBag[0x10]; // 0xf8(0x10)
	/*struct FMulticastInlineDelegate*/char OnClientReceiveWeaponStore[0x10]; // 0x108(0x10)
	/*struct FMulticastInlineDelegate*/char OnClientReceiveWeaponPresetStore[0x10]; // 0x118(0x10)
	/*struct FMulticastInlineDelegate*/char OnClientReceiveSwitchWeaponPreset[0x10]; // 0x128(0x10)
	/*struct FMulticastInlineDelegate*/char OnClientReceiveSwitchWeaponItemResult[0x10]; // 0x138(0x10)
	/*struct FMulticastInlineDelegate*/char OnClientReceiveInGameUnlockWeapon[0x10]; // 0x148(0x10)
	/*struct FMulticastInlineDelegate*/char OnCharacterDyingToBeDeadBox[0x10]; // 0x158(0x10)
	/*struct FMulticastInlineDelegate*/char OnPlayerControllerShiftKeyPressed[0x10]; // 0x168(0x10)
	/*struct FMulticastInlineDelegate*/char OnPlayerControllerSwithCameraMode[0x10]; // 0x178(0x10)
	/*struct FMulticastInlineDelegate*/char OnPlayerControllerSwitchZoomState[0x10]; // 0x188(0x10)
	/*struct FMulticastInlineDelegate*/char OnPlayerControllerSwitchOpenSight[0x10]; // 0x198(0x10)
	/*struct FMulticastInlineDelegate*/char OnPlayerControllerCancelAimState[0x10]; // 0x1a8(0x10)
	/*struct FMulticastInlineDelegate*/char OnAddSubtitle[0x10]; // 0x1b8(0x10)
	/*struct FMulticastInlineDelegate*/char OnRemoveSubtitle[0x10]; // 0x1c8(0x10)
	/*struct FMulticastInlineDelegate*/char OnShowSubtitle[0x10]; // 0x1d8(0x10)
	/*struct FMulticastInlineDelegate*/char OnHideSubtitle[0x10]; // 0x1e8(0x10)
	char pad_1F8[0x10]; // 0x1f8(0x10)
	/*struct FMulticastInlineDelegate*/char OnClientBattleRankScoreChange[0x10]; // 0x208(0x10)
	/*struct FMulticastInlineDelegate*/char OnClientBattleRankLevelChange[0x10]; // 0x218(0x10)
	/*struct FMulticastInlineDelegate*/char OnPlayerControllerWeaponReload[0x10]; // 0x228(0x10)
	char pad_238[0x40]; // 0x238(0x40)
	/*struct FMulticastInlineDelegate*/char OnLocalPlayerBasePoseStatusChanged[0x10]; // 0x278(0x10)
	char pad_288[0x20]; // 0x288(0x20)
	/*struct FMulticastInlineDelegate*/char OnAutonomousOrServerJumpStatusChanged[0x10]; // 0x2a8(0x10)
	/*struct FMulticastInlineDelegate*/char OnAutonomousOrServerIsMovingChanged[0x10]; // 0x2b8(0x10)
	/*struct FMulticastInlineDelegate*/char OnAutonomousOrServerFirstFiringEvent[0x10]; // 0x2c8(0x10)
	/*struct FMulticastInlineDelegate*/char OnAutonomousOrServerAimStatusEvent[0x10]; // 0x2d8(0x10)
	/*struct FMulticastInlineDelegate*/char OnAutonomousOrServerBasePoseStatusChanged[0x10]; // 0x2e8(0x10)
	char pad_2F8[0x80]; // 0x2f8(0x80)
	/*struct FMulticastInlineDelegate*/char OnPlayerArmedForceChanged[0x10]; // 0x378(0x10)
	/*struct FMulticastInlineDelegate*/char OnSkillEntityAdded[0x10]; // 0x388(0x10)
	/*struct FMulticastInlineDelegate*/char OnPlayerHeroIdChanged[0x10]; // 0x398(0x10)
	/*struct FMulticastInlineDelegate*/char OnPlayerBagIdChanged[0x10]; // 0x3a8(0x10)
	/*struct FMulticastInlineDelegate*/char OnClientPlayerHeroIDChanged[0x10]; // 0x3b8(0x10)
	char pad_3C8[0x280]; // 0x3c8(0x280)
	/*struct FMulticastInlineDelegate*/char OnWeaponPostFire[0x10]; // 0x648(0x10)
	char pad_658[0x228]; // 0x658(0x228)
	/*struct FMulticastInlineDelegate*/char GetLuaQuestData[0x10]; // 0x880(0x10)
	/*struct FMulticastInlineDelegate*/char OnClientLocalPlayerHPChangedSignature[0x10]; // 0x890(0x10)
	/*struct FMulticastInlineDelegate*/char OnClientLocalPlayerMaxHPChangedSignature[0x10]; // 0x8a0(0x10)
	char pad_8B0[0x50]; // 0x8b0(0x50)
	/*struct FMulticastInlineDelegate*/char OnServerGMGotoComplete[0x10]; // 0x900(0x10)
	char pad_910[0xa0]; // 0x910(0xa0)
	/*struct FMulticastInlineDelegate*/char RefreshKillerMarkView[0x10]; // 0x9b0(0x10)
	/*struct FMulticastInlineDelegate*/char OnAbilityInteractEvent[0x10]; // 0x9c0(0x10)
	/*struct FMulticastInlineDelegate*/char OnCampReplicate[0x10]; // 0x9d0(0x10)
	/*struct FMulticastInlineDelegate*/char OnForcesIdReplicate[0x10]; // 0x9e0(0x10)
	/*struct FMulticastInlineDelegate*/char OnLocalPSReplicate[0x10]; // 0x9f0(0x10)
	/*struct FMulticastInlineDelegate*/char OnClientEnemyCharacterBeginFire[0x10]; // 0xa00(0x10)
	/*struct FMulticastInlineDelegate*/char OnClientWeaponBeginFireNtf[0x10]; // 0xa10(0x10)
	/*struct FMulticastInlineDelegate*/char OnAbilityVehicleOperate[0x10]; // 0xa20(0x10)
	/*struct FMulticastInlineDelegate*/char GPPlayerAbilityCast[0x10]; // 0xa30(0x10)
	/*struct FMulticastInlineDelegate*/char GPPlayerAbilityCastFailed[0x10]; // 0xa40(0x10)
	/*struct FMulticastInlineDelegate*/char OnUseSkill[0x10]; // 0xa50(0x10)
	/*struct FMulticastInlineDelegate*/char OnSkillChargingDone[0x10]; // 0xa60(0x10)
	char pad_A70[0x18]; // 0xa70(0x18)
	/*struct FMulticastInlineDelegate*/char OnCharacterSubFire[0x10]; // 0xa88(0x10)
	/*struct FMulticastInlineDelegate*/char OnCharacterNormalFire[0x10]; // 0xa98(0x10)
	/*struct FMulticastInlineDelegate*/char OnDetectorBigMapClose[0x10]; // 0xaa8(0x10)
	/*struct FMulticastInlineDelegate*/char StaminaNotEnoughFlushDelegate[0x10]; // 0xab8(0x10)
	/*struct FMulticastInlineDelegate*/char ViewportClientFocusStatusChange[0x10]; // 0xac8(0x10)
	/*struct FMulticastInlineDelegate*/char ViewportClientActiveStatusChange[0x10]; // 0xad8(0x10)
	/*struct FMulticastInlineDelegate*/char JoystickModeChangeDelegate[0x10]; // 0xae8(0x10)
	/*struct FMulticastInlineDelegate*/char NotifyZiplineCooldown[0x10]; // 0xaf8(0x10)
	/*struct FMulticastInlineDelegate*/char NotifyZiplineAvailable[0x10]; // 0xb08(0x10)
	/*struct FMulticastInlineDelegate*/char NotifyCanUseZipline[0x10]; // 0xb18(0x10)
	/*struct FMulticastInlineDelegate*/char NotifyCanCarryBody[0x10]; // 0xb28(0x10)
	/*struct FMulticastInlineDelegate*/char NotifyCanUseParachute[0x10]; // 0xb38(0x10)
	/*struct FMulticastInlineDelegate*/char NotifyCanPullOutArrow[0x10]; // 0xb48(0x10)
	/*struct FMulticastInlineDelegate*/char NotifyCanFirefighting[0x10]; // 0xb58(0x10)
	/*struct FMulticastInlineDelegate*/char NotifyZoyaSwarms[0x10]; // 0xb68(0x10)
	/*struct FMulticastInlineDelegate*/char NotifyJumpImageChange[0x10]; // 0xb78(0x10)
	/*struct FMulticastInlineDelegate*/char NotifyCrouchImageChange[0x10]; // 0xb88(0x10)
	/*struct FMulticastInlineDelegate*/char OnSwitchTacticalEquip[0x10]; // 0xb98(0x10)
	/*struct FMulticastInlineDelegate*/char OnOpenPowerFlash[0x10]; // 0xba8(0x10)
	/*struct FMulticastInlineDelegate*/char OnRepInventoryItem[0x10]; // 0xbb8(0x10)
	/*struct FMulticastInlineDelegate*/char OnBipTipShow[0x10]; // 0xbc8(0x10)
	/*struct FMulticastInlineDelegate*/char NotifyPowerFlashState[0x10]; // 0xbd8(0x10)
	/*struct FMulticastInlineDelegate*/char OnShowTacticalEquipDetailPanel[0x10]; // 0xbe8(0x10)
	/*struct FDelegate*/char NotifyToAddMarker[0x10]; // 0xbf8(0x10)
	/*struct FDelegate*/char NotifyToRemoveMarker[0x10]; // 0xc08(0x10)
	/*struct FMulticastInlineDelegate*/char NotifyAddUnitMarking[0x10]; // 0xc18(0x10)
	/*struct FMulticastInlineDelegate*/char NotifyRemoveUnitMarking[0x10]; // 0xc28(0x10)
	/*struct FMulticastInlineDelegate*/char OnCharacterHitOthers[0x10]; // 0xc38(0x10)
	/*struct FMulticastInlineDelegate*/char OnSkillWeaponSlotUpdated[0x10]; // 0xc48(0x10)
	/*struct FMulticastInlineDelegate*/char OnDetectorMarkerEffectApplyWithType[0x10]; // 0xc58(0x10)
	/*struct FMulticastInlineDelegate*/char OnDetectorMarkerShow[0x10]; // 0xc68(0x10)
	/*struct FMulticastInlineDelegate*/char OnAbilitySpawnActorCreated[0x10]; // 0xc78(0x10)
	/*struct FMulticastInlineDelegate*/char OnAbilitySpawnActorTrigger[0x10]; // 0xc88(0x10)
	char pad_C98[0x70]; // 0xc98(0x70)
	/*struct FMulticastInlineDelegate*/char OnSkillApplyAssaultEffect[0x10]; // 0xd08(0x10)
	char pad_D18[0x58]; // 0xd18(0x58)
	/*struct FMulticastInlineDelegate*/char OnSkillBPEvent[0x10]; // 0xd70(0x10)
	char pad_D80[0xa8]; // 0xd80(0xa8)
	/*struct FMulticastInlineDelegate*/char OnChargeGunStateChange[0x10]; // 0xe28(0x10)
	/*struct FMulticastInlineDelegate*/char OnBowSetStateChange[0x10]; // 0xe38(0x10)
	/*struct FMulticastInlineDelegate*/char OnThrowBlockingStateChange[0x10]; // 0xe48(0x10)
	char pad_E58[0x48]; // 0xe58(0x48)
	/*struct FMulticastInlineDelegate*/char OnBowCancelChargingBtnClicked[0x10]; // 0xea0(0x10)
	/*struct FMulticastInlineDelegate*/char OnC202TracingEnemyViewHide[0x10]; // 0xeb0(0x10)
	/*struct FMulticastInlineDelegate*/char OnC202UpdateBeTracingLevel[0x10]; // 0xec0(0x10)
	/*struct FMulticastInlineDelegate*/char OnLocalPlaySilentMoveStateChanged[0x10]; // 0xed0(0x10)
	char pad_EE0[0x30]; // 0xee0(0x30)
	/*struct FDelegate*/char NotifyToAddAbilityLocker[0x10]; // 0xf10(0x10)
	/*struct FDelegate*/char NotifyToRemoveAbilityLocker[0x10]; // 0xf20(0x10)
	/*struct FDelegate*/char GPSetSkillItemVisible[0x10]; // 0xf30(0x10)
	/*struct FMulticastInlineDelegate*/char OnSetSkillButtonVisible[0x10]; // 0xf40(0x10)
	/*struct FMulticastInlineDelegate*/char OnDetectorEnemyChanged[0x10]; // 0xf50(0x10)
	/*struct FMulticastInlineDelegate*/char OnUseAccessory[0x10]; // 0xf60(0x10)
	/*struct FMulticastInlineDelegate*/char BipodStatusChange[0x10]; // 0xf70(0x10)
	/*struct FMulticastInlineDelegate*/char OnKillStreak[0x10]; // 0xf80(0x10)
	/*struct FMulticastInlineDelegate*/char OnNeedAmmo[0x10]; // 0xf90(0x10)
	/*struct FMulticastInlineDelegate*/char BattleFieldRebronEstimate[0x10]; // 0xfa0(0x10)
	/*struct FMulticastInlineDelegate*/char BattleFieldReLoadAmmo[0x10]; // 0xfb0(0x10)
	/*struct FMulticastInlineDelegate*/char BattleFieldIntoSuppressedState[0x10]; // 0xfc0(0x10)
	/*struct FMulticastInlineDelegate*/char BattleFieldAimEnemy[0x10]; // 0xfd0(0x10)
	/*struct FMulticastInlineDelegate*/char BattleFieldKnockedDownHalf[0x10]; // 0xfe0(0x10)
	/*struct FMulticastInlineDelegate*/char ClimbLadderStepVoiceDelegate[0x10]; // 0xff0(0x10)
	/*struct FMulticastInlineDelegate*/char UpdateRightKeyTipsSkillData[0x10]; // 0x1000(0x10)
	/*struct FMulticastInlineDelegate*/char ClearRightKeyTipsSkillData[0x10]; // 0x1010(0x10)
	char pad_1020[0x80]; // 0x1020(0x80)
	/*struct FMulticastInlineDelegate*/char OnPlayerStateMemberInfoListUpdate[0x10]; // 0x10a0(0x10)
	char pad_10B0[0x30]; // 0x10b0(0x30)
	/*struct FMulticastInlineDelegate*/char OnPlayerStateMemberInfoListLengthChanged[0x10]; // 0x10e0(0x10)
	char pad_10F0[0x10]; // 0x10f0(0x10)
	/*struct FMulticastInlineDelegate*/char OnPlayerGamePlayStateChanged[0x10]; // 0x1100(0x10)
	char pad_1110[0x90]; // 0x1110(0x90)
	/*struct FDelegate*/char OnOpenSystemSettingHDEntrance[0x10]; // 0x11a0(0x10)
	/*struct FMulticastInlineDelegate*/char OnQuestTryDisplayDialog[0x10]; // 0x11b0(0x10)
	/*struct FMulticastInlineDelegate*/char OnTryReloadDelegate[0x10]; // 0x11c0(0x10)
	/*struct FDelegate*/char DFHDActionTipsShow[0x10]; // 0x11d0(0x10)
	/*struct FDelegate*/char DFHDActionTipsClose[0x10]; // 0x11e0(0x10)
	/*struct FDelegate*/char DFHDActionTipsUpdatePressedProgress[0x10]; // 0x11f0(0x10)
	/*struct FDelegate*/char DFHDActionTipsPlayAnim[0x10]; // 0x1200(0x10)
	/*struct FDelegate*/char DFHDActionTipsStopAnim[0x10]; // 0x1210(0x10)
	/*struct FMulticastInlineDelegate*/char OnInteractorPostProcessOutline[0x10]; // 0x1220(0x10)
	/*struct FMulticastInlineDelegate*/char TryInteractKeyDown[0x10]; // 0x1230(0x10)
	char pad_1240[0x10]; // 0x1240(0x10)
	/*struct FMulticastInlineDelegate*/char OnWatchFightInputEvent[0x10]; // 0x1250(0x10)
	/*struct FMulticastInlineDelegate*/char OnClientResetSpectateEvent[0x10]; // 0x1260(0x10)
	/*struct FMulticastInlineDelegate*/char OnMarkLogicInputKey[0x10]; // 0x1270(0x10)
	/*struct FMulticastInlineDelegate*/char SubtitleSeqStartDelegate[0x10]; // 0x1280(0x10)
	/*struct FMulticastInlineDelegate*/char SubtitleSeqEndDelegate[0x10]; // 0x1290(0x10)
	/*struct FMulticastInlineDelegate*/char SubtitleStartDelegate[0x10]; // 0x12a0(0x10)
	/*struct FMulticastInlineDelegate*/char SubtitleEndDelegate[0x10]; // 0x12b0(0x10)
	/*struct FMulticastInlineDelegate*/char SubtitleSeqFinishedDelegate[0x10]; // 0x12c0(0x10)
	/*struct FMulticastInlineDelegate*/char SubtitleGroupInteractorKeyPressedDelegate[0x10]; // 0x12d0(0x10)
	/*struct FMulticastInlineDelegate*/char OnRefreshVehicleHUD[0x10]; // 0x12e0(0x10)
	/*struct FMulticastInlineDelegate*/char OnGetOnVehicle[0x10]; // 0x12f0(0x10)
	/*struct FMulticastInlineDelegate*/char OnSwitchSeatOnVehicle[0x10]; // 0x1300(0x10)
	/*struct FMulticastInlineDelegate*/char OnGetOffVehicle[0x10]; // 0x1310(0x10)
	/*struct FMulticastInlineDelegate*/char OnVehicleBeginFire[0x10]; // 0x1320(0x10)
	/*struct FMulticastInlineDelegate*/char OnHelicopterMoveStateChange[0x10]; // 0x1330(0x10)
	/*struct FMulticastInlineDelegate*/char QuestChangeHelicopterPath[0x10]; // 0x1340(0x10)
	/*struct FMulticastInlineDelegate*/char OnAbilityIncendiaryAreaSpawned[0x10]; // 0x1350(0x10)
	char pad_1360[0x20]; // 0x1360(0x20)
	/*struct FMulticastInlineDelegate*/char GPCharacterLandedDelegate[0x10]; // 0x1380(0x10)
	/*struct FMulticastInlineDelegate*/char GPCharacterJumpDelegate[0x10]; // 0x1390(0x10)
	/*struct FMulticastInlineDelegate*/char OnServerPlayerStartSlidingTackle[0x10]; // 0x13a0(0x10)
	/*struct FMulticastInlineDelegate*/char OnServerPlayerEndSlidingTackle[0x10]; // 0x13b0(0x10)
	char pad_13C0[0xf0]; // 0x13c0(0xf0)
	/*struct FMulticastInlineDelegate*/char OnServerAllPlayerLoadLevelCompleted[0x10]; // 0x14b0(0x10)
	/*struct FMulticastInlineDelegate*/char OnHoldSmokeWallSkill[0x10]; // 0x14c0(0x10)
	/*struct FMulticastInlineDelegate*/char OnMyMaxSoundLevelChanged[0x10]; // 0x14d0(0x10)
	/*struct FMulticastInlineDelegate*/char OnShowSkillDetail[0x10]; // 0x14e0(0x10)
	/*struct FMulticastInlineDelegate*/char OnSetSkillDetail[0x10]; // 0x14f0(0x10)
	/*struct FMulticastInlineDelegate*/char OnShowSkillProcessBarAction[0x10]; // 0x1500(0x10)
	/*struct FMulticastInlineDelegate*/char OnPlayerMarkEnemy[0x10]; // 0x1510(0x10)
	/*struct FMulticastInlineDelegate*/char OnPlayerItemMarkingInfoArrayChange[0x10]; // 0x1520(0x10)
	char pad_1530[0x38]; // 0x1530(0x38)
	/*struct FMulticastInlineDelegate*/char OnWeaponHudViewShowChanged[0x10]; // 0x1568(0x10)
	/*struct FMulticastInlineDelegate*/char CountDownChangedNtf[0x10]; // 0x1578(0x10)
	/*struct FMulticastInlineDelegate*/char OnDebugAILabSys[0x10]; // 0x1588(0x10)
	/*struct FMulticastInlineDelegate*/char OnPVPAIPreKick[0x10]; // 0x1598(0x10)
	/*struct FMulticastInlineDelegate*/char OnScopeZoomRateChanged[0x10]; // 0x15a8(0x10)
	/*struct FMulticastInlineDelegate*/char NotifyScopeRouletteDisable[0x10]; // 0x15b8(0x10)
	/*struct FMulticastInlineDelegate*/char OnIsSlopingValueChanged[0x10]; // 0x15c8(0x10)
	/*struct FMulticastInlineDelegate*/char SimulatedCameraModeChangedDel[0x10]; // 0x15d8(0x10)
	/*struct FMulticastInlineDelegate*/char NotifyCanSuperSprint[0x10]; // 0x15e8(0x10)
	char pad_15F8[0x10]; // 0x15f8(0x10)
	/*struct FMulticastInlineDelegate*/char ServerCollectionWeaponUsingTime[0x10]; // 0x1608(0x10)
	/*struct FMulticastInlineDelegate*/char OnPlayerMarking[0x10]; // 0x1618(0x10)
	/*struct FMulticastInlineDelegate*/char OnPersistBubbleStateChanged[0x10]; // 0x1628(0x10)
	/*struct FMulticastInlineDelegate*/char OnGuidePopFunctionDescClosed[0x10]; // 0x1638(0x10)
	/*struct FMulticastInlineDelegate*/char OnGuideClickUIClosed[0x10]; // 0x1648(0x10)
	/*struct FMulticastInlineDelegate*/char OnSonicDirTargetChange[0x10]; // 0x1658(0x10)
	/*struct FMulticastInlineDelegate*/char OnPreviewLocationValidChanged[0x10]; // 0x1668(0x10)
	/*struct FMulticastInlineDelegate*/char OnUseFireForAimChanged[0x10]; // 0x1678(0x10)
	char pad_1688[0x38]; // 0x1688(0x38)

	struct UGPGameplayDelegates* STATIC_Get(struct UObject* WorldContext); // Function GPGameplay.GPGameplayDelegates.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3602f70
	void BroadcastSkillBPEvent(struct FName Key, struct FName Value); // Function GPGameplay.GPGameplayDelegates.BroadcastSkillBPEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x3602eb0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPGameplayGlobalDelegates
// Size: 0x290 (Inherited: 0x38)
class UGPGameplayGlobalDelegates : public UGameInstanceSubsystem {
public:

	/*struct FMulticastInlineDelegate*/char OnPlayerUseItemKeyDown[0x10]; // 0x38(0x10)
	/*struct FMulticastInlineDelegate*/char OnHUDHealthDamaged[0x10]; // 0x48(0x10)
	/*struct FMulticastInlineDelegate*/char OnHUDVehicleHealthDamaged[0x10]; // 0x58(0x10)
	/*struct FMulticastInlineDelegate*/char OnHUDHitFeedBack[0x10]; // 0x68(0x10)
	/*struct FMulticastInlineDelegate*/char EnginVehicleLowPower[0x10]; // 0x78(0x10)
	/*struct FMulticastInlineDelegate*/char EnginVehicleDestroy[0x10]; // 0x88(0x10)
	/*struct FMulticastInlineDelegate*/char OnPlayerEnterIrisReady[0x10]; // 0x98(0x10)
	/*struct FMulticastInlineDelegate*/char OnIrisSafeHouseResetHUD[0x10]; // 0xa8(0x10)
	/*struct FMulticastInlineDelegate*/char OnIrisSafeHouseSetStarLinkVisable[0x10]; // 0xb8(0x10)
	/*struct FMulticastInlineDelegate*/char OnEnterIrisSafeHouse[0x10]; // 0xc8(0x10)
	/*struct FMulticastInlineDelegate*/char OnEnter3DSafeHouse[0x10]; // 0xd8(0x10)
	/*struct FMulticastInlineDelegate*/char OnEnterRange[0x10]; // 0xe8(0x10)
	/*struct FMulticastInlineDelegate*/char OnPlayerExitSpectateMode[0x10]; // 0xf8(0x10)
	/*struct FMulticastInlineDelegate*/char OnStartLocalFocus[0x10]; // 0x108(0x10)
	/*struct FMulticastInlineDelegate*/char OnStopLocalFocus[0x10]; // 0x118(0x10)
	/*struct FMulticastInlineDelegate*/char OnLocalPlayerPawnChanged[0x10]; // 0x128(0x10)
	/*struct FMulticastInlineDelegate*/char OnOBFreeCameraStateModify[0x10]; // 0x138(0x10)
	/*struct FMulticastInlineDelegate*/char OnRoleLoadChanged[0x10]; // 0x148(0x10)
	/*struct FMulticastInlineDelegate*/char OnRoleLoadTypeChanged[0x10]; // 0x158(0x10)
	/*struct FMulticastInlineDelegate*/char OnTurnInItemInfo[0x10]; // 0x168(0x10)
	/*struct FMulticastInlineDelegate*/char OnNpcTurnInItemInfo[0x10]; // 0x178(0x10)
	/*struct FMulticastInlineDelegate*/char OnMissionReplay[0x10]; // 0x188(0x10)
	char pad_198[0x10]; // 0x198(0x10)
	/*struct FMulticastInlineDelegate*/char OnStartReplayRecording[0x10]; // 0x1a8(0x10)
	/*struct FMulticastInlineDelegate*/char OnStopReplayRecording[0x10]; // 0x1b8(0x10)
	/*struct FMulticastInlineDelegate*/char OnLoadAllReplayFilesComplete[0x10]; // 0x1c8(0x10)
	/*struct FMulticastInlineDelegate*/char OnPlayReplay[0x10]; // 0x1d8(0x10)
	/*struct FMulticastInlineDelegate*/char OnStopReplay[0x10]; // 0x1e8(0x10)
	/*struct FMulticastInlineDelegate*/char OnNetDisconnect[0x10]; // 0x1f8(0x10)
	/*struct FMulticastInlineDelegate*/char OnNetReconnectSuccess[0x10]; // 0x208(0x10)
	/*struct FMulticastInlineDelegate*/char OnNetReconnectFail[0x10]; // 0x218(0x10)
	/*struct FMulticastInlineDelegate*/char OpenLuaRuntimeDebug[0x10]; // 0x228(0x10)
	/*struct FMulticastInlineDelegate*/char OnBroadcastPlayGameFlow[0x10]; // 0x238(0x10)
	/*struct FMulticastInlineDelegate*/char OnGPGamePlayerPostLogin[0x10]; // 0x248(0x10)
	char pad_258[0x18]; // 0x258(0x18)
	/*struct FMulticastInlineDelegate*/char OnDisplayMetricsChangedHD[0x10]; // 0x270(0x10)
	/*struct FMulticastInlineDelegate*/char OnKillcamEndShowSettlement[0x10]; // 0x280(0x10)

	struct UGPGameplayGlobalDelegates* STATIC_Get(struct UObject* WorldContext); // Function GPGameplay.GPGameplayGlobalDelegates.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3603030
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCharacterDataAsset
// Size: 0x1f8 (Inherited: 0x38)
class UGPCharacterDataAsset : public UDataAsset {
public:

	struct FVector RescuePointL; // 0x38(0x0c)
	struct FVector RescuePointR; // 0x44(0x0c)
	struct FVector RescuePointRStandPoseSol; // 0x50(0x0c)
	struct FVector RescuePointRCrouchPoseSol; // 0x5c(0x0c)
	struct FVector RescuePointRPronePoseSol; // 0x68(0x0c)
	struct FVector RescuePointRStandPoseBat; // 0x74(0x0c)
	struct FVector RescuePointRCrouchPoseBat; // 0x80(0x0c)
	struct FVector RescuePointRPronePoseBat; // 0x8c(0x0c)
	enum class ECharacterLogicPoseType BeRescueEndToBasePose; // 0x98(0x01)
	enum class ECharacterLogicPoseType MPBeRescueEndToBasePose; // 0x99(0x01)
	enum class ECollisionChannel ProjectileCollisionChannel; // 0x9a(0x01)
	char pad_9B[0x5]; // 0x9b(0x05)
	struct TArray<struct FPreStateRTTInfo> PreStateRTTArray; // 0xa0(0x10)
	struct TMap<char, struct FLODInfoArray> CharacterPartToLODInfoMap; // 0xb0(0x50)
	struct TMap<char, struct FLODInfoArray> AICharacterPartToLODInfoMap; // 0x100(0x50)
	struct TMap<char, struct FLODInfoArray> CharacterPartToLODInfoMap_PC; // 0x150(0x50)
	struct TMap<char, struct FLODInfoArray> AICharacterPartToLODInfoMap_PC; // 0x1a0(0x50)
	float ResetWalkingPositionCD; // 0x1f0(0x04)
	char pad_1F4[0x4]; // 0x1f4(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPGameplayStatics
// Size: 0x30 (Inherited: 0x30)
class UGPGameplayStatics : public UGameplayStatics {
public:


	bool STATIC_StartLocalDS(struct FString Params); // Function GPGameplay.GPGameplayStatics.StartLocalDS // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36088c0
	void STATIC_ShowConfirmWindowWithSingleBtn(struct UObject* ObjectContext, struct FText Texts); // Function GPGameplay.GPGameplayStatics.ShowConfirmWindowWithSingleBtn // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36086d0
	void STATIC_ShowCommonTips(struct UObject* ObjectContext, struct FText Tips, float ShowTime, bool bPositive, bool bShowInMobile, bool bShowInHD); // Function GPGameplay.GPGameplayStatics.ShowCommonTips // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36084b0
	void STATIC_LoadTODLevel(struct UWorld* InWorld); // Function GPGameplay.GPGameplayStatics.LoadTODLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3607d90
	void STATIC_HideActiveCommonTips(struct UObject* ObjectContext); // Function GPGameplay.GPGameplayStatics.HideActiveCommonTips // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3607d20
	struct FName STATIC_GetWorldName(struct UObject* ObjectContetx); // Function GPGameplay.GPGameplayStatics.GetWorldName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3607c90
	struct FString STATIC_GetExecutableFilePath(); // Function GPGameplay.GPGameplayStatics.GetExecutableFilePath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3607b40
	struct APlayerController* STATIC_GetClientFirstNetPlayerController(struct UObject* ObjectContetx); // Function GPGameplay.GPGameplayStatics.GetClientFirstNetPlayerController // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3607ac0
	struct FName STATIC_GetBaseWorldName(struct UObject* ObjectContetx); // Function GPGameplay.GPGameplayStatics.GetBaseWorldName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3607a30
	void STATIC_GameplayGPMEndExclude(struct UWorld* InWorld, struct FString ExcludeTag); // Function GPGameplay.GPGameplayStatics.GameplayGPMEndExclude // (Final|Native|Static|Public) // @ game+0x36078c0
	void STATIC_GameplayGPMBeginExclude(struct UWorld* InWorld, struct FString ExcludeTag); // Function GPGameplay.GPGameplayStatics.GameplayGPMBeginExclude // (Final|Native|Static|Public) // @ game+0x3607770
	void STATIC_GameplayChangeFpsOPAndType(enum class ELowFpsType FpsType, enum class ELowFpsOP FpsOP); // Function GPGameplay.GPGameplayStatics.GameplayChangeFpsOPAndType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36076c0
	void STATIC_GameplayChangeFpsOP(enum class ELowFpsOP FpsOPType); // Function GPGameplay.GPGameplayStatics.GameplayChangeFpsOP // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3607650
	void STATIC_CheckPropmtForFramerateStability(struct UObject* ObjectCtx); // Function GPGameplay.GPGameplayStatics.CheckPropmtForFramerateStability // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3607460
	void STATIC_AssignNextCommonTipType(struct UObject* ObjectContext, bool bPopTips, bool bPopCenter); // Function GPGameplay.GPGameplayStatics.AssignNextCommonTipType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3607350
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPGameRuleConfig
// Size: 0x80 (Inherited: 0x30)
class UGPGameRuleConfig : public UObject {
public:

	struct TMap<enum class EGameRuleType, struct FGPGameRuleSetting> RuleSettings; // 0x30(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPGameSession
// Size: 0x390 (Inherited: 0x390)
class AGPGameSession : public AGameSession {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPGameUserSettings
// Size: 0x128 (Inherited: 0x128)
class UGPGameUserSettings : public UGameUserSettings {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPGeneralCSRPCComponent
// Size: 0x100 (Inherited: 0x100)
class UGPGeneralCSRPCComponent : public UActorComponent {
public:


	void Call(struct AActor* Target, struct FName FuncName, struct UObject* Arg); // Function GPGameplay.GPGeneralCSRPCComponent.Call // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x360b400
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPGeneralCSRPCUtils
// Size: 0x30 (Inherited: 0x30)
class UGPGeneralCSRPCUtils : public UBlueprintFunctionLibrary {
public:


	void STATIC_Call(struct AActor* Target, struct FName FuncName, struct UObject* Arg); // Function GPGameplay.GPGeneralCSRPCUtils.Call // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x360b500
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPHandIKComponent
// Size: 0x1a0 (Inherited: 0x100)
class UGPHandIKComponent : public UActorComponent {
public:

	struct FTransform LeftHandTransform; // 0x100(0x30)
	bool bEnableLeftHandIK; // 0x130(0x01)
	char pad_131[0xf]; // 0x131(0x0f)
	struct FTransform RightHandTransform; // 0x140(0x30)
	bool bEnableRightHandIK; // 0x170(0x01)
	bool bEnableDoubleHandIK; // 0x171(0x01)
	char pad_172[0x2]; // 0x172(0x02)
	struct FName RightIKRootBone; // 0x174(0x08)
	struct FName LeftIKRootBone; // 0x17c(0x08)
	struct TWeakObjectPtr<struct AGPCharacterBase> Owner; // 0x184(0x08)
	char pad_18C[0x4]; // 0x18c(0x04)
	struct AIKEndEffectorTarget* LeftEndEffectorTarget; // 0x190(0x08)
	struct AIKEndEffectorTarget* RightEndEffectorTarget; // 0x198(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPHandIKInstance
// Size: 0xa40 (Inherited: 0x280)
class UGPHandIKInstance : public UAnimInstance {
public:

	struct FGPHandIKInstanceProxy LocalProxy; // 0x280(0x7c0)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPHitEffectComponent
// Size: 0x510 (Inherited: 0x100)
class UGPHitEffectComponent : public UActorComponent {
public:

	struct FTakeHitInfo LastTakeHitInfo; // 0x100(0xd0)
	struct FTakeHitInfo LastTakeHitInfoForShield; // 0x1d0(0xd0)
	bool bPlayShieldBrokenEffect; // 0x2a0(0x01)
	char pad_2A1[0x3]; // 0x2a1(0x03)
	struct TWeakObjectPtr<struct UParticleSystemComponent> SheildPSC; // 0x2a4(0x08)
	float LowHealthThreshold; // 0x2ac(0x04)
	float DamageArmorHitFixValue; // 0x2b0(0x04)
	struct FName CameraEffectId; // 0x2b4(0x08)
	char pad_2BC[0x4]; // 0x2bc(0x04)
	struct FGameplayTagContainer UseSpecialDamageRateWithAnyTags; // 0x2c0(0x20)
	float SpecialDamageRate; // 0x2e0(0x04)
	char pad_2E4[0xc]; // 0x2e4(0x0c)
	struct TArray<struct FHitPartInfo> HitPartInfoLookupTable; // 0x2f0(0x10)
	/*struct TSoftObjectPtr<UParticleSystem>*/char ShieldPS[0x28]; // 0x300(0x28)
	bool bAttachShieldEffectToTarget; // 0x328(0x01)
	char pad_329[0x3]; // 0x329(0x03)
	float ShieldEffectRadius; // 0x32c(0x04)
	struct FTransform ShieldEffectOffset; // 0x330(0x30)
	/*struct TSoftObjectPtr<UParticleSystem>*/char ShieldBreakPS[0x28]; // 0x360(0x28)
	char pad_388[0x8]; // 0x388(0x08)
	struct FTransform ShieldBreakEffectOffset; // 0x390(0x30)
	/*struct FMulticastInlineDelegate*/char OnTakeHitShield[0x10]; // 0x3c0(0x10)
	/*struct FMulticastInlineDelegate*/char OnTakeHitHealth[0x10]; // 0x3d0(0x10)
	/*struct FMulticastInlineDelegate*/char OnMulticastTakeHitHealth[0x10]; // 0x3e0(0x10)
	struct TArray<struct UClass*> GPAClass; // 0x3f0(0x10)
	float HitFlagInterval; // 0x400(0x04)
	float HitFlagCanInterrup; // 0x404(0x04)
	struct UAnimSequence* FPPHitAnim; // 0x408(0x08)
	struct UAnimSequence* TPPHitAnim; // 0x410(0x08)
	struct UAnimSequence* FPPHitHeadAnim; // 0x418(0x08)
	bool HitFlagInterrup; // 0x420(0x01)
	bool HitFlag; // 0x421(0x01)
	enum class EHitEffectType HitEffectType; // 0x422(0x01)
	char pad_423[0x1]; // 0x423(0x01)
	int32_t HitSpecPS; // 0x424(0x04)
	struct TMap<uint64_t, uint64_t> HitSpecPSMapping; // 0x428(0x50)
	bool bPlayHitAnimation; // 0x478(0x01)
	char pad_479[0x1f]; // 0x479(0x1f)
	struct UCurveFloat* EffectScaleDistanceCurve; // 0x498(0x08)
	struct AGPPlayerCameraManager* CachePlayerCameraManager; // 0x4a0(0x08)
	struct TMap<enum class EHitEffectColor, struct FLinearColor> HitEffectColorMap; // 0x4a8(0x50)
	char pad_4F8[0x18]; // 0x4f8(0x18)

	void SetHitEffectType(enum class EHitEffectType EffectType); // Function GPGameplay.GPHitEffectComponent.SetHitEffectType // (Final|Native|Public|BlueprintCallable) // @ game+0x36167f0
	void ReceiveBulletWhoosh(/*struct FHitResult& HitInfo, struct FVector& StartLocation, struct TScriptInterface<IWeaponInterface> WeaponOwner*/); // Function GPGameplay.GPHitEffectComponent.ReceiveBulletWhoosh // (Native|Public|HasOutParms|HasDefaults) // @ game+0x3616670
	void ProcessClientOnTakeHitHealthMulticast(struct AActor* TargetCharacter, float LocalDamageDone, float TotalDamageDone, struct FHitResult& HitResult, struct FGameplayTagContainer& SourceTags, struct AActor* SourceActor, struct AActor* SourceCharacter, enum class EDamageType& DamageType, enum class EHitEventType& HitEventType, int32_t ArmorLevel, uint64_t AttackerValueId); // Function GPGameplay.GPHitEffectComponent.ProcessClientOnTakeHitHealthMulticast // (Native|Public|HasOutParms) // @ game+0x3616240
	void ProcessClientOnTakeHitHealth(struct AActor* TargetCharacter, float LocalDamageDone, struct FHitResult& HitResult, struct FGameplayTagContainer& SourceTags, struct AActor* SourceActor, struct AActor* SourceCharacter, enum class EDamageType& DamageType, enum class EHitEventType& HitEventType, int32_t ArmorLevel, float HealthPercent, struct FVector MakerOwnerLocation, uint64_t AttackerValueId); // Function GPGameplay.GPHitEffectComponent.ProcessClientOnTakeHitHealth // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x3615de0
	void PlayTakeHitEffectsForShield(); // Function GPGameplay.GPHitEffectComponent.PlayTakeHitEffectsForShield // (Native|Event|Public|BlueprintEvent) // @ game+0x360c9a0
	void PlayTakeHitEffects(); // Function GPGameplay.GPHitEffectComponent.PlayTakeHitEffects // (Native|Event|Public|BlueprintEvent) // @ game+0x3615dc0
	void PlayShieldBrokenEffect(struct FVector HitPoint); // Function GPGameplay.GPHitEffectComponent.PlayShieldBrokenEffect // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x3615d30
	void PlayHitFlagAnimation(struct FHitResult& HitResult, struct AActor* SourceCharacter, enum class EDamageType& DamageType, enum class EHitEventType HitEventType); // Function GPGameplay.GPHitEffectComponent.PlayHitFlagAnimation // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3615b90
	void OnRep_PlayTakeHitEffectsForShield(); // Function GPGameplay.GPHitEffectComponent.OnRep_PlayTakeHitEffectsForShield // (Final|Native|Public) // @ game+0x3615b70
	void OnRep_PlayTakeHitEffects(); // Function GPGameplay.GPHitEffectComponent.OnRep_PlayTakeHitEffects // (Final|Native|Public) // @ game+0x3615b50
	void OnRep_PlayShieldBrokenEffect(); // Function GPGameplay.GPHitEffectComponent.OnRep_PlayShieldBrokenEffect // (Final|Native|Public) // @ game+0x88f4d0
	void OnOwnerCharacterReborn(); // Function GPGameplay.GPHitEffectComponent.OnOwnerCharacterReborn // (Final|Native|Public) // @ game+0x36157f0
	void OnOwnerCharacterDied(struct AGPCharacterBase* CHARACTER, struct AController* Killer, struct UDamageType* DamageType); // Function GPGameplay.GPHitEffectComponent.OnOwnerCharacterDied // (Native|Public) // @ game+0x36156f0
	bool STATIC_IsWeaponHitWeakness(struct FGameplayEffectContextHandle EffectContext, struct AActor* TargetActor); // Function GPGameplay.GPHitEffectComponent.IsWeaponHitWeakness // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3615500
	struct FVector GetEffectScaleByLocalCharacter(struct FVector TargetPoint); // Function GPGameplay.GPHitEffectComponent.GetEffectScaleByLocalCharacter // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x36152b0
	struct FVector GetEffectScaleByDistance(struct FVector SourcePoint, struct FVector TargetPoint); // Function GPGameplay.GPHitEffectComponent.GetEffectScaleByDistance // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x36151b0
	void EndHitFlagAnimation(); // Function GPGameplay.GPHitEffectComponent.EndHitFlagAnimation // (Native|Public|BlueprintCallable) // @ game+0x17553a0
	void ClientOnTakeHitShield(struct AActor* TargetCharacter, float LocalDamageDone, struct FHitResult HitResult, struct FGameplayTagContainer SourceTags, struct AActor* SourceActor, struct ACHARACTER* SourceCharacter); // Function GPGameplay.GPHitEffectComponent.ClientOnTakeHitShield // (Net|Native|Event|Public|NetClient) // @ game+0x3614f40
	void ClientOnTakeHitHealthMulticast(struct AActor* TargetCharacter, float LocalDamageDone, float TotalDamageDone, struct FHitResult HitResult, struct FGameplayTagContainer SourceTags, struct AActor* SourceActor, struct AActor* SourceCharacter, enum class EDamageType DamageType, enum class EHitEventType HitEventType, int32_t ArmorLevelf); // Function GPGameplay.GPHitEffectComponent.ClientOnTakeHitHealthMulticast // (Net|Native|Event|NetMulticast|Public) // @ game+0x3614bc0
	void ClientOnTakeHitHealth(struct AActor* TargetCharacter, float LocalDamageDone, struct FHitResult HitResult, struct FGameplayTagContainer SourceTags, struct AActor* SourceActor, struct AActor* SourceCharacter, enum class EDamageType DamageType, enum class EHitEventType HitEventType, int32_t ArmorLevel, float HealthPercent); // Function GPGameplay.GPHitEffectComponent.ClientOnTakeHitHealth // (Net|Native|Event|Public|NetClient) // @ game+0x3614840
	void ClientMakeHitFeedBack(struct AActor* TargetCharacter, float LocalDamageDone, struct FHitResult HitResult, struct FGameplayTagContainer SourceTags, struct AActor* SourceActor, struct AActor* SourceCharacter, enum class EDamageType DamageType, enum class EHitEventType HitEventType, int32_t ArmorLevel, uint64_t AttackerValueId); // Function GPGameplay.GPHitEffectComponent.ClientMakeHitFeedBack // (Net|Native|Event|Public|NetClient) // @ game+0x36144c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPHotFixHelperComponent
// Size: 0x160 (Inherited: 0x100)
class UGPHotFixHelperComponent : public UActorComponent {
public:

	struct TArray<float> HotFixFloatArray; // 0x100(0x10)
	struct TArray<int32_t> HotFixIntArray; // 0x110(0x10)
	struct TArray<struct FVector> HotFixVectorArray; // 0x120(0x10)
	struct TArray<float> HotFixRepFloatArray; // 0x130(0x10)
	struct TArray<int32_t> HotFixRepIntArray; // 0x140(0x10)
	struct TArray<struct FVector> HotFixRepVectorArray; // 0x150(0x10)

	void OnRep_HotFixRepVectorArray(); // Function GPGameplay.GPHotFixHelperComponent.OnRep_HotFixRepVectorArray // (Final|Native|Public) // @ game+0x3615b30
	void OnRep_HotFixRepIntArray(); // Function GPGameplay.GPHotFixHelperComponent.OnRep_HotFixRepIntArray // (Final|Native|Public) // @ game+0x3615b10
	void OnRep_HotFixRepFloatArray(); // Function GPGameplay.GPHotFixHelperComponent.OnRep_HotFixRepFloatArray // (Final|Native|Public) // @ game+0x3615af0
	void HotFixServerToClientRPC(struct FHotFixHelperDataInfo HotFixDataInfo); // Function GPGameplay.GPHotFixHelperComponent.HotFixServerToClientRPC // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x3615430
	void HotFixClientToServerRPC(struct FHotFixHelperDataInfo HotFixDataInfo); // Function GPGameplay.GPHotFixHelperComponent.HotFixClientToServerRPC // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x3615360
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPHudDataReplicator
// Size: 0x540 (Inherited: 0x378)
class AGPHudDataReplicator : public AActor {
public:

	struct TMap<int32_t, int32_t> HudDataIndexMap; // 0x378(0x50)
	struct FGPHudDataFastArray GPHudDataFastArray; // 0x3c8(0x120)
	char pad_4E8[0x58]; // 0x4e8(0x58)

	void OnRep_GPHudFastArray(struct FGPHudDataFastArray& OldGPHudDataFastArray); // Function GPGameplay.GPHudDataReplicator.OnRep_GPHudFastArray // (Final|Native|Protected|HasOutParms) // @ game+0x36158a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPInputInterface
// Size: 0x30 (Inherited: 0x30)
class UGPInputInterface : public UInterface {
public:


	void TurnLookUpAtRate(float Rate); // Function GPGameplay.GPInputInterface.TurnLookUpAtRate // (Native|Public) // @ game+0x1750760
	void TurnAtRate(float Rate); // Function GPGameplay.GPInputInterface.TurnAtRate // (Native|Public) // @ game+0x17507e0
	void SetMoveRight(float Value); // Function GPGameplay.GPInputInterface.SetMoveRight // (Native|Public) // @ game+0xaa3040
	void SetMoveForward(float Value); // Function GPGameplay.GPInputInterface.SetMoveForward // (Native|Public) // @ game+0x361db00
	void MoveUp(float Value); // Function GPGameplay.GPInputInterface.MoveUp // (Native|Public) // @ game+0x1750c50
	void Jump(); // Function GPGameplay.GPInputInterface.Jump // (Native|Public) // @ game+0x174a9c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPInputManager
// Size: 0x630 (Inherited: 0x100)
class UGPInputManager : public UActorComponent {
public:

	char pad_100[0x20]; // 0x100(0x20)
	struct AGPPlayerController* PlayerController; // 0x120(0x08)
	char pad_128[0x230]; // 0x128(0x230)
	struct UGPInputFireLogic* InputFireLogic; // 0x358(0x08)
	struct UGPInputLeftFireLogic* InputLeftFireLogic; // 0x360(0x08)
	struct UGPWeaponInputLogic* WeaponInputLogic; // 0x368(0x08)
	struct UGPInputAimLogic* InputAimLogic; // 0x370(0x08)
	struct UGPInputMovementLogic* InputMovementLogic; // 0x378(0x08)
	struct UGPInputInteractLogic* InputInteractLogic; // 0x380(0x08)
	struct UGPInputMarkingLogic* InputMarkingLogic; // 0x388(0x08)
	struct UGPInputReloadLogic* InputReloadLogic; // 0x390(0x08)
	struct UGPInputChangeScopeLogic* InputChangeScopeLogic; // 0x398(0x08)
	char pad_3A0[0x240]; // 0x3a0(0x240)
	/*struct TSet<struct FName>*/char ActivatingRoulettes[0x50]; // 0x5e0(0x50)

	void RetriggerPressingKeyCorrInput(); // Function GPGameplay.GPInputManager.RetriggerPressingKeyCorrInput // (Native|Public) // @ game+0x361da60
	void ReleasePressing(char ReleaseType); // Function GPGameplay.GPInputManager.ReleasePressing // (Native|Public) // @ game+0x361d9e0
	void ProcessPullOutArrow(enum class EInputActionType KeyActionType); // Function GPGameplay.GPInputManager.ProcessPullOutArrow // (Native|Public) // @ game+0x361d960
	void ProcessKeyESC(); // Function GPGameplay.GPInputManager.ProcessKeyESC // (Native|Public) // @ game+0x128b6f0
	void ProcessGMToggleGhostWalk(); // Function GPGameplay.GPInputManager.ProcessGMToggleGhostWalk // (Native|Public) // @ game+0x3607f50
	void ProcessGMToggleFlyWalk(); // Function GPGameplay.GPInputManager.ProcessGMToggleFlyWalk // (Native|Public) // @ game+0x361d940
	void ProcessGMMinusSpeed100(); // Function GPGameplay.GPInputManager.ProcessGMMinusSpeed100 // (Native|Public) // @ game+0x361d920
	void ProcessGMAddSpeed100(); // Function GPGameplay.GPInputManager.ProcessGMAddSpeed100 // (Native|Public) // @ game+0x361d900
	void ProcessFirefighting(enum class EInputActionType KeyActionType); // Function GPGameplay.GPInputManager.ProcessFirefighting // (Native|Public) // @ game+0x361d880
	void ProcessCloseDeathDetail(); // Function GPGameplay.GPInputManager.ProcessCloseDeathDetail // (Native|Public) // @ game+0x128b750
	void OnThirdVehicleSkillUp(); // Function GPGameplay.GPInputManager.OnThirdVehicleSkillUp // (Final|Native|Public) // @ game+0x361d700
	void OnThirdVehicleSkillDown(); // Function GPGameplay.GPInputManager.OnThirdVehicleSkillDown // (Final|Native|Public) // @ game+0x361d6e0
	void OnSwitchChatWindow(); // Function GPGameplay.GPInputManager.OnSwitchChatWindow // (Final|Native|Public) // @ game+0x361d6c0
	void OnSecondVehicleWeaponFire(); // Function GPGameplay.GPInputManager.OnSecondVehicleWeaponFire // (Final|Native|Public) // @ game+0x361d6a0
	void OnSecondVehicleSkillUp(); // Function GPGameplay.GPInputManager.OnSecondVehicleSkillUp // (Final|Native|Public) // @ game+0x361d680
	void OnSecondVehicleSkillDown(); // Function GPGameplay.GPInputManager.OnSecondVehicleSkillDown // (Final|Native|Public) // @ game+0x361d660
	void OnMiniMapScaleChange(); // Function GPGameplay.GPInputManager.OnMiniMapScaleChange // (Final|Native|Public) // @ game+0x361d540
	void OnMapKeyUp(); // Function GPGameplay.GPInputManager.OnMapKeyUp // (Final|Native|Public) // @ game+0x361d520
	void OnMapKeyDown(); // Function GPGameplay.GPInputManager.OnMapKeyDown // (Final|Native|Public) // @ game+0x361d500
	void OnMapDigitalKey4(); // Function GPGameplay.GPInputManager.OnMapDigitalKey4 // (Final|Native|Public) // @ game+0x361d4e0
	void OnMapDigitalKey3(); // Function GPGameplay.GPInputManager.OnMapDigitalKey3 // (Final|Native|Public) // @ game+0x361d4c0
	void OnMapDigitalKey2(); // Function GPGameplay.GPInputManager.OnMapDigitalKey2 // (Final|Native|Public) // @ game+0x361d4a0
	void OnMapDigitalKey1(); // Function GPGameplay.GPInputManager.OnMapDigitalKey1 // (Final|Native|Public) // @ game+0x361d480
	void OnLockVehicleCameraRelease(); // Function GPGameplay.GPInputManager.OnLockVehicleCameraRelease // (Final|Native|Public) // @ game+0x361d460
	void OnLockVehicleCameraPress(); // Function GPGameplay.GPInputManager.OnLockVehicleCameraPress // (Final|Native|Public) // @ game+0x361d440
	void OnInputZoomUpBigMapScale(); // Function GPGameplay.GPInputManager.OnInputZoomUpBigMapScale // (Final|Native|Public) // @ game+0x361d0e0
	void OnInputZoomDownBigMapScale(); // Function GPGameplay.GPInputManager.OnInputZoomDownBigMapScale // (Final|Native|Public) // @ game+0x361d0c0
	void OnInputVehicleTrumpetReleased(); // Function GPGameplay.GPInputManager.OnInputVehicleTrumpetReleased // (Final|Native|Public) // @ game+0x361d0a0
	void OnInputVehicleTrumpet(); // Function GPGameplay.GPInputManager.OnInputVehicleTrumpet // (Final|Native|Public) // @ game+0x361d080
	void OnInputVehicleSwitchXPP(); // Function GPGameplay.GPInputManager.OnInputVehicleSwitchXPP // (Final|Native|Public) // @ game+0x361d060
	void OnInputVehicleHeadOut(); // Function GPGameplay.GPInputManager.OnInputVehicleHeadOut // (Final|Native|Public) // @ game+0x361d040
	void OnInputVehicleBrakeReleased(); // Function GPGameplay.GPInputManager.OnInputVehicleBrakeReleased // (Final|Native|Public) // @ game+0x361d020
	void OnInputVehicleBrake(); // Function GPGameplay.GPInputManager.OnInputVehicleBrake // (Final|Native|Public) // @ game+0x361d000
	void OnInputVehicleBoost(); // Function GPGameplay.GPInputManager.OnInputVehicleBoost // (Final|Native|Public) // @ game+0x361cfe0
	void OnInputVehicleAimUp(); // Function GPGameplay.GPInputManager.OnInputVehicleAimUp // (Final|Native|Public) // @ game+0x361cfc0
	void OnInputVehicleAimDown(); // Function GPGameplay.GPInputManager.OnInputVehicleAimDown // (Final|Native|Public) // @ game+0x361cfa0
	void OnInputVault(); // Function GPGameplay.GPInputManager.OnInputVault // (Final|Native|Public) // @ game+0x361cf80
	void OnInputTPPRotateCameraReleased(); // Function GPGameplay.GPInputManager.OnInputTPPRotateCameraReleased // (Final|Native|Public) // @ game+0x361cee0
	void OnInputTPPRotateCamera(); // Function GPGameplay.GPInputManager.OnInputTPPRotateCamera // (Final|Native|Public) // @ game+0x361cec0
	void OnInputToggleVoiceSpeaking(); // Function GPGameplay.GPInputManager.OnInputToggleVoiceSpeaking // (Final|Native|Public) // @ game+0x361cf60
	void OnInputToggleScoreboardReleased(); // Function GPGameplay.GPInputManager.OnInputToggleScoreboardReleased // (Final|Native|Public) // @ game+0x361cf40
	void OnInputToggleScoreboard(); // Function GPGameplay.GPInputManager.OnInputToggleScoreboard // (Final|Native|Public) // @ game+0x361cf20
	void OnInputToggleLegends(); // Function GPGameplay.GPInputManager.OnInputToggleLegends // (Final|Native|Public) // @ game+0x361cf00
	void OnInputSwitchWeapon4(); // Function GPGameplay.GPInputManager.OnInputSwitchWeapon4 // (Final|Native|Public) // @ game+0x361cea0
	void OnInputSwitchWeapon3(); // Function GPGameplay.GPInputManager.OnInputSwitchWeapon3 // (Final|Native|Public) // @ game+0x361ce80
	void OnInputSwitchWeapon2(); // Function GPGameplay.GPInputManager.OnInputSwitchWeapon2 // (Final|Native|Public) // @ game+0x361ce60
	void OnInputSwitchWeapon1(); // Function GPGameplay.GPInputManager.OnInputSwitchWeapon1 // (Final|Native|Public) // @ game+0x361ce40
	void OnInputSwitchVehicleWeapon2(); // Function GPGameplay.GPInputManager.OnInputSwitchVehicleWeapon2 // (Final|Native|Public) // @ game+0x361ce20
	void OnInputSwitchVehicleWeapon1(); // Function GPGameplay.GPInputManager.OnInputSwitchVehicleWeapon1 // (Final|Native|Public) // @ game+0x361ce00
	void OnInputSwitchToPreWeapon(); // Function GPGameplay.GPInputManager.OnInputSwitchToPreWeapon // (Final|Native|Public) // @ game+0x361cde0
	void OnInputSwitchToNextWeapon(); // Function GPGameplay.GPInputManager.OnInputSwitchToNextWeapon // (Final|Native|Public) // @ game+0x361cdc0
	void OnInputSwitchTacticalEquipmentUp(); // Function GPGameplay.GPInputManager.OnInputSwitchTacticalEquipmentUp // (Final|Native|Public) // @ game+0x361cda0
	void OnInputSwitchTacticalEquipmentDown(); // Function GPGameplay.GPInputManager.OnInputSwitchTacticalEquipmentDown // (Final|Native|Public) // @ game+0x361cd80
	void OnInputSwitchScrollVehicleWeapon2(); // Function GPGameplay.GPInputManager.OnInputSwitchScrollVehicleWeapon2 // (Final|Native|Public) // @ game+0x361cd60
	void OnInputSwitchScrollVehicleWeapon1(); // Function GPGameplay.GPInputManager.OnInputSwitchScrollVehicleWeapon1 // (Final|Native|Public) // @ game+0x361cd40
	void OnInputSkillCustom1Released(); // Function GPGameplay.GPInputManager.OnInputSkillCustom1Released // (Final|Native|Public) // @ game+0x361cd20
	void OnInputSkillCustom1Down(); // Function GPGameplay.GPInputManager.OnInputSkillCustom1Down // (Final|Native|Public) // @ game+0x361cd00
	void OnInputRouletteMedUp(); // Function GPGameplay.GPInputManager.OnInputRouletteMedUp // (Final|Native|Public) // @ game+0x361cce0
	void OnInputRouletteMedDown(); // Function GPGameplay.GPInputManager.OnInputRouletteMedDown // (Final|Native|Public) // @ game+0x361ccc0
	void OnInputRouletteLeftBtnDown(); // Function GPGameplay.GPInputManager.OnInputRouletteLeftBtnDown // (Final|Native|Public) // @ game+0x361cca0
	void OnInputRouletteEquipUp(); // Function GPGameplay.GPInputManager.OnInputRouletteEquipUp // (Final|Native|Public) // @ game+0x361cc80
	void OnInputRouletteEquipDown(); // Function GPGameplay.GPInputManager.OnInputRouletteEquipDown // (Final|Native|Public) // @ game+0x361cc60
	void OnInputRescueReleased(); // Function GPGameplay.GPInputManager.OnInputRescueReleased // (Final|Native|Public) // @ game+0x361cc40
	void OnInputRescue(); // Function GPGameplay.GPInputManager.OnInputRescue // (Final|Native|Public) // @ game+0x361cc20
	void OnInputRequestRescueReleased(); // Function GPGameplay.GPInputManager.OnInputRequestRescueReleased // (Final|Native|Public) // @ game+0x361cc00
	void OnInputRequestRescue(); // Function GPGameplay.GPInputManager.OnInputRequestRescue // (Final|Native|Public) // @ game+0x361cbe0
	void OnInputRangeToggleAnalysisPanel(); // Function GPGameplay.GPInputManager.OnInputRangeToggleAnalysisPanel // (Final|Native|Public) // @ game+0x361cbc0
	void OnInputRangeRefreshAnalysisPanel(); // Function GPGameplay.GPInputManager.OnInputRangeRefreshAnalysisPanel // (Final|Native|Public) // @ game+0x361cba0
	void OnInputRangeManageWeapon(); // Function GPGameplay.GPInputManager.OnInputRangeManageWeapon // (Final|Native|Public) // @ game+0x361cb80
	void OnInputRangeFinderDown(); // Function GPGameplay.GPInputManager.OnInputRangeFinderDown // (Final|Native|Public) // @ game+0x361cb60
	void OnInputQuickResYes(); // Function GPGameplay.GPInputManager.OnInputQuickResYes // (Final|Native|Public) // @ game+0x361cb40
	void OnInputQuickResNo(); // Function GPGameplay.GPInputManager.OnInputQuickResNo // (Final|Native|Public) // @ game+0x361cb20
	void OnInputPullOutArrowReleased(); // Function GPGameplay.GPInputManager.OnInputPullOutArrowReleased // (Final|Native|Public) // @ game+0x361cb00
	void OnInputPullOutArrowDown(); // Function GPGameplay.GPInputManager.OnInputPullOutArrowDown // (Final|Native|Public) // @ game+0x361cae0
	void OnInputOpenPowerFlash(); // Function GPGameplay.GPInputManager.OnInputOpenPowerFlash // (Final|Native|Public) // @ game+0x361cac0
	void OnInputOpenParachute(); // Function GPGameplay.GPInputManager.OnInputOpenParachute // (Final|Native|Public) // @ game+0x361caa0
	void OnInputOpenMap(); // Function GPGameplay.GPInputManager.OnInputOpenMap // (Final|Native|Public) // @ game+0x361ca80
	void OnInputMuteAll(); // Function GPGameplay.GPInputManager.OnInputMuteAll // (Final|Native|Public) // @ game+0x361ca60
	void OnInputMarkReleased(); // Function GPGameplay.GPInputManager.OnInputMarkReleased // (Final|Native|Public) // @ game+0x361ca40
	void OnInputMark(); // Function GPGameplay.GPInputManager.OnInputMark // (Final|Native|Public) // @ game+0x361ca20
	void OnInputMapLongPressSelectUp(); // Function GPGameplay.GPInputManager.OnInputMapLongPressSelectUp // (Final|Native|Public) // @ game+0x361ca00
	void OnInputMapLongPressSelectDown(); // Function GPGameplay.GPInputManager.OnInputMapLongPressSelectDown // (Final|Native|Public) // @ game+0x361c9e0
	void OnInputLootingOpenHealthTag(); // Function GPGameplay.GPInputManager.OnInputLootingOpenHealthTag // (Final|Native|Public) // @ game+0x361c9c0
	void OnInputLootingOpenBag(); // Function GPGameplay.GPInputManager.OnInputLootingOpenBag // (Final|Native|Public) // @ game+0x361c9a0
	void OnInputLocatePlayer(); // Function GPGameplay.GPInputManager.OnInputLocatePlayer // (Final|Native|Public) // @ game+0x361c980
	void OnInputLeaveVehicle(); // Function GPGameplay.GPInputManager.OnInputLeaveVehicle // (Final|Native|Public) // @ game+0x361c960
	void OnInputKeyZiplineButtonDown(); // Function GPGameplay.GPInputManager.OnInputKeyZiplineButtonDown // (Final|Native|Public) // @ game+0x361c940
	void OnInputKeyWeaponInspect(); // Function GPGameplay.GPInputManager.OnInputKeyWeaponInspect // (Final|Native|Public) // @ game+0x361c920
	void OnInputKeyWeaponBipodDeploy(); // Function GPGameplay.GPInputManager.OnInputKeyWeaponBipodDeploy // (Final|Native|Public) // @ game+0x361c900
	void OnInputKeyUnSprint(); // Function GPGameplay.GPInputManager.OnInputKeyUnSprint // (Native|Public) // @ game+0x361c8e0
	void OnInputKeyUnSilentWalk(); // Function GPGameplay.GPInputManager.OnInputKeyUnSilentWalk // (Native|Public) // @ game+0x360c9c0
	void OnInputKeyUnSideAim(); // Function GPGameplay.GPInputManager.OnInputKeyUnSideAim // (Final|Native|Public) // @ game+0x361c8c0
	void OnInputKeyUnJump(); // Function GPGameplay.GPInputManager.OnInputKeyUnJump // (Final|Native|Public) // @ game+0x361c8a0
	void OnInputKeyUnHoldBreath(); // Function GPGameplay.GPInputManager.OnInputKeyUnHoldBreath // (Final|Native|Public) // @ game+0x361c880
	void OnInputKeyUnAim(); // Function GPGameplay.GPInputManager.OnInputKeyUnAim // (Final|Native|Public) // @ game+0x361c860
	void OnInputKeyToggleRecordPanel(); // Function GPGameplay.GPInputManager.OnInputKeyToggleRecordPanel // (Final|Native|Public) // @ game+0x361c840
	void OnInputKeyToggleRecordMode(); // Function GPGameplay.GPInputManager.OnInputKeyToggleRecordMode // (Final|Native|Public) // @ game+0x361c820
	void OnInputKeyTelescope(); // Function GPGameplay.GPInputManager.OnInputKeyTelescope // (Final|Native|Public) // @ game+0x361c800
	void OnInputKeySwitchWeaponFireMode(); // Function GPGameplay.GPInputManager.OnInputKeySwitchWeaponFireMode // (Final|Native|Public) // @ game+0x361c7e0
	void OnInputKeySwitchMouseMode(); // Function GPGameplay.GPInputManager.OnInputKeySwitchMouseMode // (Final|Native|Public) // @ game+0x361c7c0
	void OnInputKeyStopFire(); // Function GPGameplay.GPInputManager.OnInputKeyStopFire // (Final|Native|Public) // @ game+0x361c7a0
	void OnInputKeyStartFire(); // Function GPGameplay.GPInputManager.OnInputKeyStartFire // (Final|Native|Public) // @ game+0x361c780
	void OnInputKeySprint(); // Function GPGameplay.GPInputManager.OnInputKeySprint // (Native|Public) // @ game+0x3615dc0
	void OnInputKeySkillButtonUp(); // Function GPGameplay.GPInputManager.OnInputKeySkillButtonUp // (Final|Native|Public) // @ game+0x361c760
	void OnInputKeySkillButtonDown(); // Function GPGameplay.GPInputManager.OnInputKeySkillButtonDown // (Final|Native|Public) // @ game+0x361c740
	void OnInputKeySilentWalk(); // Function GPGameplay.GPInputManager.OnInputKeySilentWalk // (Native|Public) // @ game+0x360c9a0
	void OnInputKeySideAim(); // Function GPGameplay.GPInputManager.OnInputKeySideAim // (Final|Native|Public) // @ game+0x361c720
	void OnInputKeyShowWeaponPanel(); // Function GPGameplay.GPInputManager.OnInputKeyShowWeaponPanel // (Final|Native|Public) // @ game+0x361c700
	void OnInputKeyShowQuestPanel(); // Function GPGameplay.GPInputManager.OnInputKeyShowQuestPanel // (Final|Native|Public) // @ game+0x361c6e0
	void OnInputKeyShowGMPanel(); // Function GPGameplay.GPInputManager.OnInputKeyShowGMPanel // (Final|Native|Public) // @ game+0x361c6c0
	void OnInputKeyShowAnimPanel(); // Function GPGameplay.GPInputManager.OnInputKeyShowAnimPanel // (Final|Native|Public) // @ game+0x361c6a0
	void OnInputKeyRightLeanPeekUp(); // Function GPGameplay.GPInputManager.OnInputKeyRightLeanPeekUp // (Final|Native|Public) // @ game+0x361c680
	void OnInputKeyRightLeanPeekDown(); // Function GPGameplay.GPInputManager.OnInputKeyRightLeanPeekDown // (Final|Native|Public) // @ game+0x361c660
	void OnInputKeyReloadUp(); // Function GPGameplay.GPInputManager.OnInputKeyReloadUp // (Final|Native|Public) // @ game+0x361c640
	void OnInputKeyReload(); // Function GPGameplay.GPInputManager.OnInputKeyReload // (Final|Native|Public) // @ game+0x361c620
	void OnInputKeyProneHoldReleased(); // Function GPGameplay.GPInputManager.OnInputKeyProneHoldReleased // (Final|Native|Public) // @ game+0x361c600
	void OnInputKeyProneHold(); // Function GPGameplay.GPInputManager.OnInputKeyProneHold // (Final|Native|Public) // @ game+0x361c5e0
	void OnInputKeyProneDown(); // Function GPGameplay.GPInputManager.OnInputKeyProneDown // (Final|Native|Public) // @ game+0x361c5c0
	void OnInputKeyObserver(); // Function GPGameplay.GPInputManager.OnInputKeyObserver // (Final|Native|Public|BlueprintCallable) // @ game+0x361c5a0
	void OnInputKeyMouseScrollUp(); // Function GPGameplay.GPInputManager.OnInputKeyMouseScrollUp // (Final|Native|Public) // @ game+0x361c580
	void OnInputKeyMouseScrollDown(); // Function GPGameplay.GPInputManager.OnInputKeyMouseScrollDown // (Final|Native|Public) // @ game+0x361c560
	void OnInputKeyLeftLeanPeekUp(); // Function GPGameplay.GPInputManager.OnInputKeyLeftLeanPeekUp // (Final|Native|Public) // @ game+0x361c540
	void OnInputKeyLeftLeanPeekDown(); // Function GPGameplay.GPInputManager.OnInputKeyLeftLeanPeekDown // (Final|Native|Public) // @ game+0x361c520
	void OnInputKeyJumpAndVaultReleased(); // Function GPGameplay.GPInputManager.OnInputKeyJumpAndVaultReleased // (Final|Native|Public) // @ game+0x361c500
	void OnInputKeyJumpAndVault(); // Function GPGameplay.GPInputManager.OnInputKeyJumpAndVault // (Final|Native|Public) // @ game+0x361c4e0
	void OnInputKeyJump(); // Function GPGameplay.GPInputManager.OnInputKeyJump // (Final|Native|Public) // @ game+0x361c4c0
	void OnInputKeyHoldBreath(); // Function GPGameplay.GPInputManager.OnInputKeyHoldBreath // (Final|Native|Public) // @ game+0x361c4a0
	void OnInputKeyGMToggleGhostWalk(); // Function GPGameplay.GPInputManager.OnInputKeyGMToggleGhostWalk // (Final|Native|Public) // @ game+0x361c480
	void OnInputKeyGMToggleFlyWalk(); // Function GPGameplay.GPInputManager.OnInputKeyGMToggleFlyWalk // (Final|Native|Public) // @ game+0x361c460
	void OnInputKeyGMSubClientTimeDilation(); // Function GPGameplay.GPInputManager.OnInputKeyGMSubClientTimeDilation // (Final|Native|Public) // @ game+0x361c440
	void OnInputKeyGMSnapshot(); // Function GPGameplay.GPInputManager.OnInputKeyGMSnapshot // (Final|Native|Public) // @ game+0x361c420
	void OnInputKeyGMRecoverClientTimeDilation(); // Function GPGameplay.GPInputManager.OnInputKeyGMRecoverClientTimeDilation // (Final|Native|Public) // @ game+0x361c400
	void OnInputKeyGMMinusSpeed100(); // Function GPGameplay.GPInputManager.OnInputKeyGMMinusSpeed100 // (Final|Native|Public) // @ game+0x361c3e0
	void OnInputKeyGMAddSpeed100(); // Function GPGameplay.GPInputManager.OnInputKeyGMAddSpeed100 // (Final|Native|Public) // @ game+0x361c3c0
	void OnInputKeyGMAddClientTimeDilation(); // Function GPGameplay.GPInputManager.OnInputKeyGMAddClientTimeDilation // (Final|Native|Public) // @ game+0x361c3a0
	void OnInputKeyESC(); // Function GPGameplay.GPInputManager.OnInputKeyESC // (Final|Native|Public) // @ game+0x361c380
	void OnInputKeyDropCarryBody(); // Function GPGameplay.GPInputManager.OnInputKeyDropCarryBody // (Final|Native|Public) // @ game+0x361c360
	void OnInputKeyDoNothing(); // Function GPGameplay.GPInputManager.OnInputKeyDoNothing // (Final|Native|Public) // @ game+0x89e920
	void OnInputKeyCrouch(); // Function GPGameplay.GPInputManager.OnInputKeyCrouch // (Final|Native|Public) // @ game+0x361c340
	void OnInputKeyChangeXPP(); // Function GPGameplay.GPInputManager.OnInputKeyChangeXPP // (Final|Native|Public) // @ game+0x361c320
	void OnInputKeyCarryBody(); // Function GPGameplay.GPInputManager.OnInputKeyCarryBody // (Final|Native|Public) // @ game+0x361c300
	void OnInputKeyAssassinateRelease(); // Function GPGameplay.GPInputManager.OnInputKeyAssassinateRelease // (Final|Native|Public) // @ game+0x361c2e0
	void OnInputKeyAssassinateDown(); // Function GPGameplay.GPInputManager.OnInputKeyAssassinateDown // (Final|Native|Public) // @ game+0x361c2c0
	void OnInputKeyAim(); // Function GPGameplay.GPInputManager.OnInputKeyAim // (Final|Native|Public) // @ game+0x361c2a0
	void OnInputKeepVoiceSpeakingReleased(); // Function GPGameplay.GPInputManager.OnInputKeepVoiceSpeakingReleased // (Final|Native|Public) // @ game+0x361c280
	void OnInputKeepVoiceSpeaking(); // Function GPGameplay.GPInputManager.OnInputKeepVoiceSpeaking // (Final|Native|Public) // @ game+0x361c260
	void OnInputInteractRelease(); // Function GPGameplay.GPInputManager.OnInputInteractRelease // (Final|Native|Public) // @ game+0x361c240
	void OnInputInteractPress(); // Function GPGameplay.GPInputManager.OnInputInteractPress // (Final|Native|Public) // @ game+0x361c220
	void OnInputInteract2Release(); // Function GPGameplay.GPInputManager.OnInputInteract2Release // (Final|Native|Public) // @ game+0x361c200
	void OnInputInteract2Press(); // Function GPGameplay.GPInputManager.OnInputInteract2Press // (Final|Native|Public) // @ game+0x361c1e0
	void OnInputGMHurtMe(); // Function GPGameplay.GPInputManager.OnInputGMHurtMe // (Final|Native|Public) // @ game+0x361c1c0
	void OnInputFirefightingReleased(); // Function GPGameplay.GPInputManager.OnInputFirefightingReleased // (Final|Native|Public) // @ game+0x361c1a0
	void OnInputFirefightingDown(); // Function GPGameplay.GPInputManager.OnInputFirefightingDown // (Final|Native|Public) // @ game+0x361c180
	void OnInputExit3DSafeHouse(); // Function GPGameplay.GPInputManager.OnInputExit3DSafeHouse // (Final|Native|Public) // @ game+0x361c160
	void OnInputCrouchHoldReleased(); // Function GPGameplay.GPInputManager.OnInputCrouchHoldReleased // (Final|Native|Public) // @ game+0x361c140
	void OnInputCrouchHold(); // Function GPGameplay.GPInputManager.OnInputCrouchHold // (Final|Native|Public) // @ game+0x361c120
	void OnInputCommercializationUp(); // Function GPGameplay.GPInputManager.OnInputCommercializationUp // (Final|Native|Public) // @ game+0x361c100
	void OnInputCommercializationDown(); // Function GPGameplay.GPInputManager.OnInputCommercializationDown // (Final|Native|Public) // @ game+0x361c0e0
	void OnInputCloseParachute(); // Function GPGameplay.GPInputManager.OnInputCloseParachute // (Final|Native|Public) // @ game+0x361c0c0
	void OnInputCloseDeathDetail(); // Function GPGameplay.GPInputManager.OnInputCloseDeathDetail // (Final|Native|Public) // @ game+0x361c0a0
	void OnInputChangeTelescopeFovBtnUp(); // Function GPGameplay.GPInputManager.OnInputChangeTelescopeFovBtnUp // (Final|Native|Public) // @ game+0x361c080
	void OnInputChangeTelescopeFOV(); // Function GPGameplay.GPInputManager.OnInputChangeTelescopeFOV // (Final|Native|Public) // @ game+0x361c060
	void OnInputChangeSight(); // Function GPGameplay.GPInputManager.OnInputChangeSight // (Final|Native|Public) // @ game+0x361c040
	void OnInputCancelRoulette(); // Function GPGameplay.GPInputManager.OnInputCancelRoulette // (Final|Native|Public) // @ game+0x361c020
	void OnInputBattleFieldPropSkillReleased(); // Function GPGameplay.GPInputManager.OnInputBattleFieldPropSkillReleased // (Final|Native|Public) // @ game+0x361c000
	void OnInputBattleFieldPropSkillDown(); // Function GPGameplay.GPInputManager.OnInputBattleFieldPropSkillDown // (Final|Native|Public) // @ game+0x361bfe0
	void OnInputAxisTurn(float Value); // Function GPGameplay.GPInputManager.OnInputAxisTurn // (Final|Native|Public) // @ game+0x361bf60
	void OnInputAxisMoveUp(float Value); // Function GPGameplay.GPInputManager.OnInputAxisMoveUp // (Final|Native|Public) // @ game+0x361bee0
	void OnInputAxisMoveRight(float Value); // Function GPGameplay.GPInputManager.OnInputAxisMoveRight // (Final|Native|Public) // @ game+0x361be60
	void OnInputAxisMoveForward(float Value); // Function GPGameplay.GPInputManager.OnInputAxisMoveForward // (Final|Native|Public) // @ game+0x361bde0
	void OnInputAxisLookUp(float Value); // Function GPGameplay.GPInputManager.OnInputAxisLookUp // (Final|Native|Public) // @ game+0x361bd60
	void OnInputAxisAirYaw(float Value); // Function GPGameplay.GPInputManager.OnInputAxisAirYaw // (Final|Native|Public) // @ game+0x361bce0
	void OnInputAxisAirThrottle(float Value); // Function GPGameplay.GPInputManager.OnInputAxisAirThrottle // (Final|Native|Public) // @ game+0x361bc60
	void OnInputAxisAirRoll(float Value); // Function GPGameplay.GPInputManager.OnInputAxisAirRoll // (Final|Native|Public) // @ game+0x361bbe0
	void OnInputAxisAirPitch(float Value); // Function GPGameplay.GPInputManager.OnInputAxisAirPitch // (Final|Native|Public) // @ game+0x361bb60
	void OnInputAutoSprint(); // Function GPGameplay.GPInputManager.OnInputAutoSprint // (Final|Native|Public) // @ game+0x361bb40
	void OnInputArtillerySupportUp(); // Function GPGameplay.GPInputManager.OnInputArtillerySupportUp // (Final|Native|Public) // @ game+0x361bb20
	void OnInputArtillerySupportDown(); // Function GPGameplay.GPInputManager.OnInputArtillerySupportDown // (Final|Native|Public) // @ game+0x361bb00
	void OnInputActionShowLuaRuntimeDebugPanel(); // Function GPGameplay.GPInputManager.OnInputActionShowLuaRuntimeDebugPanel // (Final|Native|Public) // @ game+0x361bae0
	void OnInputActionMoveUpReleased(); // Function GPGameplay.GPInputManager.OnInputActionMoveUpReleased // (Final|Native|Public) // @ game+0x361bac0
	void OnInputActionMoveUp(); // Function GPGameplay.GPInputManager.OnInputActionMoveUp // (Final|Native|Public) // @ game+0x361baa0
	void OnInputActionMoveRollRightReleased(); // Function GPGameplay.GPInputManager.OnInputActionMoveRollRightReleased // (Final|Native|Public) // @ game+0x361ba80
	void OnInputActionMoveRollRight(); // Function GPGameplay.GPInputManager.OnInputActionMoveRollRight // (Final|Native|Public) // @ game+0x361ba60
	void OnInputActionMoveRollLeftReleased(); // Function GPGameplay.GPInputManager.OnInputActionMoveRollLeftReleased // (Final|Native|Public) // @ game+0x361ba40
	void OnInputActionMoveRollLeft(); // Function GPGameplay.GPInputManager.OnInputActionMoveRollLeft // (Final|Native|Public) // @ game+0x361ba20
	void OnInputActionMoveRightReleased(); // Function GPGameplay.GPInputManager.OnInputActionMoveRightReleased // (Final|Native|Public) // @ game+0x361ba00
	void OnInputActionMoveRight(); // Function GPGameplay.GPInputManager.OnInputActionMoveRight // (Final|Native|Public) // @ game+0x361b9e0
	void OnInputActionMoveLeftReleased(); // Function GPGameplay.GPInputManager.OnInputActionMoveLeftReleased // (Final|Native|Public) // @ game+0x361b9c0
	void OnInputActionMoveLeft(); // Function GPGameplay.GPInputManager.OnInputActionMoveLeft // (Final|Native|Public) // @ game+0x361b9a0
	void OnInputActionMoveForwardReleased(); // Function GPGameplay.GPInputManager.OnInputActionMoveForwardReleased // (Final|Native|Public) // @ game+0x361b980
	void OnInputActionMoveForward(); // Function GPGameplay.GPInputManager.OnInputActionMoveForward // (Final|Native|Public) // @ game+0x361b960
	void OnInputActionMoveDownReleased(); // Function GPGameplay.GPInputManager.OnInputActionMoveDownReleased // (Final|Native|Public) // @ game+0x361b940
	void OnInputActionMoveDown(); // Function GPGameplay.GPInputManager.OnInputActionMoveDown // (Final|Native|Public) // @ game+0x361b920
	void OnInputActionMoveBackwardReleased(); // Function GPGameplay.GPInputManager.OnInputActionMoveBackwardReleased // (Final|Native|Public) // @ game+0x361b900
	void OnInputActionMoveBackward(); // Function GPGameplay.GPInputManager.OnInputActionMoveBackward // (Final|Native|Public) // @ game+0x361b8e0
	void OnInputActionHideHUD(); // Function GPGameplay.GPInputManager.OnInputActionHideHUD // (Final|Native|Public) // @ game+0x361b8c0
	void OnInputActionAirYawRightReleased(); // Function GPGameplay.GPInputManager.OnInputActionAirYawRightReleased // (Final|Native|Public) // @ game+0x361b8a0
	void OnInputActionAirYawRight(); // Function GPGameplay.GPInputManager.OnInputActionAirYawRight // (Final|Native|Public) // @ game+0x361b880
	void OnInputActionAirYawLeftReleased(); // Function GPGameplay.GPInputManager.OnInputActionAirYawLeftReleased // (Final|Native|Public) // @ game+0x361b860
	void OnInputActionAirYawLeft(); // Function GPGameplay.GPInputManager.OnInputActionAirYawLeft // (Final|Native|Public) // @ game+0x361b840
	void OnInputActionAirThrottleUpReleased(); // Function GPGameplay.GPInputManager.OnInputActionAirThrottleUpReleased // (Final|Native|Public) // @ game+0x361b820
	void OnInputActionAirThrottleUp(); // Function GPGameplay.GPInputManager.OnInputActionAirThrottleUp // (Final|Native|Public) // @ game+0x361b800
	void OnInputActionAirThrottleDownReleased(); // Function GPGameplay.GPInputManager.OnInputActionAirThrottleDownReleased // (Final|Native|Public) // @ game+0x361b7e0
	void OnInputActionAirThrottleDown(); // Function GPGameplay.GPInputManager.OnInputActionAirThrottleDown // (Final|Native|Public) // @ game+0x361b7c0
	void OnInputActionAirRollRightReleased(); // Function GPGameplay.GPInputManager.OnInputActionAirRollRightReleased // (Final|Native|Public) // @ game+0x361b7a0
	void OnInputActionAirRollRight(); // Function GPGameplay.GPInputManager.OnInputActionAirRollRight // (Final|Native|Public) // @ game+0x361b780
	void OnInputActionAirRollLeftReleased(); // Function GPGameplay.GPInputManager.OnInputActionAirRollLeftReleased // (Final|Native|Public) // @ game+0x361b760
	void OnInputActionAirRollLeft(); // Function GPGameplay.GPInputManager.OnInputActionAirRollLeft // (Final|Native|Public) // @ game+0x361b740
	void OnInputActionAirPitchUpReleased(); // Function GPGameplay.GPInputManager.OnInputActionAirPitchUpReleased // (Final|Native|Public) // @ game+0x361b720
	void OnInputActionAirPitchUp(); // Function GPGameplay.GPInputManager.OnInputActionAirPitchUp // (Final|Native|Public) // @ game+0x361b700
	void OnInputActionAirPitchDownReleased(); // Function GPGameplay.GPInputManager.OnInputActionAirPitchDownReleased // (Final|Native|Public) // @ game+0x361b6e0
	void OnInputActionAirPitchDown(); // Function GPGameplay.GPInputManager.OnInputActionAirPitchDown // (Final|Native|Public) // @ game+0x361b6c0
	void OnInputAbilityTestSpawn(); // Function GPGameplay.GPInputManager.OnInputAbilityTestSpawn // (Final|Native|Public) // @ game+0x361b6a0
	void OnInputAbilityItemSecondReleased(); // Function GPGameplay.GPInputManager.OnInputAbilityItemSecondReleased // (Final|Native|Public) // @ game+0x361b680
	void OnInputAbilityItemSecond(); // Function GPGameplay.GPInputManager.OnInputAbilityItemSecond // (Final|Native|Public) // @ game+0x361b660
	void OnInputAbilityItemReleased(); // Function GPGameplay.GPInputManager.OnInputAbilityItemReleased // (Final|Native|Public) // @ game+0x361b640
	void OnInputAbilityItem(); // Function GPGameplay.GPInputManager.OnInputAbilityItem // (Final|Native|Public) // @ game+0x361b620
	void OnInputAbilityDetailDown(); // Function GPGameplay.GPInputManager.OnInputAbilityDetailDown // (Final|Native|Public) // @ game+0x361b600
	void OnInputAbilityDetail(); // Function GPGameplay.GPInputManager.OnInputAbilityDetail // (Final|Native|Public) // @ game+0x361b5e0
	void OnInputAbandonRescueReleased(); // Function GPGameplay.GPInputManager.OnInputAbandonRescueReleased // (Final|Native|Public) // @ game+0x361b5c0
	void OnInputAbandonRescue(); // Function GPGameplay.GPInputManager.OnInputAbandonRescue // (Final|Native|Public) // @ game+0x361b5a0
	void OnInput_WatchKillCamReplay(); // Function GPGameplay.GPInputManager.OnInput_WatchKillCamReplay // (Final|Native|Public) // @ game+0x361d420
	void OnInput_WatchFightReportVoice(); // Function GPGameplay.GPInputManager.OnInput_WatchFightReportVoice // (Final|Native|Public) // @ game+0x361d400
	void OnInput_WatchFightPlayerCard(); // Function GPGameplay.GPInputManager.OnInput_WatchFightPlayerCard // (Final|Native|Public) // @ game+0x361d3e0
	void OnInput_WatchFightExit(); // Function GPGameplay.GPInputManager.OnInput_WatchFightExit // (Final|Native|Public) // @ game+0x361d3c0
	void OnInput_WatchFightDeathDetailInfo(); // Function GPGameplay.GPInputManager.OnInput_WatchFightDeathDetailInfo // (Final|Native|Public) // @ game+0x361d3a0
	void OnInput_WatchFightChangeTarget(); // Function GPGameplay.GPInputManager.OnInput_WatchFightChangeTarget // (Final|Native|Public) // @ game+0x361d380
	void OnInput_OBC_UpdateFocusPoint(); // Function GPGameplay.GPInputManager.OnInput_OBC_UpdateFocusPoint // (Final|Native|Public) // @ game+0x361d360
	void OnInput_OBC_SwitchToFreeCamera(); // Function GPGameplay.GPInputManager.OnInput_OBC_SwitchToFreeCamera // (Final|Native|Public) // @ game+0x361d340
	void OnInput_OBC_StartMoveCamera(); // Function GPGameplay.GPInputManager.OnInput_OBC_StartMoveCamera // (Final|Native|Public) // @ game+0x361d320
	void OnInput_OBC_ShowTeamInfo(); // Function GPGameplay.GPInputManager.OnInput_OBC_ShowTeamInfo // (Final|Native|Public) // @ game+0x361d300
	void OnInput_OBC_ShowPlayerMarker(); // Function GPGameplay.GPInputManager.OnInput_OBC_ShowPlayerMarker // (Final|Native|Public) // @ game+0x361d2e0
	void OnInput_OBC_ShowOutLineEffect(); // Function GPGameplay.GPInputManager.OnInput_OBC_ShowOutLineEffect // (Final|Native|Public) // @ game+0x361d2c0
	void OnInput_OBC_ShowHideRouteDebugView(); // Function GPGameplay.GPInputManager.OnInput_OBC_ShowHideRouteDebugView // (Final|Native|Public) // @ game+0x361d2a0
	void OnInput_OBC_ShowHidePanel(); // Function GPGameplay.GPInputManager.OnInput_OBC_ShowHidePanel // (Final|Native|Public) // @ game+0x361d280
	void OnInput_OBC_RightBtnClick(); // Function GPGameplay.GPInputManager.OnInput_OBC_RightBtnClick // (Final|Native|Public) // @ game+0x361d260
	void OnInput_OBC_PrevTeam(); // Function GPGameplay.GPInputManager.OnInput_OBC_PrevTeam // (Final|Native|Public) // @ game+0x361d240
	void OnInput_OBC_NextTeam(); // Function GPGameplay.GPInputManager.OnInput_OBC_NextTeam // (Final|Native|Public) // @ game+0x361d220
	void OnInput_OBC_LeftBtnClick(); // Function GPGameplay.GPInputManager.OnInput_OBC_LeftBtnClick // (Final|Native|Public) // @ game+0x361d200
	void OnInput_OBC_GenerateMoveRoute(); // Function GPGameplay.GPInputManager.OnInput_OBC_GenerateMoveRoute // (Final|Native|Public) // @ game+0x361d1e0
	void OnInput_OBC_GenerateFaceRoute(); // Function GPGameplay.GPInputManager.OnInput_OBC_GenerateFaceRoute // (Final|Native|Public) // @ game+0x361d1c0
	void OnInput_OBC_ClearMoveRoute(); // Function GPGameplay.GPInputManager.OnInput_OBC_ClearMoveRoute // (Final|Native|Public) // @ game+0x361d1a0
	void OnInput_OBC_ClearFaceRoute(); // Function GPGameplay.GPInputManager.OnInput_OBC_ClearFaceRoute // (Final|Native|Public) // @ game+0x361d180
	void OnInput_OBC_CatchMoveRoutePoint(); // Function GPGameplay.GPInputManager.OnInput_OBC_CatchMoveRoutePoint // (Final|Native|Public) // @ game+0x361d160
	void OnInput_OBC_CatchFaceRoutePoint(); // Function GPGameplay.GPInputManager.OnInput_OBC_CatchFaceRoutePoint // (Final|Native|Public) // @ game+0x361d140
	void OnInput_OBC_CameraSpeedUp(); // Function GPGameplay.GPInputManager.OnInput_OBC_CameraSpeedUp // (Final|Native|Public) // @ game+0x361d120
	void OnInput_OBC_CameraSpeedDown(); // Function GPGameplay.GPInputManager.OnInput_OBC_CameraSpeedDown // (Final|Native|Public) // @ game+0x361d100
	void OnHudInputAxis(enum class EInputAxisType InputAxisType, float InputValue); // Function GPGameplay.GPInputManager.OnHudInputAxis // (Final|Native|Public|BlueprintCallable) // @ game+0x361b4e0
	void OnHudInputAction(enum class EInputActionType InputActionType, bool InputValue); // Function GPGameplay.GPInputManager.OnHudInputAction // (Native|Public|BlueprintCallable) // @ game+0x361b410
	void OnFourthVehicleSkillUp(); // Function GPGameplay.GPInputManager.OnFourthVehicleSkillUp // (Final|Native|Public) // @ game+0x361b3f0
	void OnFourthVehicleSkillDown(); // Function GPGameplay.GPInputManager.OnFourthVehicleSkillDown // (Final|Native|Public) // @ game+0x361b3d0
	void OnFirstVehicleSkillUp(); // Function GPGameplay.GPInputManager.OnFirstVehicleSkillUp // (Final|Native|Public) // @ game+0x361b3b0
	void OnFirstVehicleSkillDown(); // Function GPGameplay.GPInputManager.OnFirstVehicleSkillDown // (Final|Native|Public) // @ game+0x361b390
	void OnExitFreeLookaroundMode(); // Function GPGameplay.GPInputManager.OnExitFreeLookaroundMode // (Final|Native|Public) // @ game+0x361b370
	void OnEnterFreeLookaroundMode(); // Function GPGameplay.GPInputManager.OnEnterFreeLookaroundMode // (Final|Native|Public) // @ game+0x361b350
	void OnEnqueueInputAction(enum class EInputActionType InputActionType, bool bDelayOneTick); // Function GPGameplay.GPInputManager.OnEnqueueInputAction // (Final|Native|Public|BlueprintCallable) // @ game+0x361b280
	void OnChangeVehicleSeat6(); // Function GPGameplay.GPInputManager.OnChangeVehicleSeat6 // (Final|Native|Public) // @ game+0x361b260
	void OnChangeVehicleSeat5(); // Function GPGameplay.GPInputManager.OnChangeVehicleSeat5 // (Final|Native|Public) // @ game+0x361b240
	void OnChangeVehicleSeat4(); // Function GPGameplay.GPInputManager.OnChangeVehicleSeat4 // (Final|Native|Public) // @ game+0x361b220
	void OnChangeVehicleSeat3(); // Function GPGameplay.GPInputManager.OnChangeVehicleSeat3 // (Final|Native|Public) // @ game+0x361b200
	void OnChangeVehicleSeat2(); // Function GPGameplay.GPInputManager.OnChangeVehicleSeat2 // (Final|Native|Public) // @ game+0x361b1e0
	void OnChangeVehicleSeat1(); // Function GPGameplay.GPInputManager.OnChangeVehicleSeat1 // (Final|Native|Public) // @ game+0x361b1c0
	bool IsInputDeviceAimAssistAllowed(); // Function GPGameplay.GPInputManager.IsInputDeviceAimAssistAllowed // (Native|Public) // @ game+0x175ca50
	bool IsAxisEnabledWhenUIOnly(enum class EInputAxisType InputAxisType); // Function GPGameplay.GPInputManager.IsAxisEnabledWhenUIOnly // (Native|Public) // @ game+0x361b110
	bool IsActionEnabledWhenUIOnly(enum class EInputActionType InputActionType); // Function GPGameplay.GPInputManager.IsActionEnabledWhenUIOnly // (Native|Public) // @ game+0x361b080
	enum class EInputActionType GetReleasedInputActionTypeByActionName(struct FName ActionName); // Function GPGameplay.GPInputManager.GetReleasedInputActionTypeByActionName // (Final|Native|Public) // @ game+0x361aff0
	enum class EInputActionType GetPressedInputActionTypeByActionName(struct FName ActionName); // Function GPGameplay.GPInputManager.GetPressedInputActionTypeByActionName // (Final|Native|Public) // @ game+0x361af60
	struct FName GetAxisNameByInputAxisType(enum class EInputAxisType InputAxisType); // Function GPGameplay.GPInputManager.GetAxisNameByInputAxisType // (Final|Native|Public) // @ game+0x361aed0
	struct FName GetActionNameByInputActionType(enum class EInputActionType InputActionType); // Function GPGameplay.GPInputManager.GetActionNameByInputActionType // (Final|Native|Public) // @ game+0x361ae40
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPInteractorBase
// Size: 0x3c0 (Inherited: 0x378)
class AGPInteractorBase : public AActor {
public:

	char pad_378[0x48]; // 0x378(0x48)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPInventory
// Size: 0x380 (Inherited: 0x378)
class AGPInventory : public AActor {
public:

	struct UCapsuleComponent* CapsuleComponent; // 0x378(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPItemSubsystem
// Size: 0x40 (Inherited: 0x38)
class UGPItemSubsystem : public UEngineSubsystem {
public:

	struct UModularApperanceBaseProvider* ModularApperanceBaseProvider; // 0x38(0x08)

	bool SwitchWhenAbilityItemAmmoEmpty(struct AWeaponBase* Weapon); // Function GPGameplay.GPItemSubsystem.SwitchWhenAbilityItemAmmoEmpty // (Native|Public) // @ game+0x3626430
	bool IsAbilityItemByWeaponId(uint64_t WeaponID); // Function GPGameplay.GPItemSubsystem.IsAbilityItemByWeaponId // (Native|Public) // @ game+0x36242c0
	bool IsAbilityItem(struct AWeaponBase* Weapon); // Function GPGameplay.GPItemSubsystem.IsAbilityItem // (Native|Public) // @ game+0x921d00
	struct UModularApperanceBaseProvider* GetModularAppearanceProvider(struct UWorld* World); // Function GPGameplay.GPItemSubsystem.GetModularAppearanceProvider // (Native|Public) // @ game+0x3623fc0
	int32_t GetItemQuality(uint64_t ItemID); // Function GPGameplay.GPItemSubsystem.GetItemQuality // (Native|Public) // @ game+0x3623b90
	struct FSoftObjectPath GetItemMeshPath(uint64_t AmmoId); // Function GPGameplay.GPItemSubsystem.GetItemMeshPath // (Native|Public|HasDefaults) // @ game+0x3623ae0
	void GetInventoryMatchedAmmo(/*struct AGPCharacter* InCharacter, uint64_t InWeaponId, struct TSet<uint64_t>& AmmoIdSet*/); // Function GPGameplay.GPItemSubsystem.GetInventoryMatchedAmmo // (Native|Public|HasOutParms) // @ game+0x3623830
	struct UGPItemSubsystem* STATIC_Get(struct UWorld* World); // Function GPGameplay.GPItemSubsystem.Get // (Final|Native|Static|Public) // @ game+0x3623500
	uint64_t GenGid(); // Function GPGameplay.GPItemSubsystem.GenGid // (Native|Public|Const) // @ game+0x36234d0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPKnockbackMoveComponent
// Size: 0x2a0 (Inherited: 0x100)
class UGPKnockbackMoveComponent : public UActorComponent {
public:

	struct AGPCharacter* CharacterOwner; // 0x100(0x08)
	struct TWeakObjectPtr<struct AGPCharacter> KnockbackMaker; // 0x108(0x08)
	struct FVector KnockbackWeaponPos; // 0x110(0x0c)
	char pad_11C[0x4]; // 0x11c(0x04)
	struct FTimerHandle StopHandler; // 0x120(0x08)
	struct FTimerHandle GetUpTimeHandler; // 0x128(0x08)
	struct FTimerHandle FallDownTimeHandler; // 0x130(0x08)
	struct FTimerHandle playTimeHandler; // 0x138(0x08)
	struct FTimerHandle ClientStopKnockbackTimerHandler; // 0x140(0x08)
	struct FTimerHandle ServerEndMoveModeTimeHandler; // 0x148(0x08)
	struct FTimerHandle ServerBeginMoveModeTimeHandler; // 0x150(0x08)
	struct FAbilityKnockbackSettingConfig KnockbackSettingConfig; // 0x158(0x88)
	bool IsPlayedPostEffect; // 0x1e0(0x01)
	char pad_1E1[0x3]; // 0x1e1(0x03)
	float CurrentTimeScale; // 0x1e4(0x04)
	struct FVector VelocityDirection; // 0x1e8(0x0c)
	struct FVector MoveAdjusted; // 0x1f4(0x0c)
	float OldAccumulateRushTime; // 0x200(0x04)
	float AccumulateRushTime; // 0x204(0x04)
	float StartKnockBackTime; // 0x208(0x04)
	bool bKnockBack; // 0x20c(0x01)
	char pad_20D[0x3]; // 0x20d(0x03)
	struct FVector InitZeroBasedLocation; // 0x210(0x0c)
	float EnteringRushSpeed; // 0x21c(0x04)
	float CurrentSpeed; // 0x220(0x04)
	float CurrentSpeedZ; // 0x224(0x04)
	float InitSpeedZ; // 0x228(0x04)
	bool bLocalDown; // 0x22c(0x01)
	bool bLocalGetUp; // 0x22d(0x01)
	enum class EKnockBackState KnockBackState; // 0x22e(0x01)
	char pad_22F[0x1]; // 0x22f(0x01)
	struct FVector KnockBackStartPos; // 0x230(0x0c)
	struct FRotator KnockBackStartRot; // 0x23c(0x0c)
	struct FRotator KnockBackEndRot; // 0x248(0x0c)
	float CurRotLerpTime; // 0x254(0x04)
	struct FRotator CharacterRotator; // 0x258(0x0c)
	bool bCacheCharacterRotator; // 0x264(0x01)
	char pad_265[0x3]; // 0x265(0x03)
	struct UAnimMontage* KnockbackAction_Montage; // 0x268(0x08)
	struct UAnimMontage* KnockbackAction_MontageFPP; // 0x270(0x08)
	bool IsPlayEndAnim; // 0x278(0x01)
	char pad_279[0x3]; // 0x279(0x03)
	float KnockBackStartTime; // 0x27c(0x04)
	float KnockBackLoopTime; // 0x280(0x04)
	float KnockBackEndTime; // 0x284(0x04)
	char pad_288[0xc]; // 0x288(0x0c)
	float InvertKnockBackDownTime; // 0x294(0x04)
	enum class EKnockbackFromType KnockbackFromType; // 0x298(0x01)
	char pad_299[0x7]; // 0x299(0x07)

	void StopKnockback(); // Function GPGameplay.GPKnockbackMoveComponent.StopKnockback // (Final|Native|Public) // @ game+0x36263f0
	void StartGetUp(); // Function GPGameplay.GPKnockbackMoveComponent.StartGetUp // (Final|Native|Public) // @ game+0x36263d0
	void OnFallDown(); // Function GPGameplay.GPKnockbackMoveComponent.OnFallDown // (Final|Native|Public) // @ game+0x3624860
	void OnClientStopKnockbackTimer(); // Function GPGameplay.GPKnockbackMoveComponent.OnClientStopKnockbackTimer // (Final|Native|Public) // @ game+0x3624840
	bool IsServerOfflineMode(); // Function GPGameplay.GPKnockbackMoveComponent.IsServerOfflineMode // (Native|Public) // @ game+0x36246d0
	void ClientStopKnockback(); // Function GPGameplay.GPKnockbackMoveComponent.ClientStopKnockback // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1e377d0
	void ClientPlayEndAnim(); // Function GPGameplay.GPKnockbackMoveComponent.ClientPlayEndAnim // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1e36270
	void ClientKnockback(struct FVector weaponPos, enum class EKnockbackFromType InKnockbackFromType); // Function GPGameplay.GPKnockbackMoveComponent.ClientKnockback // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x3622db0
	void ClearKnockMoveMode(); // Function GPGameplay.GPKnockbackMoveComponent.ClearKnockMoveMode // (Final|Native|Public) // @ game+0x3622cc0
	void ClearClientStopKnockbackTimer(); // Function GPGameplay.GPKnockbackMoveComponent.ClearClientStopKnockbackTimer // (Final|Native|Public) // @ game+0x3622ca0
	void CheckPlayEndAnim(); // Function GPGameplay.GPKnockbackMoveComponent.CheckPlayEndAnim // (Final|Native|Public) // @ game+0x3622c80
	void BreakKnockback(); // Function GPGameplay.GPKnockbackMoveComponent.BreakKnockback // (Final|Native|Public) // @ game+0x3622bd0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPLevelSequenceActingComponent
// Size: 0x148 (Inherited: 0x100)
class UGPLevelSequenceActingComponent : public UActorComponent {
public:

	struct FSoftObjectPath LevelSequencePath; // 0x100(0x18)
	struct FName BindSequenceActorTag; // 0x118(0x08)
	struct FMovieSceneSequencePlaybackSettings PlaybackSettings; // 0x120(0x14)
	char pad_134[0x4]; // 0x134(0x04)
	struct ALevelSequenceActor* LevelSequenceActor; // 0x138(0x08)
	bool bAutoPlayAfterAssetLoaded; // 0x140(0x01)
	char pad_141[0x7]; // 0x141(0x07)

	void StopLevelSequence(); // Function GPGameplay.GPLevelSequenceActingComponent.StopLevelSequence // (Final|Native|Public|BlueprintCallable) // @ game+0x3626410
	void PlayLevelSequence(); // Function GPGameplay.GPLevelSequenceActingComponent.PlayLevelSequence // (Final|Native|Public|BlueprintCallable) // @ game+0x3624b00
	void PauseLevelSequence(); // Function GPGameplay.GPLevelSequenceActingComponent.PauseLevelSequence // (Final|Native|Public|BlueprintCallable) // @ game+0x3624ae0
	void OnRep_LevelSequenceActor(); // Function GPGameplay.GPLevelSequenceActingComponent.OnRep_LevelSequenceActor // (Final|Native|Private) // @ game+0x3624a60
	void OnLevelSeuqenceStop(); // Function GPGameplay.GPLevelSequenceActingComponent.OnLevelSeuqenceStop // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x35a3800
	void OnLevelSeuqencePlay(); // Function GPGameplay.GPLevelSequenceActingComponent.OnLevelSeuqencePlay // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1e377d0
	void OnLevelSeuqencePause(); // Function GPGameplay.GPLevelSequenceActingComponent.OnLevelSeuqencePause // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3624900
	void OnLevelSeuqenceFinished(); // Function GPGameplay.GPLevelSequenceActingComponent.OnLevelSeuqenceFinished // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x35e4a10
	void ClientsBindSequenceActor(struct ALevelSequenceActor* SequenceActor); // Function GPGameplay.GPLevelSequenceActingComponent.ClientsBindSequenceActor // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0xbd8930
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPLevelSubsystemCollection
// Size: 0xc8 (Inherited: 0xc8)
class UGPLevelSubsystemCollection : public ULevelSubsystemCollection {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPLocalPlayer
// Size: 0x278 (Inherited: 0x278)
class UGPLocalPlayer : public ULocalPlayer {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPLuaQuestDataWrapper
// Size: 0x48 (Inherited: 0x30)
class UGPLuaQuestDataWrapper : public UObject {
public:

	int64_t ServerTime; // 0x30(0x08)
	struct TArray<struct FGPLuaQuestData> Data; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPMarkableActorInterface
// Size: 0x30 (Inherited: 0x30)
class UGPMarkableActorInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPBlueprintsMarkableActorInterface
// Size: 0x30 (Inherited: 0x30)
class UGPBlueprintsMarkableActorInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPMarkerColorDataManager
// Size: 0x48 (Inherited: 0x38)
class UGPMarkerColorDataManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPMarkerColorConfig
// Size: 0x30 (Inherited: 0x30)
class UGPMarkerColorConfig : public UObject {
public:


	struct FLinearColor STATIC_GetColorByType(enum class EGPMarkerColorType InColorType); // Function GPGameplay.GPMarkerColorConfig.GetColorByType // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3623580
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPMarkerControllerComponent
// Size: 0x420 (Inherited: 0x100)
class UGPMarkerControllerComponent : public UActorComponent {
public:

	struct AGPPlayerController* LocalGPPlayerController; // 0x100(0x08)
	struct AGPAIController* OwnerAiController; // 0x108(0x08)
	struct AGPMarkerManager* MarkerManager; // 0x110(0x08)
	struct UMarkingConfigsDataTableManager* MarkingConfigDataTableMng; // 0x118(0x08)
	struct FMarkingConfigDataTableRow CacheMarkingConfigRow; // 0x120(0x1f8)
	struct TArray<struct FLocationMarkingInfo> LocationMarkingInfoArray; // 0x318(0x10)
	struct TArray<struct FItemMarkingInfo> ItemMarkingInfoArray; // 0x328(0x10)
	struct TArray<struct FUnitMarkingInfo> UnitMarkingInfoArray; // 0x338(0x10)
	struct TArray<struct FBubbleMarkingInfo> UnitBubbleMarkingInfoArray; // 0x348(0x10)
	struct UMarkingChatMessageDataTableManager* MarkingChatMsgDataTableMng; // 0x358(0x08)
	struct UMarkingCharacterVoiceDataTableManager* MarkingCharacterVoiceDataTableMng; // 0x360(0x08)
	struct TArray<float> MarkEnemyMarkTimeArray; // 0x368(0x10)
	struct FTimerHandle NormalLocationMarkSendChatDelayTimerHandle; // 0x378(0x08)
	struct TMap<uint64_t, uint32_t> TotalMarkerActorNumMap; // 0x380(0x50)
	struct TMap<uint64_t, uint32_t> TotalMarkerLocationNumMap; // 0x3d0(0x50)

	void WantLocalCharacterSpeak(enum class EMarkingMarkerType MarkingMarkerType, int32_t MarkingSubType, bool bIsRespond); // Function GPGameplay.GPMarkerControllerComponent.WantLocalCharacterSpeak // (Native|Public) // @ game+0x3626820
	void UpdateMapUnitMarker(struct FUnitMarkingInfo MarkingUnitInfo); // Function GPGameplay.GPMarkerControllerComponent.UpdateMapUnitMarker // (Final|Native|Public) // @ game+0x3626720
	void UpdateMapLocationMarker(struct FLocationMarkingInfo MarkingLocationInfo); // Function GPGameplay.GPMarkerControllerComponent.UpdateMapLocationMarker // (Native|Public) // @ game+0x3626640
	void UpdateMapItemMarker(struct FItemMarkingInfo MarkingItemInfo); // Function GPGameplay.GPMarkerControllerComponent.UpdateMapItemMarker // (Native|Public) // @ game+0x3626550
	void TickMarkingInfoArrays(float DeltaTime); // Function GPGameplay.GPMarkerControllerComponent.TickMarkingInfoArrays // (Final|Native|Public) // @ game+0x36264d0
	void ServerRemoveBubbleMarker(enum class EQuickChatMarkingItemType InItemType, struct AActor* MarkedActor); // Function GPGameplay.GPMarkerControllerComponent.ServerRemoveBubbleMarker // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3626280
	void ServerCancelUnitMarkerByBigMap(struct AActor* MarkedActor); // Function GPGameplay.GPMarkerControllerComponent.ServerCancelUnitMarkerByBigMap // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x360b800
	void ServerCancelUnitMarker(uint64_t MarkerUniqueId); // Function GPGameplay.GPMarkerControllerComponent.ServerCancelUnitMarker // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x360c630
	void ServerCancelLocationMarker(enum class EMarkingLocationType CancelMarkingLocationType, struct AGPCharacter* MarkerOwner); // Function GPGameplay.GPMarkerControllerComponent.ServerCancelLocationMarker // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36261b0
	void ServerCancelItemMarker(enum class EMarkingItemType CancelMarkingItemType, uint64_t ItemID, bool bIsRespond, struct AGPCharacter* MarkerOwner); // Function GPGameplay.GPMarkerControllerComponent.ServerCancelItemMarker // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3626060
	void ServerAddUnitMarkerByBigMap(struct AActor* MarkedActor); // Function GPGameplay.GPMarkerControllerComponent.ServerAddUnitMarkerByBigMap // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3625fd0
	void ServerAddUnitMarker(uint64_t MarkerUniqueId, uint64_t MarkerPlayerUin, struct AActor* MarkedActor, uint32_t markerType, enum class EMarkerCampType ShowMarkerCamp, enum class EMarkerCampType MarkedActorCamp); // Function GPGameplay.GPMarkerControllerComponent.ServerAddUnitMarker // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3625e10
	void ServerAddLocationMarker(enum class EMarkingLocationType InMarkingLocationType, struct FVector InMarkingLocation, struct FVector InMarkingHitNormal); // Function GPGameplay.GPMarkerControllerComponent.ServerAddLocationMarker // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x3625cf0
	void ServerAddItemRespondMarker(struct FItemMarkingInfo MarkingItemInfo); // Function GPGameplay.GPMarkerControllerComponent.ServerAddItemRespondMarker // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3625c00
	void ServerAddItemMarker(struct AActor* ItemActor, enum class EMarkingItemType MarkingItemType); // Function GPGameplay.GPMarkerControllerComponent.ServerAddItemMarker // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3625b30
	void ServerAddItemInContainerMarker(struct AActor* ContainerActor, uint64_t ItemID, uint64_t ItemGid, enum class EMarkingItemType MarkingItemType, struct FGPWeaponDescInfo WeaponDescInfo); // Function GPGameplay.GPMarkerControllerComponent.ServerAddItemInContainerMarker // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3625920
	void ServerAddBubbleMarker(uint32_t InMarkerType, enum class EQuickChatMarkingItemType InItemType, struct AGPCharacter* OwnerCharacter, struct AActor* MarkedActor); // Function GPGameplay.GPMarkerControllerComponent.ServerAddBubbleMarker // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36257e0
	void SendChatMsg(enum class EMarkingChatType MarkingChatType, bool bIsRespond); // Function GPGameplay.GPMarkerControllerComponent.SendChatMsg // (Native|Public) // @ game+0x3625710
	void RespondToMarker(uint32_t markerType, struct UGPMarkerItemBase* MarkerItem); // Function GPGameplay.GPMarkerControllerComponent.RespondToMarker // (Final|Native|Public) // @ game+0x3625650
	void RemoveUnitMarkingInfoFromAll(struct FUnitMarkingInfo UnitMarkingInfo, bool bRemovedProactively); // Function GPGameplay.GPMarkerControllerComponent.RemoveUnitMarkingInfoFromAll // (Final|Native|Public) // @ game+0x3625510
	void RemoveUnitMarkingInfo(uint64_t InUniqueId, bool bRemovedProactively); // Function GPGameplay.GPMarkerControllerComponent.RemoveUnitMarkingInfo // (Native|Public) // @ game+0x3625440
	void RemoveUnitBubbleMarkingInfo(struct AActor* MarkedActor); // Function GPGameplay.GPMarkerControllerComponent.RemoveUnitBubbleMarkingInfo // (Final|Native|Public) // @ game+0x36253c0
	void RemoveMapUnitMarker(struct FUnitMarkingInfo MarkingUnitInfo); // Function GPGameplay.GPMarkerControllerComponent.RemoveMapUnitMarker // (Final|Native|Public) // @ game+0x36252c0
	void RemoveMapLocMarker(struct AGPCharacter* OwnerCharacter, enum class EMarkingLocationType MarkingLocationType); // Function GPGameplay.GPMarkerControllerComponent.RemoveMapLocMarker // (Native|Public) // @ game+0x36251f0
	void RemoveMapItemMarker(struct AGPCharacter* OwnerCharacter, enum class EMarkingItemType MarkingItemType); // Function GPGameplay.GPMarkerControllerComponent.RemoveMapItemMarker // (Native|Public) // @ game+0x3625120
	void RemoveLocationMarkingInfo(enum class EMarkingLocationType CancelMarkingLocationType, struct AGPCharacter* MarkerOwner, bool bRemovedProactively); // Function GPGameplay.GPMarkerControllerComponent.RemoveLocationMarkingInfo // (Final|Native|Public) // @ game+0x3625010
	void RemoveItemMarkingInfo(enum class EMarkingItemType CancelMarkingItemType, bool bIsRespond, struct AGPCharacter* MarkerOwner, bool bRemovedProactively); // Function GPGameplay.GPMarkerControllerComponent.RemoveItemMarkingInfo // (Final|Native|Public) // @ game+0x3624ec0
	void PreFilterPendingMarkActors_SOL(struct TArray<struct AActor*>& OutPendingMarkActors); // Function GPGameplay.GPMarkerControllerComponent.PreFilterPendingMarkActors_SOL // (Native|Public|HasOutParms) // @ game+0x3624c40
	void PlayerWantToRespondMarker(); // Function GPGameplay.GPMarkerControllerComponent.PlayerWantToRespondMarker // (Final|Native|Public|BlueprintCallable) // @ game+0x3624c20
	void PlayerWantToRespondMapMarker(); // Function GPGameplay.GPMarkerControllerComponent.PlayerWantToRespondMapMarker // (Final|Native|Public) // @ game+0x3624c00
	void PlayerWantToMarkSomething(bool bOnlyLocation, enum class EMarkingLocationType MarkingLocationType); // Function GPGameplay.GPMarkerControllerComponent.PlayerWantToMarkSomething // (Final|Native|Public|BlueprintCallable) // @ game+0x3624b40
	void PlayerWantToCancelMarker(); // Function GPGameplay.GPMarkerControllerComponent.PlayerWantToCancelMarker // (Final|Native|Public|BlueprintCallable) // @ game+0x3624b20
	void OnRep_UnitMarkingInfoArray(); // Function GPGameplay.GPMarkerControllerComponent.OnRep_UnitMarkingInfoArray // (Final|Native|Public) // @ game+0x3624ac0
	void OnRep_UnitBubbleMarkingInfoArray(); // Function GPGameplay.GPMarkerControllerComponent.OnRep_UnitBubbleMarkingInfoArray // (Final|Native|Public) // @ game+0x3624aa0
	void OnRep_LocationMarkingInfoArray(); // Function GPGameplay.GPMarkerControllerComponent.OnRep_LocationMarkingInfoArray // (Final|Native|Public) // @ game+0x3624a80
	void OnRep_ItemMarkingInfoArray(); // Function GPGameplay.GPMarkerControllerComponent.OnRep_ItemMarkingInfoArray // (Final|Native|Public) // @ game+0x3624a40
	void OnMarkingDoubleClickDown(); // Function GPGameplay.GPMarkerControllerComponent.OnMarkingDoubleClickDown // (Final|Native|Public) // @ game+0x3624920
	bool IsUnitMarkingInfoShouldRemoved(struct FUnitMarkingInfo MarkingUnitInfo); // Function GPGameplay.GPMarkerControllerComponent.IsUnitMarkingInfoShouldRemoved // (Final|Native|Public) // @ game+0x3624700
	bool IsLocationMarkingInfoShouldRemoved(struct FLocationMarkingInfo MarkingLocationInfo); // Function GPGameplay.GPMarkerControllerComponent.IsLocationMarkingInfoShouldRemoved // (Final|Native|Public) // @ game+0x36245f0
	bool IsItemRespondMarkingInfoShouldRemoved(struct FItemMarkingInfo MarkingItemInfo); // Function GPGameplay.GPMarkerControllerComponent.IsItemRespondMarkingInfoShouldRemoved // (Native|Public) // @ game+0x36244f0
	bool IsItemMarkingInfoShouldRemoved(struct FItemMarkingInfo MarkingItemInfo); // Function GPGameplay.GPMarkerControllerComponent.IsItemMarkingInfoShouldRemoved // (Native|Public) // @ game+0x36243f0
	bool IsActorSameCampAsLocal(struct AActor* inActor); // Function GPGameplay.GPMarkerControllerComponent.IsActorSameCampAsLocal // (Final|Native|Public) // @ game+0x3624360
	bool GetShowMarkedItemByGID(uint64_t ItemGid, struct FItemMarkingInfo& ShowItemMarkingInfo); // Function GPGameplay.GPMarkerControllerComponent.GetShowMarkedItemByGID // (Final|Native|Public|HasOutParms) // @ game+0x3624190
	bool GetPlayerMarkItem(struct AGPCharacter* OwnerCharacter, struct FItemMarkingInfo& OutItemMarkingInfo); // Function GPGameplay.GPMarkerControllerComponent.GetPlayerMarkItem // (Final|Native|Public|HasOutParms) // @ game+0x3624060
	struct AGPCharacter* GetMPMurderer(); // Function GPGameplay.GPMarkerControllerComponent.GetMPMurderer // (Native|Protected) // @ game+0x3623d00
	struct FString GetMarkingCharacterVoiceConfigInComp(uint32_t InMarkerType, int32_t MarkingSubType, bool bIsRespond); // Function GPGameplay.GPMarkerControllerComponent.GetMarkingCharacterVoiceConfigInComp // (Native|Public) // @ game+0x3623e70
	bool GetMarkedItemsByGID(uint64_t ItemGid, struct TArray<struct FItemMarkingInfo>& OutItemMarkingInfos); // Function GPGameplay.GPMarkerControllerComponent.GetMarkedItemsByGID // (Final|Native|Public|HasOutParms) // @ game+0x3623d30
	int32_t GetLootItemsMaxQuality(struct AGPCharacter* CHARACTER, struct AActor* Loot0bj); // Function GPGameplay.GPMarkerControllerComponent.GetLootItemsMaxQuality // (Native|Public) // @ game+0x3623c30
	bool GetItemMarkingInfoByItemID(uint64_t ItemID, struct FItemMarkingInfo& OutItemMarkingInfo); // Function GPGameplay.GPMarkerControllerComponent.GetItemMarkingInfoByItemID // (Final|Native|Public|HasOutParms) // @ game+0x36239b0
	struct FMarkingConfigDataTableRow GetCurMarkingConfig(); // Function GPGameplay.GPMarkerControllerComponent.GetCurMarkingConfig // (Final|Native|Public) // @ game+0x3623600
	bool FindIsReplicatedMarkerInfoByPlayerUin(uint64_t InPlayerUin, int32_t InMarkerType); // Function GPGameplay.GPMarkerControllerComponent.FindIsReplicatedMarkerInfoByPlayerUin // (Final|Native|Public) // @ game+0x3623410
	void DoMarkUnit(struct AActor* InUnitActor); // Function GPGameplay.GPMarkerControllerComponent.DoMarkUnit // (Final|Native|Public) // @ game+0x3623390
	void DoMarkItem(struct AActor* InItemActor); // Function GPGameplay.GPMarkerControllerComponent.DoMarkItem // (Final|Native|Public) // @ game+0x3623310
	void ClientShowBubbleMarker(struct FBubbleMarkingInfo NewMarkerInfo); // Function GPGameplay.GPMarkerControllerComponent.ClientShowBubbleMarker // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3623230
	void ClientRemoveUnitMarkingInfo(struct FUnitMarkingInfo UnitMarkingInfo, bool bRemovedProactively); // Function GPGameplay.GPMarkerControllerComponent.ClientRemoveUnitMarkingInfo // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x36230f0
	void ClientRemoveLocationMarkingInfo(struct FLocationMarkingInfo LocationMarkingInfo, bool bRemovedProactively); // Function GPGameplay.GPMarkerControllerComponent.ClientRemoveLocationMarkingInfo // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3622fc0
	void ClientRemoveItemMarkingInfo(struct FItemMarkingInfo ItemMarkingInfo, bool bRemovedProactively); // Function GPGameplay.GPMarkerControllerComponent.ClientRemoveItemMarkingInfo // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3622e80
	void ClientHideItemMarker(struct AActor* ItemActor, bool bHide); // Function GPGameplay.GPMarkerControllerComponent.ClientHideItemMarker // (Final|Native|Public) // @ game+0x3622ce0
	bool CancelMarkItem(struct AActor* InItemActor); // Function GPGameplay.GPMarkerControllerComponent.CancelMarkItem // (Final|Native|Public) // @ game+0x3622bf0
	void AddUnitMarkingInfo(struct FUnitMarkingInfo& InUnitMarkingInfo); // Function GPGameplay.GPMarkerControllerComponent.AddUnitMarkingInfo // (Native|Public|HasOutParms) // @ game+0x3622af0
	void AddUnitBubbleMarkingInfo(struct FBubbleMarkingInfo& BubbleMarkingInfo); // Function GPGameplay.GPMarkerControllerComponent.AddUnitBubbleMarkingInfo // (Final|Native|Public|HasOutParms) // @ game+0x3622a40
	void AddMapUnitMarker(struct FUnitMarkingInfo MarkingUnitInfo); // Function GPGameplay.GPMarkerControllerComponent.AddMapUnitMarker // (Final|Native|Public) // @ game+0x3622940
	void AddMapLocationMarker(struct FLocationMarkingInfo MarkingLocationInfo); // Function GPGameplay.GPMarkerControllerComponent.AddMapLocationMarker // (Native|Public) // @ game+0x3622860
	void AddMapItemMarker(struct FItemMarkingInfo MarkingItemInfo); // Function GPGameplay.GPMarkerControllerComponent.AddMapItemMarker // (Native|Public) // @ game+0x3622770
	void AddLocationMarkingInfo(struct FLocationMarkingInfo NewInfo); // Function GPGameplay.GPMarkerControllerComponent.AddLocationMarkingInfo // (Final|Native|Public) // @ game+0x3622690
	void AddItemMarkingInfo(struct FItemMarkingInfo NewInfo); // Function GPGameplay.GPMarkerControllerComponent.AddItemMarkingInfo // (Final|Native|Public) // @ game+0x36225b0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPMarkerCoordinator
// Size: 0x48 (Inherited: 0x30)
class UGPMarkerCoordinator : public UObject {
public:

	struct AGPMarkerManager* MarkerManager; // 0x30(0x08)
	struct TArray<struct FMarkerCoordinatedStruct> CoordinatedMarkers; // 0x38(0x10)

	enum class EMarkerCoordinatedType MarkerTypeChange(struct FMarkerCoordinatedStruct& MarkedActorStruct, enum class EMarkerCoordinatedType ChangedType, bool bAdd); // Function GPGameplay.GPMarkerCoordinator.MarkerTypeChange // (Final|Native|Private|HasOutParms) // @ game+0x362d3d0
	enum class EMarkerCoordinatedType GetMaxType(/*struct TSet<enum class EMarkerCoordinatedType> TypeSet*/); // Function GPGameplay.GPMarkerCoordinator.GetMaxType // (Final|Native|Private) // @ game+0x362d2b0
	uint32_t GetMarkedActorGUID(struct AActor* MarkedActor); // Function GPGameplay.GPMarkerCoordinator.GetMarkedActorGUID // (Final|Native|Private) // @ game+0x362d220
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.MarkingConfigsDataTableManager
// Size: 0x40 (Inherited: 0x38)
class UMarkingConfigsDataTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x8]; // 0x38(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.MarkingLocationTypeDataTableManager
// Size: 0x40 (Inherited: 0x38)
class UMarkingLocationTypeDataTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x8]; // 0x38(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.MarkingChatMessageDataTableManager
// Size: 0x40 (Inherited: 0x38)
class UMarkingChatMessageDataTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x8]; // 0x38(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.MarkingCharacterVoiceDataTableManager
// Size: 0x40 (Inherited: 0x38)
class UMarkingCharacterVoiceDataTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x8]; // 0x38(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPMarkerConfigDataAsset
// Size: 0x128 (Inherited: 0x38)
class UGPMarkerConfigDataAsset : public UDataAsset {
public:

	struct TMap<enum class EDFMGamePlayMode, struct FMarkerViewCreateCampBaseConfig> MarkerViewCreateCampBaseConfigMap; // 0x38(0x50)
	struct TMap<enum class EDFMGamePlayMode, struct FMarkerViewCreateCampBaseConfig> MarkerViewCreateCampBaseConfigMapMarking; // 0x88(0x50)
	struct TMap<enum class EDFMGamePlayMode, struct FMarkingCharacterVoiceConfig> MarkingCharacterVoiceConfigMap; // 0xd8(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPMarkerEffectComponent
// Size: 0x100 (Inherited: 0x100)
class UGPMarkerEffectComponent : public UActorComponent {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPMarkerManager
// Size: 0x1220 (Inherited: 0x378)
class AGPMarkerManager : public ALevelSubsystem {
public:

	char pad_378[0x8]; // 0x378(0x08)
	struct TArray<struct FTeamMemberInfo> MemberInfoList; // 0x380(0x10)
	struct AGPPlayerController* LocalGPPlayerController; // 0x390(0x08)
	struct AGPCharacter* LocalGPCharacter; // 0x398(0x08)
	struct AActor* PossessedGPCharacter; // 0x3a0(0x08)
	struct AGPPlayerState* LocalGPPlayerState; // 0x3a8(0x08)
	struct UWorld* CurrentWorld; // 0x3b0(0x08)
	struct AActor* CurrentAimedActor; // 0x3b8(0x08)
	struct AGPGameState* GPGameState; // 0x3c0(0x08)
	char pad_3C8[0x10]; // 0x3c8(0x10)
	struct TArray<struct UGPMarkerItemBase*> PendingAddItems; // 0x3d8(0x10)
	struct TMap<uint32_t, struct FActorMarkerItemPool> ActorMarkerItemPoolMap; // 0x3e8(0x50)
	struct TMap<uint32_t, struct FMarkerStringItemPool> MarkerStringItemPoolMap; // 0x438(0x50)
	struct TArray<struct UGPMarkerItemBase*> FriendlyCharacterMarkerItems; // 0x488(0x10)
	struct TArray<struct UGPMarkerItemBase*> EnemyCharacterMarkerItems; // 0x498(0x10)
	struct TArray<struct UGPMarkerItemBase*> SceneWeaponMarkerItems; // 0x4a8(0x10)
	struct TArray<struct UGPMarkerItemBase*> VehicleMarkerItems; // 0x4b8(0x10)
	struct TArray<struct UGPMarkerItemBase*> TacticalEquipmentMarkerItems; // 0x4c8(0x10)
	struct TArray<struct UGPMarkerItemBase*> BattleFieldGameModeMarkerItems; // 0x4d8(0x10)
	struct TArray<struct UGPMarkerItemBase*> SOLGameModeMarkerItems; // 0x4e8(0x10)
	struct TArray<struct UGPMarkerItemBase*> ContractMarkerItems; // 0x4f8(0x10)
	struct TArray<struct UGPMarkerItemBase*> MissionMarkerItems; // 0x508(0x10)
	struct TArray<struct UGPMarkerItemBase*> MapMarkerItems; // 0x518(0x10)
	struct TArray<struct UGPMarkerItemBase*> MarkingMarkerItems; // 0x528(0x10)
	char pad_538[0xa8]; // 0x538(0xa8)
	struct TArray<struct UClass*> ClassesWithMarkerInterface; // 0x5e0(0x10)
	float FireRevealDistance; // 0x5f0(0x04)
	float DefaultAimCheckDistance; // 0x5f4(0x04)
	float SelfViewCheckAngle; // 0x5f8(0x04)
	float RevealedViewCheckAngle; // 0x5fc(0x04)
	struct TArray<float> ZoomRateDistanceArray; // 0x600(0x10)
	float AICheckDistanceScalar; // 0x610(0x04)
	float MPAimCheckDistance; // 0x614(0x04)
	float MPAimCheckInterval; // 0x618(0x04)
	float MPShowCheckDistance; // 0x61c(0x04)
	struct TArray<struct ACHARACTER*> CurrentAimRevealArray; // 0x620(0x10)
	struct TArray<struct AActor*> CurrentMPAimActorArray; // 0x630(0x10)
	bool bNeedShowTransferMarker; // 0x640(0x01)
	char pad_641[0x3]; // 0x641(0x03)
	int32_t PendingUsingPoolMaxSize; // 0x644(0x04)
	char pad_648[0x8]; // 0x648(0x08)
	struct TMap<uint32_t, struct FMarkerPendingItem> MarkerItemPendingUsePool; // 0x650(0x50)
	struct AGPSceneActorReplicator* SceneActorReplicator; // 0x6a0(0x08)
	struct TMap<uint64_t, struct FMarkingSubTypeMarkerItemStruct> LocationMarkingMarkerPool; // 0x6a8(0x50)
	struct TMap<uint64_t, struct FMarkingSubTypeMarkerItemStruct> ItemMarkingMarkerPool; // 0x6f8(0x50)
	/*struct TSet<uint64_t>*/char UnitMarkingMarkerUniqueIdPool[0x50]; // 0x748(0x50)
	/*struct TSet<uint64_t>*/char UnitMarkingMarkerUniqueIdPool_JustRemove[0x50]; // 0x798(0x50)
	struct TMap<uint32_t, struct FUnitMarkingInfoStruct> ServerAllUnitMarkingInfoArraysMap; // 0x7e8(0x50)
	struct UGPMarkerItemBase* CurrentAimMarkingMarker; // 0x838(0x08)
	uint32_t CurrentAimMarkingMarkerType; // 0x840(0x04)
	char pad_844[0xc]; // 0x844(0x0c)
	struct AActor* CurInteractorPanelShowingActor; // 0x850(0x08)
	float LastTimeUpdateCurAimMarker; // 0x858(0x04)
	float UpdateCurAimMarkerInterval; // 0x85c(0x04)
	struct TMap<enum class EMarkerRefreshFrequencyLevel, struct FMarkerTickBucket> MarkerTickBuckets; // 0x860(0x50)
	struct TMap<enum class EQuickChatMarkingItemType, struct FMarkingBubbleConfig> MarkingBubbleTypeConfigMap; // 0x8b0(0x50)
	float TeammateMarkerRefreshIntervalMoblie; // 0x900(0x04)
	float TeammateMarkerRefreshIntervalHD; // 0x904(0x04)
	struct TMap<enum class EFriendlyCharacterMarkerType, struct FMarkerItemCreateConfig> FriendlyCharacterMarkerItemCreateConfig; // 0x908(0x50)
	struct TMap<enum class EEnemyCharacterMarkerType, struct FMarkerItemCreateConfig> EnemyCharacterMarkerItemCreateConfig; // 0x958(0x50)
	struct TMap<enum class ESceneWeaponMarkerType, struct FMarkerItemCreateConfig> SceneWeaponMarkerItemCreateConfig; // 0x9a8(0x50)
	struct TMap<enum class EVehicleMarkerType, struct FMarkerItemCreateConfig> VehicleMarkerItemCreateConfig; // 0x9f8(0x50)
	struct TMap<enum class ETacticalEquipmentMarkerType, struct FMarkerItemCreateConfig> TacticalEquipmentMarkerItemCreateConfig; // 0xa48(0x50)
	struct TMap<enum class EBattleFieldGameModeMarkerType, struct FMarkerItemCreateConfig> BattleFieldGameModeMarkerItemCreateConfig; // 0xa98(0x50)
	struct TMap<enum class ESOLGameModeMarkerType, struct FMarkerItemCreateConfig> SOLGameModeMarkerItemCreateConfig; // 0xae8(0x50)
	struct TMap<enum class EQuestMarkerMarkerType, struct FMarkerItemCreateConfig> ContractMarkerItemCreateConfig; // 0xb38(0x50)
	struct TMap<enum class EMapMarkerType, struct FMarkerItemCreateConfig> MapMarkerItemCreateConfig; // 0xb88(0x50)
	struct TMap<enum class EMarkingMarkerType, struct FMarkerItemCreateConfig> MarkingMarkerItemCreateConfig; // 0xbd8(0x50)
	struct TMap<enum class EInteractorMarkerType, struct FMarkerItemCreateConfig> InterActorMarkerItemCreateConfig; // 0xc28(0x50)
	struct TMap<enum class EFriendlyCharacterMarkerType, struct FMarkerItemCreateConfig> FriendlyCharacterMarkerItemCreateConfigHD; // 0xc78(0x50)
	struct TMap<enum class EEnemyCharacterMarkerType, struct FMarkerItemCreateConfig> EnemyCharacterMarkerItemCreateConfigHD; // 0xcc8(0x50)
	struct TMap<enum class ESceneWeaponMarkerType, struct FMarkerItemCreateConfig> SceneWeaponMarkerItemCreateConfigHD; // 0xd18(0x50)
	struct TMap<enum class EVehicleMarkerType, struct FMarkerItemCreateConfig> VehicleMarkerItemCreateConfigHD; // 0xd68(0x50)
	struct TMap<enum class ETacticalEquipmentMarkerType, struct FMarkerItemCreateConfig> TacticalEquipmentMarkerItemCreateConfigHD; // 0xdb8(0x50)
	struct TMap<enum class EBattleFieldGameModeMarkerType, struct FMarkerItemCreateConfig> BattleFieldGameModeMarkerItemCreateConfigHD; // 0xe08(0x50)
	struct TMap<enum class ESOLGameModeMarkerType, struct FMarkerItemCreateConfig> SOLGameModeMarkerItemCreateConfigHD; // 0xe58(0x50)
	struct TMap<enum class EQuestMarkerMarkerType, struct FMarkerItemCreateConfig> ContractMarkerItemCreateConfigHD; // 0xea8(0x50)
	struct TMap<enum class EMapMarkerType, struct FMarkerItemCreateConfig> MapMarkerItemCreateConfigHD; // 0xef8(0x50)
	struct TMap<enum class EMarkingMarkerType, struct FMarkerItemCreateConfig> MarkingMarkerItemCreateConfigHD; // 0xf48(0x50)
	struct TMap<enum class EInteractorMarkerType, struct FMarkerItemCreateConfig> InterActorMarkerItemCreateConfigHD; // 0xf98(0x50)
	struct TMap<uint32_t, struct FMarkerItemCreateConfig> MarkerItemCreateConfigMap; // 0xfe8(0x50)
	struct TMap<enum class EMarkerRefreshFrequencyLevel, bool> MarkerRefreshFrequencyLevelMap; // 0x1038(0x50)
	struct TArray<struct FSoftObjectPath> MarkConfigTablePath; // 0x1088(0x10)
	struct TArray<struct UGPMarkerConfigDataAsset*> CacheMarkerConfigArr; // 0x1098(0x10)
	struct TMap<uint32_t, struct FMarkerViewCreateCampBaseConfig> MarkerConfigMap; // 0x10a8(0x50)
	struct TMap<uint32_t, struct FMarkerViewCreateCampBaseConfig> MarkingConfigMap; // 0x10f8(0x50)
	struct TMap<uint32_t, struct FMarkingCharacterVoiceConfig> MarkingVoiceMap; // 0x1148(0x50)
	struct UGPMarkerCoordinator* MarkerCoordinator; // 0x1198(0x08)
	char pad_11A0[0x20]; // 0x11a0(0x20)
	struct TArray<struct AGPQuestMarkerBase*> PendingCreateQuestMarkerArray; // 0x11c0(0x10)
	struct TMap<int32_t, struct AActor*> CacheMemberMap; // 0x11d0(0x50)

	void UpdateTeamCharaterMarker(float InDeltaTime); // Function GPGameplay.GPMarkerManager.UpdateTeamCharaterMarker // (Final|Native|Public) // @ game+0x36302d0
	void UpdateCurrentAimMarker(); // Function GPGameplay.GPMarkerManager.UpdateCurrentAimMarker // (Final|Native|Public) // @ game+0x36302b0
	void UnregisterMarkerInCoordinator(struct UGPPlayerItemMarkerItem* ItemMarkerItem); // Function GPGameplay.GPMarkerManager.UnregisterMarkerInCoordinator // (Native|Public) // @ game+0xbcbbd0
	void TrackCurrentAimMapTrackedMarkerInMap(); // Function GPGameplay.GPMarkerManager.TrackCurrentAimMapTrackedMarkerInMap // (Native|Public) // @ game+0xc37ab0
	void TickLocalMarking(float DeltaTime); // Function GPGameplay.GPMarkerManager.TickLocalMarking // (Final|Native|Public) // @ game+0x3630230
	void SetCurInteractorPanelShowingActor(struct AActor* inActor); // Function GPGameplay.GPMarkerManager.SetCurInteractorPanelShowingActor // (Final|Native|Public) // @ game+0x3630190
	void RemoveUnitMarkingMarker(uint64_t MarkerUniqueId); // Function GPGameplay.GPMarkerManager.RemoveUnitMarkingMarker // (Final|Native|Public) // @ game+0x3630110
	void RegisterMarkerInCoordinator(struct FItemMarkingInfo ItemMarkingInfo); // Function GPGameplay.GPMarkerManager.RegisterMarkerInCoordinator // (Native|Public) // @ game+0x362ff70
	void RecoverUnitMarkingInfoForLaterPlayer(struct AController* PlayerController); // Function GPGameplay.GPMarkerManager.RecoverUnitMarkingInfoForLaterPlayer // (Final|Native|Public) // @ game+0x362fef0
	void ProcessEnemyMarker(struct AActor* EnemyActor, bool bAdd); // Function GPGameplay.GPMarkerManager.ProcessEnemyMarker // (Final|Native|Public|BlueprintCallable) // @ game+0x362fe20
	void Play3DAudio(/*struct FVector Location, struct FRotator Rotator, struct TSoftObjectPtr<UGPAudioEventAsset> AudioEventSoftPtr*/); // Function GPGameplay.GPMarkerManager.Play3DAudio // (Final|Native|Public|HasDefaults) // @ game+0x362fc00
	void OnItemMarkerTypeChanged(struct AActor* MarkedActor, uint64_t ActorID, enum class EMarkerCoordinatedType markerType); // Function GPGameplay.GPMarkerManager.OnItemMarkerTypeChanged // (Final|Native|Public) // @ game+0x362fae0
	void OnGPQuestMarkerCreateOrDestroy(struct AGPQuestMarkerBase* QuestMarker, bool bCreate); // Function GPGameplay.GPMarkerManager.OnGPQuestMarkerCreateOrDestroy // (Final|Native|Public) // @ game+0x362fa10
	void OnGPGamePlayerPostLogin(struct AController* PlayerController); // Function GPGameplay.GPMarkerManager.OnGPGamePlayerPostLogin // (Final|Native|Public) // @ game+0x362f990
	void On3DAudioLoaded(struct FSoftObjectPath& AudioSoftPath, struct FVector Location, struct FRotator Rotator); // Function GPGameplay.GPMarkerManager.On3DAudioLoaded // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x362f710
	bool IsOthersMarkerShouldPlayAudio(); // Function GPGameplay.GPMarkerManager.IsOthersMarkerShouldPlayAudio // (Final|Native|Public) // @ game+0x362f6e0
	bool IsActorMarkedByMarking(struct AActor* inActor); // Function GPGameplay.GPMarkerManager.IsActorMarkedByMarking // (Final|Native|Public) // @ game+0x362f610
	void HandleEarlyActorMarker(); // Function GPGameplay.GPMarkerManager.HandleEarlyActorMarker // (Final|Native|Public) // @ game+0x362f5f0
	enum class EMarkerCampType GetVehicleMarkerCamp(struct AController* OwnerController, struct AActor* VehicleActor); // Function GPGameplay.GPMarkerManager.GetVehicleMarkerCamp // (Final|Native|Public) // @ game+0x362f530
	enum class EMarkerCampType GetShowMarkerCamp(enum class EMarkerCampType MarkedActorCamp); // Function GPGameplay.GPMarkerManager.GetShowMarkerCamp // (Final|Native|Public) // @ game+0x362f4a0
	struct TArray<uint64_t> GetPlayerMarkedLocalOnDeathMarker(); // Function GPGameplay.GPMarkerManager.GetPlayerMarkedLocalOnDeathMarker // (Final|Native|Public) // @ game+0x362f420
	enum class EMarkerCampType GetMarkedActorCamp(struct AController* OwnController, struct AActor* MarkedActor, uint32_t markerType, char InMarkerClassType); // Function GPGameplay.GPMarkerManager.GetMarkedActorCamp // (Final|Native|Public) // @ game+0x362f2e0
	struct FItemMarkingInfo GetItemMarkingInfoByMarkedActor(struct AActor* inActor); // Function GPGameplay.GPMarkerManager.GetItemMarkingInfoByMarkedActor // (Final|Native|Public) // @ game+0x362f190
	enum class EMarkerCoordinatedType GetItemMarkerCoordinatedType(enum class EMarkingItemType MarkingItemType); // Function GPGameplay.GPMarkerManager.GetItemMarkerCoordinatedType // (Final|Native|Public) // @ game+0x362f100
	struct UGPMarkerItemBase* GetItemFromPendingUsingPool(uint32_t markerType); // Function GPGameplay.GPMarkerManager.GetItemFromPendingUsingPool // (Final|Native|Protected) // @ game+0x362f070
	struct UUserWidget* GetCurrentAimMapTrackedMarker(); // Function GPGameplay.GPMarkerManager.GetCurrentAimMapTrackedMarker // (Native|Public) // @ game+0xbd5ac0
	struct AGPMarkerManager* STATIC_Get(struct UObject* WorldContext); // Function GPGameplay.GPMarkerManager.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x362eff0
	void ForceShowKillCamSelfMarker(struct AActor* EnemyActor, bool bForceShow, enum class EMarkerUIWigetType NeedShowMarkerUIWiget); // Function GPGameplay.GPMarkerManager.ForceShowKillCamSelfMarker // (Final|Native|Public|BlueprintCallable) // @ game+0x362eef0
	void ForceShowEnemyMarkerBloodBar(struct AActor* EnemyActor, bool bForceShow); // Function GPGameplay.GPMarkerManager.ForceShowEnemyMarkerBloodBar // (Final|Native|Public|BlueprintCallable) // @ game+0x362ee20
	void ForceShowEnemyMarker(struct AActor* EnemyActor, bool bForceShow, enum class EMarkerUIWigetType NeedShowMarkerUIWiget); // Function GPGameplay.GPMarkerManager.ForceShowEnemyMarker // (Final|Native|Public|BlueprintCallable) // @ game+0x362ed20
	void ForceLockEnemyMarker(struct AActor* EnemyActor, bool bForceShow); // Function GPGameplay.GPMarkerManager.ForceLockEnemyMarker // (Final|Native|Public) // @ game+0x362ec50
	void EnableLowHealthBubble(enum class ELowHealthBubbleSourceType SourceType); // Function GPGameplay.GPMarkerManager.EnableLowHealthBubble // (Final|Native|Public|BlueprintCallable) // @ game+0x362ebd0
	void EnableLowAmmoBubble(enum class ELowAmmoBubbleSourceType SourceType); // Function GPGameplay.GPMarkerManager.EnableLowAmmoBubble // (Final|Native|Public|BlueprintCallable) // @ game+0x362eb50
	void EnableAutoShowBubble(enum class ESupportType BubbleType, enum class EAutoShowBubbleSourceType SourceType); // Function GPGameplay.GPMarkerManager.EnableAutoShowBubble // (Final|Native|Public|BlueprintCallable) // @ game+0x362ea90
	void DisableLowHealthBubble(enum class ELowHealthBubbleSourceType SourceType); // Function GPGameplay.GPMarkerManager.DisableLowHealthBubble // (Final|Native|Public|BlueprintCallable) // @ game+0x362ea10
	void DisableLowAmmoBubble(enum class ELowAmmoBubbleSourceType SourceType); // Function GPGameplay.GPMarkerManager.DisableLowAmmoBubble // (Final|Native|Public|BlueprintCallable) // @ game+0x362e990
	void DisableAutoShowBubble(enum class ESupportType BubbleType, enum class EAutoShowBubbleSourceType SourceType); // Function GPGameplay.GPMarkerManager.DisableAutoShowBubble // (Final|Native|Public|BlueprintCallable) // @ game+0x362e8d0
	void ClientSetItemMarkingMarkerVisible(struct AActor* inActor, bool bShow); // Function GPGameplay.GPMarkerManager.ClientSetItemMarkingMarkerVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x362e800
	void ClientSetIgnoreMarkerWithGUID(struct AActor* Actor, bool bIgnore); // Function GPGameplay.GPMarkerManager.ClientSetIgnoreMarkerWithGUID // (Final|Native|Public|BlueprintCallable) // @ game+0x362e730
	void ClearMarkerItemMap(); // Function GPGameplay.GPMarkerManager.ClearMarkerItemMap // (Final|Native|Public) // @ game+0x362e710
	void CheckOutMarkersMarkingByScreenPos(struct TArray<struct AActor*>& PendingMarkActors, float AimCheckMarkerRadius); // Function GPGameplay.GPMarkerManager.CheckOutMarkersMarkingByScreenPos // (Final|Native|Public|HasOutParms) // @ game+0x362e5f0
	void CheckMarkingInfoArrayAndAddNewMarker(); // Function GPGameplay.GPMarkerManager.CheckMarkingInfoArrayAndAddNewMarker // (Final|Native|Public) // @ game+0x362e5d0
	bool CanAutoShowBubble(enum class ESupportType BubbleType); // Function GPGameplay.GPMarkerManager.CanAutoShowBubble // (Final|Native|Public|BlueprintCallable) // @ game+0x362e540
	void AddSOLTeamMemberMarker(); // Function GPGameplay.GPMarkerManager.AddSOLTeamMemberMarker // (Final|Native|Public) // @ game+0x362e520
	void AddPendingCreateQuestMarker(); // Function GPGameplay.GPMarkerManager.AddPendingCreateQuestMarker // (Final|Native|Public) // @ game+0x362e500
	void AddItemToPendingUsingPool(uint32_t markerType, struct UGPMarkerItemBase* ItemToAdd); // Function GPGameplay.GPMarkerManager.AddItemToPendingUsingPool // (Final|Native|Protected) // @ game+0x362e440
	void AddCampMemberMarker(); // Function GPGameplay.GPMarkerManager.AddCampMemberMarker // (Final|Native|Public) // @ game+0x362e420
	void AddBattleFieldTeamMemberMarker(); // Function GPGameplay.GPMarkerManager.AddBattleFieldTeamMemberMarker // (Final|Native|Public) // @ game+0x362e400
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPMaterialProxy
// Size: 0x128 (Inherited: 0x30)
class UGPMaterialProxy : public UObject {
public:

	char pad_30[0x18]; // 0x30(0x18)
	struct UMaterialInterface* OriginMat; // 0x48(0x08)
	struct UMaterialInterface* CurrentDynamicMat; // 0x50(0x08)
	char pad_58[0x4]; // 0x58(0x04)
	struct FName CurrentMaterialName; // 0x5c(0x08)
	int32_t CurrentMaterialVariantRowIndex; // 0x64(0x04)
	struct TWeakObjectPtr<struct UActorComponent> NotifyComponent; // 0x68(0x08)
	struct TMap<struct FMaterialShaderKeyword, struct UMaterialInstanceDynamic*> ExistMaterialMaps; // 0x70(0x50)
	char pad_C0[0x8]; // 0xc0(0x08)
	/*struct TScriptInterface<IWeaponLogInterface>*/char WeaponLogInterface[0x10]; // 0xc8(0x10)
	/*struct TSet<struct UObject*>*/char CacheMaterials[0x50]; // 0xd8(0x50)

	void SwitchMaterial(); // Function GPGameplay.GPMaterialProxy.SwitchMaterial // (Final|Native|Public) // @ game+0x3633f20
	void SetVectorParameterValue(struct FName ParameterName, struct FLinearColor Value); // Function GPGameplay.GPMaterialProxy.SetVectorParameterValue // (Final|Native|Public|HasDefaults) // @ game+0x3633e50
	void SetTextureParameterValue(struct FName ParameterName, struct UTexture* Value); // Function GPGameplay.GPMaterialProxy.SetTextureParameterValue // (Final|Native|Public) // @ game+0x3633c20
	void SetScalarParameterValue(struct FName ParameterName, float Value); // Function GPGameplay.GPMaterialProxy.SetScalarParameterValue // (Final|Native|Public) // @ game+0x3633b60
	void SetKeywordEnable(struct FName Keyword, bool bEnable, bool bImmediateSwitchMaterial); // Function GPGameplay.GPMaterialProxy.SetKeywordEnable // (Final|Native|Public) // @ game+0x3633a50
	void PreloadMaterialByShaderKey(struct TArray<struct FName>& InShaderKeywords); // Function GPGameplay.GPMaterialProxy.PreloadMaterialByShaderKey // (Final|Native|Public|HasOutParms) // @ game+0x3633820
	void InitMaterialVariant(struct UMaterialInterface* InOriMaterial); // Function GPGameplay.GPMaterialProxy.InitMaterialVariant // (Final|Native|Public) // @ game+0x3633720
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponMaterialVaraintDataMgr
// Size: 0x48 (Inherited: 0x38)
class UWeaponMaterialVaraintDataMgr : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPHaavkAnimInstance
// Size: 0xa00 (Inherited: 0x280)
class UGPHaavkAnimInstance : public UAnimInstance {
public:

	struct FGPHaavkAnimInstanceProxy LocalProxy; // 0x280(0x780)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPMilitaryPropsAnimInstance
// Size: 0x280 (Inherited: 0x280)
class UGPMilitaryPropsAnimInstance : public UAnimInstance {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPModularWeaponAnimInstance
// Size: 0xb70 (Inherited: 0x280)
class UGPModularWeaponAnimInstance : public UAnimInstance {
public:

	struct FGPModularWeaponAnimInstanceProxy LocalProxy; // 0x280(0x8f0)

	void SetThrowMagCL(bool InbUpdate, float InMagclVel, float InAddSpeedZ, struct FVector StartLocation); // Function GPGameplay.GPModularWeaponAnimInstance.SetThrowMagCL // (Final|Native|Public|HasDefaults) // @ game+0x3633ce0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPNetConnection
// Size: 0x20e8 (Inherited: 0x1f80)
class UGPNetConnection : public UDualChannelIpNetConnection {
public:

	char pad_1F80[0x150]; // 0x1f80(0x150)
	struct UGPNetDriver* GPNetDiver; // 0x20d0(0x08)
	char pad_20D8[0x4]; // 0x20d8(0x04)
	int32_t ClientBeginPlayFrame; // 0x20dc(0x04)
	char pad_20E0[0x8]; // 0x20e0(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPNetDriver
// Size: 0x8d8 (Inherited: 0x880)
class UGPNetDriver : public UDualChannelIpNetDriver {
public:

	char pad_880[0x38]; // 0x880(0x38)
	struct UPropertyReplicationSubsystem* PropertyReplicationSubsystem; // 0x8b8(0x08)
	float AutoDrivingMaxPhysicsDeltaTime; // 0x8c0(0x04)
	float AutoDrivingMaxSubstepDeltaTime; // 0x8c4(0x04)
	float AutoDrivingMaxSubsteps; // 0x8c8(0x04)
	char pad_8CC[0xc]; // 0x8cc(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.NetRepActorInterface
// Size: 0x30 (Inherited: 0x30)
class UNetRepActorInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPNetworkIdentityComponent
// Size: 0x150 (Inherited: 0x100)
class UGPNetworkIdentityComponent : public UActorComponent {
public:

	struct AActor* OwnerActor; // 0x100(0x08)
	struct AGPCharacter* GPCharacter; // 0x108(0x08)
	struct TArray<struct UGPNetworkActorComponent*> CachedNetworkIdentityComponents; // 0x110(0x10)
	/*struct TArray<struct TScriptInterface<INetworkIdentityInterface>>*/char CachedNetworkIdentityInterfaces[0x10]; // 0x120(0x10)
	bool bWantNotifyChildFocus; // 0x130(0x01)
	char pad_131[0x7]; // 0x131(0x07)
	struct TArray<struct UActorComponent*> CachedNetworkIdentityInterfacesOriginal; // 0x138(0x10)
	char pad_148[0x8]; // 0x148(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.NetworkIdentityInterface
// Size: 0x30 (Inherited: 0x30)
class UNetworkIdentityInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPNetworkTimeSyncComponent
// Size: 0x100 (Inherited: 0x100)
class UGPNetworkTimeSyncComponent : public UActorComponent {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPNotifyTeammatesManager
// Size: 0x120 (Inherited: 0x100)
class UGPNotifyTeammatesManager : public UActorComponent {
public:

	struct AGPPlayerController* PlayerController; // 0x100(0x08)
	char pad_108[0x8]; // 0x108(0x08)
	struct TArray<struct FAbilityNotifyInfo> Notifys; // 0x110(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPObserverPawn
// Size: 0x4f0 (Inherited: 0x3d8)
class AGPObserverPawn : public APawn {
public:

	char pad_3D8[0x8]; // 0x3d8(0x08)
	struct UCapsuleComponent* CapsuleComponent; // 0x3e0(0x08)
	struct UFloatingPawnMovement* FloatingPawnMovement; // 0x3e8(0x08)
	struct FName OBCameraPanelName; // 0x3f0(0x08)
	float NearbyCharacterCheckDistance; // 0x3f8(0x04)
	char pad_3FC[0x4]; // 0x3fc(0x04)
	struct TArray<struct FName> SocketNames; // 0x400(0x10)
	float MaxVerticalRotationAngleDuringSpectating; // 0x410(0x04)
	float RotationSmoothLevel; // 0x414(0x04)
	struct TArray<struct ACHARACTER*> NearByCharacterArray; // 0x418(0x10)
	bool bEnableRotationSmooth; // 0x428(0x01)
	char pad_429[0x7]; // 0x429(0x07)
	struct AActor* PositionActor; // 0x430(0x08)
	bool bEnableLocationFocus; // 0x438(0x01)
	char pad_439[0x3]; // 0x439(0x03)
	struct FVector CachedFocusLocation; // 0x43c(0x0c)
	struct FVector CachedCameraLocation; // 0x448(0x0c)
	char pad_454[0x4]; // 0x454(0x04)
	struct ACHARACTER* FocusedActor; // 0x458(0x08)
	bool bEnableFocusLocationSmooth; // 0x460(0x01)
	char pad_461[0x7]; // 0x461(0x07)
	struct FString FocusedActorName; // 0x468(0x10)
	struct FString AttachCharacterSocketName; // 0x478(0x10)
	struct FString AttachWeaponSocketName; // 0x488(0x10)
	bool bEnableCharacterSocketFollow; // 0x498(0x01)
	bool bEnableWeaponSocketFollow; // 0x499(0x01)
	bool bEnableRelative; // 0x49a(0x01)
	bool bEnableRotationFocus; // 0x49b(0x01)
	bool bEnableRotationFocusSmooth; // 0x49c(0x01)
	char pad_49D[0x3]; // 0x49d(0x03)
	struct FRotator DesiredRotation; // 0x4a0(0x0c)
	char pad_4AC[0x4]; // 0x4ac(0x04)
	struct FString FocusedSocketName; // 0x4b0(0x10)
	bool bHighlightFocusActor; // 0x4c0(0x01)
	bool bCurrentIsPathFollowing; // 0x4c1(0x01)
	char pad_4C2[0x2]; // 0x4c2(0x02)
	float PathFollowMaxSpeed; // 0x4c4(0x04)
	float SpeedUpDownDelta; // 0x4c8(0x04)
	float RotationSpeedScalar; // 0x4cc(0x04)
	float LocationFocusSmoothScalar; // 0x4d0(0x04)
	float RotationFocusSmoothScalar; // 0x4d4(0x04)
	float RotationSmoothScalar; // 0x4d8(0x04)
	char pad_4DC[0x14]; // 0x4dc(0x14)

	void UpdateNearbyCharacterList(); // Function GPGameplay.GPObserverPawn.UpdateNearbyCharacterList // (Final|Native|Public) // @ game+0x3639ff0
	void SetWeaponSocketAttachName(struct FString SocketName); // Function GPGameplay.GPObserverPawn.SetWeaponSocketAttachName // (Final|Native|Public) // @ game+0x3639840
	void SetRelativeToSocket(bool bEnable); // Function GPGameplay.GPObserverPawn.SetRelativeToSocket // (Final|Native|Public) // @ game+0x36397b0
	void SetPositionActorTransform(struct FVector& Loc, struct FRotator& Rotator); // Function GPGameplay.GPObserverPawn.SetPositionActorTransform // (Final|Native|Public|HasOutParms|HasDefaults|Const) // @ game+0x36396d0
	void SetFocusCharacterSocketName(struct FString SocketName); // Function GPGameplay.GPObserverPawn.SetFocusCharacterSocketName // (Final|Native|Public) // @ game+0x36395b0
	void SetEnableFocusCharacterSocket(bool bEnable); // Function GPGameplay.GPObserverPawn.SetEnableFocusCharacterSocket // (Final|Native|Public) // @ game+0x3639520
	void SetCharacterSocketAttachName(struct FString SocketName); // Function GPGameplay.GPObserverPawn.SetCharacterSocketAttachName // (Final|Native|Public) // @ game+0x3639400
	void OBC_UpdateFocusPoint(); // Function GPGameplay.GPObserverPawn.OBC_UpdateFocusPoint // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void OBC_StartMoveCamera(); // Function GPGameplay.GPObserverPawn.OBC_StartMoveCamera // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void OBC_ShowHideRouteDebugView(); // Function GPGameplay.GPObserverPawn.OBC_ShowHideRouteDebugView // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void OBC_GenerateMoveRoute(); // Function GPGameplay.GPObserverPawn.OBC_GenerateMoveRoute // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void OBC_GenerateFaceRoute(); // Function GPGameplay.GPObserverPawn.OBC_GenerateFaceRoute // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void OBC_ClearMoveRoute(); // Function GPGameplay.GPObserverPawn.OBC_ClearMoveRoute // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void OBC_ClearFaceRoute(); // Function GPGameplay.GPObserverPawn.OBC_ClearFaceRoute // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void OBC_CatchMoveRoutePoint(); // Function GPGameplay.GPObserverPawn.OBC_CatchMoveRoutePoint // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void OBC_CatchFaceRoutePoint(); // Function GPGameplay.GPObserverPawn.OBC_CatchFaceRoutePoint // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void LimitOBPlayerRotator(struct FRotator& PlayerRotator); // Function GPGameplay.GPObserverPawn.LimitOBPlayerRotator // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x36386c0
	void HighlightFocusActor(bool bHighlight); // Function GPGameplay.GPObserverPawn.HighlightFocusActor // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x3638630
	void DetachFromTarget(); // Function GPGameplay.GPObserverPawn.DetachFromTarget // (Final|Native|Public) // @ game+0x3637fd0
	void Client2ServerSetActorTransform(struct FVector Loc, struct FRotator Rotator); // Function GPGameplay.GPObserverPawn.Client2ServerSetActorTransform // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x36376b0
	void AttachToWeaponSocket(bool bAttach); // Function GPGameplay.GPObserverPawn.AttachToWeaponSocket // (Final|Native|Public) // @ game+0x36375d0
	void AttachToTarget(struct ACHARACTER* TargetCharacter); // Function GPGameplay.GPObserverPawn.AttachToTarget // (Final|Native|Public) // @ game+0x3637550
	void AttachToCharacterSocket(bool bAttach); // Function GPGameplay.GPObserverPawn.AttachToCharacterSocket // (Final|Native|Public) // @ game+0x36374c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPOnlineSession
// Size: 0x40 (Inherited: 0x30)
class UGPOnlineSession : public UOnlineSession {
public:

	char pad_30[0x10]; // 0x30(0x10)

	void TestDisconnect(struct UWorld* World, struct UNetDriver* NetDriver); // Function GPGameplay.GPOnlineSession.TestDisconnect // (Final|Native|Public) // @ game+0x363d140
	void HandleNetworkFailureNextFrame(struct UWorld* World, struct UNetDriver* NetDriver); // Function GPGameplay.GPOnlineSession.HandleNetworkFailureNextFrame // (Final|Native|Public) // @ game+0x363c460
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.OutLineItemInterface
// Size: 0x30 (Inherited: 0x30)
class UOutLineItemInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPOutLineEffectComponent
// Size: 0x220 (Inherited: 0x100)
class UGPOutLineEffectComponent : public UActorComponent {
public:

	struct UMaterialInterface* OutLineLocking; // 0x100(0x08)
	struct UMaterialInterface* OutLineLockComplete; // 0x108(0x08)
	struct UMaterialInterface* OutLineGreen; // 0x110(0x08)
	struct UMaterialInterface* OutLineRed; // 0x118(0x08)
	struct UMaterialInterface* OutLineScout; // 0x120(0x08)
	struct UMaterialInterface* OutLineScoutGreen; // 0x128(0x08)
	struct UMaterialInterface* OutLineScoutBlue; // 0x130(0x08)
	struct UMaterialInterface* OutLineWhite; // 0x138(0x08)
	struct UMaterialInterface* OutLineScout_1P; // 0x140(0x08)
	struct FName ScreenEffectName; // 0x148(0x08)
	struct TArray<struct FString> CullMeshNameList; // 0x150(0x10)
	struct TArray<struct FString> VehicleCullMeshNameList; // 0x160(0x10)
	struct UMaterialInstanceDynamic* OutLineLockingInsDynamic; // 0x170(0x08)
	struct UMaterialInstanceDynamic* OutLineLockCompleteInsDynamic; // 0x178(0x08)
	struct UMaterialInstanceDynamic* OutLineGreenInsDynamic; // 0x180(0x08)
	struct UMaterialInstanceDynamic* OutLineRedInsDynamic; // 0x188(0x08)
	struct UMaterialInstanceDynamic* OutLineScoutInsDynamic; // 0x190(0x08)
	struct UMaterialInstanceDynamic* OutLineScoutGreenInsDynamic; // 0x198(0x08)
	struct UMaterialInstanceDynamic* OutLineScoutBlueInsDynamic; // 0x1a0(0x08)
	struct UMaterialInstanceDynamic* OutLineWhiteInsDynamic; // 0x1a8(0x08)
	struct UMaterialInstanceDynamic* OutLineScoutInsDynamic_1P; // 0x1b0(0x08)
	bool SetStencil; // 0x1b8(0x01)
	char pad_1B9[0x3]; // 0x1b9(0x03)
	float ItemOutLineTickInterval; // 0x1bc(0x04)
	struct TArray<struct UStaticMeshComponent*> StaticMeshCopyList; // 0x1c0(0x10)
	char pad_1D0[0x10]; // 0x1d0(0x10)
	struct TArray<struct TWeakObjectPtr<struct UMeshComponent>> ActiveOutlineMeshList; // 0x1e0(0x10)
	float ForceStopEffectTickInterval; // 0x1f0(0x04)
	char pad_1F4[0x4]; // 0x1f4(0x04)
	struct TArray<struct FOutLineEffectTimeData> ForceStopEffectDataArray; // 0x1f8(0x10)
	float ForceStopEffectCurTime; // 0x208(0x04)
	char pad_20C[0x4]; // 0x20c(0x04)
	struct TArray<struct FOutLineEffectTimeData> ForceStopEffectDataRuntimeArray; // 0x210(0x10)

	void UpdateLocalPlayerOutLineCnt(int32_t Delta); // Function GPGameplay.GPOutLineEffectComponent.UpdateLocalPlayerOutLineCnt // (Final|Native|Public) // @ game+0x363d5d0
	void UpdateForceStopEffectTimeByArray(int32_t OutLineBitArray, bool bIsPlay); // Function GPGameplay.GPOutLineEffectComponent.UpdateForceStopEffectTimeByArray // (Final|Native|Public) // @ game+0x363d510
	void UpdateForceStopEffectTime(enum class EOutLineEffectType OutLineEffectType, bool bIsPlay); // Function GPGameplay.GPOutLineEffectComponent.UpdateForceStopEffectTime // (Final|Native|Public) // @ game+0x363d450
	void TryForceStopAllEffect(); // Function GPGameplay.GPOutLineEffectComponent.TryForceStopAllEffect // (Final|Native|Public) // @ game+0x363d330
	void StopOutLineEffectArry(int32_t OutLineArry); // Function GPGameplay.GPOutLineEffectComponent.StopOutLineEffectArry // (Final|Native|Public|BlueprintCallable) // @ game+0x363d0c0
	void StopOutLineEffect(enum class EOutLineEffectType OutLineType); // Function GPGameplay.GPOutLineEffectComponent.StopOutLineEffect // (Final|Native|Public) // @ game+0x363d040
	void StopAllOutLineEffect(); // Function GPGameplay.GPOutLineEffectComponent.StopAllOutLineEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x363d020
	void PlayOutLineEffectArry(int32_t OutLineArry); // Function GPGameplay.GPOutLineEffectComponent.PlayOutLineEffectArry // (Final|Native|Public|BlueprintCallable) // @ game+0x363ca80
	void PlayOutLineEffect(enum class EOutLineEffectType OutLineType); // Function GPGameplay.GPOutLineEffectComponent.PlayOutLineEffect // (Final|Native|Public) // @ game+0x363ca00
	void OnOwnerCharacterDied(struct AGPCharacterBase* CHARACTER, struct AController* Killer, struct UDamageType* DamageType); // Function GPGameplay.GPOutLineEffectComponent.OnOwnerCharacterDied // (Final|Native|Public) // @ game+0x363c5b0
	struct UMaterialInstanceDynamic* GetMatInstance(struct UMaterialInterface* mateInerface); // Function GPGameplay.GPOutLineEffectComponent.GetMatInstance // (Final|Native|Public) // @ game+0x363c220
	void CreateStaticMeshCopy(struct UStaticMeshComponent* StaticMesh, struct UMaterialInstanceDynamic* Mat, struct UMaterialInterface* SecondPassmat); // Function GPGameplay.GPOutLineEffectComponent.CreateStaticMeshCopy // (Final|Native|Public) // @ game+0x363bf50
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPParachuteComponent
// Size: 0x550 (Inherited: 0x100)
class UGPParachuteComponent : public UActorComponent {
public:

	bool EnableParachute; // 0x100(0x01)
	char pad_101[0x7]; // 0x101(0x07)
	struct UCurveFloat* HeightCurve; // 0x108(0x08)
	int32_t WholeParachuteTime; // 0x110(0x04)
	char pad_114[0x4]; // 0x114(0x04)
	struct UAnimSequenceBase* ParachuteMontage; // 0x118(0x08)
	struct UAnimMontage* LandingMontage; // 0x120(0x08)
	struct FGPParachuteRepInfo ParachuteRepInfo; // 0x128(0x1c)
	char pad_144[0x34]; // 0x144(0x34)
	struct AGPCharacter* CharacterOwner; // 0x178(0x08)
	char pad_180[0x28]; // 0x180(0x28)
	/*struct TSoftClassPtr<UObject>*/char PlayerParachuteActorClass[0x28]; // 0x1a8(0x28)
	struct APlayerParachuteActor* PlayerParachuteActor; // 0x1d0(0x08)
	float OpenParachuteWarningHeight; // 0x1d8(0x04)
	float ParachuteCanTriggerHeight; // 0x1dc(0x04)
	float ParachuteLostTriggerHeight; // 0x1e0(0x04)
	float AutoParachuteHeight; // 0x1e4(0x04)
	float ReadyLandedHeight; // 0x1e8(0x04)
	float PlayLandedAnimHeight; // 0x1ec(0x04)
	float EndParachuteHeight; // 0x1f0(0x04)
	float QuickEndLandingAnimTime; // 0x1f4(0x04)
	float EndAccRate; // 0x1f8(0x04)
	float ParachuteDelay; // 0x1fc(0x04)
	float ParachuteLandSlope; // 0x200(0x04)
	float ParachutingMaxFrontSpeed; // 0x204(0x04)
	float ParachuteOpenAcceleration; // 0x208(0x04)
	float ParachutingFrontAcceleration; // 0x20c(0x04)
	float ParachutingMaxTranverseSpeed; // 0x210(0x04)
	float ParachutingTranverseAcceleration; // 0x214(0x04)
	float ParachutingTranverseInertialSpeed; // 0x218(0x04)
	float ParachutingVerticalFallingSpeed; // 0x21c(0x04)
	float ParachutingAirHorizontalBrakingDeceleration; // 0x220(0x04)
	float ParachutingAirVerticalBrakingDeceleration; // 0x224(0x04)
	struct FVector2D ParachutePitchLimit; // 0x228(0x08)
	struct FVector ParachuteFPPCameraLookDown; // 0x230(0x0c)
	struct FVector ParachuteFPPCameraLookUp; // 0x23c(0x0c)
	float GlideTriggerSpeed; // 0x248(0x04)
	float MaxFallingVerticalSpeed; // 0x24c(0x04)
	float GlideSprintFactor; // 0x250(0x04)
	float GlideMaxFrontSpeed; // 0x254(0x04)
	float GlideFrontAcceleration; // 0x258(0x04)
	float GlideMaxTranverseSpeed; // 0x25c(0x04)
	float GlideTranverseAcceleration; // 0x260(0x04)
	float TickInterval; // 0x264(0x04)
	float ParachuteFPPFOV; // 0x268(0x04)
	float ParachuteFPPCameraOffsetSpeed; // 0x26c(0x04)
	/*struct TSoftObjectPtr<UMaterialInstance>*/char GlideScreenEffectMI[0x28]; // 0x270(0x28)
	struct UGPAudioEventAsset* StartLoopGlideVoice; // 0x298(0x08)
	struct UGPAudioEventAsset* LandGlideVoice; // 0x2a0(0x08)
	struct UGPAudioEventAsset* OpenLoopParachuteVoice_1P; // 0x2a8(0x08)
	struct UGPAudioEventAsset* OpenLoopParachuteVoice_3P; // 0x2b0(0x08)
	struct UGPAudioEventAsset* LandParachuteVoice_1P; // 0x2b8(0x08)
	struct UGPAudioEventAsset* LandParachuteVoice_3P; // 0x2c0(0x08)
	struct UGPAudioEventAsset* CloseParachuteVoice; // 0x2c8(0x08)
	struct UGPAudioEventAsset* TurnLeftParachuteVoice; // 0x2d0(0x08)
	struct UGPAudioEventAsset* TurnRightParachuteVoice; // 0x2d8(0x08)
	struct UGPAudioEventAsset* BrakeParachuteVoice; // 0x2e0(0x08)
	struct UGPAudioEventAsset* StopParachuteLoopVoice; // 0x2e8(0x08)
	struct UGPAudioEventAsset* StopGlideLoopVoice; // 0x2f0(0x08)
	char pad_2F8[0x60]; // 0x2f8(0x60)
	struct UAnimSequence* OpenParachuteSequence; // 0x358(0x08)
	struct UAnimSequence* OpenParachuteSequence_FPP; // 0x360(0x08)
	struct UBlendSpaceBase* ParachuteBS; // 0x368(0x08)
	struct UBlendSpaceBase* ParachuteBS_FPP; // 0x370(0x08)
	struct UAnimSequence* CloseParachuteSequence; // 0x378(0x08)
	struct UAnimSequence* CloseParachuteSequence_FPP; // 0x380(0x08)
	struct UAnimSequence* ParachuteLandSequence; // 0x388(0x08)
	struct UAnimSequence* ParachuteLandSequence_FPP; // 0x390(0x08)
	struct UBlendSpaceBase* GlideBS; // 0x398(0x08)
	struct UBlendSpaceBase* GlideBS_FPP; // 0x3a0(0x08)
	struct UAnimSequence* GlideLandSequence; // 0x3a8(0x08)
	struct UAnimSequence* GlideLandSequence_FPP; // 0x3b0(0x08)
	char pad_3B8[0x8]; // 0x3b8(0x08)
	struct FTransform LeftIKTransformFPP; // 0x3c0(0x30)
	struct FTransform RightIKTransformFPP; // 0x3f0(0x30)
	struct FTransform LeftIKTransform; // 0x420(0x30)
	struct FTransform RightIKTransform; // 0x450(0x30)
	float ParachuteSequenceTime; // 0x480(0x04)
	bool bEnableIKDebug; // 0x484(0x01)
	char pad_485[0x3]; // 0x485(0x03)
	struct FVector ParachuteMove; // 0x488(0x0c)
	struct FVector GlideMove; // 0x494(0x0c)
	char bInParachuteIdle : 1; // 0x4a0(0x01)
	char pad_4A0_1 : 7; // 0x4a0(0x01)
	char pad_4A1[0x17]; // 0x4a1(0x17)
	struct UGPAnimDataComponent* AnimaDataComponent; // 0x4b8(0x08)
	struct FHitResult HitActor; // 0x4c0(0x88)
	struct TWeakObjectPtr<struct UGPSkeletalMeshComponent> GPMesh; // 0x548(0x08)

	void UpdatePlayerParachuteActorInfo(); // Function GPGameplay.GPParachuteComponent.UpdatePlayerParachuteActorInfo // (Final|Native|Public) // @ game+0x363d650
	bool TryParachute(struct FVector& Origin, struct FVector& Dest); // Function GPGameplay.GPParachuteComponent.TryParachute // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x363d350
	void ShowParachuteActorTpp(); // Function GPGameplay.GPParachuteComponent.ShowParachuteActorTpp // (Final|Native|Public) // @ game+0x363cf70
	void SetParachuteActorAttachToSocket(); // Function GPGameplay.GPParachuteComponent.SetParachuteActorAttachToSocket // (Final|Native|Public) // @ game+0x363cec0
	void ServerReplicateParachuteInfos(enum class EPlayerParachutePhaseType Phase, char MovementType); // Function GPGameplay.GPParachuteComponent.ServerReplicateParachuteInfos // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x363cd00
	void OnRep_ParachuteInfoChanged(); // Function GPGameplay.GPParachuteComponent.OnRep_ParachuteInfoChanged // (Final|Native|Public) // @ game+0x363c8d0
	void OnPostWorldOriginOffsetChange(struct UWorld* InWorld, struct FIntVector Loc1, struct FIntVector Loc2); // Function GPGameplay.GPParachuteComponent.OnPostWorldOriginOffsetChange // (Final|Native|Protected|HasDefaults) // @ game+0x363c7b0
	void OnParachuteViewShow(struct FString FunctionName, struct UBaseUIView* View); // Function GPGameplay.GPParachuteComponent.OnParachuteViewShow // (Final|Native|Protected) // @ game+0x363c6b0
	bool IsPlayerParachute(); // Function GPGameplay.GPParachuteComponent.IsPlayerParachute // (Final|Native|Public|Const) // @ game+0x363c580
	bool IsParachuting(); // Function GPGameplay.GPParachuteComponent.IsParachuting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x363c550
	bool IsGlide(); // Function GPGameplay.GPParachuteComponent.IsGlide // (Final|Native|Public|Const) // @ game+0x363c520
	struct UGPAnimDataComponent* GetAnimDataComponent(); // Function GPGameplay.GPParachuteComponent.GetAnimDataComponent // (Final|Native|Protected) // @ game+0x363c050
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPathActingCompoentBase
// Size: 0x100 (Inherited: 0x100)
class UGPPathActingCompoentBase : public UActorComponent {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPathFollowComponent
// Size: 0x4a0 (Inherited: 0x140)
class UGPPathFollowComponent : public UMovementComponent {
public:

	/*struct FMulticastInlineDelegate*/char OnBeginFollow[0x10]; // 0x140(0x10)
	/*struct FMulticastInlineDelegate*/char OnEndFollow[0x10]; // 0x150(0x10)
	/*struct FMulticastInlineDelegate*/char OnPauseFollow[0x10]; // 0x160(0x10)
	/*struct FMulticastInlineDelegate*/char OnResumeFollow[0x10]; // 0x170(0x10)
	/*struct FMulticastInlineDelegate*/char OnBeginAccelerate[0x10]; // 0x180(0x10)
	/*struct FMulticastInlineDelegate*/char OnEndAccelerate[0x10]; // 0x190(0x10)
	/*struct FMulticastInlineDelegate*/char OnCustomEvent[0x10]; // 0x1a0(0x10)
	/*struct TSoftObjectPtr<UGPAudioEventAsset>*/char StartToMoveAudio[0x28]; // 0x1b0(0x28)
	/*struct TSoftObjectPtr<UGPAudioEventAsset>*/char StopToMoveAudio[0x28]; // 0x1d8(0x28)
	bool bAutoPlayPathWhenBegin; // 0x200(0x01)
	char pad_201[0x3]; // 0x201(0x03)
	struct FName DefaultSplineTag; // 0x204(0x08)
	bool bAutoResetTransformWhenPlay; // 0x20c(0x01)
	char pad_20D[0x3]; // 0x20d(0x03)
	float InitSpeed; // 0x210(0x04)
	int32_t MaxPhysicalDetectionDistance; // 0x214(0x04)
	bool bFollowScale; // 0x218(0x01)
	char pad_219[0x3]; // 0x219(0x03)
	struct FVector FrontLeftAnchorOffset; // 0x21c(0x0c)
	struct FVector FrontRightAnchorOffset; // 0x228(0x0c)
	struct FVector BackLeftAnchorOffset; // 0x234(0x0c)
	struct FVector BackRightAnchorOffset; // 0x240(0x0c)
	struct FVector LineTraceStartOffset; // 0x24c(0x0c)
	struct FVector LineTraceEndOffset; // 0x258(0x0c)
	struct FVector FollowOffset; // 0x264(0x0c)
	bool EnableMovementReplicatedWhenStopFallow; // 0x270(0x01)
	bool bCheckExpiredDataFromServer; // 0x271(0x01)
	bool bAllowPreStopInClient; // 0x272(0x01)
	bool bAllowPrePauseInClient; // 0x273(0x01)
	char pad_274[0xc]; // 0x274(0x0c)
	struct FGPPathFollowSnapshotData ReplicatedSnapshotData; // 0x280(0xb0)
	struct FGPPathFollowSnapshotData LocalSnapshotData; // 0x330(0xb0)
	char pad_3E0[0x70]; // 0x3e0(0x70)
	bool bPlayStartAnim; // 0x450(0x01)
	bool bPlayEndAnim; // 0x451(0x01)
	char pad_452[0x4e]; // 0x452(0x4e)

	void TransToCustomSpeed(float InTargetSpeed, float InFadingDistance, bool bShouldKeepCustomSpeed); // Function GPGameplay.GPPathFollowComponent.TransToCustomSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x363d220
	void ToggleReverse(); // Function GPGameplay.GPPathFollowComponent.ToggleReverse // (Final|Native|Public|BlueprintCallable) // @ game+0x363d200
	void Stop(bool bIsAllowedInClient); // Function GPGameplay.GPPathFollowComponent.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x363cf90
	void SetReverse(bool bReverse); // Function GPGameplay.GPPathFollowComponent.SetReverse // (Final|Native|Public|BlueprintCallable) // @ game+0x363cee0
	void SetCurrentSpeed(float Speed, bool bIsFixedSpeed); // Function GPGameplay.GPPathFollowComponent.SetCurrentSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x363cdf0
	void Resume(); // Function GPGameplay.GPPathFollowComponent.Resume // (Final|Native|Public|BlueprintCallable) // @ game+0x363cce0
	void PlayPathWithWayPoint(struct AActor* InPath, struct AActor* InWayPoint, bool bForceReplay); // Function GPGameplay.GPPathFollowComponent.PlayPathWithWayPoint // (Final|Native|Public|BlueprintCallable) // @ game+0x363cbd0
	void PlayPath(struct AActor* InPath, bool bForceReplay); // Function GPGameplay.GPPathFollowComponent.PlayPath // (Final|Native|Public|BlueprintCallable) // @ game+0x363cb00
	void Play(); // Function GPGameplay.GPPathFollowComponent.Play // (Final|Native|Public|BlueprintCallable) // @ game+0x363c9e0
	void Pause(struct FName& reason, bool bIsAllowedInClient); // Function GPGameplay.GPPathFollowComponent.Pause // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x363c910
	void OnRep_ReplicatedSnapshotData(); // Function GPGameplay.GPPathFollowComponent.OnRep_ReplicatedSnapshotData // (Final|Native|Protected) // @ game+0x363c8f0
	struct FGPPathFollowSnapshotData GetReplicatedSnapshotData(); // Function GPGameplay.GPPathFollowComponent.GetReplicatedSnapshotData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x363c2f0
	struct FGPPathFollowWayPointData GetPathFollowWayPointData(); // Function GPGameplay.GPPathFollowComponent.GetPathFollowWayPointData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x363c2b0
	struct FGPPathFollowSnapshotData GetLocalSnapshotData(); // Function GPGameplay.GPPathFollowComponent.GetLocalSnapshotData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x363c0b0
	float GetCurrentPathFollowProgress(); // Function GPGameplay.GPPathFollowComponent.GetCurrentPathFollowProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x363c080
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPathWayPointInterface
// Size: 0x30 (Inherited: 0x30)
class UGPPathWayPointInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSplinePathInterface
// Size: 0x30 (Inherited: 0x30)
class UGPSplinePathInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPathWayPoint
// Size: 0x420 (Inherited: 0x378)
class AGPPathWayPoint : public AActor {
public:

	char pad_378[0x10]; // 0x378(0x10)
	float SplineInputKey; // 0x388(0x04)
	bool bActivated; // 0x38c(0x01)
	char pad_38D[0x3]; // 0x38d(0x03)
	float ExpectVelocity; // 0x390(0x04)
	float YawInterpRadius; // 0x394(0x04)
	float YawInterpScale; // 0x398(0x04)
	bool bBackOff; // 0x39c(0x01)
	char pad_39D[0x3]; // 0x39d(0x03)
	float WayPointRadius; // 0x3a0(0x04)
	float DistanceAtPath; // 0x3a4(0x04)
	bool bMuteRayTrace; // 0x3a8(0x01)
	bool bPause; // 0x3a9(0x01)
	char pad_3AA[0x2]; // 0x3aa(0x02)
	struct FGPPathWayPointPauseSettings PauseSettings; // 0x3ac(0x08)
	struct FGPPathWayPointRotateSettings RotateSettings; // 0x3b4(0x20)
	bool bShouldDispatchEvent; // 0x3d4(0x01)
	char pad_3D5[0x3]; // 0x3d5(0x03)
	struct FName EventName; // 0x3d8(0x08)
	bool bShouldBranchPath; // 0x3e0(0x01)
	char pad_3E1[0x7]; // 0x3e1(0x07)
	struct FString BranchPathName; // 0x3e8(0x10)
	int32_t BranchPathStartWayPointIndex; // 0x3f8(0x04)
	bool bShouldPlayAnim; // 0x3fc(0x01)
	char pad_3FD[0x3]; // 0x3fd(0x03)
	struct UAnimSequence* AnimToPlay; // 0x400(0x08)
	struct AActor* BranchPathActor; // 0x408(0x08)
	struct AActor* BranchPathStartWayPoint; // 0x410(0x08)
	char pad_418[0x8]; // 0x418(0x08)

	void AttachToSpline(); // Function GPGameplay.GPPathWayPoint.AttachToSpline // (Final|Native|Public) // @ game+0x363fd80
	void AttachPointToCuspidalPoint(); // Function GPGameplay.GPPathWayPoint.AttachPointToCuspidalPoint // (Final|Native|Public) // @ game+0x363fd60
	void AttachAllPointsToSpline(); // Function GPGameplay.GPPathWayPoint.AttachAllPointsToSpline // (Final|Native|Public) // @ game+0x363fd40
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPerkComponent
// Size: 0x288 (Inherited: 0x100)
class UGPPerkComponent : public UActorComponent {
public:

	char pad_100[0x8]; // 0x100(0x08)
	struct FCharacterPerkFastArray CharacterPerkArray; // 0x108(0x120)
	struct UPerkBitArray* SpecialEffectBitArray; // 0x228(0x08)
	struct TMap<enum class EPerkSharedEffectSource, int32_t> SharedCounter; // 0x230(0x50)
	struct UPerkBitArray* SharedEffectBitArray; // 0x280(0x08)

	void RemovePerk(uint32_t InPerkId); // Function GPGameplay.GPPerkComponent.RemovePerk // (Native|Public) // @ game+0x36404f0
	void RemoveAllPerks(); // Function GPGameplay.GPPerkComponent.RemoveAllPerks // (Final|Native|Public) // @ game+0x88f4d0
	void OnRep_CharacterPerkArray(struct FCharacterPerkFastArray& OldCharacterPerkArray); // Function GPGameplay.GPPerkComponent.OnRep_CharacterPerkArray // (Final|Native|Protected|HasOutParms) // @ game+0x36402b0
	struct TArray<struct FCharacterPerk> GetCharacterPerks(); // Function GPGameplay.GPPerkComponent.GetCharacterPerks // (Native|Public) // @ game+0x363ff10
	void DumpPerkInfo(); // Function GPGameplay.GPPerkComponent.DumpPerkInfo // (Final|Exec|Native|Public) // @ game+0x88f4d0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPerkSPEffectInstanceInterface
// Size: 0x30 (Inherited: 0x30)
class UGPPerkSPEffectInstanceInterface : public UInterface {
public:


	void Tick(float DeltaSeconds); // Function GPGameplay.GPPerkSPEffectInstanceInterface.Tick // (Native|Public) // @ game+0xaa3040
	void OnDeactive(); // Function GPGameplay.GPPerkSPEffectInstanceInterface.OnDeactive // (Native|Public) // @ game+0x9281d0
	void OnActive(); // Function GPGameplay.GPPerkSPEffectInstanceInterface.OnActive // (Native|Public) // @ game+0xbd3040
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPerkUtil
// Size: 0x30 (Inherited: 0x30)
class UGPPerkUtil : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPhysicalAnimationComponent
// Size: 0x140 (Inherited: 0x140)
class UGPPhysicalAnimationComponent : public UPhysicalAnimationComponent {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPlayerCameraManager
// Size: 0x5100 (Inherited: 0x40e8)
class AGPPlayerCameraManager : public APlayerCameraManager {
public:

	struct FMobileDOFConfigs ZoomInDofConfig; // 0x40e8(0x24)
	struct FDesktopDOFConfigs DesktopDOFConfigs; // 0x410c(0x28)
	float DefaultMotionBlur; // 0x4134(0x04)
	char pad_4138[0x8]; // 0x4138(0x08)
	struct FPostProcessSettings DefaultPPSettings; // 0x4140(0x950)
	bool bForceAddDefaultPP; // 0x4a90(0x01)
	char pad_4A91[0xf]; // 0x4a91(0x0f)
	struct AActor* LastThirdPersonTarget; // 0x4aa0(0x08)
	float CurrentCamBonus; // 0x4aa8(0x04)
	float FlagCamBonus; // 0x4aac(0x04)
	float PowerupBonus; // 0x4ab0(0x04)
	float HigherScoreBonus; // 0x4ab4(0x04)
	float CurrentActionBonus; // 0x4ab8(0x04)
	float FPPCameraLerpToAddTimeConfig; // 0x4abc(0x04)
	char pad_4AC0[0x8]; // 0x4ac0(0x08)
	struct UCurveFloat* SwitchViewTargetCurve; // 0x4ac8(0x08)
	struct UCurveFloat* SwitchViewTargetFovCurve; // 0x4ad0(0x08)
	char pad_4AD8[0x38]; // 0x4ad8(0x38)
	float ProneViewPitchMin; // 0x4b10(0x04)
	float ProneViewPitchMax; // 0x4b14(0x04)
	struct FVector2D FreeLookModeCameraViewPitchLimit; // 0x4b18(0x08)
	struct FVector2D FreeLookModeCameraViewYawLimit; // 0x4b20(0x08)
	struct FName FPPCameraRootName; // 0x4b28(0x08)
	struct FName FPPCameraJointName; // 0x4b30(0x08)
	struct FName FPPCameraBoneName; // 0x4b38(0x08)
	char pad_4B40[0x34]; // 0x4b40(0x34)
	float CameraSmoothTime_Crouch; // 0x4b74(0x04)
	float CameraSmoothTime_Prone; // 0x4b78(0x04)
	float CameraSmoothTime_QuickCrouch; // 0x4b7c(0x04)
	float CameraSmoothTime_Parachute; // 0x4b80(0x04)
	float CameraSmoothTime_Climb; // 0x4b84(0x04)
	float CameraSmoothSpeed_Crouch; // 0x4b88(0x04)
	float CameraSmoothSpeed_Prone; // 0x4b8c(0x04)
	float CameraSmoothSpeed_Climb; // 0x4b90(0x04)
	char pad_4B94[0x2c]; // 0x4b94(0x2c)
	struct USkeletalMeshSocket* TargetSocket; // 0x4bc0(0x08)
	char pad_4BC8[0x8]; // 0x4bc8(0x08)
	struct UCurveFloat* FOVDeltaBySpeedCurve; // 0x4bd0(0x08)
	char pad_4BD8[0x8]; // 0x4bd8(0x08)
	struct UGPAttributeSetSpeed* AttributeSetSpeed; // 0x4be0(0x08)
	struct AGPPlayerController* GPPlayerController; // 0x4be8(0x08)
	struct UClientBaseSetting* ClientBaseSetting; // 0x4bf0(0x08)
	char pad_4BF8[0x8]; // 0x4bf8(0x08)
	struct UClientCameraSettingHD* ClientCameraSettingHD; // 0x4c00(0x08)
	char pad_4C08[0x30]; // 0x4c08(0x30)
	struct AGPCharacterBase* AimingTarget; // 0x4c38(0x08)
	char pad_4C40[0xb0]; // 0x4c40(0xb0)
	float FPPCameraFOV; // 0x4cf0(0x04)
	float ReferenceFPPCameraFov; // 0x4cf4(0x04)
	float ReferenceAspectForFixedVerticalFov; // 0x4cf8(0x04)
	char pad_4CFC[0x111]; // 0x4cfc(0x111)
	bool bUsingExplosionRadialParams; // 0x4e0d(0x01)
	char pad_4E0E[0x2]; // 0x4e0e(0x02)
	struct TArray<struct AActor*> ActorsToIgnore; // 0x4e10(0x10)
	struct TArray<struct UPrimitiveComponent*> CompsToIgnore; // 0x4e20(0x10)
	float GlobalCameraAnimTransformScale; // 0x4e30(0x04)
	float GlobalPCAnimCameraRotScale; // 0x4e34(0x04)
	float GlobalMobileAnimCameraRotScale; // 0x4e38(0x04)
	float GlobalPCAnimCameraLocScale; // 0x4e3c(0x04)
	float GlobalMobileAnimCameraLocScale; // 0x4e40(0x04)
	bool bForceUseDefualtCameraStyle; // 0x4e44(0x01)
	char pad_4E45[0x1b]; // 0x4e45(0x1b)
	enum class EFovAdjustMode FovAdjustMode; // 0x4e60(0x01)
	char pad_4E61[0x3]; // 0x4e61(0x03)
	struct FVector2D DesignAspect; // 0x4e64(0x08)
	char pad_4E6C[0x34]; // 0x4e6c(0x34)
	float DefaultInteractFOV; // 0x4ea0(0x04)
	float BasicFovForScale; // 0x4ea4(0x04)
	struct FGPSceneFOVChangeDataInfo ChangeSceneFovData; // 0x4ea8(0x20)
	char pad_4EC8[0x160]; // 0x4ec8(0x160)
	struct TMap<struct FName, struct FCameraModeConfig> CameraModeConfig; // 0x5028(0x50)
	struct TMap<enum class ECameraModifier, struct UClass*> CameraModifierMapping; // 0x5078(0x50)
	char pad_50C8[0x38]; // 0x50c8(0x38)

	void SetPPS_GhostEffect(bool bRadialBlur, bool bGhostEffect); // Function GPGameplay.GPPlayerCameraManager.SetPPS_GhostEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x3640900
	void SetForceAddDefaultPP(bool InForceAddDefaultPP, bool InClearCachedPPBlends); // Function GPGameplay.GPPlayerCameraManager.SetForceAddDefaultPP // (Final|Native|Public) // @ game+0x36407b0
	void SetDefaultFov(float InFOV); // Function GPGameplay.GPPlayerCameraManager.SetDefaultFov // (Final|Native|Public|BlueprintCallable) // @ game+0x3640730
	void RemovePostprocessMat(/*struct TSoftObjectPtr<UMaterialInstance> SoftMatInst*/); // Function GPGameplay.GPPlayerCameraManager.RemovePostprocessMat // (Final|Native|Public|BlueprintCallable) // @ game+0x3640580
	void RefreshGNearClippingPlane(float NearPlaneDistance); // Function GPGameplay.GPPlayerCameraManager.RefreshGNearClippingPlane // (Final|Native|Public) // @ game+0x3640470
	void OnEnterGameFlowStage(enum class EGameFlowStageType StageType); // Function GPGameplay.GPPlayerCameraManager.OnEnterGameFlowStage // (Final|Native|Public) // @ game+0x3640230
	float GetZoomRateByFov(float InFOV); // Function GPGameplay.GPPlayerCameraManager.GetZoomRateByFov // (Final|Native|Public|BlueprintCallable) // @ game+0x36401a0
	struct FVector2D GetSceneFov(); // Function GPGameplay.GPPlayerCameraManager.GetSceneFov // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3640160
	float GetFovWithZoomRate(float InZoomRate, float InFOV); // Function GPGameplay.GPPlayerCameraManager.GetFovWithZoomRate // (Final|Native|Public|BlueprintCallable) // @ game+0x3640090
	float GetFOVAngleForSensitivity(); // Function GPGameplay.GPPlayerCameraManager.GetFOVAngleForSensitivity // (Final|Native|Public|BlueprintCallable) // @ game+0x3640030
	bool GetForceAddDefaultPP(); // Function GPGameplay.GPPlayerCameraManager.GetForceAddDefaultPP // (Final|Native|Public) // @ game+0x3640060
	struct FVector2D GetDesignAspect(); // Function GPGameplay.GPPlayerCameraManager.GetDesignAspect // (Final|Native|Public|HasDefaults|Const) // @ game+0x363fff0
	float GetBasicFovForScale(); // Function GPGameplay.GPPlayerCameraManager.GetBasicFovForScale // (Final|Native|Public|BlueprintCallable) // @ game+0x363fee0
	struct FVector2D STATIC_CalcSceneFov(enum class EFovAdjustMode InFovAdjustMode, struct FVector2D InDesignAspect, struct FVector2D InDesignFovs, struct FVector2D InCurAspect); // Function GPGameplay.GPPlayerCameraManager.CalcSceneFov // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x363fda0
	void AddPostprocessMat(/*struct TSoftObjectPtr<UMaterialInstance> SoftMatInst, float Weight*/); // Function GPGameplay.GPPlayerCameraManager.AddPostprocessMat // (Final|Native|Public|BlueprintCallable) // @ game+0x363fb80
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPMissionSubsystem
// Size: 0x38 (Inherited: 0x30)
class UGPMissionSubsystem : public UObject {
public:

	bool bStandalone; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)

	void PlayerSetupMission(struct AGPPlayerController* Player); // Function GPGameplay.GPMissionSubsystem.PlayerSetupMission // (Native|Public) // @ game+0x3649840
	void PlayerFetchMission(struct AGPPlayerController* Player); // Function GPGameplay.GPMissionSubsystem.PlayerFetchMission // (Native|Public) // @ game+0x36497b0
	void OnEndPlay(); // Function GPGameplay.GPMissionSubsystem.OnEndPlay // (Native|Public) // @ game+0x895c00
	void OnBeginPlay(struct UObject* InObj); // Function GPGameplay.GPMissionSubsystem.OnBeginPlay // (Native|Public) // @ game+0xbe5f50
	struct UGPMissionSubsystem* STATIC_Get(struct UObject* obj); // Function GPGameplay.GPMissionSubsystem.Get // (Final|Native|Static|Public) // @ game+0x3648300
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPlayerMissionComponent
// Size: 0x100 (Inherited: 0x100)
class UGPPlayerMissionComponent : public UActorComponent {
public:


	void InitMission(); // Function GPGameplay.GPPlayerMissionComponent.InitMission // (Final|Native|Public) // @ game+0x88f4d0
	void EndPlay(enum class EEndPlayReason EndPlayReason); // Function GPGameplay.GPPlayerMissionComponent.EndPlay // (Native|Public) // @ game+0x35fa350
	void BeginPlay(); // Function GPGameplay.GPPlayerMissionComponent.BeginPlay // (Native|Public) // @ game+0xaa7710
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPMissionComponent
// Size: 0x248 (Inherited: 0x100)
class UGPMissionComponent : public UActorComponent {
public:

	float MissionTimeLimit; // 0x100(0x04)
	float MissionTimeLimitStart; // 0x104(0x04)
	struct FPlayerMissionInfo PlayerMissionInfo; // 0x108(0x40)
	struct TArray<struct FPlayerMissionGiverInfo> MissionGivers; // 0x148(0x10)
	struct TArray<struct FVector> MapMarkers; // 0x158(0x10)
	struct FMissionObjectiveProgress AllMissionObjectiveProgress; // 0x168(0x68)
	struct FTimeLimitMissions TimeLimitMissions; // 0x1d0(0x60)
	int32_t TeamScroe; // 0x230(0x04)
	bool ShowTeamScroe; // 0x234(0x01)
	char pad_235[0x3]; // 0x235(0x03)
	struct TArray<struct FPlayerMissionDialogInfo> MissionDialogGroupID; // 0x238(0x10)

	void SimulateMissionReplicate(); // Function GPGameplay.GPMissionComponent.SimulateMissionReplicate // (Final|Native|Public) // @ game+0x364abf0
	void RemoveMissionDlalogGourpID(struct FString Tag, int64_t GroupID); // Function GPGameplay.GPMissionComponent.RemoveMissionDlalogGourpID // (Final|Native|Public) // @ game+0x3649990
	void OnRep_MissionScore(); // Function GPGameplay.GPMissionComponent.OnRep_MissionScore // (Final|Native|Public) // @ game+0x3649540
	void OnRep_MissionInfo(); // Function GPGameplay.GPMissionComponent.OnRep_MissionInfo // (Final|Native|Public) // @ game+0x3649520
	void OnRep_MissionGiver(); // Function GPGameplay.GPMissionComponent.OnRep_MissionGiver // (Final|Native|Public) // @ game+0x3649500
	void InitAllMission(); // Function GPGameplay.GPMissionComponent.InitAllMission // (Native|Public) // @ game+0x1e36270
	bool GetMissionDialogGroupID(struct FString Tag, int64_t& oldGourpID); // Function GPGameplay.GPMissionComponent.GetMissionDialogGroupID // (Final|Native|Public|HasOutParms) // @ game+0x3648820
	float GetLeftMissionTimeLimit(); // Function GPGameplay.GPMissionComponent.GetLeftMissionTimeLimit // (Final|Native|Public) // @ game+0x36487f0
	struct FString GetFirstTargetTag(); // Function GPGameplay.GPMissionComponent.GetFirstTargetTag // (Final|Native|Public) // @ game+0x36485b0
	struct AActor* GetFirstTarget(); // Function GPGameplay.GPMissionComponent.GetFirstTarget // (Final|Native|Public) // @ game+0x3648580
	void AddMissionDialogGroupID(struct FString Tag, int64_t GroupID); // Function GPGameplay.GPMissionComponent.AddMissionDialogGroupID // (Final|Native|Public) // @ game+0x36479c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPGameStateMissionComponent
// Size: 0x100 (Inherited: 0x100)
class UGPGameStateMissionComponent : public UActorComponent {
public:


	void unRegisterDelegates(); // Function GPGameplay.GPGameStateMissionComponent.unRegisterDelegates // (Native|Public) // @ game+0x35e4a10
	void RegisterDelegates(); // Function GPGameplay.GPGameStateMissionComponent.RegisterDelegates // (Native|Public) // @ game+0x35a3800
	void PlayerSetupMission(struct AGPPlayerController* cpc); // Function GPGameplay.GPGameStateMissionComponent.PlayerSetupMission // (Native|Public) // @ game+0xbd8ba0
	void GPActivateMissionMode(bool Activate, int32_t Type); // Function GPGameplay.GPGameStateMissionComponent.GPActivateMissionMode // (Native|Public) // @ game+0x3648230
	struct UGPMissionSubsystem* GetGPMissionSubSystem(); // Function GPGameplay.GPGameStateMissionComponent.GetGPMissionSubSystem // (Native|Public) // @ game+0x36486c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPlayerRouteServerComponent
// Size: 0x100 (Inherited: 0x100)
class UGPPlayerRouteServerComponent : public UActorComponent {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPlayerStart
// Size: 0x400 (Inherited: 0x3a8)
class AGPPlayerStart : public APlayerStart {
public:

	char pad_3A8[0x48]; // 0x3a8(0x48)
	bool bActived; // 0x3f0(0x01)
	char pad_3F1[0x3]; // 0x3f1(0x03)
	int32_t Priority; // 0x3f4(0x04)
	int32_t OverlapPlayerCount; // 0x3f8(0x04)
	char pad_3FC[0x4]; // 0x3fc(0x04)

	int32_t CalcuOverlapPlayerCount(); // Function GPGameplay.GPPlayerStart.CalcuOverlapPlayerCount // (Final|Native|Public|BlueprintCallable) // @ game+0x364db60
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPlayerVirtualInputSettings
// Size: 0x48 (Inherited: 0x40)
class UGPPlayerVirtualInputSettings : public UDeveloperSettings {
public:

	bool bUseVirtualInput; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPlayerVirtualInput
// Size: 0x40 (Inherited: 0x30)
class UGPPlayerVirtualInput : public UObject {
public:

	int32_t TargetPlayerIndex; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct AGPPlayerController* PlayerController; // 0x38(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPoolTriggerSphere
// Size: 0x390 (Inherited: 0x380)
class AGPPoolTriggerSphere : public ATriggerSphere {
public:

	char pad_380[0x10]; // 0x380(0x10)

	void BP_OnPoolableUsed(); // Function GPGameplay.GPPoolTriggerSphere.BP_OnPoolableUsed // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void BP_OnPoolableCreated(); // Function GPGameplay.GPPoolTriggerSphere.BP_OnPoolableCreated // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPostEffectManager
// Size: 0x5e0 (Inherited: 0x378)
class AGPPostEffectManager : public AActor {
public:

	struct UFullScreenQuadComponent* FullScreenQuadComp0; // 0x378(0x08)
	struct UFullScreenQuadComponent* FullScreenQuadComp1; // 0x380(0x08)
	struct UFullScreenQuadComponent* FullScreenQuadComp2; // 0x388(0x08)
	struct UFullScreenQuadComponent* FullScreenQuadComp3; // 0x390(0x08)
	struct UFullScreenQuadComponent* FullScreenQuadCompBottom; // 0x398(0x08)
	struct UStaticMesh* DefaultFullScreenQuadMesh; // 0x3a0(0x08)
	/*struct TMap<struct FString, struct TSoftObjectPtr<APostProcessVolume>>*/char PostEffectVolumeMap[0x50]; // 0x3a8(0x50)
	/*struct TSoftObjectPtr<APostProcessVolume>*/char DefaultPostEffectVolume[0x28]; // 0x3f8(0x28)
	struct TArray<struct FGPPostprocessMaterialInfo> PostEffectMaterials; // 0x420(0x10)
	struct TMap<struct FString, struct FGPPostprocessDynamicMaterialInfo> PostEffectDynamicMaterials; // 0x430(0x50)
	struct APostProcessVolume* CurrentPostEffectVolume; // 0x480(0x08)
	struct TArray<struct UFullScreenQuadComponent*> FullScreenComponents; // 0x488(0x10)
	struct TArray<struct UMaterialParameterCollection*> NeedRebaseMPCs; // 0x498(0x10)
	struct TArray<struct UMaterialParameterCollectionInstance*> NeedRebaseMPCInstances; // 0x4a8(0x10)
	struct TArray<struct FName> NeedRebaseParametersName2D; // 0x4b8(0x10)
	struct TArray<struct FName> NeedRebaseParametersName3D; // 0x4c8(0x10)
	struct UMaterialInterface* ScreenOCPostMaterial; // 0x4d8(0x08)
	struct UStaticMesh* ScreenOCMesh; // 0x4e0(0x08)
	char pad_4E8[0xf8]; // 0x4e8(0xf8)

	void UpdatePostprocessViewportParam(struct UMaterialInstanceDynamic* CurDynamicMat, struct FVector2D InViewPortLeftTop, struct FVector2D InViewPortSize); // Function GPGameplay.GPPostEffectManager.UpdatePostprocessViewportParam // (Final|Native|Public|HasDefaults) // @ game+0x364f9b0
	void UpdatePostEffectVectorParameters(struct FString PostEffectName, struct FString ParameterName, struct FLinearColor Value); // Function GPGameplay.GPPostEffectManager.UpdatePostEffectVectorParameters // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x364f780
	void UpdatePostEffectScalarParameters(struct FString PostEffectName, struct FString ParameterName, float Value); // Function GPGameplay.GPPostEffectManager.UpdatePostEffectScalarParameters // (Final|Native|Public|BlueprintCallable) // @ game+0x364f570
	void UpdateDisplayStyle(); // Function GPGameplay.GPPostEffectManager.UpdateDisplayStyle // (Final|Native|Public) // @ game+0x364f550
	void SwitchDisplayStyle(struct FString InStyle); // Function GPGameplay.GPPostEffectManager.SwitchDisplayStyle // (Final|Native|Public) // @ game+0x364f430
	void SetPostScreenEffectActiveWithViewSize(struct UMaterialInterface* MaterialInstanceDynamic, bool bEnabled, struct FVector2D ViewportLeftTop, struct FVector2D ViewportSize); // Function GPGameplay.GPPostEffectManager.SetPostScreenEffectActiveWithViewSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x364f130
	void SetPostScreenEffectActive(struct UMaterialInstanceDynamic* MaterialInstanceDynamic, bool bEnabled); // Function GPGameplay.GPPostEffectManager.SetPostScreenEffectActive // (Final|Native|Public|BlueprintCallable) // @ game+0x364f060
	void SetPostEffectActive(struct FString PostEffectName, bool bEnabled, enum class EPerfGearQualityLevel OverrideQualityLevel); // Function GPGameplay.GPPostEffectManager.SetPostEffectActive // (Final|Native|Public|BlueprintCallable) // @ game+0x364eed0
	void ResetDisplayStyle(struct TArray<struct FString>& ResetPanelList); // Function GPGameplay.GPPostEffectManager.ResetDisplayStyle // (Final|Native|Public|HasOutParms) // @ game+0x364ea10
	void RemoveScreenOCStaticMesh(); // Function GPGameplay.GPPostEffectManager.RemoveScreenOCStaticMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x364e9f0
	void RemovePostScreenEffect(struct UMaterialInstanceDynamic* MaterialInstanceDynamic); // Function GPGameplay.GPPostEffectManager.RemovePostScreenEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x364e970
	void RemovePostEffect(struct FString PostEffectName); // Function GPGameplay.GPPostEffectManager.RemovePostEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x364e850
	struct AGPPostEffectManager* STATIC_Get(struct UObject* WorldContext); // Function GPGameplay.GPPostEffectManager.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x364dea0
	void DisableAllStyle(); // Function GPGameplay.GPPostEffectManager.DisableAllStyle // (Final|Native|Public) // @ game+0x364de80
	void DisableAllPostEffect(); // Function GPGameplay.GPPostEffectManager.DisableAllPostEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x364de60
	void AddScreenOCStaticMesh(); // Function GPGameplay.GPPostEffectManager.AddScreenOCStaticMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x364db40
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPProjectileGameComponent
// Size: 0x130 (Inherited: 0x100)
class UGPProjectileGameComponent : public UActorComponent {
public:

	char pad_100[0x20]; // 0x100(0x20)
	struct TArray<struct FGPProjectileFXItem> FXItems; // 0x120(0x10)

	void UnRegisterFXItem(struct UObject* Owner); // Function GPGameplay.GPProjectileGameComponent.UnRegisterFXItem // (Final|Native|Public) // @ game+0x36539d0
	void RegisterFXItem(struct UObject* Owner, struct FVector ZeroBasedCenter, float Dist); // Function GPGameplay.GPProjectileGameComponent.RegisterFXItem // (Final|Native|Public|HasDefaults) // @ game+0x3653600
	bool NeedResetTranslucencySort(struct UFXResourceContainerComponent* InFXComponent, float Distance); // Function GPGameplay.GPProjectileGameComponent.NeedResetTranslucencySort // (Final|Native|Public) // @ game+0x3653120
	bool IsOverlapFXItem(struct FVector ZeroBasedCenter, struct UObject* IgnoredOwner); // Function GPGameplay.GPProjectileGameComponent.IsOverlapFXItem // (Final|Native|Public|HasDefaults) // @ game+0x3652de0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPushedComponent
// Size: 0x120 (Inherited: 0x100)
class UGPPushedComponent : public UActorComponent {
public:

	char pad_100[0x8]; // 0x100(0x08)
	struct AGPCharacter* CharacterOwner; // 0x108(0x08)
	char pad_110[0x10]; // 0x110(0x10)

	void ServerReplicatePushedInfos(bool bIsClientPushed, struct FVector Velocity); // Function GPGameplay.GPPushedComponent.ServerReplicatePushedInfos // (Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate) // @ game+0x36537e0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPRagdollManager
// Size: 0xf8 (Inherited: 0x38)
class UGPRagdollManager : public UWorldSubsystem {
public:

	char pad_38[0x14]; // 0x38(0x14)
	struct TWeakObjectPtr<struct AGPCharacterBase> LocalPlayer; // 0x4c(0x08)
	char pad_54[0x4]; // 0x54(0x04)
	/*struct TSet<struct TWeakObjectPtr<struct UGPRagDollPhysicsComponent>>*/char RagdollInstanceSet[0x50]; // 0x58(0x50)
	char pad_A8[0x50]; // 0xa8(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAIDeathAnimConfigDataAsset
// Size: 0x70 (Inherited: 0x38)
class UGPAIDeathAnimConfigDataAsset : public UDataAsset {
public:

	struct UDataTable* StandDeathAnims; // 0x38(0x08)
	struct UDataTable* CrouchDeathAnims; // 0x40(0x08)
	struct UDataTable* RunDeathAnims; // 0x48(0x08)
	struct UDataTable* SprintDeathAnims; // 0x50(0x08)
	struct UDataTable* SwimDeathAnims; // 0x58(0x08)
	struct UDataTable* BalconyDeathAnims; // 0x60(0x08)
	struct FName FallBackAnim; // 0x68(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPGUIDRemapSettings
// Size: 0x50 (Inherited: 0x40)
class UGPGUIDRemapSettings : public UDeveloperSettings {
public:

	struct TArray<struct UClass*> ExcludeActorClass; // 0x40(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPRushMoveComponent
// Size: 0x4d8 (Inherited: 0x100)
class UGPRushMoveComponent : public UActorComponent {
public:

	struct AGPCharacter* CharacterOwner; // 0x100(0x08)
	struct FTimerHandle TickRush3PHandle; // 0x108(0x08)
	struct FTimerHandle RushMoveCheckVaultTimerHandle; // 0x110(0x08)
	float BeginStopVaultTime; // 0x118(0x04)
	bool BeginInFalling; // 0x11c(0x01)
	char pad_11D[0x3]; // 0x11d(0x03)
	int32_t CurrentRushDataUin; // 0x120(0x04)
	char pad_124[0x4]; // 0x124(0x04)
	struct TMap<uint32_t, struct FGPRootMotionAnimTrackData> RushTrackDataMap; // 0x128(0x50)
	int32_t SkillId; // 0x178(0x04)
	struct FName LogicName; // 0x17c(0x08)
	char pad_184[0x4]; // 0x184(0x04)
	struct FAbilityRushSettingConfig RushSettingConfig; // 0x188(0x190)
	float RushSpeed; // 0x318(0x04)
	float RushTime; // 0x31c(0x04)
	float VelocityBlendInTime; // 0x320(0x04)
	float VelocityBlendOutTime; // 0x324(0x04)
	float MaxMoveDist; // 0x328(0x04)
	float DistanceScale; // 0x32c(0x04)
	float TimeScale; // 0x330(0x04)
	float fMoveStopDistance; // 0x334(0x04)
	float fMoveStopTime; // 0x338(0x04)
	struct FVector LastMovePosition; // 0x33c(0x0c)
	float EnteringRushSpeed; // 0x348(0x04)
	float CurrentSpeed; // 0x34c(0x04)
	float VelocitySpeedZ; // 0x350(0x04)
	struct FVector VelocityDirection; // 0x354(0x0c)
	struct FVector MoveAdjusted; // 0x360(0x0c)
	bool bInAirRush; // 0x36c(0x01)
	char pad_36D[0x3]; // 0x36d(0x03)
	float VelocityDirectionV1; // 0x370(0x04)
	float VelocityDirectionV2; // 0x374(0x04)
	float VelocityDirectionV3; // 0x378(0x04)
	float VelocityDirectionV4; // 0x37c(0x04)
	float AccumulateRushTime; // 0x380(0x04)
	float OldAccumulateRushTime; // 0x384(0x04)
	float StartRushMoveTime; // 0x388(0x04)
	bool bRushMove; // 0x38c(0x01)
	bool bStopRushMove; // 0x38d(0x01)
	bool bClientIsCheat; // 0x38e(0x01)
	char pad_38F[0x1]; // 0x38f(0x01)
	struct FVector InitZeroBasedLocation; // 0x390(0x0c)
	struct FVector InitLocation; // 0x39c(0x0c)
	struct FVector ContinueVelocity; // 0x3a8(0x0c)
	struct FVector TotalContinueVelocity; // 0x3b4(0x0c)
	float TotalDeltaTime; // 0x3c0(0x04)
	bool LastInAir; // 0x3c4(0x01)
	char pad_3C5[0x3]; // 0x3c5(0x03)
	int32_t VelocityFrameCount; // 0x3c8(0x04)
	float ContinueTime; // 0x3cc(0x04)
	struct FVector GroundContinueVelocity; // 0x3d0(0x0c)
	struct FVector TotalGroundContinueVelocity; // 0x3dc(0x0c)
	float TotalGroundDeltaTime; // 0x3e8(0x04)
	int32_t GroundVelocityFrameCount; // 0x3ec(0x04)
	float GroundContinueTime; // 0x3f0(0x04)
	char pad_3F4[0x4]; // 0x3f4(0x04)
	struct UAnimMontage* RushAction_Montage; // 0x3f8(0x08)
	struct UAnimMontage* RushAction_MontageFPP; // 0x400(0x08)
	char pad_408[0x10]; // 0x408(0x10)
	struct UAnimSequence* RushMoveStartSequence_FPP; // 0x418(0x08)
	struct UAnimSequence* RushMoveStartSequence_TPP; // 0x420(0x08)
	struct UAnimSequence* RushMoveEndSequence_FPP; // 0x428(0x08)
	struct UAnimSequence* RushMoveEndSequence_TPP; // 0x430(0x08)
	struct TMap<struct FName, uint64_t> LoadHandleMap; // 0x438(0x50)
	struct TMap<struct FName, struct UObject*> LoadedResourceMap; // 0x488(0x50)

	void TickRush3P(); // Function GPGameplay.GPRushMoveComponent.TickRush3P // (Final|Native|Public) // @ game+0x36566a0
	void StopCheckRushMoveCheckVault(); // Function GPGameplay.GPRushMoveComponent.StopCheckRushMoveCheckVault // (Native|Protected) // @ game+0x3615dc0
	void ServerRushMoveDirection(struct FVector MoveDirection, float v1, float v2, float v3, float v4); // Function GPGameplay.GPRushMoveComponent.ServerRushMoveDirection // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x36564e0
	void PlayAudio(); // Function GPGameplay.GPRushMoveComponent.PlayAudio // (Final|Native|Public) // @ game+0x36564c0
	void OnRushMoveCheckVault(); // Function GPGameplay.GPRushMoveComponent.OnRushMoveCheckVault // (Native|Protected) // @ game+0x361c8e0
	void NetMulticastRushMoveDirection(struct FVector MoveDirection, float v1, float v2, float v3, float v4); // Function GPGameplay.GPRushMoveComponent.NetMulticastRushMoveDirection // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x3656220
	void BeginCheckRushMoveCheckVault(); // Function GPGameplay.GPRushMoveComponent.BeginCheckRushMoveCheckVault // (Native|Protected) // @ game+0x22790c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSafeHouseAnimProxyComponent
// Size: 0x118 (Inherited: 0x100)
class UGPSafeHouseAnimProxyComponent : public UActorComponent {
public:

	struct AGPSafeHouseCharacter* SHCharacter; // 0x100(0x08)
	float BSAnimBasicSpeed; // 0x108(0x04)
	float BSAnimSprintSpeed; // 0x10c(0x04)
	float BSAnimSilentWalkSpeed; // 0x110(0x04)
	char pad_114[0x4]; // 0x114(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSafeHouseBlackboardComponent
// Size: 0x1c8 (Inherited: 0x100)
class UGPSafeHouseBlackboardComponent : public UActorComponent {
public:

	struct AGPSafeHouseCharacter* SHCharacter; // 0x100(0x08)
	struct AGPSHPlayerController* SHPlayerController; // 0x108(0x08)
	bool bIsMoving; // 0x110(0x01)
	bool bIsSprint; // 0x111(0x01)
	bool bIsSilentWalk; // 0x112(0x01)
	bool bIsCrouch; // 0x113(0x01)
	bool bIsProne; // 0x114(0x01)
	bool bIsStand; // 0x115(0x01)
	bool bIsFalling; // 0x116(0x01)
	bool bIsFallingLastState; // 0x117(0x01)
	bool bIsPersistSprint; // 0x118(0x01)
	bool bIsPersistRun; // 0x119(0x01)
	bool bShiftKeyPressed; // 0x11a(0x01)
	bool bCapKeyPressed; // 0x11b(0x01)
	bool bCanSprint; // 0x11c(0x01)
	bool bCanProne; // 0x11d(0x01)
	bool bCanCrouch; // 0x11e(0x01)
	bool bCanJump; // 0x11f(0x01)
	bool bCanSilentWalk; // 0x120(0x01)
	char pad_121[0xa7]; // 0x121(0xa7)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSafeHouseCharacterMovementComponent
// Size: 0x7d0 (Inherited: 0x7a0)
class UGPSafeHouseCharacterMovementComponent : public UCharacterMovementComponent {
public:

	float StandBasicSpeed; // 0x7a0(0x04)
	float CrouchBasicSpeed; // 0x7a4(0x04)
	float ProneBasicSpeed; // 0x7a8(0x04)
	float SprintBasicSpeed; // 0x7ac(0x04)
	float StandSilentWalkSpeed; // 0x7b0(0x04)
	float CrouchSprintBasicSpeed; // 0x7b4(0x04)
	char pad_7B8[0x8]; // 0x7b8(0x08)
	struct UGPSafeHouseBlackboardComponent* BlackBoard; // 0x7c0(0x08)
	char pad_7C8[0x8]; // 0x7c8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSafeHouseSkeletalMeshComponent
// Size: 0xf30 (Inherited: 0xf28)
class UGPSafeHouseSkeletalMeshComponent : public USkeletalMeshComponent {
public:

	char pad_F28[0x8]; // 0xf28(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSceneActorDataEntityBase
// Size: 0x118 (Inherited: 0x30)
class UGPSceneActorDataEntityBase : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)
	struct AActor* DataSourceActor; // 0x38(0x08)
	char pad_40[0xc8]; // 0x40(0xc8)
	struct AGPSceneActorReplicator* SceneActorReplicator; // 0x108(0x08)
	char pad_110[0x8]; // 0x110(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSceneActorInterface
// Size: 0x30 (Inherited: 0x30)
class UGPSceneActorInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSceneActorReplicator
// Size: 0x690 (Inherited: 0x378)
class AGPSceneActorReplicator : public AActor {
public:

	bool bIsSpawned; // 0x378(0x01)
	char pad_379[0x17]; // 0x379(0x17)
	struct TArray<struct AActor*> PendingSceneActorArray; // 0x390(0x10)
	struct TArray<struct FSceneActorInfo> RepSceneActorInfos; // 0x3a0(0x10)
	char pad_3B0[0xa0]; // 0x3b0(0xa0)
	struct AGPNetworkPlayerController* NetworkPlayerController; // 0x450(0x08)
	struct TArray<struct UGPSceneActorDataEntityBase*> DataEntityCacheArr; // 0x458(0x10)
	struct TMap<enum class EGPHudDataType, struct UClass*> DataEntityClassMap; // 0x468(0x50)
	char pad_4B8[0x8]; // 0x4b8(0x08)
	/*struct TSet<struct AActor*>*/char RepLocationActorSet[0x50]; // 0x4c0(0x50)
	struct TArray<struct FHudDataLocCharacter> ClientLocationHudDataArr_Character; // 0x510(0x10)
	struct TMap<int64_t, int32_t> ClientIDIndexMap_Character; // 0x520(0x50)
	struct TArray<struct FHudDataLocSceneVehicle> ClientLocationHudDataArr_SceneVehicle; // 0x570(0x10)
	struct TMap<int64_t, int32_t> ClientIDIndexMap_SceneVehicle; // 0x580(0x50)
	struct TMap<uint64_t, struct FVector> CacheLocationArr; // 0x5d0(0x50)
	struct TMap<uint64_t, float> CacheRotationArr; // 0x620(0x50)
	char pad_670[0x8]; // 0x670(0x08)
	struct TArray<struct FSceneWeaponOnFireInfo> SceneWeaponOnFireInfoArr2Rep; // 0x678(0x10)
	struct UGPBattleFieldSystem* BattleFieldSystem; // 0x688(0x08)

	void OnServerActorChannelInfoUpdate(struct FGPActorChannelInfo& ActorChannelInfo); // Function GPGameplay.GPSceneActorReplicator.OnServerActorChannelInfoUpdate // (Native|Public|HasOutParms) // @ game+0x365ab90
	void OnSceneWeaponBeginFire(struct AActor* CHARACTER, struct AActor* WeaponPawn); // Function GPGameplay.GPSceneActorReplicator.OnSceneWeaponBeginFire // (Final|Native|Protected) // @ game+0x365aad0
	void OnRep_RepSceneActorInfos(); // Function GPGameplay.GPSceneActorReplicator.OnRep_RepSceneActorInfos // (Final|Native|Public) // @ game+0x365aab0
	void OnRep_OnSpawned(); // Function GPGameplay.GPSceneActorReplicator.OnRep_OnSpawned // (Final|Native|Public) // @ game+0x365aa90
	void NetMulticast_SceneWeaponOnFireInfos(struct TArray<struct FSceneWeaponOnFireInfo> InSceneWeaponOnFireInfoArr); // Function GPGameplay.GPSceneActorReplicator.NetMulticast_SceneWeaponOnFireInfos // (Net|Native|Event|NetMulticast|Protected) // @ game+0x365a5e0
	void NetMulticast_SceneVehicleLocationNew(struct FHudDataLocSceneVehicleInfo SceneVehicleInfo, struct FHudDataLocMsg HudDataLocMsg); // Function GPGameplay.GPSceneActorReplicator.NetMulticast_SceneVehicleLocationNew // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x365a460
	void NetMulticast_CharacterLocationNew(struct FHudDataLocCharacterInfo CharacterInfo, struct FHudDataLocMsg HudDataLocMsg); // Function GPGameplay.GPSceneActorReplicator.NetMulticast_CharacterLocationNew // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x365a2e0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSceneActorReplicatorCollection
// Size: 0x48 (Inherited: 0x38)
class UGPSceneActorReplicatorCollection : public UWorldSubsystem {
public:

	struct AGPSceneActorReplicator* SingletonActor; // 0x38(0x08)
	char pad_40[0x8]; // 0x40(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSceneComponent
// Size: 0x240 (Inherited: 0x240)
class UGPSceneComponent : public USceneComponent {
public:


	void CallConstructionScript(); // Function GPGameplay.GPSceneComponent.CallConstructionScript // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x365a130
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSceneQuery
// Size: 0x450 (Inherited: 0x38)
class UGPSceneQuery : public UWorldSubsystem {
public:

	char pad_38[0x418]; // 0x38(0x418)

	void CheckQueryCachesExpired(); // Function GPGameplay.GPSceneQuery.CheckQueryCachesExpired // (Final|Native|Private) // @ game+0x365a150
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSceneQueryInterface
// Size: 0x30 (Inherited: 0x30)
class UGPSceneQueryInterface : public UInterface {
public:


	void UpdateMovableSceneElement(); // Function GPGameplay.GPSceneQueryInterface.UpdateMovableSceneElement // (Native|Public) // @ game+0x928210
	void UnregisterSceneQuery(); // Function GPGameplay.GPSceneQueryInterface.UnregisterSceneQuery // (Native|Public) // @ game+0x9281d0
	void RegisterSceneQuery(); // Function GPGameplay.GPSceneQueryInterface.RegisterSceneQuery // (Native|Public) // @ game+0xbd3040
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSeamlessConnectionInterface
// Size: 0x30 (Inherited: 0x30)
class UGPSeamlessConnectionInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSeamlessDynamicObjectInterface
// Size: 0x30 (Inherited: 0x30)
class UGPSeamlessDynamicObjectInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSeamlessEnterSubsystem
// Size: 0xc0 (Inherited: 0x38)
class UGPSeamlessEnterSubsystem : public UGameInstanceSubsystem {
public:

	/*struct FMulticastInlineDelegate*/char OnSeamlessSequencePreSpawn[0x10]; // 0x38(0x10)
	struct UDataTable* SOLSeamlessEnterDataTable; // 0x48(0x08)
	char pad_50[0x68]; // 0x50(0x68)
	int32_t CurrentEnterMapID; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)

	void StartIrisSeamlessEnter(struct FName MapName); // Function GPGameplay.GPSeamlessEnterSubsystem.StartIrisSeamlessEnter // (Native|Public|BlueprintCallable) // @ game+0x17621f0
	bool IsInSeamlessEnter(); // Function GPGameplay.GPSeamlessEnterSubsystem.IsInSeamlessEnter // (Native|Public|BlueprintCallable) // @ game+0x17602c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSHAnimInstance
// Size: 0xae0 (Inherited: 0x280)
class UGPSHAnimInstance : public UAnimInstance {
public:

	struct FGPSHAnimInstanceProxy LocalProxy; // 0x280(0x860)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSharedRepairComponent
// Size: 0x170 (Inherited: 0x100)
class UGPSharedRepairComponent : public UActorComponent {
public:

	struct TMap<struct ACHARACTER*, struct FRepairRecord> RepairingCharacterMap; // 0x100(0x50)
	char pad_150[0x8]; // 0x150(0x08)
	float RepairSpeedSingle; // 0x158(0x04)
	float RepairSpeedDouble; // 0x15c(0x04)
	float RepairSpeedTriple; // 0x160(0x04)
	float RepairInterval; // 0x164(0x04)
	float RepairAutoStopTime; // 0x168(0x04)
	char pad_16C[0x4]; // 0x16c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSharedRepairInterface
// Size: 0x30 (Inherited: 0x30)
class UGPSharedRepairInterface : public UInterface {
public:


	float RepairGetMaxHealth(); // Function GPGameplay.GPSharedRepairInterface.RepairGetMaxHealth // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x365adc0
	float RepairGetCurrentHealth(); // Function GPGameplay.GPSharedRepairInterface.RepairGetCurrentHealth // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x365ad90
	struct ACHARACTER* RepairGetCharacter(); // Function GPGameplay.GPSharedRepairInterface.RepairGetCharacter // (Native|Public) // @ game+0x174a570
	void RepairChangeHealth(float HealthAdd, struct FHitResult HitResult); // Function GPGameplay.GPSharedRepairInterface.RepairChangeHealth // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x365ac40
	void GetAllRepairRecord(struct TMap<uint64_t, float>& InRepairRecordMap); // Function GPGameplay.GPSharedRepairInterface.GetAllRepairRecord // (Native|Public|HasOutParms) // @ game+0x365a170
	void AddRepairRecord(uint64_t PlayerUin, float InRepairTime); // Function GPGameplay.GPSharedRepairInterface.AddRepairRecord // (Native|Public) // @ game+0x365a070
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSHPlayerController
// Size: 0x700 (Inherited: 0x6d0)
class AGPSHPlayerController : public APlayerController {
public:

	struct UGPPlayerInput* GPPlayerInput; // 0x6d0(0x08)
	struct UClass* PlayerInputClass; // 0x6d8(0x08)
	struct UClass* InputComponentClass; // 0x6e0(0x08)
	char pad_6E8[0x10]; // 0x6e8(0x10)
	struct AGPSafeHouseCharacter* GPSHCharacter; // 0x6f8(0x08)

	void OnInputUnSprint(); // Function GPGameplay.GPSHPlayerController.OnInputUnSprint // (Final|Native|Public) // @ game+0x365aa70
	void OnInputUnJump(); // Function GPGameplay.GPSHPlayerController.OnInputUnJump // (Final|Native|Public) // @ game+0x365aa50
	void OnInputTurnAtRate(float Rate); // Function GPGameplay.GPSHPlayerController.OnInputTurnAtRate // (Native|Public) // @ game+0x365a9d0
	void OnInputTurn(float Value); // Function GPGameplay.GPSHPlayerController.OnInputTurn // (Native|Public) // @ game+0x365a950
	void OnInputToggleProne(); // Function GPGameplay.GPSHPlayerController.OnInputToggleProne // (Final|Native|Public) // @ game+0x365a930
	void OnInputToggleCrouch(); // Function GPGameplay.GPSHPlayerController.OnInputToggleCrouch // (Final|Native|Public) // @ game+0x365a910
	void OnInputSprint(); // Function GPGameplay.GPSHPlayerController.OnInputSprint // (Final|Native|Public) // @ game+0x365a8f0
	void OnInputSilentWalk(); // Function GPGameplay.GPSHPlayerController.OnInputSilentWalk // (Final|Native|Public) // @ game+0x365a8d0
	void OnInputMoveRight(float Value); // Function GPGameplay.GPSHPlayerController.OnInputMoveRight // (Native|Public) // @ game+0x365a850
	void OnInputMoveForward(float Value); // Function GPGameplay.GPSHPlayerController.OnInputMoveForward // (Native|Public) // @ game+0x365a7d0
	void OnInputLookUpAtRate(float Rate); // Function GPGameplay.GPSHPlayerController.OnInputLookUpAtRate // (Native|Public) // @ game+0x365a750
	void OnInputLookUp(float Value); // Function GPGameplay.GPSHPlayerController.OnInputLookUp // (Native|Public) // @ game+0x365a6d0
	void OnInputJump(); // Function GPGameplay.GPSHPlayerController.OnInputJump // (Final|Native|Public) // @ game+0x365a6b0
	struct AGPSafeHouseCharacter* GetGPSHCharacter(); // Function GPGameplay.GPSHPlayerController.GetGPSHCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x365a2b0
	struct UGPPlayerInput* GetGPPlayerInput(); // Function GPGameplay.GPSHPlayerController.GetGPPlayerInput // (Native|Public|BlueprintCallable) // @ game+0x365a280
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSkillActorInterface
// Size: 0x30 (Inherited: 0x30)
class UGPSkillActorInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAttachMeshBaseInterface
// Size: 0x30 (Inherited: 0x30)
class UGPAttachMeshBaseInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSkillComponent
// Size: 0x1208 (Inherited: 0x100)
class UGPSkillComponent : public UActorComponent {
public:

	char pad_100[0x8]; // 0x100(0x08)
	struct AActor* GPActor; // 0x108(0x08)
	struct AGPCharacter* GPCharacter; // 0x110(0x08)
	struct UDataTable* SkillDataTable; // 0x118(0x08)
	struct TMap<int32_t, int32_t> SkillIDMap; // 0x120(0x50)
	char pad_170[0x10]; // 0x170(0x10)
	bool HideAimWhenZooming; // 0x180(0x01)
	char pad_181[0x7]; // 0x181(0x07)
	struct FString SkillFolderPath; // 0x188(0x10)
	struct TArray<int32_t> StaticSkillIDs; // 0x198(0x10)
	struct TArray<struct FName> StaticSkillNames; // 0x1a8(0x10)
	struct TArray<struct FArmedforceAttrOpTgLogData> AttributeSkillOpTgLogConfig; // 0x1b8(0x10)
	struct FSkillDetailInfo SkillDetailInfo; // 0x1c8(0x04)
	bool bRepSkillAll; // 0x1cc(0x01)
	char pad_1CD[0x3]; // 0x1cd(0x03)
	struct UGPSkillDataFlow* SkillDataFlow; // 0x1d0(0x08)
	struct TArray<int32_t> PendingGiveSkillIDs; // 0x1d8(0x10)
	struct TArray<struct FName> PendingGiveSkillNames; // 0x1e8(0x10)
	struct TMap<int64_t, int32_t> SkillAttrOperationRecordMap; // 0x1f8(0x50)
	bool isUnEquiping; // 0x248(0x01)
	bool isBreakingSkill; // 0x249(0x01)
	char pad_24A[0x2]; // 0x24a(0x02)
	int32_t CacheSkillID; // 0x24c(0x04)
	int32_t AbilityPassiveId; // 0x250(0x04)
	struct FSKillInputCache SKillInputCache; // 0x254(0x24)
	char pad_278[0x8]; // 0x278(0x08)
	/*struct FMulticastInlineDelegate*/char GPAbilityCast[0x10]; // 0x280(0x10)
	/*struct FMulticastInlineDelegate*/char GPAbilityCastFailed[0x10]; // 0x290(0x10)
	char pad_2A0[0x8]; // 0x2a0(0x08)
	struct FSkillState SkillState; // 0x2a8(0x38)
	struct FSkillState3P SkillState3P; // 0x2e0(0x28)
	struct TMap<int32_t, struct FNodeExcuteTime> NodeExcuteTime; // 0x308(0x50)
	struct TMap<int32_t, int32_t> SkillEntityMap; // 0x358(0x50)
	struct TMap<enum class ESkillUISlot, int32_t> SkillEntitySlotMap; // 0x3a8(0x50)
	float TipsTime; // 0x3f8(0x04)
	int32_t ActivatedSkillID; // 0x3fc(0x04)
	int32_t LastActivatedSkillID; // 0x400(0x04)
	char pad_404[0x4]; // 0x404(0x04)
	struct TMap<int32_t, struct FSkillLongPressData> LongPressDataMaps; // 0x408(0x50)
	struct TMap<int32_t, struct FSkillUserCommandData> UserCommandDataMaps; // 0x458(0x50)
	char pad_4A8[0x8]; // 0x4a8(0x08)
	struct TMap<struct FName, struct FAbilityMeshData> SpecialAttachMeshMap; // 0x4b0(0x50)
	struct TMap<struct FString, struct FTimerHandle> AbilityShowPanelKeyRecord; // 0x500(0x50)
	struct TMap<struct FName, struct FAbilityAvatarData> AbilityMaterialMap; // 0x550(0x50)
	char pad_5A0[0x58]; // 0x5a0(0x58)
	bool ActivatedRobot; // 0x5f8(0x01)
	char pad_5F9[0xb]; // 0x5f9(0x0b)
	int32_t ServerEnterCount; // 0x604(0x04)
	int32_t ClientEnterCount; // 0x608(0x04)
	char pad_60C[0x4]; // 0x60c(0x04)
	struct FArmedforceDataFlowAssault ArmedforceDataFlowAssault; // 0x610(0x160)
	struct FArmedforceDataFlowSupport ArmedforceDataFlowSupport; // 0x770(0x128)
	struct FArmedforceDataFlowScout ArmedforceDataFlowScout; // 0x898(0x140)
	struct FArmedforceDataFlowEngineer ArmedforceDataFlowEngineer; // 0x9d8(0x180)
	struct FArmedforceDataFlowWolfWarriors ArmedforceDataFlowWolfWarriors; // 0xb58(0x118)
	struct FArmedforceDataFlowC202 ArmedforceDataFlowC202; // 0xc70(0x1a8)
	struct FArmedforceDataFlowDavid ArmedforceDataFlowDavid; // 0xe18(0x150)
	struct FArmedforceDataFlowZoya ArmedforceDataFlowZoya; // 0xf68(0x104)
	char pad_106C[0x4]; // 0x106c(0x04)
	struct TArray<struct TWeakObjectPtr<struct AActor>> ProjectileList; // 0x1070(0x10)
	struct TArray<struct FName> SkillRelativePanel; // 0x1080(0x10)
	struct TMap<uint64_t, float> BunkerSwitchRecord; // 0x1090(0x50)
	struct TArray<float> BunkerReleaseTimeArray; // 0x10e0(0x10)
	/*struct FMulticastInlineDelegate*/char OnUseSkill[0x10]; // 0x10f0(0x10)
	/*struct FMulticastInlineDelegate*/char OnUsePassiveSkill[0x10]; // 0x1100(0x10)
	char pad_1110[0xa8]; // 0x1110(0xa8)
	/*struct FMulticastInlineDelegate*/char OnSingleDetectArrow[0x10]; // 0x11b8(0x10)
	/*struct FMulticastInlineDelegate*/char OnSingleDetectArrowFinished[0x10]; // 0x11c8(0x10)
	/*struct FMulticastInlineDelegate*/char OnScoutSwitchToBow[0x10]; // 0x11d8(0x10)
	/*struct FMulticastInlineDelegate*/char OnScoutSkillBeginFire[0x10]; // 0x11e8(0x10)
	struct FTimerHandle VoiceHandle; // 0x11f8(0x08)
	struct TWeakObjectPtr<struct UGPAbilityGameStateComponent> GameStateAbilityComponent; // 0x1200(0x08)

	bool WantUseEx(int32_t SkillId, bool isCancel); // Function GPGameplay.GPSkillComponent.WantUseEx // (Final|Native|Public|BlueprintCallable) // @ game+0x3666a00
	bool WantUse(int32_t SkillId, struct FSkillEventArgs Args, bool isCancel); // Function GPGameplay.GPSkillComponent.WantUse // (Final|Native|Public|BlueprintCallable) // @ game+0x36668e0
	void UpdateServerPreviewData(int32_t SkillId, struct FAbilityBlackBorad_PreviewActor Data); // Function GPGameplay.GPSkillComponent.UpdateServerPreviewData // (Net|Native|Event|Public|NetServer) // @ game+0x36667c0
	void UpdateServerItemPreviewData(int32_t SkillId, struct FVector Loc, struct FVector SLOC, struct FRotator Rot, bool Valid); // Function GPGameplay.GPSkillComponent.UpdateServerItemPreviewData // (Net|Native|Event|Public|NetServer|HasDefaults) // @ game+0x3666610
	void UpdateLongPress(int32_t SkillId); // Function GPGameplay.GPSkillComponent.UpdateLongPress // (Final|Native|Public) // @ game+0x3666590
	void TrySkillInputCache(int32_t SkillId, enum class ESkillBtnCall SkillCall, struct FSkillEventArgs Args); // Function GPGameplay.GPSkillComponent.TrySkillInputCache // (Native|Public) // @ game+0x3666460
	bool TryGiveSkill(int32_t SkillId); // Function GPGameplay.GPSkillComponent.TryGiveSkill // (Final|Native|Public|BlueprintCallable) // @ game+0x36663d0
	bool TryGiveExpertSkill(int32_t ExpertId, int32_t UltimateSkillId, int32_t ActiveSkillID, int32_t SupportSkillId, int32_t PassiveSkillID, int32_t CommonPassiveSkillID, struct TArray<int32_t>& CommonSkillIDList); // Function GPGameplay.GPSkillComponent.TryGiveExpertSkill // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3666190
	bool TryClearSkill(int32_t SkillId); // Function GPGameplay.GPSkillComponent.TryClearSkill // (Final|Native|Public|BlueprintCallable) // @ game+0x3666100
	void TryClearCD(int32_t SkillId); // Function GPGameplay.GPSkillComponent.TryClearCD // (Final|Native|Public|BlueprintCallable) // @ game+0x3666080
	void TryClearAllSkill(); // Function GPGameplay.GPSkillComponent.TryClearAllSkill // (Final|Native|Public|BlueprintCallable) // @ game+0x3666060
	void TickUserCheckInputCache(); // Function GPGameplay.GPSkillComponent.TickUserCheckInputCache // (Native|Public) // @ game+0x3666040
	void TickReplicateSkillState(); // Function GPGameplay.GPSkillComponent.TickReplicateSkillState // (Final|Native|Public) // @ game+0x3666020
	void SwitchWeaponButtonPressed(enum class ECharacterFSMEventDefine FSMEvent, float Value, struct UObject* EventObject); // Function GPGameplay.GPSkillComponent.SwitchWeaponButtonPressed // (Final|Native|Public) // @ game+0x3665f10
	void SwitchServerEndSkill(int32_t SkillId); // Function GPGameplay.GPSkillComponent.SwitchServerEndSkill // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3665e80
	void SkillPressCancelWeaponOperation(int32_t SkillId, enum class ESkillBtnCall Call); // Function GPGameplay.GPSkillComponent.SkillPressCancelWeaponOperation // (Native|Public) // @ game+0x3665db0
	void SkillFireButton(bool presse); // Function GPGameplay.GPSkillComponent.SkillFireButton // (Final|Native|Public|BlueprintCallable) // @ game+0x3662de0
	void SkillCheckFireDown(int32_t SkillId); // Function GPGameplay.GPSkillComponent.SkillCheckFireDown // (Final|Native|Public) // @ game+0x3665d30
	void SetSpecialMeshAnimLod(int32_t inLOD); // Function GPGameplay.GPSkillComponent.SetSpecialMeshAnimLod // (Final|Native|Public) // @ game+0x3665be0
	void SetSkillEventArgs(int32_t SkillId, struct FSkillEventArgs Args); // Function GPGameplay.GPSkillComponent.SetSkillEventArgs // (Final|Native|Public|BlueprintCallable) // @ game+0x3665b00
	void SetSkillEntityVisible(enum class ESkillUISlot SkillUISlot, bool Visible); // Function GPGameplay.GPSkillComponent.SetSkillEntityVisible // (Final|Native|Public) // @ game+0x3665a30
	void SetSkillAttachMeshVisible(int32_t SkillId, struct FName MeshName, bool Visible); // Function GPGameplay.GPSkillComponent.SetSkillAttachMeshVisible // (Native|Public) // @ game+0x3665930
	void SetExpertId(int32_t SkillId); // Function GPGameplay.GPSkillComponent.SetExpertId // (Final|Native|Public) // @ game+0x36658b0
	void SetCurSkillCutOutCount(int32_t SkillId); // Function GPGameplay.GPSkillComponent.SetCurSkillCutOutCount // (Final|Native|Public) // @ game+0x3665830
	void SetCanTickCommand(int32_t SkillId, bool Enable); // Function GPGameplay.GPSkillComponent.SetCanTickCommand // (Final|Native|Public) // @ game+0x3665770
	void SetAbilityProp2Id(int32_t SkillId); // Function GPGameplay.GPSkillComponent.SetAbilityProp2Id // (Final|Native|Public) // @ game+0x227b380
	void SetAbilityProp1Id(int32_t SkillId); // Function GPGameplay.GPSkillComponent.SetAbilityProp1Id // (Final|Native|Public) // @ game+0x227b380
	void SetAbilityPassiveId(int32_t SkillId); // Function GPGameplay.GPSkillComponent.SetAbilityPassiveId // (Final|Native|Public) // @ game+0x36656f0
	void SetAbilityId(int32_t SkillId); // Function GPGameplay.GPSkillComponent.SetAbilityId // (Final|Native|Public) // @ game+0x227b380
	void SetAbilityByType(enum class ESkillLogicType Type); // Function GPGameplay.GPSkillComponent.SetAbilityByType // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3665670
	void ServerTriggerBehavior(enum class ESkillBehavior skillbehavior, int32_t SkillId); // Function GPGameplay.GPSkillComponent.ServerTriggerBehavior // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36655a0
	void ServerSwitchWeaponSuccess(); // Function GPGameplay.GPSkillComponent.ServerSwitchWeaponSuccess // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x22bcb80
	void ServerReconnectEndAbility(int32_t SkillId); // Function GPGameplay.GPSkillComponent.ServerReconnectEndAbility // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35c9d20
	void ServerPlayerRescueStartDelegate(struct AGPCharacterBase* Player, struct AGPCharacterBase* RescueTarget); // Function GPGameplay.GPSkillComponent.ServerPlayerRescueStartDelegate // (Native|Public) // @ game+0x36654d0
	void ServerPlayerRescueEndDelegate(struct AGPCharacterBase* Player, struct AGPCharacterBase* RescueTarget, bool IsSucess); // Function GPGameplay.GPSkillComponent.ServerPlayerRescueEndDelegate // (Native|Public) // @ game+0x36653d0
	void ServerMPGiveExpertSkill(int32_t ExportId, int32_t UltimateSkillId, int32_t ActiveSkillID, int32_t SupportSkillId, int32_t PassiveSkillID, int32_t CommonPassiveSkillID, int32_t CustomSkillId, struct TArray<int32_t> CommonSkillIDList); // Function GPGameplay.GPSkillComponent.ServerMPGiveExpertSkill // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3665160
	void ServerGiveSkill(int32_t SkillId); // Function GPGameplay.GPSkillComponent.ServerGiveSkill // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36650d0
	void ServerGiveExpertSkill(int32_t ExportId, int32_t UltimateSkillId, int32_t ActiveSkillID, int32_t SupportSkillId, int32_t PassiveSkillID, int32_t CommonPassiveSkillID, struct TArray<int32_t> CommonSkillIDList); // Function GPGameplay.GPSkillComponent.ServerGiveExpertSkill // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3664ea0
	void ServerEnterFSM(int32_t SkillId); // Function GPGameplay.GPSkillComponent.ServerEnterFSM // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3664e10
	void ServerEndAbility(int32_t SkillId); // Function GPGameplay.GPSkillComponent.ServerEndAbility // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3664d80
	void ServerDoTrigger(int32_t SkillId, int32_t LogicID, enum class EAbilityTriggerType Type, int32_t Index); // Function GPGameplay.GPSkillComponent.ServerDoTrigger // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3664c40
	void ServerClearSkill(int32_t SkillId); // Function GPGameplay.GPSkillComponent.ServerClearSkill // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3664bb0
	void ServerClearCD(int32_t SkillId); // Function GPGameplay.GPSkillComponent.ServerClearCD // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3664b20
	void ServerClearAllSkill(); // Function GPGameplay.GPSkillComponent.ServerClearAllSkill // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x22bcd00
	void ServerAddUserCommand(int32_t SkillId, enum class ESkillBtnCall Call); // Function GPGameplay.GPSkillComponent.ServerAddUserCommand // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3664a50
	void ServerActivateSucess(int32_t SkillId); // Function GPGameplay.GPSkillComponent.ServerActivateSucess // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x36649c0
	void ServerActivateState(int32_t SkillId, struct FSkillEventArgs Args); // Function GPGameplay.GPSkillComponent.ServerActivateState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36648d0
	void ServerActivateSkill(int32_t SkillId, struct FSkillEventArgs Args); // Function GPGameplay.GPSkillComponent.ServerActivateSkill // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36647e0
	void ServerActivateFailed(int32_t SkillId); // Function GPGameplay.GPSkillComponent.ServerActivateFailed // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3664750
	void RPCSwitchMainWeapon(enum class EWeaponSwitchType SwitchType); // Function GPGameplay.GPSkillComponent.RPCSwitchMainWeapon // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3664100
	void RPC_CastSkillSeccess(int32_t SkillId); // Function GPGameplay.GPSkillComponent.RPC_CastSkillSeccess // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3664210
	void RPC_CastSkillFailed(int32_t SkillId); // Function GPGameplay.GPSkillComponent.RPC_CastSkillFailed // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3664180
	void Rep_SkillEntityStates3p(); // Function GPGameplay.GPSkillComponent.Rep_SkillEntityStates3p // (Final|Native|Public) // @ game+0x36646f0
	void Rep_SkillEntityStates(); // Function GPGameplay.GPSkillComponent.Rep_SkillEntityStates // (Final|Native|Public) // @ game+0x3664710
	void Rep_SkillDetailInfo(); // Function GPGameplay.GPSkillComponent.Rep_SkillDetailInfo // (Final|Native|Public) // @ game+0x36646d0
	void RecordSkillEnterTime(int32_t SkillId, float Time, int32_t ExcuteCount); // Function GPGameplay.GPSkillComponent.RecordSkillEnterTime // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36645e0
	void RecordLogicLeave(int32_t SkillId, int32_t ExcuteCount); // Function GPGameplay.GPSkillComponent.RecordLogicLeave // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3664520
	void RecordLogicEnter(int32_t SkillId, struct TArray<int32_t> LogicNodes, int32_t ExcuteCount); // Function GPGameplay.GPSkillComponent.RecordLogicEnter // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36643e0
	void RecordLastLogicEnter(int32_t SkillId, struct TArray<int32_t> LogicNodes, int32_t ExcuteCount); // Function GPGameplay.GPSkillComponent.RecordLastLogicEnter // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36642a0
	void ProcessDataFlowRescueSuccess(struct AActor* Teammate); // Function GPGameplay.GPSkillComponent.ProcessDataFlowRescueSuccess // (Final|Native|Public) // @ game+0x895130
	void ProcessDataFlowRescueStart(struct AActor* Teammate); // Function GPGameplay.GPSkillComponent.ProcessDataFlowRescueStart // (Final|Native|Public) // @ game+0x3664040
	void ProcessDataFlowRecordSwitchBunker(struct AActor* BunkerWeaponActor, bool isSwitch); // Function GPGameplay.GPSkillComponent.ProcessDataFlowRecordSwitchBunker // (Final|Native|Public) // @ game+0x3663f70
	void ProcessDataFlowRecordReleaseSmoke(struct AActor* SmokeActor); // Function GPGameplay.GPSkillComponent.ProcessDataFlowRecordReleaseSmoke // (Final|Native|Public) // @ game+0x3663ef0
	void ProcessDataFlowRecordReleaseBunker(struct AActor* BunkerWeaponActor); // Function GPGameplay.GPSkillComponent.ProcessDataFlowRecordReleaseBunker // (Final|Native|Public) // @ game+0x3663e70
	void ProcessDataFlowRecordBunkerKillTarget(struct FKillInfo& KillInfo); // Function GPGameplay.GPSkillComponent.ProcessDataFlowRecordBunkerKillTarget // (Final|Native|Public|HasOutParms) // @ game+0x3663dc0
	void ProcessDataFlowRecordBunkerDead(struct AActor* BunkerActor); // Function GPGameplay.GPSkillComponent.ProcessDataFlowRecordBunkerDead // (Final|Native|Public) // @ game+0x3663d40
	void ProcessDataFlowRecordBunkerBeActivated(struct AActor* BunkerActor); // Function GPGameplay.GPSkillComponent.ProcessDataFlowRecordBunkerBeActivated // (Final|Native|Public) // @ game+0x3663cc0
	void ProcessDataFlowKillSupport(struct FKillInfo& KillInfo); // Function GPGameplay.GPSkillComponent.ProcessDataFlowKillSupport // (Final|Native|Public|HasOutParms) // @ game+0x3663c10
	void ProcessDataFlowDeadSupport(struct FKillInfo& KillInfo); // Function GPGameplay.GPSkillComponent.ProcessDataFlowDeadSupport // (Final|Native|Public|HasOutParms) // @ game+0x3663b60
	void Process_Rep_SkillEntityStates3P(); // Function GPGameplay.GPSkillComponent.Process_Rep_SkillEntityStates3P // (Final|Native|Public) // @ game+0x36640c0
	void Process_Rep_SkillEntityStates(); // Function GPGameplay.GPSkillComponent.Process_Rep_SkillEntityStates // (Final|Native|Public) // @ game+0x36640e0
	void PreMatch(); // Function GPGameplay.GPSkillComponent.PreMatch // (Final|Native|Public|BlueprintCallable) // @ game+0x3663b40
	void OnVehicleTakeDamage(struct FDamageResultInfo& DamageResult); // Function GPGameplay.GPSkillComponent.OnVehicleTakeDamage // (Native|Public|HasOutParms) // @ game+0x3663a70
	void OnUseSKillUpdateCharacterForbit(int32_t SkillId, uint64_t Mask, bool Value); // Function GPGameplay.GPSkillComponent.OnUseSKillUpdateCharacterForbit // (Final|Native|Public) // @ game+0x3663970
	void OnSkillWeaponFire(enum class ESkillBehavior skillbehavior, int32_t SkillId); // Function GPGameplay.GPSkillComponent.OnSkillWeaponFire // (Native|Public) // @ game+0x36638a0
	void OnServerPlayerStartSlidingTackle(struct AGPCharacter* SlidingCharacterOwner); // Function GPGameplay.GPSkillComponent.OnServerPlayerStartSlidingTackle // (Final|Native|Public) // @ game+0x3663820
	void OnServerPlayerEndSlidingTackle(struct AGPCharacter* SlidingCharacterOwner); // Function GPGameplay.GPSkillComponent.OnServerPlayerEndSlidingTackle // (Final|Native|Public) // @ game+0x36637a0
	void OnRushVoice(); // Function GPGameplay.GPSkillComponent.OnRushVoice // (Final|Native|Public) // @ game+0x3663780
	void OnRecordStateChange(enum class EFSMCharacterState CharacterState); // Function GPGameplay.GPSkillComponent.OnRecordStateChange // (Final|Native|Public) // @ game+0x3663700
	void OnRecordSkillStateChange(enum class EFSMCharacterState CharacterState, enum class ESkillStateType SkillStateType); // Function GPGameplay.GPSkillComponent.OnRecordSkillStateChange // (Final|Native|Public) // @ game+0x3663640
	void OnPossessedBy(); // Function GPGameplay.GPSkillComponent.OnPossessedBy // (Native|Public) // @ game+0x35ad150
	void OnPlayerUsePassiveSkill(struct AActor* TargetActor); // Function GPGameplay.GPSkillComponent.OnPlayerUsePassiveSkill // (Final|Native|Public) // @ game+0x36635c0
	void OnPlayerMakeDamage(struct FDamageResultInfo& DamageResult); // Function GPGameplay.GPSkillComponent.OnPlayerMakeDamage // (Native|Public|HasOutParms) // @ game+0x36634f0
	void OnPlayerKill(struct FKillInfo& KillInfo); // Function GPGameplay.GPSkillComponent.OnPlayerKill // (Native|Public|HasOutParms) // @ game+0x3663440
	void OnPlayerDoRepair(); // Function GPGameplay.GPSkillComponent.OnPlayerDoRepair // (Final|Native|Public) // @ game+0x3663420
	void OnPlayerBeKnockDown(struct FKillInfo& KillInfo); // Function GPGameplay.GPSkillComponent.OnPlayerBeKnockDown // (Native|Public|HasOutParms) // @ game+0x3663370
	void OnPlayerBeKilled(struct FKillInfo& KillInfo); // Function GPGameplay.GPSkillComponent.OnPlayerBeKilled // (Final|Native|Public|HasOutParms) // @ game+0x36632c0
	void OnPlayerAssistKill(struct FKillInfo& KillInfo); // Function GPGameplay.GPSkillComponent.OnPlayerAssistKill // (Native|Public|HasOutParms) // @ game+0x3663210
	void OnNetReconnectSuccess(bool bReconnect); // Function GPGameplay.GPSkillComponent.OnNetReconnectSuccess // (Final|Native|Public) // @ game+0x3663180
	void OnLongPress(int32_t SkillId); // Function GPGameplay.GPSkillComponent.OnLongPress // (Final|Native|Public) // @ game+0x3663100
	void OnLiveStateChange(enum class ECharacterLiveStatus old, enum class ECharacterLiveStatus cur, struct AActor* MakerActor); // Function GPGameplay.GPSkillComponent.OnLiveStateChange // (Final|Native|Public) // @ game+0x3662ff0
	void OnGPCharacterBeingAssassinateAction(bool InAction); // Function GPGameplay.GPSkillComponent.OnGPCharacterBeingAssassinateAction // (Native|Public) // @ game+0x3662f60
	void OnFireDown(); // Function GPGameplay.GPSkillComponent.OnFireDown // (Final|Native|Public) // @ game+0x3662f40
	void OnClientSwitchWeaponSuccess(); // Function GPGameplay.GPSkillComponent.OnClientSwitchWeaponSuccess // (Final|Native|Public) // @ game+0x3662f20
	void OnClientEnterSkillStateLog(); // Function GPGameplay.GPSkillComponent.OnClientEnterSkillStateLog // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35a3800
	void OnCharacterReborn(); // Function GPGameplay.GPSkillComponent.OnCharacterReborn // (Final|Native|Public) // @ game+0x3662f00
	void OnCharacterCameraModeEndChanged(bool IsFPP); // Function GPGameplay.GPSkillComponent.OnCharacterCameraModeEndChanged // (Final|Native|Public) // @ game+0x3662e70
	void OnCharacterCameraModeBeginChanged(bool IsFPP); // Function GPGameplay.GPSkillComponent.OnCharacterCameraModeBeginChanged // (Final|Native|Public) // @ game+0x3662de0
	void OnBeginRush(); // Function GPGameplay.GPSkillComponent.OnBeginRush // (Final|Native|Public) // @ game+0x3662dc0
	void OnBeginLadderAction(struct AGPCharacterBase* CHARACTER); // Function GPGameplay.GPSkillComponent.OnBeginLadderAction // (Native|Public) // @ game+0x3662d30
	void OnBeginKnockBackAction(struct AGPCharacterBase* CHARACTER); // Function GPGameplay.GPSkillComponent.OnBeginKnockBackAction // (Native|Public) // @ game+0x3662ca0
	void OnBeginBotControllAction(struct AGPCharacterBase* CHARACTER); // Function GPGameplay.GPSkillComponent.OnBeginBotControllAction // (Native|Public) // @ game+0x3662c10
	void OnAsyncLoadTableComplete(struct FSoftObjectPath& AssetRef); // Function GPGameplay.GPSkillComponent.OnAsyncLoadTableComplete // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x3662b30
	void OnAbilityEntityTemplateLoad(int32_t SkillId); // Function GPGameplay.GPSkillComponent.OnAbilityEntityTemplateLoad // (Final|Native|Public) // @ game+0x227b380
	void OnAbilityAddDamageModifyItem(struct FName Item, float Value, struct AGPCharacterBase* CHARACTER); // Function GPGameplay.GPSkillComponent.OnAbilityAddDamageModifyItem // (Native|Public) // @ game+0x3662a30
	void NotifyActiveWeaponZoomStateChanged(bool InZooming); // Function GPGameplay.GPSkillComponent.NotifyActiveWeaponZoomStateChanged // (Final|Native|Public) // @ game+0x36629a0
	void NotifyActiveWeaponStateChanged(enum class EGPWeaponStateType LastState, enum class EGPWeaponStateType NewState); // Function GPGameplay.GPSkillComponent.NotifyActiveWeaponStateChanged // (Final|Native|Public) // @ game+0x36628e0
	void MulSetAbilityByType(enum class ESkillLogicType Type); // Function GPGameplay.GPSkillComponent.MulSetAbilityByType // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x3662860
	bool MPTryGiveExpertSkill(int32_t ExpertId, int32_t UltimateSkillId, int32_t ActiveSkillID, int32_t SupportSkillId, int32_t PassiveSkillID, int32_t CommonPassiveSkillID, int32_t CustomSkillId, struct TArray<int32_t>& CommonSkillIDList, bool UsePreviousBattleFiledSkill); // Function GPGameplay.GPSkillComponent.MPTryGiveExpertSkill // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3662360
	bool ModifySkillCDPercent(int32_t SkillId, float DeltaPercent); // Function GPGameplay.GPSkillComponent.ModifySkillCDPercent // (Final|Native|Public|BlueprintCallable) // @ game+0x36627a0
	bool ModifySkillCD(int32_t SkillId, float DeltaTime); // Function GPGameplay.GPSkillComponent.ModifySkillCD // (Final|Native|Public|BlueprintCallable) // @ game+0x36626e0
	void ModifyCDSpeed(int32_t Index, float Speed); // Function GPGameplay.GPSkillComponent.ModifyCDSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x3662620
	bool IsValidSkill(int32_t SkillId); // Function GPGameplay.GPSkillComponent.IsValidSkill // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x36622d0
	bool IsInSkillInputCache(int32_t SkillId); // Function GPGameplay.GPSkillComponent.IsInSkillInputCache // (Native|Public) // @ game+0x3662230
	bool IsC402(); // Function GPGameplay.GPSkillComponent.IsC402 // (Final|Native|Public) // @ game+0x36621f0
	bool IsC401(); // Function GPGameplay.GPSkillComponent.IsC401 // (Final|Native|Public) // @ game+0x36621b0
	bool IsC302(); // Function GPGameplay.GPSkillComponent.IsC302 // (Final|Native|Public) // @ game+0x3662170
	bool IsC301(); // Function GPGameplay.GPSkillComponent.IsC301 // (Final|Native|Public) // @ game+0x3662130
	bool IsC202(); // Function GPGameplay.GPSkillComponent.IsC202 // (Final|Native|Public) // @ game+0x36620f0
	bool IsC201(); // Function GPGameplay.GPSkillComponent.IsC201 // (Final|Native|Public) // @ game+0x36620b0
	bool IsC102(); // Function GPGameplay.GPSkillComponent.IsC102 // (Final|Native|Public) // @ game+0x3662070
	bool IsC101(); // Function GPGameplay.GPSkillComponent.IsC101 // (Final|Native|Public) // @ game+0x3662030
	void GiveSkill(int32_t SkillId); // Function GPGameplay.GPSkillComponent.GiveSkill // (Final|Native|Public|BlueprintCallable) // @ game+0x3661fb0
	struct UGPSkeletalMeshComponent* GetSpecialAttachMesh(struct FName MeshName); // Function GPGameplay.GPSkillComponent.GetSpecialAttachMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x3661f20
	struct FWeaponSkinInfo GetSkillWeaponSkinApperanceInfo(uint64_t SkillWeaponId); // Function GPGameplay.GPSkillComponent.GetSkillWeaponSkinApperanceInfo // (Native|Public) // @ game+0x3661e20
	uint64_t GetSkillWeaponSkinApperanceId(uint64_t SkillWeaponId); // Function GPGameplay.GPSkillComponent.GetSkillWeaponSkinApperanceId // (Native|Public) // @ game+0x3661d80
	enum class ESkillUIState GetSkillUIStateByID(int32_t SkillId); // Function GPGameplay.GPSkillComponent.GetSkillUIStateByID // (Final|Native|Public) // @ game+0x3661cf0
	enum class ESkillUIState GetSkillUIState(int32_t SkillId); // Function GPGameplay.GPSkillComponent.GetSkillUIState // (Final|Native|Public|BlueprintCallable) // @ game+0x3661c60
	enum class ESkillStateType GetSkillStateType(int32_t SkillId); // Function GPGameplay.GPSkillComponent.GetSkillStateType // (Final|Native|Public|BlueprintCallable) // @ game+0x3661bd0
	int32_t GetSkillStateID(enum class ESkillStateType SkillStateType); // Function GPGameplay.GPSkillComponent.GetSkillStateID // (Final|Native|Public|BlueprintCallable) // @ game+0x3661b40
	int32_t GetSkillScoreCost(int32_t SkillId); // Function GPGameplay.GPSkillComponent.GetSkillScoreCost // (Final|Native|Public|BlueprintCallable) // @ game+0x3661ab0
	float GetSkillRuntimeDuration(int32_t SkillId); // Function GPGameplay.GPSkillComponent.GetSkillRuntimeDuration // (Final|Native|Public|BlueprintCallable) // @ game+0x3661a20
	struct FSkillDataRow GetSkillRowByID(int32_t SkillId); // Function GPGameplay.GPSkillComponent.GetSkillRowByID // (Final|Native|Public) // @ game+0x3661980
	enum class ESkillKeyStatus GetSkillKeyStatus(int32_t SkillId); // Function GPGameplay.GPSkillComponent.GetSkillKeyStatus // (Final|Native|Public|BlueprintCallable) // @ game+0x36618f0
	struct FGPAbilityEntityData GetSkillEntityDataBySlot(enum class ESkillUISlot Slot); // Function GPGameplay.GPSkillComponent.GetSkillEntityDataBySlot // (Final|Native|Public|BlueprintCallable) // @ game+0x3661860
	enum class ESkillConflictResolveType GetSkillConflictType(enum class ESkillStateType InSkillStateType, enum class ESkillStateType CurrentSkillStateType, int32_t CheckSkill); // Function GPGameplay.GPSkillComponent.GetSkillConflictType // (Final|Native|Public) // @ game+0x3661760
	struct FSkillConflictRow GetSkillConflictRow(int32_t SkillId); // Function GPGameplay.GPSkillComponent.GetSkillConflictRow // (Final|Native|Public) // @ game+0x3661620
	float GetSkillConfigDuration(int32_t SkillId); // Function GPGameplay.GPSkillComponent.GetSkillConfigDuration // (Final|Native|Public|BlueprintCallable) // @ game+0x3661590
	float GetRestoreRemainTime(int32_t SkillId); // Function GPGameplay.GPSkillComponent.GetRestoreRemainTime // (Final|Native|Public|BlueprintCallable) // @ game+0x3661500
	float GetRestoreConfigTime(int32_t SkillId); // Function GPGameplay.GPSkillComponent.GetRestoreConfigTime // (Final|Native|Public|BlueprintCallable) // @ game+0x3661470
	int32_t GetLastUsedSkillCutOutCount(int32_t SkillId); // Function GPGameplay.GPSkillComponent.GetLastUsedSkillCutOutCount // (Final|Native|Public) // @ game+0x3661340
	int32_t GetExpertId(); // Function GPGameplay.GPSkillComponent.GetExpertId // (Final|Native|Public) // @ game+0x3661310
	struct FArmedforceCommonData GetCurrentArmedforceCommonData(); // Function GPGameplay.GPSkillComponent.GetCurrentArmedforceCommonData // (Native|Public|BlueprintCallable) // @ game+0x3661270
	float GetCDRemainTime(int32_t SkillId); // Function GPGameplay.GPSkillComponent.GetCDRemainTime // (Final|Native|Public|BlueprintCallable) // @ game+0x36611e0
	float GetCDConfigTime(int32_t SkillId); // Function GPGameplay.GPSkillComponent.GetCDConfigTime // (Final|Native|Public|BlueprintCallable) // @ game+0x3661150
	struct UGPAbilityAnimInstance* GetAvatarMeshAnimIns(struct FName MeshName, bool FPP); // Function GPGameplay.GPSkillComponent.GetAvatarMeshAnimIns // (Native|Public|BlueprintCallable) // @ game+0x3661080
	struct USkeletalMeshComponent* GetAvatarMesh(struct FName MeshName, bool FPP); // Function GPGameplay.GPSkillComponent.GetAvatarMesh // (Native|Public|BlueprintCallable) // @ game+0x3660fb0
	struct FArmedforceCommonData GetArmedforceCommonDataByExpertID(int32_t ExpertId); // Function GPGameplay.GPSkillComponent.GetArmedforceCommonDataByExpertID // (Native|Public|BlueprintCallable) // @ game+0x3660eb0
	struct UGPAbilityGameStateComponent* GetAbilityGSComp(); // Function GPGameplay.GPSkillComponent.GetAbilityGSComp // (Final|Native|Public) // @ game+0x3660e80
	struct UGPAbilityDataSystem* GetAbilityDataSystem(); // Function GPGameplay.GPSkillComponent.GetAbilityDataSystem // (Final|Native|Public) // @ game+0x3660e50
	bool FireButton(int32_t SkillId, bool presse); // Function GPGameplay.GPSkillComponent.FireButton // (Final|Native|Public|BlueprintCallable) // @ game+0x3660d90
	void DSActivateSkill(int32_t SkillId, struct FSkillEventArgs Args); // Function GPGameplay.GPSkillComponent.DSActivateSkill // (Final|Native|Public) // @ game+0x3660cb0
	bool ConditionEnableSkillInputCache(); // Function GPGameplay.GPSkillComponent.ConditionEnableSkillInputCache // (Native|Protected) // @ game+0x3660c80
	void ClientSwitchMainWeapon(enum class EWeaponSwitchType SwitchType); // Function GPGameplay.GPSkillComponent.ClientSwitchMainWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0x3660c00
	void ClientShowUIStateTips(int32_t SkillId, enum class ESkillUIState State, float Time); // Function GPGameplay.GPSkillComponent.ClientShowUIStateTips // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3660b00
	void ClientShowPanel(int32_t SkillId, bool Show, struct FName Name, float PanelLifetime); // Function GPGameplay.GPSkillComponent.ClientShowPanel // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x36609b0
	void ClientSetSkillTarget(int32_t SkillId, struct AActor* InSkillTarget); // Function GPGameplay.GPSkillComponent.ClientSetSkillTarget // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x36608e0
	void ClientSetSkillItemGID(int32_t SkillId, uint64_t gid); // Function GPGameplay.GPSkillComponent.ClientSetSkillItemGID // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3660810
	void ClientPlayAudio2D(struct UGPAudioEventAsset* InAudioAsset); // Function GPGameplay.GPSkillComponent.ClientPlayAudio2D // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3653400
	void ClientOnModifyCD(int32_t SkillId); // Function GPGameplay.GPSkillComponent.ClientOnModifyCD // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3660780
	void ClientExecuteVehicleSkill(struct FString Key, struct TArray<char> ParamterData); // Function GPGameplay.GPSkillComponent.ClientExecuteVehicleSkill // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3660630
	void ClientClearWhenLiveStateChange(int32_t SkillId); // Function GPGameplay.GPSkillComponent.ClientClearWhenLiveStateChange // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x36605a0
	void ClientCharacterSpeak(struct FName VoiceType); // Function GPGameplay.GPSkillComponent.ClientCharacterSpeak // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x129b970
	void ClientActiveVehicleSkill(struct FString Key); // Function GPGameplay.GPSkillComponent.ClientActiveVehicleSkill // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36604d0
	void ClearSkillInputCache(); // Function GPGameplay.GPSkillComponent.ClearSkillInputCache // (Native|Public) // @ game+0x36604b0
	void ClearSkill(int32_t SkillId); // Function GPGameplay.GPSkillComponent.ClearSkill // (Final|Native|Public|BlueprintCallable) // @ game+0x3660430
	void ClearCD(int32_t SkillId); // Function GPGameplay.GPSkillComponent.ClearCD // (Final|Native|Public|BlueprintCallable) // @ game+0x227b380
	void ClearAllSkill(); // Function GPGameplay.GPSkillComponent.ClearAllSkill // (Final|Native|Public|BlueprintCallable) // @ game+0x3660410
	void ClearAllCacheInput(); // Function GPGameplay.GPSkillComponent.ClearAllCacheInput // (Final|Native|Public) // @ game+0x36603f0
	void CharacterSpeakName(struct FString VoiceType); // Function GPGameplay.GPSkillComponent.CharacterSpeakName // (Final|Native|Public|BlueprintCallable) // @ game+0x36602d0
	void CharacterSpeak(struct FName VoiceType); // Function GPGameplay.GPSkillComponent.CharacterSpeak // (Final|Native|Public|BlueprintCallable) // @ game+0x3660250
	bool CanSkillInputCache(int32_t SkillId); // Function GPGameplay.GPSkillComponent.CanSkillInputCache // (Native|Protected) // @ game+0x3660190
	void CancelRushVoice(); // Function GPGameplay.GPSkillComponent.CancelRushVoice // (Final|Native|Public) // @ game+0x3660230
	void BeginTickUserCheckInputCache(); // Function GPGameplay.GPSkillComponent.BeginTickUserCheckInputCache // (Native|Protected) // @ game+0x3660170
	void AddRepairRecord(struct AActor* RepairedActor, float RepairTime, float RepairHealth); // Function GPGameplay.GPSkillComponent.AddRepairRecord // (Final|Native|Public) // @ game+0x3660070
	void ActivateSucess(int32_t SkillId); // Function GPGameplay.GPSkillComponent.ActivateSucess // (Final|Native|Public) // @ game+0x365fff0
	bool ActivateState_CheckWeaponState(int32_t SkillId, bool bIsBreakSkilling); // Function GPGameplay.GPSkillComponent.ActivateState_CheckWeaponState // (Final|Native|Public) // @ game+0x365ff30
	void ActivateFailed(int32_t SkillId); // Function GPGameplay.GPSkillComponent.ActivateFailed // (Final|Native|Public) // @ game+0x365feb0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSkillDataFlow
// Size: 0x230 (Inherited: 0x30)
class UGPSkillDataFlow : public UObject {
public:

	char pad_30[0x200]; // 0x30(0x200)

	void SetSkillState(int32_t SkillId); // Function GPGameplay.GPSkillDataFlow.SetSkillState // (Final|Native|Public) // @ game+0x366ba30
	uint64_t GetExpertId(struct AGPCharacter* Char); // Function GPGameplay.GPSkillDataFlow.GetExpertId // (Final|Native|Public) // @ game+0x366b9a0
	void ClearSkillStates(); // Function GPGameplay.GPSkillDataFlow.ClearSkillStates // (Final|Native|Public) // @ game+0x366b980
	void AddSkillDataKnock(int32_t ExpertId, int32_t UseSkillId, int32_t BuffId, bool bUseWheel); // Function GPGameplay.GPSkillDataFlow.AddSkillDataKnock // (Final|Native|Public) // @ game+0x366b840
	void AddSkillDataHeal(int32_t ExpertId, int32_t UseSkillId, int32_t BuffId, float HealCount, bool bUseWheel); // Function GPGameplay.GPSkillDataFlow.AddSkillDataHeal // (Final|Native|Public) // @ game+0x366b6b0
	void AddSkillDataDamage(int32_t ExpertId, int32_t UseSkillId, int32_t BuffId, float DamageCount, bool bUseWheel); // Function GPGameplay.GPSkillDataFlow.AddSkillDataDamage // (Final|Native|Public) // @ game+0x366b520
	void AddSkillDataBuff(enum class EDataFlowType FlowType, int32_t ExpertId, int32_t UseSkillId, int32_t BuffId, float BuffTime, bool bUseWheel); // Function GPGameplay.GPSkillDataFlow.AddSkillDataBuff // (Final|Native|Public) // @ game+0x366b370
	void AddPOIName(struct FString POIName, bool bIsKiller); // Function GPGameplay.GPSkillDataFlow.AddPOIName // (Final|Native|Public) // @ game+0x366b200
	void AddMovement(enum class EDataFlowType Type, struct FVector Distance, bool bUseWheel); // Function GPGameplay.GPSkillDataFlow.AddMovement // (Final|Native|Public|HasDefaults) // @ game+0x366b0e0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSkillDefine
// Size: 0x30 (Inherited: 0x30)
class UGPSkillDefine : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSkillDelegates
// Size: 0x48 (Inherited: 0x38)
class UGPSkillDelegates : public UWorldSubsystem {
public:

	/*struct FMulticastInlineDelegate*/char OnNotifySkillProjectileHitResultSignature[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSkillEffectOptimize
// Size: 0x30 (Inherited: 0x30)
class UGPSkillEffectOptimize : public UObject {
public:


	bool STATIC_IsEnablePlaySKillEffect(struct UObject* WorldContextObject, struct FName EffectId); // Function GPGameplay.GPSkillEffectOptimize.IsEnablePlaySKillEffect // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x366f330
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSkillEntity
// Size: 0x30 (Inherited: 0x30)
class UGPSkillEntity : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSkillProjectile
// Size: 0x4b0 (Inherited: 0x378)
class AGPSkillProjectile : public AActor {
public:

	char pad_378[0x8]; // 0x378(0x08)
	struct UCapsuleComponent* BulletCollisionComp; // 0x380(0x08)
	struct UGPWeaponProjectileMovementComponent* BulletMovementComp; // 0x388(0x08)
	struct UParticleSystemComponent* BulleParticleComp; // 0x390(0x08)
	bool bStayAfterStop; // 0x398(0x01)
	char pad_399[0x3]; // 0x399(0x03)
	float ProjectileStayTime; // 0x39c(0x04)
	float ProjectileLifeTime; // 0x3a0(0x04)
	char pad_3A4[0x4]; // 0x3a4(0x04)
	int64_t ProjectileMaxDamageDistance; // 0x3a8(0x08)
	int64_t ProjectileMaxDamageDistanceSqr; // 0x3b0(0x08)
	float PenetrateDamageRate; // 0x3b8(0x04)
	bool bSpawnOnServer; // 0x3bc(0x01)
	bool bShouldDamageDynamicObjects; // 0x3bd(0x01)
	bool bKillBulletPartilcesOnDeactive; // 0x3be(0x01)
	char pad_3BF[0x1]; // 0x3bf(0x01)
	uint64_t EffectId; // 0x3c0(0x08)
	struct TArray<struct FName> ThoraxBoneNames; // 0x3c8(0x10)
	enum class EActorPoolMethod ActorPoolMethod; // 0x3d8(0x01)
	char pad_3D9[0x3]; // 0x3d9(0x03)
	struct FVector BulletInitVelocity; // 0x3dc(0x0c)
	float BulletInitSpeedFor3P; // 0x3e8(0x04)
	struct FVector BulletInitLocation; // 0x3ec(0x0c)
	struct UClass* DamageType; // 0x3f8(0x08)
	float ZeroGravityDistance; // 0x400(0x04)
	struct FVector LastCheckLocation; // 0x404(0x0c)
	struct FVector LastCheckLocationFor3P; // 0x410(0x0c)
	bool bHasGenerateDamage; // 0x41c(0x01)
	bool bActiveState; // 0x41d(0x01)
	char pad_41E[0x2]; // 0x41e(0x02)
	struct TArray<struct AActor*> ActorsToIgnore; // 0x420(0x10)
	struct TArray<struct UPrimitiveComponent*> CompsToIgnore; // 0x430(0x10)
	struct TArray<struct UParticleSystem*> PSArrayFor1P; // 0x440(0x10)
	struct TArray<struct UParticleSystem*> PSArrayFor1PZooming; // 0x450(0x10)
	struct TArray<struct UParticleSystem*> PSArrayForTPP; // 0x460(0x10)
	float HidePSDistancesFor1P; // 0x470(0x04)
	char pad_474[0x4]; // 0x474(0x04)
	struct TArray<struct UParticleSystemComponent*> PSCArray; // 0x478(0x10)
	struct FName ProjectileExplodeEffect; // 0x488(0x08)
	struct UGPAudioEventAsset* ExplodeAudioEvent; // 0x490(0x08)
	char pad_498[0x8]; // 0x498(0x08)
	struct AActor* WeaponOwnerActor; // 0x4a0(0x08)
	struct FTimerHandle ReleaseToPoolTimerHandle; // 0x4a8(0x08)

	void SetReleaseTimer(float Val); // Function GPGameplay.GPSkillProjectile.SetReleaseTimer // (Native|Protected) // @ game+0x366fec0
	void ReleaseToPool(); // Function GPGameplay.GPSkillProjectile.ReleaseToPool // (Native|Public) // @ game+0x366fbf0
	void ProcessProjectileDamage(struct FHitResult& HitResult, float InPenetrateDamageRate); // Function GPGameplay.GPSkillProjectile.ProcessProjectileDamage // (Final|Native|Protected|HasOutParms) // @ game+0x366fac0
	void OnClientProjectileHit(struct FHitResult HitResult); // Function GPGameplay.GPSkillProjectile.OnClientProjectileHit // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x366f8b0
	void OnBulletProjectileStop(struct FHitResult& ImpactResult); // Function GPGameplay.GPSkillProjectile.OnBulletProjectileStop // (Native|Protected|HasOutParms) // @ game+0x366f6e0
	void OnBulletProjectileHit(struct FHitResult& ImpactResult); // Function GPGameplay.GPSkillProjectile.OnBulletProjectileHit // (Native|Protected|HasOutParms) // @ game+0x366f610
	void OnBulletFinishCheckHit(struct FVector EndLocation); // Function GPGameplay.GPSkillProjectile.OnBulletFinishCheckHit // (Native|Protected|HasDefaults) // @ game+0x366f580
	void InitializeMovement(struct FVector BulletSpawnLoc, struct FRotator BulletSpawnRot, float InitSpeed, float InInitSpeedFor3P, float InZeroGravityDistance); // Function GPGameplay.GPSkillProjectile.InitializeMovement // (Native|Public|HasDefaults) // @ game+0x366f190
	void InitHitScan(bool bShouldDelay); // Function GPGameplay.GPSkillProjectile.InitHitScan // (Final|Native|Public) // @ game+0x366f100
	void InitBulletMovementComp(struct FVector InFlyDir, float InInitSpeed, float InZeroDistance); // Function GPGameplay.GPSkillProjectile.InitBulletMovementComp // (Final|Native|Protected|HasDefaults) // @ game+0x366eff0
	void DoProcessProjectileDamage(struct FHitResult& HitResult, float InPenetrateDamageRate); // Function GPGameplay.GPSkillProjectile.DoProcessProjectileDamage // (Native|Protected|HasOutParms) // @ game+0x366e6e0
	bool CheckHitArm(struct FHitResult& HitResult); // Function GPGameplay.GPSkillProjectile.CheckHitArm // (Final|Native|Protected|HasOutParms) // @ game+0x366e270
	bool CheckHitAndDamage(struct FHitResult& HitResult, struct FVector StartLoc, struct FVector EndLoc); // Function GPGameplay.GPSkillProjectile.CheckHitAndDamage // (Native|Protected|HasOutParms|HasDefaults) // @ game+0x366e0f0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.SkillThreatMarkerDataManager
// Size: 0x48 (Inherited: 0x38)
class USkillThreatMarkerDataManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSkillThreatMarkerInterface
// Size: 0x30 (Inherited: 0x30)
class UGPSkillThreatMarkerInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSlidingTackleComponent
// Size: 0x198 (Inherited: 0x100)
class UGPSlidingTackleComponent : public UActorComponent {
public:

	struct AGPCharacter* CharacterOwner; // 0x100(0x08)
	float SuperSprintSlideMultFactor; // 0x108(0x04)
	float SuperSprintSlideExitVelocity; // 0x10c(0x04)
	float SuperSprintSlideDeceleration; // 0x110(0x04)
	bool EnableSlidingTackle; // 0x114(0x01)
	char pad_115[0x3]; // 0x115(0x03)
	float SlideTackleTriggerSpeed; // 0x118(0x04)
	float SlideMultFactor; // 0x11c(0x04)
	float SlideExitVelocity; // 0x120(0x04)
	float SlideDeceleration; // 0x124(0x04)
	float SlideCoolDown; // 0x128(0x04)
	float SlidePunish; // 0x12c(0x04)
	float SlideBreakTime; // 0x130(0x04)
	float EndSlideTackleAnimLength; // 0x134(0x04)
	float SlideJumpMaxHorizontalSpeed; // 0x138(0x04)
	float SlideDirectionChangeAngleSpeed; // 0x13c(0x04)
	float SlideDirectionChangeMaxRadian; // 0x140(0x04)
	char pad_144[0x24]; // 0x144(0x24)
	struct UAnimSequence* SlideTackleStartSequence_FPP; // 0x168(0x08)
	struct UAnimSequence* SlideTackleStartSequence_TPP; // 0x170(0x08)
	struct UAnimSequence* SlideTackleEndSequence_FPP; // 0x178(0x08)
	struct UAnimSequence* SlideTackleEndSequence_TPP; // 0x180(0x08)
	struct UGPAttributeSetSpeed* AttributeSetSpeed; // 0x188(0x08)
	char pad_190[0x8]; // 0x190(0x08)

	void ServerReplicateSlidingTackleInfos(bool IsSliding); // Function GPGameplay.GPSlidingTackleComponent.ServerReplicateSlidingTackleInfos // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x366fe00
	void AimButtonReleased(enum class ECharacterFSMEventDefine FSMEvent, float Value, struct UObject* EventObject); // Function GPGameplay.GPSlidingTackleComponent.AimButtonReleased // (Final|Native|Public) // @ game+0x366dfe0
	void AimButtonPressed(enum class ECharacterFSMEventDefine FSMEvent, float Value, struct UObject* EventObject); // Function GPGameplay.GPSlidingTackleComponent.AimButtonPressed // (Final|Native|Public) // @ game+0x366ded0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSlotChargingComponent
// Size: 0x1e8 (Inherited: 0x100)
class UGPSlotChargingComponent : public UActorComponent {
public:

	struct TArray<struct FSlotChargingData> SlotChargingData; // 0x100(0x10)
	bool bEXSkillDone; // 0x110(0x01)
	char pad_111[0x17]; // 0x111(0x17)
	float CheckCountDownRate; // 0x128(0x04)
	float CheckSlotCDTimeRate; // 0x12c(0x04)
	char pad_130[0x10]; // 0x130(0x10)
	/*struct FMulticastInlineDelegate*/char SlotChargingDone[0x10]; // 0x140(0x10)
	char pad_150[0x88]; // 0x150(0x88)
	struct AGPCharacter* GPCharOwner; // 0x1d8(0x08)
	char pad_1E0[0x8]; // 0x1e0(0x08)

	void StartCountDown(struct FSlotChargingData& Info, int32_t AddNum, float overrideTime); // Function GPGameplay.GPSlotChargingComponent.StartCountDown // (Final|Native|Public|HasOutParms) // @ game+0x366ff40
	void ServerAddSlotChargingTime(float Time); // Function GPGameplay.GPSlotChargingComponent.ServerAddSlotChargingTime // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1e38c40
	void ResumeSlotCharging(enum class ECharingSlot ChargingSlot); // Function GPGameplay.GPSlotChargingComponent.ResumeSlotCharging // (Final|Native|Public|BlueprintCallable) // @ game+0x366fd80
	void ResetPropsSlot(int32_t cdid); // Function GPGameplay.GPSlotChargingComponent.ResetPropsSlot // (Final|Native|Public|BlueprintCallable) // @ game+0x366fd00
	void ResetAllSlot(); // Function GPGameplay.GPSlotChargingComponent.ResetAllSlot // (Final|Native|Public|BlueprintCallable) // @ game+0x366fce0
	void Rep_RepCountdownInfo(); // Function GPGameplay.GPSlotChargingComponent.Rep_RepCountdownInfo // (Final|Native|Public) // @ game+0x366fca0
	void Rep_bEXSkillDone(); // Function GPGameplay.GPSlotChargingComponent.Rep_bEXSkillDone // (Final|Native|Public) // @ game+0x366fcc0
	void RemoveSlotChargingData(enum class ECharingSlot ChargingSlot); // Function GPGameplay.GPSlotChargingComponent.RemoveSlotChargingData // (Final|Native|Public|BlueprintCallable) // @ game+0x366fc20
	void PauseSlotCharging(enum class ECharingSlot ChargingSlot); // Function GPGameplay.GPSlotChargingComponent.PauseSlotCharging // (Final|Native|Public|BlueprintCallable) // @ game+0x366fa40
	void OnReDeployStart(); // Function GPGameplay.GPSlotChargingComponent.OnReDeployStart // (Final|Native|Public) // @ game+0x366fa20
	void OnReDeployEnd(); // Function GPGameplay.GPSlotChargingComponent.OnReDeployEnd // (Final|Native|Public) // @ game+0x366fa00
	void OnPlayerSeamlessEnterFinish(uint64_t PlayerUin); // Function GPGameplay.GPSlotChargingComponent.OnPlayerSeamlessEnterFinish // (Native|Public) // @ game+0x366f970
	void OnFirstPlayerSeamlessEnterFinish(uint64_t PlayerUin); // Function GPGameplay.GPSlotChargingComponent.OnFirstPlayerSeamlessEnterFinish // (Native|Public) // @ game+0x3625fd0
	void OnCharacterAmmoCountChange(struct AWeaponBase* Weapon, float WeaponAmmoCount, float CarryWeaponAmmoCount); // Function GPGameplay.GPSlotChargingComponent.OnCharacterAmmoCountChange // (Final|Native|Public) // @ game+0x366f7b0
	void ModifySlotChargingData(enum class ECharingSlot ChargingSlot, float Num, float Speed); // Function GPGameplay.GPSlotChargingComponent.ModifySlotChargingData // (Final|Native|Public|BlueprintCallable) // @ game+0x366f480
	bool IsValidSlot(enum class ECharingSlot Slot); // Function GPGameplay.GPSlotChargingComponent.IsValidSlot // (Final|Native|Public|BlueprintCallable) // @ game+0x366f3f0
	int32_t GetSlotTotalNum(enum class ECharingSlot ChargingSlot); // Function GPGameplay.GPSlotChargingComponent.GetSlotTotalNum // (Final|Native|Public|BlueprintCallable) // @ game+0x366ef60
	float GetSlotPercentTime(enum class ECharingSlot Slot); // Function GPGameplay.GPSlotChargingComponent.GetSlotPercentTime // (Final|Native|Public|BlueprintCallable) // @ game+0x366eed0
	float GetSlotPassTime(enum class ECharingSlot Slot); // Function GPGameplay.GPSlotChargingComponent.GetSlotPassTime // (Final|Native|Public|BlueprintCallable) // @ game+0x366ee40
	int32_t GetSlotNum(enum class ECharingSlot ChargingSlot); // Function GPGameplay.GPSlotChargingComponent.GetSlotNum // (Final|Native|Public|BlueprintCallable) // @ game+0x366edb0
	float GetSlotMaxTime(enum class ECharingSlot Slot); // Function GPGameplay.GPSlotChargingComponent.GetSlotMaxTime // (Final|Native|Public|BlueprintCallable) // @ game+0x366ed20
	int32_t GetSlotMaxNum(enum class ECharingSlot ChargingSlot); // Function GPGameplay.GPSlotChargingComponent.GetSlotMaxNum // (Final|Native|Public|BlueprintCallable) // @ game+0x366ec90
	float GetSlotLeftTime(enum class ECharingSlot Slot); // Function GPGameplay.GPSlotChargingComponent.GetSlotLeftTime // (Final|Native|Public|BlueprintCallable) // @ game+0x366ec00
	int32_t GetSlotChargingCntByAmmoPack(enum class ECharingSlot ChargingSlot); // Function GPGameplay.GPSlotChargingComponent.GetSlotChargingCntByAmmoPack // (Final|Native|Public) // @ game+0x366eb70
	int32_t GetSlotChargingCntByAmmoBox(enum class ECharingSlot ChargingSlot); // Function GPGameplay.GPSlotChargingComponent.GetSlotChargingCntByAmmoBox // (Final|Native|Public) // @ game+0x366eae0
	enum class ECharingSlot GetSlotByID(int32_t cdid); // Function GPGameplay.GPSlotChargingComponent.GetSlotByID // (Final|Native|Public|BlueprintCallable) // @ game+0x366ea50
	int32_t GetSlotAmmoNum(enum class ECharingSlot ChargingSlot); // Function GPGameplay.GPSlotChargingComponent.GetSlotAmmoNum // (Final|Native|Public|BlueprintCallable) // @ game+0x366e9c0
	int32_t GetDefaultSlotCarryNum(enum class ECharingSlot ChargingSlot); // Function GPGameplay.GPSlotChargingComponent.GetDefaultSlotCarryNum // (Final|Native|Public|BlueprintCallable) // @ game+0x366e930
	int32_t GetDefaultSlotAmmoNum(enum class ECharingSlot ChargingSlot); // Function GPGameplay.GPSlotChargingComponent.GetDefaultSlotAmmoNum // (Final|Native|Public|BlueprintCallable) // @ game+0x366e8a0
	enum class ECharingSlot GetChargingSlotById(int32_t cdid); // Function GPGameplay.GPSlotChargingComponent.GetChargingSlotById // (Final|Native|Public|BlueprintCallable) // @ game+0x366e810
	void ComsumSlotWeaponNum(enum class ECharingSlot ChargingSlot, int32_t Num); // Function GPGameplay.GPSlotChargingComponent.ComsumSlotWeaponNum // (Final|Native|Public|BlueprintCallable) // @ game+0x366e620
	void ComsumSlotWeaponAmmoNum(enum class ECharingSlot ChargingSlot, int32_t Num); // Function GPGameplay.GPSlotChargingComponent.ComsumSlotWeaponAmmoNum // (Final|Native|Public|BlueprintCallable) // @ game+0x366e560
	void ClientSlotNumChange(enum class ECharingSlot Slot, int32_t Count, int32_t cdid); // Function GPGameplay.GPSlotChargingComponent.ClientSlotNumChange // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x366e460
	void ClientSlotDone(enum class ECharingSlot Slot, bool done, int32_t cdid); // Function GPGameplay.GPSlotChargingComponent.ClientSlotDone // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x366e350
	void AddSlotChargingNum(enum class ECharingSlot Slot, int32_t Num, float overrideTime); // Function GPGameplay.GPSlotChargingComponent.AddSlotChargingNum // (Final|Native|Public|BlueprintCallable) // @ game+0x366ddd0
	enum class ECharingSlot AddSlotChargingData(int32_t cdid); // Function GPGameplay.GPSlotChargingComponent.AddSlotChargingData // (Final|Native|Public|BlueprintCallable) // @ game+0x366dd40
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSnapshotGameComponent
// Size: 0x128 (Inherited: 0x100)
class UGPSnapshotGameComponent : public UActorComponent {
public:

	float MinDistance; // 0x100(0x04)
	struct FVector TextPositionOffset; // 0x104(0x0c)
	char pad_110[0x18]; // 0x110(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSoundVisualizationComponent
// Size: 0x2b8 (Inherited: 0x100)
class UGPSoundVisualizationComponent : public UActorComponent {
public:

	struct FSoftObjectPath SoundVisualizationConfigTablePath; // 0x100(0x18)
	struct FSoftObjectPath WeaponSoundVisualizationConfigTablePath; // 0x118(0x18)
	float NearCheckRadius; // 0x130(0x04)
	float NearCheckHalfHeight; // 0x134(0x04)
	float VerticalAngleParam; // 0x138(0x04)
	char pad_13C[0x4]; // 0x13c(0x04)
	struct TMap<struct AActor*, struct FSoundVisualizationInfo> CurrentSoundVisualizationInfo; // 0x140(0x50)
	struct TMap<int32_t, struct FSoundVisualizationInfo> CurrentSoundVisualizationInfoNoActor; // 0x190(0x50)
	float AttributeFactor; // 0x1e0(0x04)
	float ActionFactor; // 0x1e4(0x04)
	enum class ESoundVisualizationType CachedMyMaxLevelSound; // 0x1e8(0x01)
	char pad_1E9[0x3]; // 0x1e9(0x03)
	int32_t CachedMyMaxSoundLevel; // 0x1ec(0x04)
	struct TMap<enum class ESoundVisualizationType, struct FSoundVisualizationConfigRow> SoundVisualizationConfigCache; // 0x1f0(0x50)
	struct TMap<uint64_t, struct FSoundVisualizationConfigRow> WeaponSoundVisualizationConfigCache; // 0x240(0x50)
	struct TArray<float> MyActiveSoundsTimeLeft; // 0x290(0x10)
	char pad_2A0[0x18]; // 0x2a0(0x18)

	void OnWeaponConfigTableLoadComplete(struct FSoftObjectPath& AssetRef); // Function GPGameplay.GPSoundVisualizationComponent.OnWeaponConfigTableLoadComplete // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x3672df0
	void OnLocalCharacterBasePoseChanged(); // Function GPGameplay.GPSoundVisualizationComponent.OnLocalCharacterBasePoseChanged // (Final|Native|Protected) // @ game+0x3672ba0
	void OnConfigTableLoadComplete(struct FSoftObjectPath& AssetRef); // Function GPGameplay.GPSoundVisualizationComponent.OnConfigTableLoadComplete // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x3672ac0
	void HandleSoundVisualizationWithNoRealActor(enum class ESoundVisualizationType EventType, struct FVector SoundLocation); // Function GPGameplay.GPSoundVisualizationComponent.HandleSoundVisualizationWithNoRealActor // (Final|Native|Public|HasDefaults) // @ game+0x3672930
	void HandleSoundVisualizationOptimized(struct AActor* SourceActor, struct AActor* ActorToBlame, enum class ESoundVisualizationType EventType, struct FVector SoundLocation); // Function GPGameplay.GPSoundVisualizationComponent.HandleSoundVisualizationOptimized // (Final|Native|Public|HasDefaults) // @ game+0x36727c0
	void HandleSoundVisualization(struct AActor* SourceActor, struct AActor* ActorToBlame, enum class ESoundVisualizationType EventType, struct FVector SoundLocation); // Function GPGameplay.GPSoundVisualizationComponent.HandleSoundVisualization // (Final|Native|Public|HasDefaults) // @ game+0x3672650
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSpectatingActorProcessInterface
// Size: 0x30 (Inherited: 0x30)
class UGPSpectatingActorProcessInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSpectatorPawn
// Size: 0x400 (Inherited: 0x400)
class AGPSpectatorPawn : public ASpectatorPawn {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSplinePath
// Size: 0x3f8 (Inherited: 0x378)
class AGPSplinePath : public AActor {
public:

	char pad_378[0x10]; // 0x378(0x10)
	bool bProjectToNavmesh; // 0x388(0x01)
	bool bSplineReverse; // 0x389(0x01)
	struct FCommonSplinePathData CommonSplinePathData; // 0x38a(0x02)
	char pad_38C[0x4]; // 0x38c(0x04)
	struct USplineComponent* Spline; // 0x390(0x08)
	struct UTextRenderComponent* PathText; // 0x398(0x08)
	/*struct TSoftClassPtr<UObject>*/char WayPointClass[0x28]; // 0x3a0(0x28)
	struct TArray<struct AGPPathWayPoint*> WayPoints; // 0x3c8(0x10)
	bool bHasCachedGroundHeightTable; // 0x3d8(0x01)
	char pad_3D9[0x7]; // 0x3d9(0x07)
	struct FInterpCurveFloat GroundHeightTable; // 0x3e0(0x18)

	float FindDistanceAlongSplineClosestToLocation(struct FVector& Location); // Function GPGameplay.GPSplinePath.FindDistanceAlongSplineClosestToLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3672260
	void CreateWaypointAtScreenCenter(); // Function GPGameplay.GPSplinePath.CreateWaypointAtScreenCenter // (Final|Native|Public|BlueprintCallable) // @ game+0x3672240
	void CreateWaypoint(); // Function GPGameplay.GPSplinePath.CreateWaypoint // (Final|Native|Public|BlueprintCallable) // @ game+0x3672220
	void AttachWayPointsToSpline(); // Function GPGameplay.GPSplinePath.AttachWayPointsToSpline // (Final|Native|Public|BlueprintCallable) // @ game+0x36721a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSpray
// Size: 0x3a0 (Inherited: 0x380)
class AGPSpray : public ADecalActor {
public:

	char pad_380[0x20]; // 0x380(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSpringArmComponent
// Size: 0x420 (Inherited: 0x2d0)
class UGPSpringArmComponent : public USpringArmComponent {
public:

	float DefaultInterpolationSpeed; // 0x2d0(0x04)
	float InterpolationSpeedADD; // 0x2d4(0x04)
	struct TMap<enum class EMovementRelatedSpringArmState, struct FSpringArmTransformValue> BasicLayerConfig; // 0x2d8(0x50)
	struct FSpringArmTransformAdditiveValue IndoorLayerConfig; // 0x328(0x24)
	float IndoorCheckPeriod; // 0x34c(0x04)
	float IndoorCheckDistance; // 0x350(0x04)
	bool DisableCollisionWhileVault; // 0x354(0x01)
	char pad_355[0x3]; // 0x355(0x03)
	float DisableCollisionWhileVaultLengthCo; // 0x358(0x04)
	float SwimLimitCameraOffset; // 0x35c(0x04)
	struct FSpringArmTransformAdditiveValue EmptyhandAdditiveLayerConfig; // 0x360(0x24)
	bool bCameraLagOnlyForward; // 0x384(0x01)
	bool bOnlyUseBasicSetting; // 0x385(0x01)
	char pad_386[0x2]; // 0x386(0x02)
	struct UCurveFloat* SprintStopTargetArmLengthCurve; // 0x388(0x08)
	struct UCurveFloat* ViewportScaleSocketOffsetYAddCurve; // 0x390(0x08)
	struct UCurveFloat* ViewportScaleTargetOffsetZAddCurve; // 0x398(0x08)
	struct UCurveFloat* ViewportScaleArmLengthAddCurve; // 0x3a0(0x08)
	struct FRotator BeCarryCameraRotOffset; // 0x3a8(0x0c)
	char pad_3B4[0x4]; // 0x3b4(0x04)
	struct AGPCharacter* OwnerChrPtr; // 0x3b8(0x08)
	char pad_3C0[0x8]; // 0x3c0(0x08)
	struct UGPVaultAndClimbComponent* GPVaultAndClimbComp; // 0x3c8(0x08)
	struct UGPAnimProxyComponent* GPAnimProxyComponent; // 0x3d0(0x08)
	struct UGPSprintComponent* GPSprintComponent; // 0x3d8(0x08)
	struct UGPCameraModeComponent* GPCameraModeComponent; // 0x3e0(0x08)
	char pad_3E8[0x38]; // 0x3e8(0x38)

	void SetLeaveVehicleLerpSpringArm(bool bLerp, float LerpTime, float SpringArmLength, struct FVector NewTargetOffset); // Function GPGameplay.GPSpringArmComponent.SetLeaveVehicleLerpSpringArm // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3673020
	void SetCameraModeToNpcTalk(bool bEnable); // Function GPGameplay.GPSpringArmComponent.SetCameraModeToNpcTalk // (Final|Native|Public|BlueprintCallable) // @ game+0x3672f90
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSprintComponent
// Size: 0x140 (Inherited: 0x100)
class UGPSprintComponent : public UActorComponent {
public:

	float ChangeSprintTransitionDuration; // 0x100(0x04)
	float DefaultBrakingDecelerationSprint; // 0x104(0x04)
	bool bSprintingIgnoreStamina; // 0x108(0x01)
	bool bSuperSprinting; // 0x109(0x01)
	bool bSprinting; // 0x10a(0x01)
	char pad_10B[0x1]; // 0x10b(0x01)
	int32_t SprintType; // 0x10c(0x04)
	bool bSilentWalking; // 0x110(0x01)
	bool bHalfSquatWalking; // 0x111(0x01)
	bool bDurationProneToSprint; // 0x112(0x01)
	char pad_113[0x1]; // 0x113(0x01)
	float currentSprintTransitionDuration; // 0x114(0x04)
	bool bClientIsSprinting; // 0x118(0x01)
	char pad_119[0x7]; // 0x119(0x07)
	struct UGPStaminaDataComponent* StaminaData; // 0x120(0x08)
	struct AGPCharacter* GPOwner; // 0x128(0x08)
	char pad_130[0x10]; // 0x130(0x10)

	void UnSprint(); // Function GPGameplay.GPSprintComponent.UnSprint // (Final|Native|Public) // @ game+0x3673290
	void UnSilentWalk(); // Function GPGameplay.GPSprintComponent.UnSilentWalk // (Final|Native|Public) // @ game+0x3673270
	void UnHalfSquatWalk(); // Function GPGameplay.GPSprintComponent.UnHalfSquatWalk // (Final|Native|Public) // @ game+0x3673250
	void Sprint(); // Function GPGameplay.GPSprintComponent.Sprint // (Final|Native|Public) // @ game+0x3673230
	void SilentWalk(); // Function GPGameplay.GPSprintComponent.SilentWalk // (Final|Native|Public) // @ game+0x3673210
	void ServerEnterSuperSprint(bool bEnter); // Function GPGameplay.GPSprintComponent.ServerEnterSuperSprint // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35e4130
	void OnOwnerCharacterReborn(); // Function GPGameplay.GPSprintComponent.OnOwnerCharacterReborn // (Final|Native|Protected) // @ game+0x3672cc0
	void OnOwnerCharacterDied(struct AGPCharacterBase* CHARACTER, struct AController* Killer, struct UDamageType* DamageType); // Function GPGameplay.GPSprintComponent.OnOwnerCharacterDied // (Final|Native|Protected) // @ game+0x3672bc0
	void HalfSquatWalk(); // Function GPGameplay.GPSprintComponent.HalfSquatWalk // (Final|Native|Public) // @ game+0x3672630
	bool GetIsSprinting(); // Function GPGameplay.GPSprintComponent.GetIsSprinting // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3672340
	bool GetIsSilentWalk(); // Function GPGameplay.GPSprintComponent.GetIsSilentWalk // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3672320
	bool GetIsHalfSquatWalk(); // Function GPGameplay.GPSprintComponent.GetIsHalfSquatWalk // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3672300
	bool CanSprint(); // Function GPGameplay.GPSprintComponent.CanSprint // (Final|Native|Public) // @ game+0x36721f0
	bool CanSilentWalk(); // Function GPGameplay.GPSprintComponent.CanSilentWalk // (Final|Native|Public) // @ game+0x36721c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPStaminaDataComponent
// Size: 0x208 (Inherited: 0x100)
class UGPStaminaDataComponent : public UActorComponent {
public:

	float LowStaminaValue; // 0x100(0x04)
	float SuperSprintLowStaminaValue; // 0x104(0x04)
	float StaminaRecoverValue; // 0x108(0x04)
	float StaminaBaseValueUpperLimit; // 0x10c(0x04)
	float StaminaUpperLimit; // 0x110(0x04)
	float StaminaLowerLimit; // 0x114(0x04)
	float StaminaRecoverStartCD; // 0x118(0x04)
	char pad_11C[0x4]; // 0x11c(0x04)
	struct TMap<enum class EStaminaIndependentChangeType, struct FStaminaIndependentChangeInfo> StaminaIndependentChangeConfig; // 0x120(0x50)
	struct TMap<enum class EStaminaExclusiveChangeType, struct FStaminaExclusiveChangeInfo> StaminaExclusiveChangeConfig; // 0x170(0x50)
	struct UCurveFloat* OverloadStaminaChangeCurve; // 0x1c0(0x08)
	/*struct FMulticastInlineDelegate*/char OnStaminaChange[0x10]; // 0x1c8(0x10)
	struct AGPCharacter* GPOwner; // 0x1d8(0x08)
	struct UGPAttributeSetSpeed* AttributeSetSpeed; // 0x1e0(0x08)
	bool bTiredStateAllowSprint; // 0x1e8(0x01)
	bool bTiredStateAllowSuperSprint; // 0x1e9(0x01)
	char pad_1EA[0xe]; // 0x1ea(0x0e)
	float GM_ChangeValue; // 0x1f8(0x04)
	float GM_ChangeValuePerSecond; // 0x1fc(0x04)
	float GM_RecoverCDLeft; // 0x200(0x04)
	bool GM_CanRecover; // 0x204(0x01)
	char pad_205[0x3]; // 0x205(0x03)

	void UpdateStaminaHudAnimSprint(); // Function GPGameplay.GPStaminaDataComponent.UpdateStaminaHudAnimSprint // (Final|Native|Public|BlueprintCallable) // @ game+0x36733d0
	void UpdateStaminaHudAnim(enum class EStaminaIndependentChangeType StaminaChangeType); // Function GPGameplay.GPStaminaDataComponent.UpdateStaminaHudAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x3673350
	void UpdateStamina(float DeltaSeconds); // Function GPGameplay.GPStaminaDataComponent.UpdateStamina // (Final|Native|Public) // @ game+0x36732d0
	void UpdateActionStaminaStatus(); // Function GPGameplay.GPStaminaDataComponent.UpdateActionStaminaStatus // (Final|Native|Public) // @ game+0x36732b0
	void UnSprint(); // Function GPGameplay.GPStaminaDataComponent.UnSprint // (Final|Native|Public|BlueprintCallable) // @ game+0x17621d0
	void SetStaminOnClient(float NewValue); // Function GPGameplay.GPStaminaDataComponent.SetStaminOnClient // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x3673190
	void RequestStaminaChange(enum class EStaminaIndependentChangeType StaminaChangeType, float DeltaSeconds); // Function GPGameplay.GPStaminaDataComponent.RequestStaminaChange // (Final|Native|Public|BlueprintCallable) // @ game+0x3672ed0
	void OnStaminaChanged(struct FOnGPAttributeChangeData& CallbackData); // Function GPGameplay.GPStaminaDataComponent.OnStaminaChanged // (Final|Native|Public|HasOutParms) // @ game+0x3672ce0
	void OnRep_CanSuperSprint(); // Function GPGameplay.GPStaminaDataComponent.OnRep_CanSuperSprint // (Final|Native|Public) // @ game+0x17621d0
	void OnRep_CanSprint(); // Function GPGameplay.GPStaminaDataComponent.OnRep_CanSprint // (Final|Native|Public) // @ game+0x17621d0
	bool IsTiredStateAllowSuperSprint(); // Function GPGameplay.GPStaminaDataComponent.IsTiredStateAllowSuperSprint // (Final|Native|Public|BlueprintCallable) // @ game+0x3672a90
	bool IsTiredStateAllowSprint(); // Function GPGameplay.GPStaminaDataComponent.IsTiredStateAllowSprint // (Final|Native|Public|BlueprintCallable) // @ game+0x3672a60
	bool IsStaninaLowInSuperSprint(); // Function GPGameplay.GPStaminaDataComponent.IsStaninaLowInSuperSprint // (Final|Native|Public|BlueprintCallable) // @ game+0x3672a30
	bool IsStaninaLow(); // Function GPGameplay.GPStaminaDataComponent.IsStaninaLow // (Final|Native|Public|BlueprintCallable) // @ game+0x3672a00
	float GetStaninaValue(); // Function GPGameplay.GPStaminaDataComponent.GetStaninaValue // (Final|Native|Public|BlueprintCallable) // @ game+0x3672600
	float GetStaninaPercentGivingValue(float Current); // Function GPGameplay.GPStaminaDataComponent.GetStaninaPercentGivingValue // (Final|Native|Public|BlueprintCallable) // @ game+0x3672570
	float GetStaninaPercent(); // Function GPGameplay.GPStaminaDataComponent.GetStaninaPercent // (Final|Native|Public|BlueprintCallable) // @ game+0x3672540
	struct FStaminaIndependentChangeInfo GetStaminaIndependentChangeInfo(enum class EStaminaIndependentChangeType Type); // Function GPGameplay.GPStaminaDataComponent.GetStaminaIndependentChangeInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3672450
	struct FStaminaExclusiveChangeInfo GetStaminaExclusiveChangeInfo(enum class EStaminaExclusiveChangeType Type); // Function GPGameplay.GPStaminaDataComponent.GetStaminaExclusiveChangeInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3672390
	float GetMaxStaninaValue(); // Function GPGameplay.GPStaminaDataComponent.GetMaxStaninaValue // (Final|Native|Public|BlueprintCallable) // @ game+0x3672360
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPStaticMeshComponent
// Size: 0x830 (Inherited: 0x818)
class UGPStaticMeshComponent : public UAsyncStaticMeshComponent {
public:

	struct UMaterialInterface* EffectPassMaterial; // 0x818(0x08)
	char bDrawEffectPass : 1; // 0x820(0x01)
	char bReverseDrawEffectPassCulling : 1; // 0x820(0x01)
	char pad_820_2 : 6; // 0x820(0x01)
	char pad_821[0xf]; // 0x821(0x0f)

	void SetMultiDrawEffect(bool InDrawMultiEffect, bool InReverseCulling); // Function GPGameplay.GPStaticMeshComponent.SetMultiDrawEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x3677d30
	void SetEffectPassMaterial(struct UMaterialInterface* InEffectPassMaterial); // Function GPGameplay.GPStaticMeshComponent.SetEffectPassMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x3677cb0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSubtitleLevelSubsystem
// Size: 0x3a8 (Inherited: 0x378)
class AGPSubtitleLevelSubsystem : public ALevelSubsystem {
public:

	char pad_378[0x4]; // 0x378(0x04)
	struct FName CurrentSubtitleSeqId; // 0x37c(0x08)
	enum class ESubtitleSequenceType CurrentSubtitleSeqType; // 0x384(0x01)
	char pad_385[0x3]; // 0x385(0x03)
	struct AActor* CurrentSpeakerActor; // 0x388(0x08)
	float SubtitleDistance3D; // 0x390(0x04)
	char pad_394[0x4]; // 0x394(0x04)
	struct TArray<int32_t> TargetTeamIds; // 0x398(0x10)

	void ServerRequestSubtitleSequence(struct FName& SubtitleSeqId, enum class ESubtitleSequenceType SubtitleSeqType, struct AActor* SpeakerActor, struct TArray<int32_t> TeamIds); // Function GPGameplay.GPSubtitleLevelSubsystem.ServerRequestSubtitleSequence // (Final|Native|Public|HasOutParms) // @ game+0x3677930
	void OnRep_CurrentSubtitleSeqId(); // Function GPGameplay.GPSubtitleLevelSubsystem.OnRep_CurrentSubtitleSeqId // (Final|Native|Protected) // @ game+0x3677010
	struct AGPSubtitleLevelSubsystem* STATIC_Get(struct UObject* WorldContextObject); // Function GPGameplay.GPSubtitleLevelSubsystem.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3676a50
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSubtitleWorldSubsystem
// Size: 0x178 (Inherited: 0x38)
class UGPSubtitleWorldSubsystem : public UWorldSubsystem {
public:

	float Subtitle3DAudioDistance; // 0x38(0x04)
	char pad_3C[0x13c]; // 0x3c(0x13c)

	void SubTileViewCreated(struct FString FunctionName, struct UBaseUIView* View); // Function GPGameplay.GPSubtitleWorldSubsystem.SubTileViewCreated // (Final|Native|Public) // @ game+0x3678030
	void StopSubtitleGroup(struct FName& SubtitleGroupId); // Function GPGameplay.GPSubtitleWorldSubsystem.StopSubtitleGroup // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3677fa0
	void SkipCurrentSubtitleSequence(struct FName& SubtitleSeqId); // Function GPGameplay.GPSubtitleWorldSubsystem.SkipCurrentSubtitleSequence // (Final|BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3677e90
	void SkipCurrentSubtitle(struct FName& SubtitleSeqId); // Function GPGameplay.GPSubtitleWorldSubsystem.SkipCurrentSubtitle // (Final|BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3677e00
	void RequestSubtitleSequenceWithTeamId(struct FName& SubtitleSeqId, enum class ESubtitleSequenceType SubtitleSeqType, struct TArray<int32_t> TeamIds, struct AActor* SpeakerActor); // Function GPGameplay.GPSubtitleWorldSubsystem.RequestSubtitleSequenceWithTeamId // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x36776d0
	void RequestSubtitleSequence(struct FName& SubtitleSeqId, enum class ESubtitleSequenceType SubtitleSeqType, struct AActor* SpeakerActor); // Function GPGameplay.GPSubtitleWorldSubsystem.RequestSubtitleSequence // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x36775c0
	void RequestSubtitleGroup(struct FName& SubtitleGroupId, enum class ESubtitleSequenceType SubtitleSeqType, struct AActor* SpeakerActor, int32_t SubtitleGroupIdx); // Function GPGameplay.GPSubtitleWorldSubsystem.RequestSubtitleGroup // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3677470
	void PlaySubtitleGroupSequence(struct FSubtitleGroupItem& SubtitleGroupItem, enum class ESubtitleSequenceType CurrentSubtitleSeqType, struct AActor* SpeakerActor); // Function GPGameplay.GPSubtitleWorldSubsystem.PlaySubtitleGroupSequence // (Final|Native|Private|HasOutParms) // @ game+0x3677250
	void OnSubtitleSeqFinished(int32_t SubtitleIdx, struct FSubtitleSequenceInfo& SubtitleSeqInfo); // Function GPGameplay.GPSubtitleWorldSubsystem.OnSubtitleSeqFinished // (Final|Native|Private|HasOutParms) // @ game+0x3677050
	void OnSubtitleInteractorKeyPressed(); // Function GPGameplay.GPSubtitleWorldSubsystem.OnSubtitleInteractorKeyPressed // (Final|Native|Public) // @ game+0x3677030
	struct FName STATIC_GetSubtitleGroupDataTableName(enum class ESubtitleSequenceType SubtitleSeqType); // Function GPGameplay.GPSubtitleWorldSubsystem.GetSubtitleGroupDataTableName // (Final|Native|Static|Private) // @ game+0x3676f90
	int32_t GetCurrentSubtitleSeq(struct FSubtitleSequenceInfo& CurrentInfo); // Function GPGameplay.GPSubtitleWorldSubsystem.GetCurrentSubtitleSeq // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3676dc0
	struct FSubtitleGroupInfo GetCurrentSubtitleGroupInfo(); // Function GPGameplay.GPSubtitleWorldSubsystem.GetCurrentSubtitleGroupInfo // (Final|Native|Public) // @ game+0x3676c30
	struct AActor* GetAkActorOnCharacterMeshSocket(struct AActor* TargetCharacter, struct FName SocketName); // Function GPGameplay.GPSubtitleWorldSubsystem.GetAkActorOnCharacterMeshSocket // (Final|Native|Public|BlueprintCallable) // @ game+0x3676b50
	struct UGPSubtitleWorldSubsystem* STATIC_Get(struct UObject* WorldContextObject); // Function GPGameplay.GPSubtitleWorldSubsystem.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3676ad0
	void ClientRequestSubtitleSequenceOverrideSpeakerName(struct FName& SubtitleSeqId, enum class ESubtitleSequenceType SubtitleSeqType, struct FText& SpeakerName, struct AActor* SpeakerActor); // Function GPGameplay.GPSubtitleWorldSubsystem.ClientRequestSubtitleSequenceOverrideSpeakerName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3676890
	void ClientRequestSubtitleSequenceOverride(struct FText& SpeakerName, struct FText& SubtitleContent, struct UGPAudioEventAsset* AudioAsset, float SubtitleDuration, struct AActor* SpeakerActor, bool bOverrideSamePriority, char SubtitlePriority); // Function GPGameplay.GPSubtitleWorldSubsystem.ClientRequestSubtitleSequenceOverride // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x36765e0
	void ClientRequestSubtitleSequence(struct FName& SubtitleSeqId, enum class ESubtitleSequenceType SubtitleSeqType, struct AActor* SpeakerActor, struct TArray<int32_t> TeamIds); // Function GPGameplay.GPSubtitleWorldSubsystem.ClientRequestSubtitleSequence // (Final|Native|Public|HasOutParms) // @ game+0x3676400
	bool CheckIfSubtitleGroupItemNeedLoop(struct FSubtitleGroupItem& SubtitleGroupItem); // Function GPGameplay.GPSubtitleWorldSubsystem.CheckIfSubtitleGroupItemNeedLoop // (Final|Native|Public|HasOutParms) // @ game+0x3676350
	bool CheckIfSubtitleGroupFinished(); // Function GPGameplay.GPSubtitleWorldSubsystem.CheckIfSubtitleGroupFinished // (Final|Native|Public) // @ game+0x3676320
	bool CheckIfSubtitleGroupCloseToFinished(); // Function GPGameplay.GPSubtitleWorldSubsystem.CheckIfSubtitleGroupCloseToFinished // (Final|Native|Public|Const) // @ game+0x36762f0
	bool CheckIfCurrentSubtitleGroupPlaying(struct FName& SubtitleGroupId); // Function GPGameplay.GPSubtitleWorldSubsystem.CheckIfCurrentSubtitleGroupPlaying // (Final|Native|Public|HasOutParms|Const) // @ game+0x3676250
	bool CheckIfCanSkipCurrentSubtitleGroup(); // Function GPGameplay.GPSubtitleWorldSubsystem.CheckIfCanSkipCurrentSubtitleGroup // (Final|Native|Public|Const) // @ game+0x3676220
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPTeamComponent
// Size: 0x118 (Inherited: 0x100)
class UGPTeamComponent : public UActorComponent {
public:

	/*struct FMulticastInlineDelegate*/char OnUpdateTeamInfo[0x10]; // 0x100(0x10)
	int32_t TeamId; // 0x110(0x04)
	int32_t CampId; // 0x114(0x04)

	void UpdateTeamComponentInfo(); // Function GPGameplay.GPTeamComponent.UpdateTeamComponentInfo // (Final|Native|Protected) // @ game+0x3678130
	void TeamInfoUpdateSignature__DelegateSignature(struct FTeamInfo TeamInfo); // DelegateFunction GPGameplay.GPTeamComponent.TeamInfoUpdateSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x7ed88c0
	int32_t GetTeamID(); // Function GPGameplay.GPTeamComponent.GetTeamID // (Final|Native|Public|BlueprintCallable) // @ game+0xb4a0a0
	int32_t GetCamp(); // Function GPGameplay.GPTeamComponent.GetCamp // (Final|Native|Public|BlueprintCallable) // @ game+0x3676c10
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPTestReplicatedComponent
// Size: 0x110 (Inherited: 0x100)
class UGPTestReplicatedComponent : public UActorComponent {
public:

	int32_t TestInt; // 0x100(0x04)
	float TestFloat; // 0x104(0x04)
	int32_t TestConfigInt; // 0x108(0x04)
	int32_t TestConfigFloat; // 0x10c(0x04)

	void ServerSetReplicateIntValue(int32_t Value); // Function GPGameplay.GPTestReplicatedComponent.ServerSetReplicateIntValue // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x3677b90
	void ServerSetReplicateFloatValue(float Value); // Function GPGameplay.GPTestReplicatedComponent.ServerSetReplicateFloatValue // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x3677b10
	void ServerSetConfigIntValue(int32_t Value); // Function GPGameplay.GPTestReplicatedComponent.ServerSetConfigIntValue // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x36404f0
	void ServerSetConfigFloatValue(float Value); // Function GPGameplay.GPTestReplicatedComponent.ServerSetConfigFloatValue // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x3673190
	void OnRep_TestInt(); // Function GPGameplay.GPTestReplicatedComponent.OnRep_TestInt // (Native|Public) // @ game+0x35e4a10
	void OnRep_TestFloat(); // Function GPGameplay.GPTestReplicatedComponent.OnRep_TestFloat // (Native|Public) // @ game+0x22790c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPTestUnReplicatedComponent
// Size: 0x108 (Inherited: 0x100)
class UGPTestUnReplicatedComponent : public UActorComponent {
public:

	int32_t TestConfigInt; // 0x100(0x04)
	int32_t TestConfigFloat; // 0x104(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPThrowUASAnimInstance
// Size: 0x9d0 (Inherited: 0x280)
class UGPThrowUASAnimInstance : public UAnimInstance {
public:

	struct FGPThrowUASAnimInstanceProxy LocalProxy; // 0x280(0x750)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPThrowWeaponAnimInstance
// Size: 0x9d0 (Inherited: 0x280)
class UGPThrowWeaponAnimInstance : public UAnimInstance {
public:

	struct FGPThrowWeaponAnimInstanceProxy LocalProxy; // 0x280(0x750)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPTransitionMoveComponent
// Size: 0x188 (Inherited: 0x100)
class UGPTransitionMoveComponent : public UActorComponent {
public:

	float TransitionMoveSpeed; // 0x100(0x04)
	float TransitionRotateSpeed; // 0x104(0x04)
	float MoveAnimSpeedScale; // 0x108(0x04)
	char pad_10C[0x4]; // 0x10c(0x04)
	/*struct FMulticastInlineDelegate*/char OnTransitionMoveBegin[0x10]; // 0x110(0x10)
	/*struct FMulticastInlineDelegate*/char OnTransitionMoveEnd[0x10]; // 0x120(0x10)
	struct FVector TargetAbsoluteLocation; // 0x130(0x0c)
	struct FRotator TargetRotation; // 0x13c(0x0c)
	char pad_148[0x40]; // 0x148(0x40)

	void OnRep_TargetRotation(); // Function GPGameplay.GPTransitionMoveComponent.OnRep_TargetRotation // (Final|Native|Protected) // @ game+0x367ab70
	void OnRep_TargetAbsoluteLocation(); // Function GPGameplay.GPTransitionMoveComponent.OnRep_TargetAbsoluteLocation // (Final|Native|Protected) // @ game+0x367ab50
	void BeginTransitionMovement(struct FVector InAbsoluteLocation, struct FRotator InRotation); // Function GPGameplay.GPTransitionMoveComponent.BeginTransitionMovement // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x367a5a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPUpperBodyIKInstance
// Size: 0xa10 (Inherited: 0x280)
class UGPUpperBodyIKInstance : public UAnimInstance {
public:

	struct FGPUpperBodyIKInstanceProxy LocalProxy; // 0x280(0x790)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPVaultAndClimbComponent
// Size: 0xfd0 (Inherited: 0x100)
class UGPVaultAndClimbComponent : public UActorComponent {
public:

	struct FGPVaultRepInfo NewVaultRepInfo; // 0x100(0x98)
	bool EnableVaultAndClimb; // 0x198(0x01)
	bool EnableCrouchCapsuleCheckVault; // 0x199(0x01)
	bool ValutHeightCheckSideEnable; // 0x19a(0x01)
	bool ValutHeightSideEnablePointBackCheck; // 0x19b(0x01)
	bool VaultEndCheckCrouchEnable; // 0x19c(0x01)
	char pad_19D[0x3]; // 0x19d(0x03)
	float HeadCheckZOffset; // 0x1a0(0x04)
	float CollideOverHeadZOffset; // 0x1a4(0x04)
	bool NeedDebugVaultAndClimb; // 0x1a8(0x01)
	bool NeedDebugSimulateVaultAndClimb; // 0x1a9(0x01)
	bool ShowDebugFor_ObstacleInfo; // 0x1aa(0x01)
	bool ShowDebugFor_TouchAngleInfo; // 0x1ab(0x01)
	bool ShowDebugFor_ObstacleHeight; // 0x1ac(0x01)
	bool ShowDebugFor_ObstacleHeightSide; // 0x1ad(0x01)
	bool ShowDebugFor_CheckSideVaultBack; // 0x1ae(0x01)
	bool ShowDebugFor_GetVaultApexPoint; // 0x1af(0x01)
	bool ShowDebugFor_CheckObstacleWidth; // 0x1b0(0x01)
	bool ShowDebugFor_CollideOverHead; // 0x1b1(0x01)
	bool ShowDebugFor_PawnTraceSingle; // 0x1b2(0x01)
	bool ShowDebugFor_DrawVaultDebugInfo; // 0x1b3(0x01)
	bool ShowDebugFor_WarpingVaultCurve; // 0x1b4(0x01)
	char pad_1B5[0x3]; // 0x1b5(0x03)
	struct FName IgnoreActorTag; // 0x1b8(0x08)
	float ForwardTraceDistance; // 0x1c0(0x04)
	float ForwardTraceExtraTime; // 0x1c4(0x04)
	float SprintTraceExtraTime; // 0x1c8(0x04)
	float AdsorptionDistancePercent; // 0x1cc(0x04)
	float VaultMaxTouchAngle; // 0x1d0(0x04)
	float ObstacleHeightSideCheckInterval; // 0x1d4(0x04)
	int32_t MaxObstacleHeightSideCheckCount; // 0x1d8(0x04)
	float ObstacleHeightCheckInterval; // 0x1dc(0x04)
	int32_t MaxObstacleHeightCheckCount; // 0x1e0(0x04)
	float MinVaultObstacleAngle; // 0x1e4(0x04)
	float CheckObstacleWidthOffset; // 0x1e8(0x04)
	float VaultObstacleThickThreshold; // 0x1ec(0x04)
	float VaultObstacleThickThreshold_Stand; // 0x1f0(0x04)
	float ThickTraceExtraTime; // 0x1f4(0x04)
	float ClimbObstacleMinThickThreshold; // 0x1f8(0x04)
	float ClimbObstacleMinThickThresholdSide; // 0x1fc(0x04)
	float CheckSideVaultBackThreshold; // 0x200(0x04)
	float CheckObstacleBestSideDistance; // 0x204(0x04)
	float ObstacleBestSideMinDistance; // 0x208(0x04)
	float TimeAutoMoveAfterLanding; // 0x20c(0x04)
	float TriggerAirValutMaxZSpeed; // 0x210(0x04)
	float AutoVaultTickInterval; // 0x214(0x04)
	float HorizontalVelocityScale; // 0x218(0x04)
	float Height140DistanceDiffScale; // 0x21c(0x04)
	float TriggerFallVerticalSpeed; // 0x220(0x04)
	float VaultPlayRate; // 0x224(0x04)
	float AirStepOnPlayRate; // 0x228(0x04)
	float AirClimbPlayRate; // 0x22c(0x04)
	char pad_230[0x4]; // 0x230(0x04)
	enum class ECollisionChannel DefaultTraceCollisionChannel; // 0x234(0x01)
	char pad_235[0x3]; // 0x235(0x03)
	struct UPhysicalMaterial* IgnoreVaultMaterial; // 0x238(0x08)
	bool bTraceComplexOnMove; // 0x240(0x01)
	char pad_241[0x3]; // 0x241(0x03)
	float VaultPretestTickInterval; // 0x244(0x04)
	float VaultTriggerCD; // 0x248(0x04)
	float DynamicObstacleVaultCD; // 0x24c(0x04)
	/*struct FMulticastInlineDelegate*/char OnVaultAndClimbBeginOverlap[0x10]; // 0x250(0x10)
	char pad_260[0x28]; // 0x260(0x28)
	struct TArray<struct FGPVaultInfo> VaultAnimationList; // 0x288(0x10)
	struct TArray<int32_t> CheckHeightList; // 0x298(0x10)
	struct TArray<int32_t> CheckHeightList_AtAir; // 0x2a8(0x10)
	float CheckObstacleMaxHeight; // 0x2b8(0x04)
	char pad_2BC[0x4]; // 0x2bc(0x04)
	struct UCurveVector* RuntimePathCurve; // 0x2c0(0x08)
	struct FTransformCurve RuntimeTransformPathCurve; // 0x2c8(0x5b8)
	struct TArray<struct UAnimNotify_VaultSetting*> RuntimePathNotify; // 0x880(0x10)
	struct AGPCharacter* CharacterOwner; // 0x890(0x08)
	struct TArray<struct FGPPredictPathNode> PredictPathList; // 0x898(0x10)
	char pad_8A8[0x80]; // 0x8a8(0x80)
	struct FGPVaultInfo TargetVaultInfo; // 0x928(0x50)
	char pad_978[0x50]; // 0x978(0x50)
	struct AActor* MovableActor; // 0x9c8(0x08)
	char pad_9D0[0x50]; // 0x9d0(0x50)
	struct FGPClimbLadderRepInfo ClimbLadderRepInfo; // 0xa20(0xe0)
	struct FRepGPClimbLadderMoveInfo RepClimbLadderMoveInfo; // 0xb00(0x04)
	char pad_B04[0xc]; // 0xb04(0x0c)
	struct FGPClimbLadderPointInfo ClimbLadderPointInfo; // 0xb10(0xc0)
	struct FTransform ClimbLadderCharacterTransform; // 0xbd0(0x30)
	bool bInLadderCheckBox; // 0xc00(0x01)
	bool bInTopLadderCheckBox; // 0xc01(0x01)
	bool bInBottomLadderCheckBox; // 0xc02(0x01)
	char pad_C03[0x1]; // 0xc03(0x01)
	float TotalMoveNum; // 0xc04(0x04)
	struct UAnimSequence* ClimbLadderSequenceFPP; // 0xc08(0x08)
	struct UAnimSequence* ClimbLadderSequenceTPP; // 0xc10(0x08)
	struct FGPRootMotionAnimTrackData ClimbLadderSequenceTrackData; // 0xc18(0x2c8)
	char pad_EE0[0x28]; // 0xee0(0x28)
	float ClimbLadderCheckAngle; // 0xf08(0x04)
	float ClimbLadderMontageAnimSpeedScale; // 0xf0c(0x04)
	float ClimbLadderHideFppPercent; // 0xf10(0x04)
	float ClimbladderExplicitTimeForLR; // 0xf14(0x04)
	float ClimbLadderJumpExitVelocity; // 0xf18(0x04)
	float ClimbLadderEnterAngleLimit; // 0xf1c(0x04)
	struct FVector SafeOffset; // 0xf20(0x0c)
	char pad_F2C[0x20]; // 0xf2c(0x20)
	struct FVector VaultClimbVelocity; // 0xf4c(0x0c)
	char pad_F58[0x9]; // 0xf58(0x09)
	bool VaultInKeepSpeedEnable; // 0xf61(0x01)
	bool UseSprintStateSpeed; // 0xf62(0x01)
	char pad_F63[0x1]; // 0xf63(0x01)
	int32_t KeepSpeedAfterClimbBreakPoint; // 0xf64(0x04)
	float Climb60RateLimit; // 0xf68(0x04)
	float Climb90RateLimit; // 0xf6c(0x04)
	float Climb140RateLimit; // 0xf70(0x04)
	char pad_F74[0xc]; // 0xf74(0x0c)
	float DefatltWalkSpeed; // 0xf80(0x04)
	char pad_F84[0x9]; // 0xf84(0x09)
	bool VaultEndKeepSpeedEnable; // 0xf8d(0x01)
	char pad_F8E[0xe]; // 0xf8e(0x0e)
	bool EnableIgnoreCharacter; // 0xf9c(0x01)
	bool EnableStartVaultAndClimbCollisionCheck_Sol; // 0xf9d(0x01)
	bool EnableStartVaultAndClimbCollisionCheck_MP; // 0xf9e(0x01)
	bool EnableInVaultAndClimbCollisionCheck_Sol; // 0xf9f(0x01)
	bool EnableInVaultAndClimbCollisionCheck_MP; // 0xfa0(0x01)
	bool EnableStartAndInVaultAndClimbCollisionCheck; // 0xfa1(0x01)
	char pad_FA2[0x2]; // 0xfa2(0x02)
	float StartVCCharacterNear; // 0xfa4(0x04)
	float InVCCharacterNear; // 0xfa8(0x04)
	char pad_FAC[0x4]; // 0xfac(0x04)
	struct TArray<struct AActor*> StartVaultAndClimbIgnoreActors; // 0xfb0(0x10)
	struct TArray<struct AActor*> InVaultAndClimbIgnoreActors; // 0xfc0(0x10)

	bool TryLeaveClimbLadder(enum class EClimbLadderCheckType CheckType, float CurMoveExplicitTime); // Function GPGameplay.GPVaultAndClimbComponent.TryLeaveClimbLadder // (Final|Native|Public|BlueprintCallable) // @ game+0x367b6b0
	bool TryClimbLadder(enum class EClimbLadderCheckType CheckType); // Function GPGameplay.GPVaultAndClimbComponent.TryClimbLadder // (Final|Native|Public|BlueprintCallable) // @ game+0x367b620
	void SetLadderPointTransform(struct FTransform BottomStart, struct FTransform BottomEnd, struct FTransform TopStart, struct FTransform TopEnd); // Function GPGameplay.GPVaultAndClimbComponent.SetLadderPointTransform // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x367b310
	void SetbInLadderCheckBox(bool bInCheckBox); // Function GPGameplay.GPVaultAndClimbComponent.SetbInLadderCheckBox // (Final|Native|Public|BlueprintCallable) // @ game+0x367b590
	void ServerReplicateVaultInfos(struct FGPVaultRepInfo InVaultRepInfo); // Function GPGameplay.GPVaultAndClimbComponent.ServerReplicateVaultInfos // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x367b190
	void ServerReplicateClimbLadderMoveInfo(struct FRepGPClimbLadderMoveInfo RepInfo); // Function GPGameplay.GPVaultAndClimbComponent.ServerReplicateClimbLadderMoveInfo // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x367b100
	void ServerReplicateClimbLadderInfos(struct FGPClimbLadderRepInfo RepInfo); // Function GPGameplay.GPVaultAndClimbComponent.ServerReplicateClimbLadderInfos // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x367aea0
	void ServerReplicateClimbLadderActorLocation(struct FTransform CharacterTransform); // Function GPGameplay.GPVaultAndClimbComponent.ServerReplicateClimbLadderActorLocation // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0x367ad70
	bool ServerCheckClimbLadderCollision(struct FGPClimbLadderRepInfo& RepInfo); // Function GPGameplay.GPVaultAndClimbComponent.ServerCheckClimbLadderCollision // (Final|Native|Public|HasOutParms) // @ game+0x367ac40
	bool ReachClimbLadderSequenceBreakPointTime(); // Function GPGameplay.GPVaultAndClimbComponent.ReachClimbLadderSequenceBreakPointTime // (Final|Native|Public) // @ game+0x367ac10
	void ProcessInputAction(char InputAction); // Function GPGameplay.GPVaultAndClimbComponent.ProcessInputAction // (Final|Native|Protected) // @ game+0x367ab90
	void OnRep_ClimbLadderRepInfo(); // Function GPGameplay.GPVaultAndClimbComponent.OnRep_ClimbLadderRepInfo // (Final|Native|Public) // @ game+0x367ab30
	void OnRep_ClimbLadderMoveInfo(); // Function GPGameplay.GPVaultAndClimbComponent.OnRep_ClimbLadderMoveInfo // (Final|Native|Public) // @ game+0x367ab10
	void OnRep_ClimbLadderCharacterTransform(); // Function GPGameplay.GPVaultAndClimbComponent.OnRep_ClimbLadderCharacterTransform // (Final|Native|Public) // @ game+0x367aaf0
	void OnOwnerCharacterReborn(); // Function GPGameplay.GPVaultAndClimbComponent.OnOwnerCharacterReborn // (Final|Native|Public) // @ game+0x367aad0
	void OnOwnerCharacterDied(struct AGPCharacterBase* CHARACTER, struct AController* Killer, struct UDamageType* DamageType); // Function GPGameplay.GPVaultAndClimbComponent.OnOwnerCharacterDied // (Final|Native|Public) // @ game+0x367a9d0
	bool IsVaulting(); // Function GPGameplay.GPVaultAndClimbComponent.IsVaulting // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x367a9b0
	bool IsMoveBackwardOnAccel(struct FVector Accel); // Function GPGameplay.GPVaultAndClimbComponent.IsMoveBackwardOnAccel // (Final|Native|Protected|HasDefaults|Const) // @ game+0x367a910
	bool IsInClimbLadderWithAnim(); // Function GPGameplay.GPVaultAndClimbComponent.IsInClimbLadderWithAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x367a8e0
	bool IsInClimbLadder(); // Function GPGameplay.GPVaultAndClimbComponent.IsInClimbLadder // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x367a8c0
	float GetClimbLadderSequenceBreakPointTime(struct UAnimSequence* ClimbLadderSequence); // Function GPGameplay.GPVaultAndClimbComponent.GetClimbLadderSequenceBreakPointTime // (Final|Native|Public) // @ game+0x367a820
	void FixClimbLadderTransform(enum class EClimbLadderFixTransformType FixType); // Function GPGameplay.GPVaultAndClimbComponent.FixClimbLadderTransform // (Final|Native|Public|BlueprintCallable) // @ game+0x367a7a0
	void ClientDebugPoint(struct FVector Loc); // Function GPGameplay.GPVaultAndClimbComponent.ClientDebugPoint // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x367a710
	bool CheckClimbLadderCollision(enum class EClimbLadderCheckType CheckType); // Function GPGameplay.GPVaultAndClimbComponent.CheckClimbLadderCollision // (Final|Native|Public) // @ game+0x367a680
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPVehicleBase
// Size: 0xd00 (Inherited: 0x3d8)
class AGPVehicleBase : public APawn {
public:

	char pad_3D8[0x80]; // 0x3d8(0x80)
	struct FGameplayTag VehicleTag; // 0x458(0x08)
	int32_t VehicleId; // 0x460(0x04)
	enum class EAnimVehicleType CarType; // 0x464(0x01)
	char pad_465[0x3]; // 0x465(0x03)
	float MaxVelocity; // 0x468(0x04)
	float SoundVisualizeDistance; // 0x46c(0x04)
	struct FRotator VehicleChangeRot; // 0x470(0x0c)
	char pad_47C[0x4]; // 0x47c(0x04)
	struct TMap<struct FName, struct FVehicleSeat> SeatConfig; // 0x480(0x50)
	struct TArray<struct FVehicleExtraPartInfo> VehicleExtraPartInfos; // 0x4d0(0x10)
	bool IsForceCloseAnimFor3P; // 0x4e0(0x01)
	char pad_4E1[0x7]; // 0x4e1(0x07)
	struct UGPVehicleWeaponImplement* WeaponImpl; // 0x4e8(0x08)
	char pad_4F0[0x5f8]; // 0x4f0(0x5f8)
	struct UGPTeamComponent* TeamComp; // 0xae8(0x08)
	bool IsPhysicsSimulatedForceClosed; // 0xaf0(0x01)
	char pad_AF1[0x7]; // 0xaf1(0x07)
	/*struct FMulticastInlineDelegate*/char OnCharacterGetOn[0x10]; // 0xaf8(0x10)
	/*struct FMulticastInlineDelegate*/char OnCharacterGetOff[0x10]; // 0xb08(0x10)
	/*struct FMulticastInlineDelegate*/char OnCharacterSwitchSeat[0x10]; // 0xb18(0x10)
	/*struct FMulticastInlineDelegate*/char OnVehicleExtraPartInfosFinish[0x10]; // 0xb28(0x10)
	/*struct FMulticastInlineDelegate*/char OnVehicleRefreshSkillInfo[0x10]; // 0xb38(0x10)
	struct TMap<struct FName, struct TWeakObjectPtr<struct USceneComponent>> NewSocketsMap; // 0xb48(0x50)
	struct TMap<struct FName, struct TWeakObjectPtr<struct USceneComponent>> NewSocketsMapInOtherThread; // 0xb98(0x50)
	struct TMap<struct AActor*, struct FName> SeatMapping; // 0xbe8(0x50)
	struct TArray<struct AActor*> ExtraAttachedActors; // 0xc38(0x10)
	char pad_C48[0x8]; // 0xc48(0x08)
	struct TArray<int32_t> MarkedCampIDArray; // 0xc50(0x10)
	char pad_C60[0x8]; // 0xc60(0x08)
	/*struct FMulticastInlineDelegate*/char OnServerSceneVehicleMarkInfoUpdate[0x10]; // 0xc68(0x10)
	uint64_t LastBeHitMakerUin; // 0xc78(0x08)
	char pad_C80[0x20]; // 0xc80(0x20)
	float AnimationRotationSmoothSpeed; // 0xca0(0x04)
	char pad_CA4[0x1c]; // 0xca4(0x1c)
	struct FVector WaterDetectionLocationInLocal; // 0xcc0(0x0c)
	bool bIsEnteringWater; // 0xccc(0x01)
	char pad_CCD[0xb]; // 0xccd(0x0b)
	struct TArray<struct FVehicleSkillProjectileLaunchedInfo> SkillProjectileLaunchedInfos; // 0xcd8(0x10)
	struct FVehicleLastCampTeamInfo LastCampTeamInfo; // 0xce8(0x0c)
	char pad_CF4[0xc]; // 0xcf4(0x0c)

	bool SwitchSpecificSeat(struct AActor* Actor, struct FName SeatName); // Function GPGameplay.GPVehicleBase.SwitchSpecificSeat // (Final|Native|Public|BlueprintCallable) // @ game+0x367fb70
	bool SwitchSeat(struct AActor* Actor, struct FName& SeatName); // Function GPGameplay.GPVehicleBase.SwitchSeat // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x367faa0
	void SetEnableNetSync(bool bEnable); // Function GPGameplay.GPVehicleBase.SetEnableNetSync // (Native|Public|BlueprintCallable) // @ game+0x367f870
	struct AActor* QuerySeatExist(struct FName SeatName); // Function GPGameplay.GPVehicleBase.QuerySeatExist // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x367f4c0
	struct FName QueryNearestAvailableSeatEx(struct AActor* Actor, enum class EVehicleSeatType SeatType, bool StrongType); // Function GPGameplay.GPVehicleBase.QueryNearestAvailableSeatEx // (Final|Native|Public|BlueprintCallable) // @ game+0x367f3b0
	struct FName QueryNearestAvailableSeat(struct AActor* Actor, bool DriverPerfect); // Function GPGameplay.GPVehicleBase.QueryNearestAvailableSeat // (Final|Native|Public|BlueprintCallable) // @ game+0x367f2e0
	struct AActor* QueryDriver(); // Function GPGameplay.GPVehicleBase.QueryDriver // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x367f2b0
	struct FName QueryAvailableSeatEx(struct AActor* Actor, enum class EVehicleSeatType SeatType); // Function GPGameplay.GPVehicleBase.QueryAvailableSeatEx // (Final|Native|Public|BlueprintCallable) // @ game+0x367f1e0
	struct TArray<struct AActor*> QueryAllPassengers(); // Function GPGameplay.GPVehicleBase.QueryAllPassengers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x367f160
	bool QueryActorExist(struct AActor* Actor, struct FName& SeatName); // Function GPGameplay.GPVehicleBase.QueryActorExist // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x367f090
	void OnVehicleExtraPartInfosChanged(); // Function GPGameplay.GPVehicleBase.OnVehicleExtraPartInfosChanged // (Native|Public) // @ game+0x174a740
	void OnPhysicsSimulatedForceClosedChanged(); // Function GPGameplay.GPVehicleBase.OnPhysicsSimulatedForceClosedChanged // (Final|Native|Public) // @ game+0x367ef20
	void OnMarkedCampIDArrayChanged(); // Function GPGameplay.GPVehicleBase.OnMarkedCampIDArrayChanged // (Native|Public) // @ game+0x367ef00
	void KickAllPassengers(); // Function GPGameplay.GPVehicleBase.KickAllPassengers // (Final|Native|Public|BlueprintCallable) // @ game+0x367eee0
	bool IsDefaultFPP(struct FName SeatName); // Function GPGameplay.GPVehicleBase.IsDefaultFPP // (Native|Public|BlueprintCallable) // @ game+0x367ee10
	bool InteractorSwitchSeat(struct AActor* Actor, enum class EVehicleSeatType TargetVehicleSeatType, struct FName SeatName); // Function GPGameplay.GPVehicleBase.InteractorSwitchSeat // (Final|Native|Public|BlueprintCallable) // @ game+0x367ed10
	bool InteractorGetOn(struct AActor* Actor, enum class EVehicleSeatType VehicleSeatType, struct FName& ResultSeat, bool isTeleport, bool isUseSpecificSeat, struct FName SpecificSeat); // Function GPGameplay.GPVehicleBase.InteractorGetOn // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x367eb30
	bool InteractorGetOff(struct AActor* Actor, bool bIsTeleport); // Function GPGameplay.GPVehicleBase.InteractorGetOff // (Final|Native|Public|BlueprintCallable) // @ game+0x367ea70
	struct TMap<struct AActor*, struct FName> GetSeatMapping(); // Function GPGameplay.GPVehicleBase.GetSeatMapping // (Final|Native|Public|BlueprintCallable) // @ game+0x367e940
	bool GetOn(struct AActor* Actor, struct FName SeatName, bool bIsTeleport); // Function GPGameplay.GPVehicleBase.GetOn // (Final|Native|Public|BlueprintCallable) // @ game+0x367e460
	bool GetOff(struct AActor* Actor, bool bIsTeleport, bool bIsToFloorPoint); // Function GPGameplay.GPVehicleBase.GetOff // (Final|Native|Public|BlueprintCallable) // @ game+0x367e320
	void CustomBPEvent(int32_t OpCode); // Function GPGameplay.GPVehicleBase.CustomBPEvent // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPVehicleAnimDataComponent
// Size: 0x140 (Inherited: 0x100)
class UGPVehicleAnimDataComponent : public UActorComponent {
public:

	float SteeringPlaySpeedFPP; // 0x100(0x04)
	float SteeringAnimTime; // 0x104(0x04)
	float SteeringLoopTime; // 0x108(0x04)
	float SteeringLoopStopTime; // 0x10c(0x04)
	float VehicleBodyShakeSpeedFPP; // 0x110(0x04)
	float VehicleBodyShakeSpeedTPP; // 0x114(0x04)
	bool bOpenVehicleDriverPhysic; // 0x118(0x01)
	char pad_119[0x3]; // 0x119(0x03)
	struct FDFMValkyrieVehicleExtendedAnimData ValkyrieExtendedData; // 0x11c(0x20)
	char pad_13C[0x4]; // 0x13c(0x04)

	struct UAnimationAsset* GetCharacterGetOffAnimation(struct FName& SeatName); // Function GPGameplay.GPVehicleAnimDataComponent.GetCharacterGetOffAnimation // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x367e1c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPVehicleDataComponent
// Size: 0x1f8 (Inherited: 0x100)
class UGPVehicleDataComponent : public UActorComponent {
public:

	char pad_100[0x8]; // 0x100(0x08)
	struct FGPVehicleRepInfo CurrentRepInfo; // 0x108(0x30)
	struct FVector DebugDrawStartPos; // 0x138(0x0c)
	struct FVector DebugDrawEndPos; // 0x144(0x0c)
	struct APawn* CurrentParentAttachment; // 0x150(0x08)
	struct USkeletalMeshComponent* VehicleMesh; // 0x158(0x08)
	struct UAnimMontage* VehicleInteractiveTPP; // 0x160(0x08)
	struct UAnimMontage* VehicleInteractiveFPP; // 0x168(0x08)
	enum class EAnimVehicleType CurCarType; // 0x170(0x01)
	char pad_171[0x57]; // 0x171(0x57)
	int32_t DataNotifyNumber; // 0x1c8(0x04)
	bool IsInVehicleLeanOut; // 0x1cc(0x01)
	char pad_1CD[0x7]; // 0x1cd(0x07)
	bool CutSceneTest; // 0x1d4(0x01)
	enum class EAnimVehicleSeatPos TestSeatPos; // 0x1d5(0x01)
	char pad_1D6[0x2]; // 0x1d6(0x02)
	struct APawn* TestVehicle; // 0x1d8(0x08)
	bool TestIsTPP; // 0x1e0(0x01)
	bool bPassOutAim; // 0x1e1(0x01)
	char pad_1E2[0x6]; // 0x1e2(0x06)
	struct UGPVehicleAnimDataComponent* VehicleAnimDataComponent; // 0x1e8(0x08)
	enum class EAnimVehicleSeatPos CurVehicleSeatPosType; // 0x1f0(0x01)
	char pad_1F1[0x7]; // 0x1f1(0x07)

	void TrySwitchSeat(struct FName SeatName); // Function GPGameplay.GPVehicleDataComponent.TrySwitchSeat // (Final|Native|Public|BlueprintCallable) // @ game+0x367fc30
	void SetParentAttachment(struct APawn* Parent); // Function GPGameplay.GPVehicleDataComponent.SetParentAttachment // (Final|Native|Public|BlueprintCallable) // @ game+0x367fa20
	void SetOnCarPassOut(bool bPassOut); // Function GPGameplay.GPVehicleDataComponent.SetOnCarPassOut // (Final|Native|Public|BlueprintCallable) // @ game+0x367f990
	void SetInVehicleLeanOut(bool isLeanOut); // Function GPGameplay.GPVehicleDataComponent.SetInVehicleLeanOut // (Final|Native|Public) // @ game+0x367f900
	void ServerTrySwitchSeat(struct FName SeatName); // Function GPGameplay.GPVehicleDataComponent.ServerTrySwitchSeat // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x360c630
	void ServerSetWeaponSeatInfo(struct FName SeatName, struct FRotator Rotator, int32_t WeaponIdx); // Function GPGameplay.GPVehicleDataComponent.ServerSetWeaponSeatInfo // (Net|Native|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0x367f710
	void ServerReplicateVehicleLeanOut(bool bLeanOut); // Function GPGameplay.GPVehicleDataComponent.ServerReplicateVehicleLeanOut // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x367f650
	void ServerGetOnCarWithSpecificSeat(struct APawn* Vehicle, struct FName SeatName, bool bTeleportGetOnOff); // Function GPGameplay.GPVehicleDataComponent.ServerGetOnCarWithSpecificSeat // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x367f550
	void OnVehiclePlayerViewToServer(struct FRotator PlayViewRotation); // Function GPGameplay.GPVehicleDataComponent.OnVehiclePlayerViewToServer // (Net|Native|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0x367efc0
	void OnRep_OnVehicleDebugShow(); // Function GPGameplay.GPVehicleDataComponent.OnRep_OnVehicleDebugShow // (Final|Native|Protected) // @ game+0x367efa0
	void OnRep_OnVehicleChange(); // Function GPGameplay.GPVehicleDataComponent.OnRep_OnVehicleChange // (Final|Native|Protected) // @ game+0x367ef80
	void OnRep_OnParentAttachmentChange(); // Function GPGameplay.GPVehicleDataComponent.OnRep_OnParentAttachmentChange // (Final|Native|Protected) // @ game+0x367ef60
	void OnRep_DataNotifyNumber(); // Function GPGameplay.GPVehicleDataComponent.OnRep_DataNotifyNumber // (Final|Native|Private) // @ game+0x367ef40
	bool IsOnVehicleWeaponSeat(); // Function GPGameplay.GPVehicleDataComponent.IsOnVehicleWeaponSeat // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x367eeb0
	struct USkeletalMeshComponent* GetVehicleMesh(); // Function GPGameplay.GPVehicleDataComponent.GetVehicleMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x367e9b0
	struct APawn* GetVehicle(); // Function GPGameplay.GPVehicleDataComponent.GetVehicle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x367e980
	struct FName GetSeat(); // Function GPGameplay.GPVehicleDataComponent.GetSeat // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x367e900
	struct APawn* GetParentAttachment(); // Function GPGameplay.GPVehicleDataComponent.GetParentAttachment // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x367e8d0
	void GetOnTest(struct APawn* Vehicle, struct FName SeatName); // Function GPGameplay.GPVehicleDataComponent.GetOnTest // (Final|Native|Public|BlueprintCallable) // @ game+0x367e810
	void GetOnCarWithSpecificSeat(struct APawn* Vehicle, struct FName SeatName, bool bTeleportGetOnOff); // Function GPGameplay.GPVehicleDataComponent.GetOnCarWithSpecificSeat // (Final|Native|Public|BlueprintCallable) // @ game+0x367e700
	void GetOn(struct APawn* Vehicle, struct FName SeatName, bool isTeleport, enum class EAnimVehicleSeatType SeatAnimType, bool bCanRot); // Function GPGameplay.GPVehicleDataComponent.GetOn // (Final|Native|Public|BlueprintCallable) // @ game+0x367e560
	struct APawn* GetOffVehicle(); // Function GPGameplay.GPVehicleDataComponent.GetOffVehicle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x367e430
	void GetOffTest(); // Function GPGameplay.GPVehicleDataComponent.GetOffTest // (Final|Native|Public|BlueprintCallable) // @ game+0x88f4d0
	struct FName GetLastSeatName(); // Function GPGameplay.GPVehicleDataComponent.GetLastSeatName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x367e2e0
	struct FName GetLastSeat(); // Function GPGameplay.GPVehicleDataComponent.GetLastSeat // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x367e2a0
	struct APawn* GetDieOnVehicle(); // Function GPGameplay.GPVehicleDataComponent.GetDieOnVehicle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x367e270
	bool GetbSittingInVehicle(); // Function GPGameplay.GPVehicleDataComponent.GetbSittingInVehicle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x367ea40
	bool GetbIsTeleport(); // Function GPGameplay.GPVehicleDataComponent.GetbIsTeleport // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x367ea10
	bool GetbCanRatationInVehicle(); // Function GPGameplay.GPVehicleDataComponent.GetbCanRatationInVehicle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x367e9e0
	void Client2ServerUpdateLeanOutOffset(bool bIsLeanOut, struct FVector offset); // Function GPGameplay.GPVehicleDataComponent.Client2ServerUpdateLeanOutOffset // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0x367e0a0
	bool CheckCanVehicleLeanOut(bool bAfterLeanOut); // Function GPGameplay.GPVehicleDataComponent.CheckCanVehicleLeanOut // (Final|Native|Public) // @ game+0x367e010
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPVehiclePhysicsReplicationComponent
// Size: 0x190 (Inherited: 0x100)
class UGPVehiclePhysicsReplicationComponent : public UActorComponent {
public:

	char pad_100[0x90]; // 0x100(0x90)

	void BrocastPhysicsReplicatedDataToClients(uint32_t BrocastedId, struct FGPVehiclePhysicsReplicatedData ReplicatedData); // Function GPGameplay.GPVehiclePhysicsReplicationComponent.BrocastPhysicsReplicatedDataToClients // (Net|Native|Event|NetMulticast|Public) // @ game+0x3684740
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPVehicleWeaponDataAppearanceTableManager
// Size: 0x48 (Inherited: 0x38)
class UGPVehicleWeaponDataAppearanceTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPVehicleWeaponAnimInstance
// Size: 0xbb0 (Inherited: 0x280)
class UGPVehicleWeaponAnimInstance : public UAnimInstance {
public:

	struct FGPVehicleWeaponAnimInstanceProxy LocalProxy; // 0x280(0x930)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.VehicleSubWeaponRaycastInfo
// Size: 0x68 (Inherited: 0x30)
class UVehicleSubWeaponRaycastInfo : public UObject {
public:

	char pad_30[0x38]; // 0x30(0x38)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPVehicleWeaponImplement
// Size: 0x38 (Inherited: 0x30)
class UGPVehicleWeaponImplement : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPVisiableActorGroup
// Size: 0x390 (Inherited: 0x378)
class AGPVisiableActorGroup : public AActor {
public:

	bool IsGroupVisiable; // 0x378(0x01)
	char pad_379[0x7]; // 0x379(0x07)
	struct TArray<struct AActor*> ActorArray; // 0x380(0x10)

	void ServerSetActorGroupVisiable(bool Visiable); // Function GPGameplay.GPVisiableActorGroup.ServerSetActorGroupVisiable // (Final|Native|Public|BlueprintCallable) // @ game+0x3684b50
	void OnRep_IsGroupVisiable(); // Function GPGameplay.GPVisiableActorGroup.OnRep_IsGroupVisiable // (Final|Native|Protected) // @ game+0x3684a10
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPWeaponAbility3PHideMeshComponent
// Size: 0x170 (Inherited: 0x168)
class UGPWeaponAbility3PHideMeshComponent : public UGPWeaponFuncComponentBase {
public:

	bool TriggerAbilityEventInDS; // 0x168(0x01)
	bool TriggerAbilityEventInAthority; // 0x169(0x01)
	char pad_16A[0x6]; // 0x16a(0x06)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPWeaponFireModeParamsAbilityLauncher
// Size: 0x120 (Inherited: 0x118)
class UGPWeaponFireModeParamsAbilityLauncher : public UGPWeaponFireModeParamsPhysicSimulate {
public:

	bool bEnableSwitchWeaponInEndFire; // 0x118(0x01)
	char pad_119[0x7]; // 0x119(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPWeaponAbilityFireModeLauncher
// Size: 0x310 (Inherited: 0x100)
class UGPWeaponAbilityFireModeLauncher : public UGPWeaponFireModePhysicSimulate {
public:

	char pad_100[0x1e8]; // 0x100(0x1e8)
	struct UGPWeaponFireModeParamsAbilityLauncher* AbilityLauncherFireModeParams; // 0x2e8(0x08)
	char pad_2F0[0x10]; // 0x2f0(0x10)
	struct FTimerHandle SwitchWeaponNextFrameTimerHandle; // 0x300(0x08)
	bool bEnableSwitchWeaponInEndFire; // 0x308(0x01)
	bool bResetCurrentWeapon; // 0x309(0x01)
	char pad_30A[0x6]; // 0x30a(0x06)

	void TrySpawnFakeBullet(struct FWeaponFireRepInfo& RepInfo); // Function GPGameplay.GPWeaponAbilityFireModeLauncher.TrySpawnFakeBullet // (Native|Protected|HasOutParms) // @ game+0x3684be0
	void OnSwitchWeaponNextFrame(); // Function GPGameplay.GPWeaponAbilityFireModeLauncher.OnSwitchWeaponNextFrame // (Final|Native|Protected) // @ game+0x3684a30
	void OnEndfireSwitchWeaponInNextFrame(); // Function GPGameplay.GPWeaponAbilityFireModeLauncher.OnEndfireSwitchWeaponInNextFrame // (Final|Native|Protected) // @ game+0x36849d0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPWeaponAbilityFuncComponent
// Size: 0x170 (Inherited: 0x168)
class UGPWeaponAbilityFuncComponent : public UGPWeaponFuncComponentBase {
public:

	bool TriggerAbilityEventInDS; // 0x168(0x01)
	bool TriggerAbilityEventInAthority; // 0x169(0x01)
	char pad_16A[0x6]; // 0x16a(0x06)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPWeaponAnimInstance
// Size: 0x9f0 (Inherited: 0x280)
class UGPWeaponAnimInstance : public UAnimInstance {
public:

	struct FGPWeaponAnimInstanceProxy LocalProxy; // 0x280(0x770)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPWeaponAssembleSubsystem
// Size: 0x38 (Inherited: 0x38)
class UGPWeaponAssembleSubsystem : public UGameInstanceSubsystem {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPWeaponPartBipodAnimInstance
// Size: 0x2b0 (Inherited: 0x280)
class UGPWeaponPartBipodAnimInstance : public UAnimInstance {
public:

	float seqTime; // 0x280(0x04)
	char pad_284[0x4]; // 0x284(0x04)
	struct UAnimSequenceBase* DeployInSeq; // 0x288(0x08)
	struct UAnimSequenceBase* DeployoOutSeq; // 0x290(0x08)
	struct UAnimSequenceBase* CurSeq; // 0x298(0x08)
	char pad_2A0[0x10]; // 0x2a0(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPWeaponPartBulletHideAnimInstance
// Size: 0xa50 (Inherited: 0x280)
class UGPWeaponPartBulletHideAnimInstance : public UAnimInstance {
public:

	struct FGPWeaponPartBulletHideAnimInstanceProxy LocalProxy; // 0x280(0x7d0)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPWeaponPartRangeScopeAnimInstance
// Size: 0x2a0 (Inherited: 0x280)
class UGPWeaponPartRangeScopeAnimInstance : public UAnimInstance {
public:

	float seqTime; // 0x280(0x04)
	char pad_284[0x4]; // 0x284(0x04)
	struct UAnimSequenceBase* DeploySeq; // 0x288(0x08)
	char pad_290[0x10]; // 0x290(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPWeaponSkillComponent
// Size: 0x180 (Inherited: 0x168)
class UGPWeaponSkillComponent : public UGPWeaponFuncComponentBase {
public:

	struct AGPCharacterBase* GPCharacter; // 0x168(0x08)
	struct AWeaponBase* WeaponBase; // 0x170(0x08)
	bool isAttaching; // 0x178(0x01)
	char pad_179[0x7]; // 0x179(0x07)

	bool GetIsAttaching(); // Function GPGameplay.GPWeaponSkillComponent.GetIsAttaching // (Final|Native|Protected) // @ game+0x3684920
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPWeaponTransparentMagAnimIns
// Size: 0x2b0 (Inherited: 0x280)
class UGPWeaponTransparentMagAnimIns : public UAnimInstance {
public:

	struct TWeakObjectPtr<struct AWeaponBase> WeaponOwner; // 0x280(0x08)
	struct TWeakObjectPtr<struct UWeaponAdapterTransparentMagazine> TransparentMagazine; // 0x288(0x08)
	int32_t CurAmmoNum; // 0x290(0x04)
	int32_t CurAmmoMax; // 0x294(0x04)
	struct UAnimSequence* AmmoSequen; // 0x298(0x08)
	float AmmoPrcent; // 0x2a0(0x04)
	char pad_2A4[0xc]; // 0x2a4(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPWorldSettings
// Size: 0x728 (Inherited: 0x590)
class AGPWorldSettings : public AGPWorldSettingsBase {
public:

	struct FSoftClassPath ReconnectionSystemClassName; // 0x590(0x18)
	struct UClass* ReconnectionSystemClass; // 0x5a8(0x08)
	struct FSoftClassPath ReconnectionSystemConfigClassName; // 0x5b0(0x18)
	struct UClass* ReconnectionSystemConfigClass; // 0x5c8(0x08)
	bool bEnableLooting; // 0x5d0(0x01)
	char pad_5D1[0x7]; // 0x5d1(0x07)
	struct UClass* NavmeshFloodFillPointActorClass; // 0x5d8(0x08)
	int32_t DefaultQuestId; // 0x5e0(0x04)
	struct FWeaponWorldSetting WeaponWorldSetting; // 0x5e4(0x18)
	float DefaultNetCullDistanceSquared; // 0x5fc(0x04)
	bool bContainsSubWorld; // 0x600(0x01)
	char pad_601[0x7]; // 0x601(0x07)
	/*struct TMap<struct FName, struct TSoftClassPtr<UObject>>*/char SubWorldGameModes[0x50]; // 0x608(0x50)
	struct TMap<struct FName, int32_t> SubWorldMapTypes; // 0x658(0x50)
	struct TMap<struct FName, struct UClass*> SubWorldLSConfig; // 0x6a8(0x50)
	bool EnableSeamlessTravel; // 0x6f8(0x01)
	bool DSDefaultRecordReplayWholeGame; // 0x6f9(0x01)
	bool DSDefaultRecordMemoryReplayForKillcam; // 0x6fa(0x01)
	enum class EGameRuleType GameRule_Standalone; // 0x6fb(0x01)
	enum class EGameRuleType GameRule_DS; // 0x6fc(0x01)
	char pad_6FD[0x3]; // 0x6fd(0x03)
	struct UClass* GameRuleConfigClass; // 0x700(0x08)
	bool bEnableMotionGraph; // 0x708(0x01)
	char pad_709[0x7]; // 0x709(0x07)
	struct UReconnectionSystemConfig* ReconnectionSystemConfigOverride; // 0x710(0x08)
	struct UReconnectionSystemConfig* ReconnectionSystemConfig; // 0x718(0x08)
	char pad_720[0x8]; // 0x720(0x08)

	void ProcessLoadLevelPercentage(int32_t Percentage); // Function GPGameplay.GPWorldSettings.ProcessLoadLevelPercentage // (Final|Native|Protected) // @ game+0x3684ad0
	struct AGPWorldSettings* STATIC_GetWorldSettings(struct UObject* WorldContextObject); // Function GPGameplay.GPWorldSettings.GetWorldSettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3684950
	struct FGPGameRuleSetting STATIC_GetGameRuleSetting(struct UObject* WorldContextObject, enum class EGameRuleType RuleType); // Function GPGameplay.GPWorldSettings.GetGameRuleSetting // (Final|Native|Static|Public) // @ game+0x3684830
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.HitActionListenerInterface
// Size: 0x30 (Inherited: 0x30)
class UHitActionListenerInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.HitEffectConfig
// Size: 0x98 (Inherited: 0x40)
class UHitEffectConfig : public UDeveloperSettings {
public:

	struct FName TargetColorParameter; // 0x40(0x08)
	struct FLinearColor HitEffectColor_Green; // 0x48(0x10)
	struct FLinearColor HitEffectColor_Pink; // 0x58(0x10)
	struct FLinearColor HitEffectColor_Blue; // 0x68(0x10)
	struct FLinearColor HitEffectColor_Yellow; // 0x78(0x10)
	struct FLinearColor HitEffectColor_Red; // 0x88(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.IKEndEffectorTarget
// Size: 0x388 (Inherited: 0x378)
class AIKEndEffectorTarget : public AActor {
public:

	struct FName LeftIKSource; // 0x378(0x08)
	struct FName RightIKSource; // 0x380(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.InteractorComponentBase
// Size: 0x100 (Inherited: 0x100)
class UInteractorComponentBase : public UActorComponent {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.InteractorRepairInterface
// Size: 0x30 (Inherited: 0x30)
class UInteractorRepairInterface : public UInterface {
public:


	void SetRepairSpeed(float InRepairSpeed); // Function GPGameplay.InteractorRepairInterface.SetRepairSpeed // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xaa3040
	void SetLastRepairTime(float InLastRepairTime); // Function GPGameplay.InteractorRepairInterface.SetLastRepairTime // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3689af0
	void ServerStartRepair(); // Function GPGameplay.InteractorRepairInterface.ServerStartRepair // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x174af80
	void ServerRepairInterrupt(); // Function GPGameplay.InteractorRepairInterface.ServerRepairInterrupt // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xaa2a20
	void ServerRepairEnd(); // Function GPGameplay.InteractorRepairInterface.ServerRepairEnd // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3689ad0
	void RepairingHealth(float InHealth); // Function GPGameplay.InteractorRepairInterface.RepairingHealth // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3689840
	bool IsNeedRepair(); // Function GPGameplay.InteractorRepairInterface.IsNeedRepair // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1755340
	float GetRepairSpeed(float InRepairSpeed); // Function GPGameplay.InteractorRepairInterface.GetRepairSpeed // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3689200
	float GetRepairDuration(); // Function GPGameplay.InteractorRepairInterface.GetRepairDuration // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x174ecb0
	float GetLastRepairTime(); // Function GPGameplay.InteractorRepairInterface.GetLastRepairTime // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x365ad90
	float GetCurrentNeedRepairHealth(); // Function GPGameplay.InteractorRepairInterface.GetCurrentNeedRepairHealth // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3688ff0
	void GetAllRepairRecord(struct TMap<uint64_t, float>& InRepairRecordMap); // Function GPGameplay.InteractorRepairInterface.GetAllRepairRecord // (Native|Public|HasOutParms) // @ game+0x3688c30
	void ClientStartRepair(); // Function GPGameplay.InteractorRepairInterface.ClientStartRepair // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x174a9c0
	void ClientRepairInterrupt(); // Function GPGameplay.InteractorRepairInterface.ClientRepairInterrupt // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xaa2b00
	void ClientRepairEnd(); // Function GPGameplay.InteractorRepairInterface.ClientRepairEnd // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x12a7850
	void AddRepairRecord(uint64_t PlayerUin, float InRepairTime); // Function GPGameplay.InteractorRepairInterface.AddRepairRecord // (Native|Public) // @ game+0x36889f0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.InventoryBase
// Size: 0x378 (Inherited: 0x378)
class AInventoryBase : public AActor {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.RangeScopeInterface
// Size: 0x30 (Inherited: 0x30)
class URangeScopeInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ItemInfoBaseProvider
// Size: 0x38 (Inherited: 0x30)
class UItemInfoBaseProvider : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterControllerInerface
// Size: 0x30 (Inherited: 0x30)
class UWeaponAdapterControllerInerface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.LaserInterface
// Size: 0x30 (Inherited: 0x30)
class ULaserInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.LauncherDataComponentEffect
// Size: 0x618 (Inherited: 0x5f0)
class ULauncherDataComponentEffect : public UGPWeaponDataComponentBase {
public:

	struct TArray<struct FName> PreLoadFXNameList; // 0x5f0(0x10)
	char pad_600[0x8]; // 0x600(0x08)
	struct UMaterialInstanceDynamic* DynamicMaterialBullet; // 0x608(0x08)
	char pad_610[0x8]; // 0x610(0x08)

	void OnC301LauncherFire(int32_t LastBulletCnt); // Function GPGameplay.LauncherDataComponentEffect.OnC301LauncherFire // (Final|Native|Public) // @ game+0x36895e0
	void InitMaterialInstance(); // Function GPGameplay.LauncherDataComponentEffect.InitMaterialInstance // (Final|Native|Public) // @ game+0x3689350
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.MaterialSequencer
// Size: 0x70 (Inherited: 0x30)
class UMaterialSequencer : public UObject {
public:

	float Duration; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct TArray<struct FMaterialSequenceParams> Params; // 0x38(0x10)
	struct TArray<struct FMaterialSequenceNotify> Notifies; // 0x48(0x10)
	struct TArray<struct FMaterialDataCurve> DataCurves; // 0x58(0x10)
	bool bLoop; // 0x68(0x01)
	bool PlayRate; // 0x69(0x01)
	char pad_6A[0x6]; // 0x6a(0x06)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.MaterialSequencerPlayer
// Size: 0xc0 (Inherited: 0x30)
class UMaterialSequencerPlayer : public UObject {
public:

	struct UMaterialSequencer* Sequencer; // 0x30(0x08)
	struct UMaterialInterface* BindMaterial; // 0x38(0x08)
	struct TArray<struct UMaterialInterface*> BindMaterials; // 0x40(0x10)
	struct TArray<struct UGPMaterialProxy*> BindMateialProxys; // 0x50(0x10)
	float CurFrameTime; // 0x60(0x04)
	float EvalTime; // 0x64(0x04)
	enum class EMaterialSequencerPlayerPlayStatus PlayStatus; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
	/*struct FMulticastInlineDelegate*/char OnFinish[0x10]; // 0x70(0x10)
	/*struct FMulticastInlineDelegate*/char OnNotifyName[0x10]; // 0x80(0x10)
	char pad_90[0x30]; // 0x90(0x30)

	void Update(float Time); // Function GPGameplay.MaterialSequencerPlayer.Update // (Final|Native|Public) // @ game+0x3689b90
	void Stop(); // Function GPGameplay.MaterialSequencerPlayer.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x3689b70
	void Play(struct UMaterialSequencer* InBindSequence); // Function GPGameplay.MaterialSequencerPlayer.Play // (Final|Native|Public|BlueprintCallable) // @ game+0x36897c0
	bool IsPlaying(); // Function GPGameplay.MaterialSequencerPlayer.IsPlaying // (Final|Native|Public) // @ game+0x36895b0
	void InitWithMultiMaterials(struct TArray<struct UMaterialInterface*> InBindMaterials); // Function GPGameplay.MaterialSequencerPlayer.InitWithMultiMaterials // (Final|Native|Public|BlueprintCallable) // @ game+0x3689490
	void InitWithMultiMaterialProxys(struct TArray<struct UGPMaterialProxy*> InBindMaterials); // Function GPGameplay.MaterialSequencerPlayer.InitWithMultiMaterialProxys // (Final|Native|Public|BlueprintCallable) // @ game+0x3689370
	void Init(struct UMaterialSequencer* InBindSequence, struct UMaterialInterface* InBindMaterial); // Function GPGameplay.MaterialSequencerPlayer.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x3689290
	float GetDataFloat(struct FName ParamName); // Function GPGameplay.MaterialSequencerPlayer.GetDataFloat // (Final|Native|Public) // @ game+0x3689020
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ModularApperanceBaseProvider
// Size: 0x30 (Inherited: 0x30)
class UModularApperanceBaseProvider : public UObject {
public:


	struct FPartsMergeableRow GetMergeableRow(uint64_t ItemID, uint64_t AppearanceId); // Function GPGameplay.ModularApperanceBaseProvider.GetMergeableRow // (Native|Public) // @ game+0x36890c0
	struct FPartsStyleAppearanceRow GetAppearanceData(uint64_t ItemID, uint64_t AppearanceId); // Function GPGameplay.ModularApperanceBaseProvider.GetAppearanceData // (Native|Public) // @ game+0x3688d40
	bool DoesPackageExist(struct UModularWeaponDesc* Desc, struct FString& OutErrorInfo, enum class EWeaponPartMeshType PartMesh); // Function GPGameplay.ModularApperanceBaseProvider.DoesPackageExist // (Native|Public|HasOutParms) // @ game+0x3688ac0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ModularWeaponAssetData
// Size: 0x30 (Inherited: 0x30)
class UModularWeaponAssetData : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ModularWeaponCompositeMeshManager
// Size: 0x3d0 (Inherited: 0x38)
class UModularWeaponCompositeMeshManager : public UWorldSubsystem {
public:

	char pad_38[0x8]; // 0x38(0x08)
	struct UItemInfoBaseProvider* ItemInfoBaseProvider; // 0x40(0x08)
	struct UModularApperanceBaseProvider* ModularApperanceBaseProvider; // 0x48(0x08)
	int32_t MergeTargetTextureWidth; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
	struct TArray<struct UModularWeaponMergingTask*> RequestModularWeaponMeshMergingTasks; // 0x58(0x10)
	struct TArray<struct UModularWeaponBuildingTask*> RequestModularWeaponBuildingTasks; // 0x68(0x10)
	struct TArray<struct UModularWeaponPartsMerge*> ModularWeaponPartsMergeList; // 0x78(0x10)
	struct UTexture* DefaultSmallBaseColorTexture; // 0x88(0x08)
	struct UTexture* DefaultSmallMACTexture; // 0x90(0x08)
	struct UTexture* DefaultSmallNRTexture; // 0x98(0x08)
	char pad_A0[0x50]; // 0xa0(0x50)
	struct TMap<uint32_t, struct USkeletalMesh*> CompositeSkeletalMeshPool; // 0xf0(0x50)
	struct TMap<uint32_t, struct FWeaponActorUserObjects> ModularWeaponActorPools; // 0x140(0x50)
	struct TMap<uint32_t, struct URuntimeMergedSkeleton*> RuntimeMergedSkeletonPool; // 0x190(0x50)
	struct TMap<uint32_t, struct FMergedCompressedTextureGroup> MergedCompressedTextureGroupPool; // 0x1e0(0x50)
	struct TMap<uint32_t, struct FMergedUnCompressTextureGroup> MergedUnCompressTextureGroupPool; // 0x230(0x50)
	struct TArray<struct FMeshMergeSectionContext> MeshMergeSectionContextPool; // 0x280(0x10)
	struct TMap<uint32_t, uint32_t> MeshMergeSectionContextPoolIndexMap; // 0x290(0x50)
	struct UMaterialInstanceDynamic* BaseColorMaterialInstance; // 0x2e0(0x08)
	struct UMaterialInstanceDynamic* MACMaterialInstance; // 0x2e8(0x08)
	struct UMaterialInstanceDynamic* NRMaterialInstance; // 0x2f0(0x08)
	struct TArray<struct FMaterialInstanceDynamicUsedInfo> BaseColorMaterialUsedInfos; // 0x2f8(0x10)
	struct TArray<struct FMaterialInstanceDynamicUsedInfo> MACMaterialUsedInfos; // 0x308(0x10)
	struct TArray<struct FMaterialInstanceDynamicUsedInfo> NRMaterialUsedInfos; // 0x318(0x10)
	/*struct TSet<struct UObject*>*/char CacheObjects[0x50]; // 0x328(0x50)
	struct TMap<struct FSoftObjectPath, struct FName> CachedRMeshSoftPathToAssetNameMap; // 0x378(0x50)
	char pad_3C8[0x8]; // 0x3c8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ModularWeaponDataComponentDynamicAppearance
// Size: 0x2c8 (Inherited: 0x158)
class UModularWeaponDataComponentDynamicAppearance : public UGPWeaponViewComponentBase {
public:

	char pad_158[0x10]; // 0x158(0x10)
	/*struct TScriptInterface<IWeaponProxyInterface>*/char WeaponProxy[0x10]; // 0x168(0x10)
	struct TMap<uint64_t, struct USkeletalMeshComponent*> DynamicPartMeshComponents; // 0x178(0x50)
	struct USkeletalMeshComponent* NormalMagazineParentSkeletalMeshComponent; // 0x1c8(0x08)
	char pad_1D0[0x8]; // 0x1d0(0x08)
	struct USkeletalMeshComponent* NormalMagazineSkeletalMeshComponent; // 0x1d8(0x08)
	struct UWeaponSkeletalMeshComponent* CLMagazineSkeletalMeshComponent; // 0x1e0(0x08)
	char pad_1E8[0x8]; // 0x1e8(0x08)
	struct TArray<uint64_t> ModularWeaponDescNodeMergingGUIDList; // 0x1f0(0x10)
	struct USkeletalMeshComponent* RootSkeletalMeshComponent; // 0x200(0x08)
	char pad_208[0x10]; // 0x208(0x10)
	struct TMap<uint64_t, struct UMaterialInterface*> CachedMaterials; // 0x218(0x50)
	struct TMap<uint64_t, struct UMaterialInterface*> CachedMaskMaterials; // 0x268(0x50)
	struct UModularWeaponDataComponentAppearance* DataAppearance; // 0x2b8(0x08)
	struct UObject* CacheAnimInstance; // 0x2c0(0x08)

	void OnLoadWeaponDynamicPartsSkeletalMeshCompleted(struct TArray<struct FSoftObjectPath> Assets, struct USkeletalMeshComponent* InMainSkeletalMeshComponent, struct UModularWeaponDesc* InModularWeaponDesc, struct TArray<uint64_t> InModularWeaponDescNodeMergingGUIDList, struct TArray<enum class EAdapterItemType> InitSrcDynamicPartTypeList, struct TArray<uint64_t> InSrcDynamicSubMeshGUIDList, struct TArray<struct FName> InSrcDynamicSubMeshAttachBoneNameList, struct TArray<uint64_t> InSrcDynamicSubMeshAttachMeshGUIDList, bool bInFirstPerson, bool bFPP); // Function GPGameplay.ModularWeaponDataComponentDynamicAppearance.OnLoadWeaponDynamicPartsSkeletalMeshCompleted // (Final|Native|Protected) // @ game+0x36919c0
	void OnAnimLoadCompleted(struct FSoftObjectPath& AssetRef); // Function GPGameplay.ModularWeaponDataComponentDynamicAppearance.OnAnimLoadCompleted // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x3691810
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ModularWeaponMeshProxy
// Size: 0x210 (Inherited: 0x30)
class UModularWeaponMeshProxy : public UObject {
public:

	char pad_30[0x10]; // 0x30(0x10)
	struct UModularWeaponSkeletalMeshComponent* MainWeaponMeshSkeletalComponent; // 0x40(0x08)
	struct USkeletalMeshComponent* DynamicSkeletalMeshRootComponent; // 0x48(0x08)
	struct TMap<uint64_t, struct USkeletalMeshComponent*> DynamicPartMeshComponents; // 0x50(0x50)
	struct TMap<uint64_t, struct UModularWeaponDynamicSkeletalMeshComponent*> MannualDynamicSkeletalMeshComponents; // 0xa0(0x50)
	struct UModularWeaponDynamicSkeletalMeshComponent* CLMagazineSkeletalMeshComponent; // 0xf0(0x08)
	char pad_F8[0x28]; // 0xf8(0x28)
	struct USkeletalMesh* CompositeMesh; // 0x120(0x08)
	struct UModularWeaponDesc* ModularWeaponDesc; // 0x128(0x08)
	char pad_130[0xb8]; // 0x130(0xb8)
	struct TArray<struct UWeaponSkinApperanceModiferBase*> SkinApperanceModifers; // 0x1e8(0x10)
	struct UModularWeaponCompositeMeshManager* CacheWeaponCompositeMeshManager; // 0x1f8(0x08)
	char pad_200[0x8]; // 0x200(0x08)
	int32_t TimerCnt; // 0x208(0x04)
	char pad_20C[0x4]; // 0x20c(0x04)

	void SetSoftDepthOffset(float SoftOffset); // Function GPGameplay.ModularWeaponMeshProxy.SetSoftDepthOffset // (Final|Native|Public) // @ game+0x369a450
	void SetForceLodEnable(); // Function GPGameplay.ModularWeaponMeshProxy.SetForceLodEnable // (Final|Native|Public) // @ game+0x369a430
	void SetForceLOD(int32_t LodCount); // Function GPGameplay.ModularWeaponMeshProxy.SetForceLOD // (Final|Native|Public) // @ game+0x369a3b0
	void ProcessDynamicParts(struct UModularWeaponDesc* ModularWeaponDesc, bool bLocalPlayer, bool bFPP); // Function GPGameplay.ModularWeaponMeshProxy.ProcessDynamicParts // (Final|Native|Public) // @ game+0x369a1a0
	void OnMergeComplete(bool InbMergeSuccess, struct UModularWeaponDesc* Desc, struct USkeletalMesh* MergeSkeletalMesh, uint32_t MeshID, bool bInFirstPerson, bool bInFPP, bool bTeam); // Function GPGameplay.ModularWeaponMeshProxy.OnMergeComplete // (Final|Native|Public) // @ game+0x3699d70
	void OnLoadWeaponDynamicPartsSkeletalMeshCompleted(struct TArray<struct FSoftObjectPath> Assets, struct USkeletalMeshComponent* InMainSkeletalMeshComponent, struct UModularWeaponDesc* InModularWeaponDesc, bool bInFirstPerson, bool bFPP); // Function GPGameplay.ModularWeaponMeshProxy.OnLoadWeaponDynamicPartsSkeletalMeshCompleted // (Final|Native|Public) // @ game+0x36994b0
	bool IsDynamicPart(enum class EAdapterItemType InAdpaterType); // Function GPGameplay.ModularWeaponMeshProxy.IsDynamicPart // (Final|Native|Public) // @ game+0x3698a50
	struct USkeletalMesh* GetFallbackMesh(); // Function GPGameplay.ModularWeaponMeshProxy.GetFallbackMesh // (Final|Native|Private) // @ game+0x36980e0
	struct USkeletalMeshComponent* GetDynamicPartMeshComponentByAdapterType(enum class EAdapterItemType InAdapterType); // Function GPGameplay.ModularWeaponMeshProxy.GetDynamicPartMeshComponentByAdapterType // (Final|Native|Public) // @ game+0x3698050
	struct USkeletalMeshComponent* GetDynamicPartMeshComponent(uint64_t Guid); // Function GPGameplay.ModularWeaponMeshProxy.GetDynamicPartMeshComponent // (Final|Native|Public) // @ game+0x3697fc0
	void BuildDynamicPartSkeletalMeshComponents(struct USkeletalMeshComponent* MainSkeletalMeshComponent, struct UModularWeaponDesc* InModularWeaponDesc, struct TArray<uint64_t>& InMergingGUIDList, struct TArray<enum class EAdapterItemType>& InDynamicPartTypeList, struct TArray<uint64_t>& InDynamicSubMeshGUIDList, struct TArray<struct FName>& InDynamicSubMeshAttachBoneNameList, struct TArray<uint64_t>& InDynamicSubMeshAttachMeshGUIDList, bool bInFirstPerson, bool bFPP); // Function GPGameplay.ModularWeaponMeshProxy.BuildDynamicPartSkeletalMeshComponents // (Final|Native|Public|HasOutParms) // @ game+0x36976b0
	void AsyncModifyModularWeapon(struct UModularWeaponDesc* InWeaponDesc, bool bLocalPlayer, bool bFPP, bool InShouldUseAttachParentBound, bool bTeam); // Function GPGameplay.ModularWeaponMeshProxy.AsyncModifyModularWeapon // (Final|Native|Public) // @ game+0x3697440
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ModularWeaponSkeletonGeneratorComponent
// Size: 0x170 (Inherited: 0x100)
class UModularWeaponSkeletonGeneratorComponent : public UActorComponent {
public:

	struct TMap<uint64_t, struct USkeletalMesh*> PartItemIDToMeshMap; // 0x100(0x50)
	struct TArray<uint64_t> PendingItemIdList; // 0x150(0x10)
	struct UModularWeaponDesc* ModularWeaponDesc; // 0x160(0x08)
	char pad_168[0x8]; // 0x168(0x08)

	void TestMergeModularWeaponRuntimeSkeleton(); // Function GPGameplay.ModularWeaponSkeletonGeneratorComponent.TestMergeModularWeaponRuntimeSkeleton // (Final|Native|Public|BlueprintCallable) // @ game+0x369a4d0
	void OnLoadWeaponPartSkeletalMeshCompleted(struct FSoftObjectPath AssetPath, uint64_t ItemID); // Function GPGameplay.ModularWeaponSkeletonGeneratorComponent.OnLoadWeaponPartSkeletalMeshCompleted // (Final|Native|Protected|HasDefaults) // @ game+0x3699870
	void LoadWeaponAllPartsSkeletalMesh(struct UModularWeaponDesc* WeaponDesc, int32_t RootIndex); // Function GPGameplay.ModularWeaponSkeletonGeneratorComponent.LoadWeaponAllPartsSkeletalMesh // (Final|Native|Protected) // @ game+0x3698ae0
	void GenerateWeaponRuntimeMergedSkeletonInternal(); // Function GPGameplay.ModularWeaponSkeletonGeneratorComponent.GenerateWeaponRuntimeMergedSkeletonInternal // (Final|Native|Public) // @ game+0x3697b40
	void GenerateWeaponRuntimeMergedSkeleton(struct UModularWeaponDesc* WeaponDesc); // Function GPGameplay.ModularWeaponSkeletonGeneratorComponent.GenerateWeaponRuntimeMergedSkeleton // (Final|Native|Public) // @ game+0x3697ac0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ModularWeaponPartsMerge
// Size: 0x230 (Inherited: 0x30)
class UModularWeaponPartsMerge : public UObject {
public:

	char pad_30[0xa0]; // 0x30(0xa0)
	struct TMap<struct FMergeSkeletalMesh_MaterialOverrideKey, struct FMergeSkeletalMesh_MaterialOverride> CacheMaterialOverrides; // 0xd0(0x50)
	char pad_120[0xe8]; // 0x120(0xe8)
	struct UModularWeaponDesc* ModularWeaponDesc; // 0x208(0x08)
	char pad_210[0x20]; // 0x210(0x20)

	void OnMeshMergerFinshed(bool bMergeSuccss, struct URuntimeSkeletalMesh* RuntimeSkeletalMesh, uint32_t MeshID); // Function GPGameplay.ModularWeaponPartsMerge.OnMeshMergerFinshed // (Final|Native|Protected) // @ game+0x369a000
	void OnLoadWeaponSkeletalMeshCompeleted(struct TArray<struct FSoftObjectPath> Assets); // Function GPGameplay.ModularWeaponPartsMerge.OnLoadWeaponSkeletalMeshCompeleted // (Final|Native|Protected) // @ game+0x36999d0
	void OnLoadWeaponAllPartsSkeletalMeshCompleted(struct TArray<struct FSoftObjectPath> Assets, struct TArray<int32_t> PartNodeIdxs); // Function GPGameplay.ModularWeaponPartsMerge.OnLoadWeaponAllPartsSkeletalMeshCompleted // (Final|Native|Protected) // @ game+0x3698ca0
	void OnAsyncMeshMergeCompleted(struct URuntimeSkeletalMesh* RuntimeSkeletalMesh, enum class EMeshMergeResultType MergeResultType, uint32_t MeshID); // Function GPGameplay.ModularWeaponPartsMerge.OnAsyncMeshMergeCompleted // (Final|Native|Protected) // @ game+0x3698ba0
	void AddMeshOverrideMaterial(struct UWeaponSkinModifier* SkinModify, int32_t MeshIdx, uint64_t ItemID, uint64_t SkinApperanceId, bool bLockAppearance, int32_t LOD, int32_t SectionIdx, struct UMaterialInterface* SrcMaterial, struct FWeaponSkinInfo& SkinInfo); // Function GPGameplay.ModularWeaponPartsMerge.AddMeshOverrideMaterial // (Final|Native|Protected|HasOutParms) // @ game+0x36970a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ModularWeaponMergingTask
// Size: 0x168 (Inherited: 0x30)
class UModularWeaponMergingTask : public UObject {
public:

	struct TMap<uint64_t, struct USkeletalMesh*> PartItemIDToMeshMap; // 0x30(0x50)
	char pad_80[0x60]; // 0x80(0x60)
	struct TArray<struct USkeletalMesh*> SrcSubMeshMergingList; // 0xe0(0x10)
	char pad_F0[0x10]; // 0xf0(0x10)
	struct TArray<struct USkeletalMesh*> SrcSubMeshAttachMeshMergingList; // 0x100(0x10)
	struct TArray<uint64_t> ModularWeaponDescNodeMergingGUIDList; // 0x110(0x10)
	struct USkeletalMesh* MergedSkeletalMesh; // 0x120(0x08)
	char pad_128[0x8]; // 0x128(0x08)
	struct UModularWeaponDesc* ModularWeaponDesc; // 0x130(0x08)
	char pad_138[0x30]; // 0x138(0x30)

	void OnLoadWeaponPartSkeletalMeshCompleted(struct FSoftObjectPath AssetPath, uint64_t ItemID); // Function GPGameplay.ModularWeaponMergingTask.OnLoadWeaponPartSkeletalMeshCompleted // (Final|Native|Protected|HasDefaults) // @ game+0x3699710
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ModularWeaponBuildingTask
// Size: 0x148 (Inherited: 0x30)
class UModularWeaponBuildingTask : public UObject {
public:

	char pad_30[0x90]; // 0x30(0x90)
	struct AActor* ModularWeaponActor; // 0xc0(0x08)
	struct UModularWeaponDesc* ModularWeaponDesc; // 0xc8(0x08)
	struct USkeletalMesh* RuntimeMergedSkeletalMesh; // 0xd0(0x08)
	char pad_D8[0x20]; // 0xd8(0x20)
	struct TMap<uint64_t, struct USkeletalMeshComponent*> DynamicPartMeshComponents; // 0xf8(0x50)

	void OnMergeComplete(bool bSuccess, struct UModularWeaponDesc* Desc, struct USkeletalMesh* MergeSkeletalMesh, uint32_t MeshID, bool bInFirstPerson, bool bInFPP, bool bInTeammate); // Function GPGameplay.ModularWeaponBuildingTask.OnMergeComplete // (Final|Native|Protected) // @ game+0x3699b60
	void OnLoadWeaponDynamicPartsSkeletalMeshCompleted(struct TArray<struct FSoftObjectPath> Assets, struct TArray<uint64_t> InModularWeaponDescNodeMergingGUIDList, struct TArray<enum class EAdapterItemType> InInitSrcDynamicPartTypeList, struct TArray<uint64_t> InSrcDynamicSubMeshGUIDList, struct TArray<struct FName> InSrcDynamicSubMeshAttachBoneNameList, struct TArray<uint64_t> InSrcDynamicSubMeshAttachMeshGUIDList, bool bInFirstPerson, bool bFPP); // Function GPGameplay.ModularWeaponBuildingTask.OnLoadWeaponDynamicPartsSkeletalMeshCompleted // (Final|Native|Protected) // @ game+0x3698ef0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ModularWeaponUtil
// Size: 0x30 (Inherited: 0x30)
class UModularWeaponUtil : public UObject {
public:


	void STATIC_WeaponSpaceSocketLocationToRelativeLocation(struct UModularWeaponDesc* InDesc, int32_t FindSocketPartNodeIndex, int32_t PartNodeIndex, struct FVector& InOutWeaponSpaceLoc, struct FRotator& InOutWeaponSpaceRotator, enum class EWeaponPartMeshType MeshType, struct FVector& OutLoc, struct FRotator& OutRotator); // Function GPGameplay.ModularWeaponUtil.WeaponSpaceSocketLocationToRelativeLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x369a4f0
	void STATIC_GetWeaponSpaceSocketLocation(struct UModularWeaponDesc* InDesc, int32_t PartNodeIndex, struct FName SocketName, enum class EWeaponPartMeshType MeshType, struct FVector& OutLoc, struct FRotator& OutRotator); // Function GPGameplay.ModularWeaponUtil.GetWeaponSpaceSocketLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x3698860
	struct FName STATIC_GetUIAssetNameByItemId(struct UObject* WorldContext, uint64_t ItemMeshId, uint64_t SkinApperanceId, enum class EWeaponPartMeshType MeshType); // Function GPGameplay.ModularWeaponUtil.GetUIAssetNameByItemId // (Final|Native|Static|Public) // @ game+0x3698720
	struct TArray<struct FPartsRuleRow> STATIC_GetPartValidInstallList(uint64_t PartItemId); // Function GPGameplay.ModularWeaponUtil.GetPartValidInstallList // (Final|Native|Static|Public) // @ game+0x3698200
	struct FItemInfoContext STATIC_GetPartsDefaultItemInfoFromDesc(uint64_t ItemID, uint64_t ItemGUID, uint64_t SocketGUID, struct UModularWeaponDesc* Desc); // Function GPGameplay.ModularWeaponUtil.GetPartsDefaultItemInfoFromDesc // (Final|Native|Static|Public) // @ game+0x3698560
	struct FItemInfoContext STATIC_GetPartsDefaultItemInfo(uint64_t ItemID, int32_t Durability, char BindType, uint64_t BindPlayerId, bool bRawBinded); // Function GPGameplay.ModularWeaponUtil.GetPartsDefaultItemInfo // (Final|Native|Static|Public) // @ game+0x3698360
	uint64_t STATIC_GetFixedMeshItemId(struct UModularWeaponDesc* InWeaponDesc, struct FGPModularWeaponPartNode& PartNode); // Function GPGameplay.ModularWeaponUtil.GetFixedMeshItemId // (Final|Native|Static|Public|HasOutParms) // @ game+0x3698110
	bool STATIC_GetBoneRelativeLocationByUIAssetName(struct FName AssetName, struct FName SocketName, struct FVector& OutRelativeLocation, struct FRotator& OutRotator); // Function GPGameplay.ModularWeaponUtil.GetBoneRelativeLocationByUIAssetName // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x3697e70
	bool STATIC_GetBoneRelativeLocationByItemId(struct UObject* WorldContext, uint64_t ItemMeshId, uint64_t SkinApperanceId, struct FName SocketName, enum class EWeaponPartMeshType MeshType, struct FVector& OutRelativeLocation, struct FRotator& OutRotator); // Function GPGameplay.ModularWeaponUtil.GetBoneRelativeLocationByItemId // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x3697c70
	bool STATIC_GetBoneRelativeLocation(struct USkeletalMesh* InSkeletalMesh, struct FName SocketName, struct FVector& OutRelativeLocation); // Function GPGameplay.ModularWeaponUtil.GetBoneRelativeLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x3697b60
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ModularWeaponWorldSubSystem
// Size: 0x60 (Inherited: 0x38)
class UModularWeaponWorldSubSystem : public UWorldSubsystem {
public:

	struct TArray<struct UGPModularWeaponDesc*> AvailableGPModularWeaponDescList; // 0x38(0x10)
	struct TArray<struct UGPModularWeaponDesc*> PendingRecycleGPModularWeaponDescList; // 0x48(0x10)
	char pad_58[0x8]; // 0x58(0x08)

	void RecycleGPModularWeaponDescNextFrame(struct UGPModularWeaponDesc* InGPModularWeaponDesc); // Function GPGameplay.ModularWeaponWorldSubSystem.RecycleGPModularWeaponDescNextFrame // (Final|Native|Public|BlueprintCallable) // @ game+0x369a330
	void RecycleGPModularWeaponDesc(struct UGPModularWeaponDesc* InGPModularWeaponDesc); // Function GPGameplay.ModularWeaponWorldSubSystem.RecycleGPModularWeaponDesc // (Final|Native|Public|BlueprintCallable) // @ game+0x369a2b0
	void PreAllocateGPModularWeaponDesc(int32_t InAllocateNum); // Function GPGameplay.ModularWeaponWorldSubSystem.PreAllocateGPModularWeaponDesc // (Final|Native|Public|BlueprintCallable) // @ game+0x369a120
	struct UGPModularWeaponDesc* AcquireGPModularWeaponDesc(bool bAutoRecycleNextFrame); // Function GPGameplay.ModularWeaponWorldSubSystem.AcquireGPModularWeaponDesc // (Final|Native|Public|BlueprintCallable) // @ game+0x3697000
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.MovementReplicationActor
// Size: 0x788 (Inherited: 0x378)
class AMovementReplicationActor : public AActor {
public:

	char pad_378[0x8]; // 0x378(0x08)
	struct FRepMovementInfo MovementInfo; // 0x380(0x200)
	struct FRepMovementInfo MovementInfoReplay; // 0x580(0x200)
	struct UDSPVS* DPVS; // 0x780(0x08)

	void OnRepMovementInfo(); // Function GPGameplay.MovementReplicationActor.OnRepMovementInfo // (Final|Native|Private) // @ game+0x369a100
	void BroadcastAILocation(struct TArray<struct FVector> Locations); // Function GPGameplay.MovementReplicationActor.BroadcastAILocation // (Net|Native|Event|NetMulticast|Public) // @ game+0x36975f0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.MultiPostProcessManager
// Size: 0xe8 (Inherited: 0x38)
class UMultiPostProcessManager : public UWorldSubsystem {
public:

	struct TMap<struct FName, struct FMultiPostProcessStruct> ProcessDataMap; // 0x38(0x50)
	struct TMap<struct FName, struct FPostProcessEffectStruct> ProcessEffectMap; // 0x88(0x50)
	char pad_D8[0x4]; // 0xd8(0x04)
	int32_t MaxEffectNum; // 0xdc(0x04)
	char pad_E0[0x8]; // 0xe0(0x08)

	struct UMultiPostProcessManager* STATIC_Get(struct UObject* WorldContext); // Function GPGameplay.MultiPostProcessManager.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36a2c00
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.MultiWeaponManagerInterface
// Size: 0x30 (Inherited: 0x30)
class UMultiWeaponManagerInterface : public UInterface {
public:


	void RemoveWeaponManagerBySlot(char WeaponSlot); // Function GPGameplay.MultiWeaponManagerInterface.RemoveWeaponManagerBySlot // (Native|Public) // @ game+0x36a2f00
	void GetWeaponManagerBySlot(char WeaponSlot); // Function GPGameplay.MultiWeaponManagerInterface.GetWeaponManagerBySlot // (Native|Public) // @ game+0x36a2e40
	void GetOrCreateWeaponManagerBySlot(char WeaponSlot); // Function GPGameplay.MultiWeaponManagerInterface.GetOrCreateWeaponManagerBySlot // (Native|Public) // @ game+0x36a2da0
	void GetAllWeaponManagers(); // Function GPGameplay.MultiWeaponManagerInterface.GetAllWeaponManagers // (Native|Public) // @ game+0x36a2cc0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ObjectPoolProxy
// Size: 0xd8 (Inherited: 0x38)
class UObjectPoolProxy : public UWorldSubsystem {
public:

	struct TMap<uint32_t, struct FObjectPoolProxyData> ObjectPoolProxyMap; // 0x38(0x50)
	struct TMap<struct UClass*, int32_t> MaxUsingObjectMap; // 0x88(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.PerkBitArray
// Size: 0x50 (Inherited: 0x30)
class UPerkBitArray : public UObject {
public:

	struct TArray<uint32_t> BitArray; // 0x30(0x10)
	struct TArray<char> LookupTable; // 0x40(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.PerkConfig
// Size: 0x50 (Inherited: 0x38)
class UPerkConfig : public UDataAsset {
public:

	float LowHealthThreshold; // 0x38(0x04)
	float AimingAdverseResistanceScale; // 0x3c(0x04)
	float CrouchOrSilentWalkSpeedUpScale; // 0x40(0x04)
	float ExSkillCoolDownReduceScale; // 0x44(0x04)
	float ArmdedForceItem1SkillCoolDownReduceScale; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.PlayerParachuteActor
// Size: 0x3a8 (Inherited: 0x378)
class APlayerParachuteActor : public AActor {
public:

	struct UGPSkeletalMeshComponent* SkeletalMeshComponent; // 0x378(0x08)
	struct UGPSkeletalMeshComponent* SkeletalMeshComponentFPP; // 0x380(0x08)
	struct UGPParachuteComponent* ParachuteComponent; // 0x388(0x08)
	struct AGPCharacter* CharacterOwner; // 0x390(0x08)
	char pad_398[0x10]; // 0x398(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.PlaySequenceAnimListCallbackProxy
// Size: 0x50 (Inherited: 0x30)
class UPlaySequenceAnimListCallbackProxy : public UObject {
public:

	/*struct FMulticastInlineDelegate*/char OnCompleted[0x10]; // 0x30(0x10)
	char pad_40[0x10]; // 0x40(0x10)

	void OnSequenceAnimListPlayEnded(bool bInterrupted); // Function GPGameplay.PlaySequenceAnimListCallbackProxy.OnSequenceAnimListPlayEnded // (Final|Native|Protected) // @ game+0x36a7040
	struct UPlaySequenceAnimListCallbackProxy* STATIC_CreateProxyObjectForPlaySequenceAnimList(struct UGPAnimProxyComponent* AnimProxyComponent, struct FSequenceAnimListParam AnimListParam); // Function GPGameplay.PlaySequenceAnimListCallbackProxy.CreateProxyObjectForPlaySequenceAnimList // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36a6910
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ProjectileReplicateComponent
// Size: 0x208 (Inherited: 0x1c8)
class UProjectileReplicateComponent : public UGPProjectileReplicateComponent {
public:

	struct TArray<struct FRepProjectileInfo> ProjectileInfos; // 0x1c8(0x10)
	struct TArray<struct FRepWeaponBulletBaseInitParam> BulletBaseInitParams; // 0x1d8(0x10)
	struct TArray<struct FRepWeaponBulletProjectileInitParam> BulletProjectileInitParams; // 0x1e8(0x10)
	struct TArray<struct FRepWeaponBulletPhysicsSimulateInitParam> BulletPhysicsSimulateInitParams; // 0x1f8(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.RangeScopeSceneCaptureComponent
// Size: 0x188 (Inherited: 0x100)
class URangeScopeSceneCaptureComponent : public UActorComponent {
public:

	struct FName ScopeCaptureAttachSocket; // 0x100(0x08)
	struct ASceneCapture2D* ScopeCapture2D; // 0x108(0x08)
	struct USceneCaptureComponent2D* SceneCaptureComponent2D; // 0x110(0x08)
	struct AGPCharacterBase* CharacterOwner; // 0x118(0x08)
	struct AGPPlayerCameraManager* GPPlayerCameraManager; // 0x120(0x08)
	struct UMaterialParameterCollectionInstance* ParamCollec; // 0x128(0x08)
	struct UMaterialParameterCollectionInstance* MC_EdgeLightParam; // 0x130(0x08)
	char pad_138[0x50]; // 0x138(0x50)

	void OnScopeCaptureLoaded(struct FSoftObjectPath& ScopeCaptureSP); // Function GPGameplay.RangeScopeSceneCaptureComponent.OnScopeCaptureLoaded // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x36a6f60
	void DrawCaptureArea(struct AHUD* HUD, struct UCanvas* Canvas); // Function GPGameplay.RangeScopeSceneCaptureComponent.DrawCaptureArea // (Final|Native|Protected|Const) // @ game+0x36a6ae0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ReconnectionSystemConfig
// Size: 0x50 (Inherited: 0x30)
class UReconnectionSystemConfig : public UObject {
public:

	struct FSoftClassPath ReconnectSystemClass; // 0x30(0x18)
	bool RepeatCount; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	char bIsOverriden : 1; // 0x4c(0x01)
	char pad_4C_1 : 7; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ReplayControlChannel
// Size: 0x90 (Inherited: 0x90)
class UReplayControlChannel : public UControlChannel {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPDSSceneExporterInterface
// Size: 0x30 (Inherited: 0x30)
class UGPDSSceneExporterInterface : public UInterface {
public:


	void OnStaticSceneExport(struct TMap<struct FString, struct FString>& MetaData); // Function GPGameplay.GPDSSceneExporterInterface.OnStaticSceneExport // (Native|Public|HasOutParms) // @ game+0x36a70d0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DFMScreenEffectInterface
// Size: 0x30 (Inherited: 0x30)
class UDFMScreenEffectInterface : public UInterface {
public:


	void SetupSourceActor(struct AActor* SourceActor); // Function GPGameplay.DFMScreenEffectInterface.SetupSourceActor // (Native|Event|Public|BlueprintEvent) // @ game+0x36ad760
	void OnUpdateState(struct FName EffectName); // Function GPGameplay.DFMScreenEffectInterface.OnUpdateState // (Native|Event|Public|BlueprintEvent) // @ game+0x92e650
	void OnUpdateEffectLinearColorParam(struct FName InParamName, struct FLinearColor InValue); // Function GPGameplay.DFMScreenEffectInterface.OnUpdateEffectLinearColorParam // (Native|Event|Public|HasDefaults|BlueprintEvent) // @ game+0x36ad4e0
	void OnUpdateEffectFloatParam(struct FName InParamName, float InValue); // Function GPGameplay.DFMScreenEffectInterface.OnUpdateEffectFloatParam // (Native|Event|Public|BlueprintEvent) // @ game+0x36ad420
	void OnFadeOut(struct FName EffectName); // Function GPGameplay.DFMScreenEffectInterface.OnFadeOut // (Native|Event|Public|BlueprintEvent) // @ game+0x89f700
	void OnDeactive(struct FName EffectName); // Function GPGameplay.DFMScreenEffectInterface.OnDeactive // (Native|Event|Public|BlueprintEvent) // @ game+0x89f670
	void OnActive(struct FName EffectName); // Function GPGameplay.DFMScreenEffectInterface.OnActive // (Native|Event|Public|BlueprintEvent) // @ game+0x89f540
	bool NeedRemoveUIWhenDeactive(); // Function GPGameplay.DFMScreenEffectInterface.NeedRemoveUIWhenDeactive // (Native|Event|Public|BlueprintEvent) // @ game+0x92e3d0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ScreenEffectTableManager
// Size: 0x40 (Inherited: 0x38)
class UScreenEffectTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x8]; // 0x38(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ScreenEffectManager
// Size: 0x428 (Inherited: 0x38)
class UScreenEffectManager : public UWorldSubsystem {
public:

	char pad_38[0x1c]; // 0x38(0x1c)
	struct TWeakObjectPtr<struct UDFLensFlareComponent> LensFlareEffectComponet1; // 0x54(0x08)
	struct TWeakObjectPtr<struct UDFLensFlareComponent> LensFlareEffectComponet2; // 0x5c(0x08)
	char pad_64[0x4]; // 0x64(0x04)
	struct TArray<struct TWeakObjectPtr<struct UDFLensFlareComponent>> LensFlareComponents; // 0x68(0x10)
	struct UDataTable* ScreenEffectDataTable; // 0x78(0x08)
	struct TMap<struct FName, struct UScreenEffectControllerBase*> AllScreenEffects; // 0x80(0x50)
	struct TMap<struct FName, struct UScreenEffectControllerBase*> ActiveScreenEffects; // 0xd0(0x50)
	struct TMap<struct FName, struct UScreenEffectControllerBase*> TickableScreenEffect; // 0x120(0x50)
	struct TMap<struct FName, struct FFadeOutParams> FadeOutScreenEffectParams; // 0x170(0x50)
	struct TMap<struct FName, struct FEffectResource> CacheEffectInfo; // 0x1c0(0x50)
	char pad_210[0xa8]; // 0x210(0xa8)
	struct TMap<struct FName, struct TWeakObjectPtr<struct AActor>> SourceWaitPreloadMap; // 0x2b8(0x50)
	bool bUseDebugQualityLevel; // 0x308(0x01)
	enum class EPerfGearQualityLevel DebugQualityLevel; // 0x309(0x01)
	char pad_30A[0x6]; // 0x30a(0x06)
	struct TMap<struct FName, struct FScreenEffectEvaluateParam> AllEffectEvaluateParam; // 0x310(0x50)
	struct TMap<struct FName, struct FScreenEffectEvaluateParam> ShowEffectEvaluateParam; // 0x360(0x50)
	struct TMap<struct FName, struct FScreenEffectEvaluateParam> HideEffectEvaluateParam; // 0x3b0(0x50)
	struct TArray<struct FName> ParticleSignHidden; // 0x400(0x10)
	struct TWeakObjectPtr<struct AGPPostEffectManager> PostEffectManager; // 0x410(0x08)
	struct TWeakObjectPtr<struct UBaseUIView> SreenEffectMainView; // 0x418(0x08)
	struct TWeakObjectPtr<struct UBaseUIView> SreenEffectUnderBagMainView; // 0x420(0x08)

	void RemoveScreenEffect(struct FName EffectName); // Function GPGameplay.ScreenEffectManager.RemoveScreenEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x36ad5d0
	void OnLoadEffectInfo(struct TArray<struct FSoftObjectPath> InPath, struct FScreenEffectInfo ScreenEffectInfo, struct FName EffectName, bool bbAutoActive); // Function GPGameplay.ScreenEffectManager.OnLoadEffectInfo // (Final|Native|Public) // @ game+0x36acea0
	struct UScreenEffectControllerBase* GetScreenEffectController(struct FName EffectName); // Function GPGameplay.ScreenEffectManager.GetScreenEffectController // (Final|Native|Public|BlueprintCallable) // @ game+0x36acc90
	struct UScreenEffectManager* STATIC_Get(struct UObject* WorldContext); // Function GPGameplay.ScreenEffectManager.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36ac830
	void CheckRemoveOptimization(struct FName Effect); // Function GPGameplay.ScreenEffectManager.CheckRemoveOptimization // (Final|Native|Public) // @ game+0x36ac770
	void CheckAddOptimization(struct FName Effect); // Function GPGameplay.ScreenEffectManager.CheckAddOptimization // (Final|Native|Public) // @ game+0x36ac6f0
	void AddScreenEffect(struct FName EffectName); // Function GPGameplay.ScreenEffectManager.AddScreenEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x36ac5b0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.SeamlessReconnectSubSystem
// Size: 0x68 (Inherited: 0x38)
class USeamlessReconnectSubSystem : public UGameInstanceSubsystem {
public:

	float BrowseFailTime; // 0x38(0x04)
	float SeamlessReconnectFailTime; // 0x3c(0x04)
	char pad_40[0x28]; // 0x40(0x28)

	void StopListenNetDisconnect(); // Function GPGameplay.SeamlessReconnectSubSystem.StopListenNetDisconnect // (Final|Native|Public|BlueprintCallable) // @ game+0x36ad810
	void StartListenNetDisconnect(); // Function GPGameplay.SeamlessReconnectSubSystem.StartListenNetDisconnect // (Final|Native|Public|BlueprintCallable) // @ game+0x36ad7f0
	void SetEnableSeamlessReconnect(bool bEnable); // Function GPGameplay.SeamlessReconnectSubSystem.SetEnableSeamlessReconnect // (Final|Native|Public|BlueprintCallable) // @ game+0x36ad6d0
	void ReStartReconnect(); // Function GPGameplay.SeamlessReconnectSubSystem.ReStartReconnect // (Final|Native|Public) // @ game+0x36ad5b0
	void OnNetReconnectSuccess(bool bReconnect); // Function GPGameplay.SeamlessReconnectSubSystem.OnNetReconnectSuccess // (Final|Native|Public) // @ game+0x36ad390
	void OnNetReconnectPlayerControllerCreated(struct APlayerController* NewPC); // Function GPGameplay.SeamlessReconnectSubSystem.OnNetReconnectPlayerControllerCreated // (Final|Native|Public) // @ game+0x36ad310
	void OnNetReconnectFail(); // Function GPGameplay.SeamlessReconnectSubSystem.OnNetReconnectFail // (Final|Native|Public) // @ game+0x36ad2f0
	void OnNetDisconnectWithoutWorld(struct UWorld* World, struct UNetDriver* NetDriver); // Function GPGameplay.SeamlessReconnectSubSystem.OnNetDisconnectWithoutWorld // (Final|Native|Public) // @ game+0x36ad230
	void OnNetDisconnect(struct UWorld* World, struct UNetDriver* NetDriver, enum class ENetworkFailure FailureType); // Function GPGameplay.SeamlessReconnectSubSystem.OnNetDisconnect // (Final|Native|Public) // @ game+0x36ad130
	void NetDisconnectTest(); // Function GPGameplay.SeamlessReconnectSubSystem.NetDisconnectTest // (Final|Native|Public|BlueprintCallable) // @ game+0x36ace80
	struct USeamlessReconnectSubSystem* STATIC_Get(struct UObject* WorldContext); // Function GPGameplay.SeamlessReconnectSubSystem.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36ac8f0
	void BrowseSuccessChecker(); // Function GPGameplay.SeamlessReconnectSubSystem.BrowseSuccessChecker // (Final|Native|Public) // @ game+0x36ac6d0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.SignificanceBase
// Size: 0x178 (Inherited: 0x100)
class USignificanceBase : public UActorComponent {
public:

	char pad_100[0x69]; // 0x100(0x69)
	bool ShouldAutoEvalute; // 0x169(0x01)
	char pad_16A[0xe]; // 0x16a(0x0e)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.SignificanceUtility
// Size: 0x60 (Inherited: 0x38)
class USignificanceUtility : public UWorldSubsystem {
public:

	char pad_38[0x28]; // 0x38(0x28)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.SkillDataConfigTableMgr
// Size: 0x48 (Inherited: 0x38)
class USkillDataConfigTableMgr : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.SkillConflictConfigTableMgr
// Size: 0x48 (Inherited: 0x38)
class USkillConflictConfigTableMgr : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.SkillInterface
// Size: 0x30 (Inherited: 0x30)
class USkillInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.SkillSubsystem
// Size: 0x408 (Inherited: 0x378)
class ASkillSubsystem : public ALevelSubsystem {
public:

	struct UGPAbilityDataSystem* DataSystem; // 0x378(0x08)
	struct TArray<struct FGPAbilityEntityData> AbilityEntityDataList; // 0x380(0x10)
	struct TArray<int32_t> AbilityEntityDataFreeList; // 0x390(0x10)
	struct TArray<struct UGPAbilityEntitySystemBase*> AbilityEntitySystemMap; // 0x3a0(0x10)
	struct TWeakObjectPtr<struct UGPAbilityGameStateComponent> GameStateAbilityComponent; // 0x3b0(0x08)
	struct TMap<struct FName, uint64_t> AsyncLoadHandleMap; // 0x3b8(0x50)

	void RemoveSkillEntityData(int32_t SkillEntityIndex); // Function GPGameplay.SkillSubsystem.RemoveSkillEntityData // (Final|Native|Public) // @ game+0x36ad650
	struct FGPAbilityEntityData GetSkillEntityData(int32_t SkillEntityIndex); // Function GPGameplay.SkillSubsystem.GetSkillEntityData // (Final|Native|Public) // @ game+0x36acde0
	struct FSkillConfigData GetSkillConfigData(int32_t SkillId); // Function GPGameplay.SkillSubsystem.GetSkillConfigData // (Final|Native|Public) // @ game+0x36acd20
	struct FSkillDataRow GetRowConfigFromDataTable(int32_t SkillId); // Function GPGameplay.SkillSubsystem.GetRowConfigFromDataTable // (Final|Native|Public) // @ game+0x36acbf0
	struct FSkillDataRow GetRowConfig(int32_t SkillId); // Function GPGameplay.SkillSubsystem.GetRowConfig // (Final|Native|Public) // @ game+0x36acb50
	struct UGPAbilityGameStateComponent* GetGSComponent(); // Function GPGameplay.SkillSubsystem.GetGSComponent // (Final|Native|Public) // @ game+0x36acaf0
	struct AGPGameState* GetGameStateNoSafeHouse(); // Function GPGameplay.SkillSubsystem.GetGameStateNoSafeHouse // (Final|Native|Public) // @ game+0x36acb20
	struct FSkillConflictRow GetConflictRowConfigFromDataTable(int32_t ID); // Function GPGameplay.SkillSubsystem.GetConflictRowConfigFromDataTable // (Final|Native|Public) // @ game+0x36aca50
	struct FSkillConflictRow GetConflictRowConfig(int32_t ID); // Function GPGameplay.SkillSubsystem.GetConflictRowConfig // (Final|Native|Public) // @ game+0x36ac9b0
	void ClearEntityData(); // Function GPGameplay.SkillSubsystem.ClearEntityData // (Final|Native|Public) // @ game+0x36ac7f0
	struct FGPAbilityEntityData AddSkillEntityData(int32_t SkillEntityUniqueID); // Function GPGameplay.SkillSubsystem.AddSkillEntityData // (Final|Native|Public) // @ game+0x36ac630
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.SlotCharingTableMgr
// Size: 0x48 (Inherited: 0x38)
class USlotCharingTableMgr : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSupportLockerData
// Size: 0xc8 (Inherited: 0x30)
class UGPSupportLockerData : public UObject {
public:

	enum class ESupportType SupportType; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float AimCircleRadius; // 0x34(0x04)
	float AimCircleFarRadius; // 0x38(0x04)
	float AimLerpDistance; // 0x3c(0x04)
	float AimDistance; // 0x40(0x04)
	float AimStartDistance; // 0x44(0x04)
	float AimStartAngle; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct UCurveFloat* HeightAngleCure; // 0x50(0x08)
	bool bDebug; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	struct FName CrossHairHudName; // 0x5c(0x08)
	char pad_64[0x4]; // 0x64(0x04)
	struct UClass* LineActorClass; // 0x68(0x08)
	struct FVector LenthScale; // 0x70(0x0c)
	struct FName SocketName; // 0x7c(0x08)
	char pad_84[0x4]; // 0x84(0x04)
	struct UClass* MarkerClass; // 0x88(0x08)
	bool HideLine; // 0x90(0x01)
	char pad_91[0x3]; // 0x91(0x03)
	float AimInterval; // 0x94(0x04)
	float NormalInterval; // 0x98(0x04)
	struct FName TargetSocketName; // 0x9c(0x08)
	struct FVector TargetSocketOffset; // 0xa4(0x0c)
	float SpecialReloadTime; // 0xb0(0x04)
	int32_t SpecialReloadShootNum; // 0xb4(0x04)
	float UIAnimDelay; // 0xb8(0x04)
	float TraceOffset; // 0xbc(0x04)
	struct UClass* BulletClass; // 0xc0(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.SwitchWeaponTimeLineOwnerInterface
// Size: 0x30 (Inherited: 0x30)
class USwitchWeaponTimeLineOwnerInterface : public UInterface {
public:


	bool ServerVerifyFrameImp(struct FSwitchWeaponFrame& ClientFrame, struct FSwitchWeaponAntiCheatCode& InCheckCode); // Function GPGameplay.SwitchWeaponTimeLineOwnerInterface.ServerVerifyFrameImp // (Native|Public|HasOutParms) // @ game+0x36b1ec0
	void OnReceiveRemoteFrameInfo(); // Function GPGameplay.SwitchWeaponTimeLineOwnerInterface.OnReceiveRemoteFrameInfo // (Native|Public) // @ game+0x174aa00
	void OnAddFrame(struct FSwitchWeaponFrame& InFrame); // Function GPGameplay.SwitchWeaponTimeLineOwnerInterface.OnAddFrame // (Native|Public|HasOutParms) // @ game+0x36b1a20
	bool HasAuthority(); // Function GPGameplay.SwitchWeaponTimeLineOwnerInterface.HasAuthority // (Native|Public) // @ game+0x1755340
	bool DoVerifyFrame(struct FSwitchWeaponFrame& CurFrame, struct FSwitchWeaponFrame& NewFrame); // Function GPGameplay.SwitchWeaponTimeLineOwnerInterface.DoVerifyFrame // (Native|Public|HasOutParms) // @ game+0x36b1700
	bool DoAntiCheatCheck(struct FSwitchWeaponFrame& KeyFrame, struct FSwitchWeaponAntiCheatCode& AntiCheatCode); // Function GPGameplay.SwitchWeaponTimeLineOwnerInterface.DoAntiCheatCheck // (Native|Public|HasOutParms) // @ game+0x36b15c0
	void ClientNotifyFrameInValidImp(int32_t ClientFrameNo); // Function GPGameplay.SwitchWeaponTimeLineOwnerInterface.ClientNotifyFrameInValidImp // (Native|Public) // @ game+0x1766840
	void AddOrUpdateRemoteData(struct FSwitchWeaponFrame& InFrame); // Function GPGameplay.SwitchWeaponTimeLineOwnerInterface.AddOrUpdateRemoteData // (Native|Public|HasOutParms) // @ game+0x36b0f80
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.TeamSystem
// Size: 0x3b8 (Inherited: 0x378)
class ATeamSystem : public ALevelSubsystem {
public:

	struct UCampInfoArray* CampInfoArray; // 0x378(0x08)
	uint32_t MaxPlayerCountPerTeam; // 0x380(0x04)
	bool bForceTeamDamage; // 0x384(0x01)
	char pad_385[0xb]; // 0x385(0x0b)
	struct TArray<struct AGPPlayerState*> ServerPlayerStateArray; // 0x390(0x10)
	char pad_3A0[0x18]; // 0x3a0(0x18)

	void ServerRemoveFromTeam(struct AController* C); // Function GPGameplay.TeamSystem.ServerRemoveFromTeam // (Native|Public) // @ game+0xbcbbd0
	bool ServerAddToTeam(struct AController* C); // Function GPGameplay.TeamSystem.ServerAddToTeam // (Native|Public) // @ game+0x36b1e20
	void OnUpdateMemberInfoArray(struct AController* InPlayer); // Function GPGameplay.TeamSystem.OnUpdateMemberInfoArray // (Native|Protected) // @ game+0x36b1d90
	void OnPlayerLogin(struct AController* Controller, bool bIsPlayerFromZoneSvr); // Function GPGameplay.TeamSystem.OnPlayerLogin // (Native|Protected) // @ game+0x36b1cc0
	void OnPlayerDropMatch(struct AController* Controller, bool bShouldFullyCleanUp); // Function GPGameplay.TeamSystem.OnPlayerDropMatch // (Final|Native|Protected) // @ game+0x36b1bf0
	void OnPlayerDied(struct AController* Player); // Function GPGameplay.TeamSystem.OnPlayerDied // (Final|Native|Protected) // @ game+0x36b1b70
	void OnBotLogin(struct AController* Controller); // Function GPGameplay.TeamSystem.OnBotLogin // (Final|Native|Protected) // @ game+0x36b1af0
	bool GetTeamInfoByTeamId(int32_t TeamId, struct FTeamInfo& InTeamInfo); // Function GPGameplay.TeamSystem.GetTeamInfoByTeamId // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x36b1870
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.TextureMergeComponent
// Size: 0x2b0 (Inherited: 0x240)
class UTextureMergeComponent : public USceneComponent {
public:

	char pad_240[0x8]; // 0x240(0x08)
	/*struct FMulticastInlineDelegate*/char OnMergeTextureTaskCompleteEvent[0x10]; // 0x248(0x10)
	char pad_258[0x20]; // 0x258(0x20)
	struct UTexture2D* MergedBaseColorTexture; // 0x278(0x08)
	struct TArray<struct UTexture2D*> BaseColorSourceTextures; // 0x280(0x10)
	struct TArray<struct FVector4> TargetUVTransform; // 0x290(0x10)
	char pad_2A0[0x10]; // 0x2a0(0x10)

	bool AsyncMergeInputTextures(struct TArray<struct UTexture2D*>& InputTexArray, int32_t TargetTexureSize, struct UObject* ObjectNotify); // Function GPGameplay.TextureMergeComponent.AsyncMergeInputTextures // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x36b1460
	bool AsyncMergeInputTextureGroups(struct TArray<struct UTexture2D*>& InputBaseColorTexArray, struct TArray<struct FVector4>& InputColorTargeUVTransform, struct TArray<struct UTexture2D*>& InputMACTexArray, struct TArray<struct FVector4>& InputMACTargetUVTransform, struct TArray<struct UTexture2D*>& InputNRTextureTexArray, struct TArray<struct FVector4>& InputNRTargetUVTransform, int32_t TargetTexureSize, struct UObject* ObjectNotify); // Function GPGameplay.TextureMergeComponent.AsyncMergeInputTextureGroups // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x36b1050
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.TextureMergeManager
// Size: 0x48 (Inherited: 0x30)
class UTextureMergeManager : public UObject {
public:

	struct UMaterialInstanceDynamic* BaseColorMaterialInstance; // 0x30(0x08)
	struct UMaterialInstanceDynamic* MACMaterialInstance; // 0x38(0x08)
	struct UMaterialInstanceDynamic* NRMaterialInstance; // 0x40(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.TurningInPlace_NS
// Size: 0x58 (Inherited: 0x38)
class UTurningInPlace_NS : public UAnimNotifyState {
public:

	struct UAnimMontage* RelatedAnimMontage; // 0x38(0x08)
	struct UCurveFloat* RelatedRotationAngleCurve; // 0x40(0x08)
	struct FName SubInstanceName; // 0x48(0x08)
	float TurnAngles; // 0x50(0x04)
	float InterruptMontageBlendOutTime; // 0x54(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.EReplicationGraph
// Size: 0x310 (Inherited: 0x30)
class UEReplicationGraph : public UReplicationDriver {
public:

	struct UClass* ReplicationConnectionManagerClass; // 0x30(0x08)
	bool bEnableNetDirtySystem; // 0x38(0x01)
	bool bEnableSubobjectDirtyOptimize; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
	struct UNetDriver* NetDriver; // 0x40(0x08)
	struct UDSPVS* DPVS; // 0x48(0x08)
	struct TArray<struct UENetReplicationGraphConnection*> Connections; // 0x50(0x10)
	struct TArray<struct UENetReplicationGraphConnection*> PendingConnections; // 0x60(0x10)
	char pad_70[0x40]; // 0x70(0x40)
	struct TArray<struct UEReplicationGraphNode*> GlobalGraphNodes; // 0xb0(0x10)
	struct TArray<struct UEReplicationGraphNode*> PrepareForReplicationNodes; // 0xc0(0x10)
	char pad_D0[0x240]; // 0xd0(0x240)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ENetReplicationGraphConnection
// Size: 0x1e8 (Inherited: 0x30)
class UENetReplicationGraphConnection : public UReplicationConnectionDriver {
public:

	struct UNetConnection* NetConnection; // 0x30(0x08)
	char pad_38[0xf8]; // 0x38(0xf8)
	struct TArray<struct FLastLocationGatherInfo> LastGatherLocations; // 0x130(0x10)
	char pad_140[0x10]; // 0x140(0x10)
	struct TArray<struct UEReplicationGraphNode*> ConnectionGraphNodes; // 0x150(0x10)
	struct UEReplicationGraphNode_TearOff_ForConnection* TearOffNode; // 0x160(0x08)
	char pad_168[0x80]; // 0x168(0x80)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.UEReplicationGraphInterface
// Size: 0x30 (Inherited: 0x30)
class UUEReplicationGraphInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.VehicleReplicationSettings
// Size: 0xd8 (Inherited: 0x40)
class UVehicleReplicationSettings : public UDeveloperSettings {
public:

	float RigidBodyStateComparedTolerance; // 0x40(0x04)
	float MinPositionErrorValue; // 0x44(0x04)
	float MinZErrorValue; // 0x48(0x04)
	float MinRotationErrorValue; // 0x4c(0x04)
	float LinearDiffAdjustedCoefficient; // 0x50(0x04)
	float AngularDiffAdjustedCoefficient; // 0x54(0x04)
	float MaxAngularDiffToAdjustWithAngularVelocity; // 0x58(0x04)
	float MaxValidSampledTimeScale; // 0x5c(0x04)
	float MaxPingSeconds; // 0x60(0x04)
	float CollisionMixingTime; // 0x64(0x04)
	int32_t MaxPredictedFrameNum; // 0x68(0x04)
	float MinStepDistanceOfPredictedFrame; // 0x6c(0x04)
	float MinStepAngleOfPredictedFrame; // 0x70(0x04)
	float MinStepTimeIntervalOfPredictedFrame; // 0x74(0x04)
	float FrameDataSentInterval; // 0x78(0x04)
	float MaxSimulatedVehicleExtrapolatedTimeSeconds; // 0x7c(0x04)
	float MaxSimulatedHardSnapLinearError; // 0x80(0x04)
	float MaxSimulatedHardSnapAngularError; // 0x84(0x04)
	float LinearVelocityCoefficientInSimulated; // 0x88(0x04)
	float AngularVelocityCoefficientInSimulated; // 0x8c(0x04)
	float PositionLerpSpeedInSimulated; // 0x90(0x04)
	float AngleLerpSpeedInSimulated; // 0x94(0x04)
	float SimulatedPositionSmoothSpeed; // 0x98(0x04)
	float SimulatedAngleSmoothSpeed; // 0x9c(0x04)
	struct FVehicleSimulatedOptimizationConfig SimulatedOptimizationConfig; // 0xa0(0x10)
	float MaxServerBrocastedInterval; // 0xb0(0x04)
	float MaxServerVehicleExtrapolatedTimeSeconds; // 0xb4(0x04)
	float MaxHardSnapLinearErrorServer; // 0xb8(0x04)
	float MaxHardSnapAngularErrorServer; // 0xbc(0x04)
	float LinearVelocityCoefficientInServer; // 0xc0(0x04)
	float AngularVelocityCoefficientInServer; // 0xc4(0x04)
	float PositionLerpSpeedInServer; // 0xc8(0x04)
	float AngleLerpSpeedInServer; // 0xcc(0x04)
	float ScalingFactorToAvoidCollision; // 0xd0(0x04)
	char pad_D4[0x4]; // 0xd4(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponActorSpawnerInterface
// Size: 0x30 (Inherited: 0x30)
class UWeaponActorSpawnerInterface : public UInterface {
public:


	bool SpawnWeapon(struct FWeaponActorSpawnParam& WeaponActorSpawnParam, struct FWeaponActorSpawnerHandle& OutHandle); // Function GPGameplay.WeaponActorSpawnerInterface.SpawnWeapon // (Native|Public|HasOutParms) // @ game+0x36b48a0
	void Reset(struct UWorld* World); // Function GPGameplay.WeaponActorSpawnerInterface.Reset // (Native|Public) // @ game+0x89f540
	void Reclaim(struct UObject* obj); // Function GPGameplay.WeaponActorSpawnerInterface.Reclaim // (Native|Public) // @ game+0x92e650
	void CleanUp(); // Function GPGameplay.WeaponActorSpawnerInterface.CleanUp // (Native|Public) // @ game+0x9281d0
	void CancelSpawn(struct FWeaponActorSpawnerHandle& Handle); // Function GPGameplay.WeaponActorSpawnerInterface.CancelSpawn // (Native|Public|HasOutParms) // @ game+0x36b4810
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponActorSpawnerSystem
// Size: 0x168 (Inherited: 0x38)
class UWeaponActorSpawnerSystem : public UWorldSubsystem {
public:

	char pad_38[0x30]; // 0x38(0x30)
	struct FWeaponObjectPoolProxy WeaponObjectPoolProxy; // 0x68(0xf0)
	struct TArray<struct UClass*> CacheLoadedClasses; // 0x158(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.BurnningPotController
// Size: 0x58 (Inherited: 0x30)
class UBurnningPotController : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)
	struct TArray<struct UWeaponAdapterItemBurnningPot*> Pots; // 0x38(0x10)
	struct UWeaponDataComponentAdapter* DcAdapter; // 0x48(0x08)
	char pad_50[0x8]; // 0x50(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponScopeFor3PController
// Size: 0x48 (Inherited: 0x30)
class UWeaponScopeFor3PController : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)
	struct UWeaponAdapterScopeFor3P* Adapter; // 0x38(0x08)
	struct UWeaponDataComponentAdapter* DcAdapter; // 0x40(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAimAssistor
// Size: 0x3a8 (Inherited: 0x58)
class UWeaponAimAssistor : public UGPWeaponAimAssistorBase {
public:

	struct UWeaponDataComponentFiring* DCFiringGame; // 0x58(0x08)
	struct UWeaponFuncComponentFiring* FCFiringGame; // 0x60(0x08)
	struct UWeaponThrowableDataComponentFiring* TDCFiringGame; // 0x68(0x08)
	struct UWeaponThrowableFuncComponentFiring* TFCFiringGame; // 0x70(0x08)
	struct AGPPlayerController* GPPlayerController; // 0x78(0x08)
	struct UGPPlayerInput* PlayerInput; // 0x80(0x08)
	struct AGPPlayerCameraManager* PlayerCameraManager; // 0x88(0x08)
	struct UClientBaseSetting* AssistedAimingBaseSetting; // 0x90(0x08)
	struct AGPGameState* GPGameState; // 0x98(0x08)
	char pad_A0[0x8]; // 0xa0(0x08)
	struct FWeaponDataAimAssistor AimAssistorData; // 0xa8(0x1c0)
	char pad_268[0x30]; // 0x268(0x30)
	struct TWeakObjectPtr<struct AActor> LastTargetEnemy; // 0x298(0x08)
	struct TWeakObjectPtr<struct UPrimitiveComponent> LastTargetEnemyPrimitiveComponent; // 0x2a0(0x08)
	char pad_2A8[0x24]; // 0x2a8(0x24)
	struct TWeakObjectPtr<struct AActor> CurrTargetEnemy; // 0x2cc(0x08)
	struct TWeakObjectPtr<struct UPrimitiveComponent> CurrTargetEnemyPrimitiveComponent; // 0x2d4(0x08)
	char pad_2DC[0xcc]; // 0x2dc(0xcc)

	void OnInitAssets(struct TArray<struct FSoftObjectPath> Curves); // Function GPGameplay.WeaponAimAssistor.OnInitAssets // (Final|Native|Protected) // @ game+0x36b8f10
	bool OnCheckCharacterCanTrace(struct ACHARACTER* CheckCharacter); // Function GPGameplay.WeaponAimAssistor.OnCheckCharacterCanTrace // (Final|Native|Protected) // @ game+0x36b8e80
	struct TArray<struct FName> GetOverrideFilterBones(struct ACHARACTER* CheckCharacter, bool& bFoundOverride); // Function GPGameplay.WeaponAimAssistor.GetOverrideFilterBones // (Final|Native|Protected|HasOutParms) // @ game+0x36b8cc0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AiAnimPosTableManager
// Size: 0x40 (Inherited: 0x38)
class UAiAnimPosTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x8]; // 0x38(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAnimDataTableManager
// Size: 0x238 (Inherited: 0x38)
class UWeaponAnimDataTableManager : public UDataTableSystemManagerBase {
public:

	struct TArray<struct UDataTable*> DataTables; // 0x38(0x10)
	struct UDataTable* CharaterLeftArmDataTable; // 0x48(0x08)
	char pad_50[0x140]; // 0x50(0x140)
	struct TMap<struct FName, struct FRecordLocalAnimation> BasicAnimDataCaches; // 0x190(0x50)
	char pad_1E0[0x58]; // 0x1e0(0x58)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataAnimSummaryManager
// Size: 0x50 (Inherited: 0x38)
class UWeaponDataAnimSummaryManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x18]; // 0x38(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAnimSummaryIndexManager
// Size: 0x58 (Inherited: 0x38)
class UWeaponAnimSummaryIndexManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)
	/*struct TArray<struct TSoftObjectPtr<UAnimationAsset>>*/char AnimAssets[0x10]; // 0x48(0x10)

	bool STATIC_IsLazy(); // Function GPGameplay.WeaponAnimSummaryIndexManager.IsLazy // (Final|Native|Static|Public) // @ game+0x36bdac0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAppearanceProxy
// Size: 0x70 (Inherited: 0x30)
class UWeaponAppearanceProxy : public UObject {
public:

	uint64_t WeaponHiddenTag; // 0x30(0x08)
	struct FGPWeaponBitTag AttachBackBitTag; // 0x38(0x08)
	char pad_40[0x8]; // 0x40(0x08)
	/*struct TScriptInterface<IWeaponManagerInterface>*/char IWeaponMgr[0x10]; // 0x48(0x10)
	struct UGPCameraModeComponent* CameraModeComponent; // 0x58(0x08)
	struct UWeaponReplicateComponent* WeaponRepComponent; // 0x60(0x08)
	struct AActor* AttachActor; // 0x68(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAttributeDetailManager
// Size: 0xe8 (Inherited: 0x38)
class UWeaponAttributeDetailManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0xb0]; // 0x38(0xb0)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAttributeLimitManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponAttributeLimitManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	bool GetAttriValueByName(uint64_t RecID, struct FName DisplayName, float& OutValue); // Function GPGameplay.WeaponAttributeLimitManager.GetAttriValueByName // (Final|Native|Public|HasOutParms) // @ game+0x36c1be0
	struct UWeaponAttributeLimitManager* STATIC_BPGetInstance(); // Function GPGameplay.WeaponAttributeLimitManager.BPGetInstance // (Final|Native|Static|Public) // @ game+0x36c1b50
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAttributeDetailDisplayManager
// Size: 0x98 (Inherited: 0x38)
class UWeaponAttributeDetailDisplayManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x60]; // 0x38(0x60)

	struct TArray<struct FWeaponAttributeDetailDisplayGroupNewRow> GetGunNewDisplayAttributeDetail(uint64_t RecID); // Function GPGameplay.WeaponAttributeDetailDisplayManager.GetGunNewDisplayAttributeDetail // (Final|Native|Public) // @ game+0x36c2040
	struct TArray<struct FName> GetGunDisplayAttributeDetailIdsInternal(uint64_t RecID); // Function GPGameplay.WeaponAttributeDetailDisplayManager.GetGunDisplayAttributeDetailIdsInternal // (Final|Native|Protected) // @ game+0x36c1f60
	struct TArray<struct FName> GetGunDisplayAttributeDetailIds(uint64_t RecID); // Function GPGameplay.WeaponAttributeDetailDisplayManager.GetGunDisplayAttributeDetailIds // (Final|Native|Public) // @ game+0x36c1e80
	struct TArray<struct FWeaponAttributeDetailDisplayItemRow> GetGunDisplayAttributeDetail(uint64_t RecID); // Function GPGameplay.WeaponAttributeDetailDisplayManager.GetGunDisplayAttributeDetail // (Final|Native|Public) // @ game+0x36c1cf0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
class UWeaponBlueprintLibrary : public UGPWeaponBlueprintLibrary {
public:


	void STATIC_WeaponToString(struct AWeaponBase* WeaponBase, struct FString& OutStr); // Function GPGameplay.WeaponBlueprintLibrary.WeaponToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x36cf7c0
	void STATIC_WeaponDescToString(struct FGPWeaponDescInfo& InWeaponDesc, struct FString& OutStr); // Function GPGameplay.WeaponBlueprintLibrary.WeaponDescToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x36cf630
	bool STATIC_StringToWeaponDesc(struct FString InStr, struct FGPWeaponDescInfo& OutWeaponDesc); // Function GPGameplay.WeaponBlueprintLibrary.StringToWeaponDesc // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x36cf4b0
	void STATIC_SpawnBulletBP(struct AGPCharacter* CharacterOwner, int32_t BulletId, struct FVector StartLoc, struct FRotator StartRot); // Function GPGameplay.WeaponBlueprintLibrary.SpawnBulletBP // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x36cf360
	struct AWeaponBulletPhysicsSimulate* STATIC_SpawnBullet(struct AGPCharacter* CharacterOwner, struct AWeaponBase* WeaponOwner, uint64_t BulletId, struct FVector StartLoc, struct FRotator StartRot, uint64_t EffectId, uint64_t HitFxId, uint64_t BulletTrailEffectId); // Function GPGameplay.WeaponBlueprintLibrary.SpawnBullet // (Final|Native|Static|Public|HasDefaults) // @ game+0x36cf110
	void STATIC_SetViewCharacterWeaponMode(struct AActor* CharacterActor, enum class EGPWeaponMode WeaponMode, bool bRefresh); // Function GPGameplay.WeaponBlueprintLibrary.SetViewCharacterWeaponMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36cf010
	void STATIC_SetViewCharacterWeaponItemMode(struct AWeaponBase* Weapon, enum class EGPWeaponMode WeaponMode); // Function GPGameplay.WeaponBlueprintLibrary.SetViewCharacterWeaponItemMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36cef60
	void STATIC_SendWeaponStateEventEnum(struct AWeaponBase* Weapon, enum class EGPWeaponStateEvent EventName); // Function GPGameplay.WeaponBlueprintLibrary.SendWeaponStateEventEnum // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36ceeb0
	void STATIC_SendWeaponStateEvent(struct AWeaponBase* Weapon, struct FString EventName); // Function GPGameplay.WeaponBlueprintLibrary.SendWeaponStateEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36ced60
	void STATIC_SendWeaponEvent(struct AWeaponBase* Weapon, enum class EGPWeaponInnerEvent RepInfo); // Function GPGameplay.WeaponBlueprintLibrary.SendWeaponEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36cecb0
	bool STATIC_IsCharacterOwnerLocalFocusPlayerPawn(struct ACHARACTER* CHARACTER); // Function GPGameplay.WeaponBlueprintLibrary.IsCharacterOwnerLocalFocusPlayerPawn // (Final|Native|Static|Public) // @ game+0x36ce820
	enum class EWeaponItemType STATIC_GetWeaponType(int64_t WeaponID); // Function GPGameplay.WeaponBlueprintLibrary.GetWeaponType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36ce7a0
	enum class EGPWeaponStateType STATIC_GetWeaponState(struct AWeaponBase* Weapon); // Function GPGameplay.WeaponBlueprintLibrary.GetWeaponState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36ce720
	bool STATIC_GetSuggestBulletProjectileRotation(struct AActor* WorldContextActor, uint64_t BulletId, struct FVector StartLoc, struct FVector TargetLoc, struct FRotator& FireRotationOut, struct TArray<struct AActor*>& ActorsToIgnore, bool bIgnoreAllCollision); // Function GPGameplay.WeaponBlueprintLibrary.GetSuggestBulletProjectileRotation // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x36ce4b0
	struct TMap<char, float> STATIC_GetItemDetailValue(struct UModularWeaponDesc* WeaponDesc); // Function GPGameplay.WeaponBlueprintLibrary.GetItemDetailValue // (Final|Native|Static|Public) // @ game+0x36ce320
	struct TMap<char, float> STATIC_GetItemBaseMainAttributeValue(uint64_t WeaponID); // Function GPGameplay.WeaponBlueprintLibrary.GetItemBaseMainAttributeValue // (Final|Native|Static|Public) // @ game+0x36ce290
	struct ACHARACTER* STATIC_GetCurrentLocalFocusPlayerPawn(struct UObject* WorldContext); // Function GPGameplay.WeaponBlueprintLibrary.GetCurrentLocalFocusPlayerPawn // (Final|Native|Static|Public) // @ game+0x36ce210
	void STATIC_ClearComponentImpacts(struct USceneComponent* InComponent); // Function GPGameplay.WeaponBlueprintLibrary.ClearComponentImpacts // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36ce1a0
	void STATIC_ClearActorImpacts(struct AActor* inActor); // Function GPGameplay.WeaponBlueprintLibrary.ClearActorImpacts // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36ce130
	void STATIC_AddWeaponWithPos(struct AActor* CharacterActor, int64_t WeaponItemId, int32_t AttachPos, bool bSwitchToThisWeapon); // Function GPGameplay.WeaponBlueprintLibrary.AddWeaponWithPos // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36cde60
	void STATIC_AddWeaponByString(struct APawn* Pawn, struct FString InStr, int32_t EquipPosition, bool bAutoSwitch, struct AWeaponBase* OutWeapon, bool bChangeGuid); // Function GPGameplay.WeaponBlueprintLibrary.AddWeaponByString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36cdc70
	void STATIC_AddWeapon(struct AActor* CharacterActor, struct UClass* WeaponClass); // Function GPGameplay.WeaponBlueprintLibrary.AddWeapon // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36cdbc0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.FireArea
// Size: 0x4c0 (Inherited: 0x378)
class AFireArea : public AActor {
public:

	struct FFireAreaParam FireAreaParam; // 0x378(0x28)
	struct AGPCharacter* OwnerCharacter; // 0x3a0(0x08)
	struct UFXResourceContainerComponent* FxComponent; // 0x3a8(0x08)
	char pad_3B0[0x8]; // 0x3b0(0x08)
	struct USphereComponent* SphereComponent; // 0x3b8(0x08)
	/*struct TSet<struct AGPCharacter*>*/char FireAreaChars[0x50]; // 0x3c0(0x50)
	struct TMap<struct AGPCharacter*, struct FTimerHandle> RemoveBuffHandle; // 0x410(0x50)
	/*struct TSet<struct AGPCharacter*>*/char OverlapChars[0x50]; // 0x460(0x50)
	char pad_4B0[0x10]; // 0x4b0(0x10)

	void OnRep_FireAreaParam(); // Function GPGameplay.FireArea.OnRep_FireAreaParam // (Final|Native|Public) // @ game+0x36cec90
	void OnOverlapEnd(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function GPGameplay.FireArea.OnOverlapEnd // (Native|Public|BlueprintCallable) // @ game+0x36ceb50
	void OnOverlapBegin(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function GPGameplay.FireArea.OnOverlapBegin // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x36ce950
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponBulletPhysicsSimulateView
// Size: 0x240 (Inherited: 0x240)
class UWeaponBulletPhysicsSimulateView : public USceneComponent {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponBulletPhysicsSimulateViewMovementComponent
// Size: 0x120 (Inherited: 0x110)
class UWeaponBulletPhysicsSimulateViewMovementComponent : public UProjectileViewMovementComponent {
public:

	char pad_110[0x10]; // 0x110(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPRandomProjectileMovementComponent
// Size: 0x5c0 (Inherited: 0x5c0)
class UGPRandomProjectileMovementComponent : public UGPWeaponProjectileMovementComponent {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponBulletTrailEffect
// Size: 0x3f0 (Inherited: 0x378)
class AWeaponBulletTrailEffect : public AActor {
public:

	char pad_378[0x8]; // 0x378(0x08)
	struct UGPWeaponProjectileMovementComponent* EffectMovementComp; // 0x380(0x08)
	struct UFXResourceContainerComponent* BulletTrailPSC; // 0x388(0x08)
	char pad_390[0x8]; // 0x390(0x08)
	struct UFXResourceContainerComponent* RealBulletPSC; // 0x398(0x08)
	char pad_3A0[0x5]; // 0x3a0(0x05)
	bool bDebugShowLineTrace; // 0x3a5(0x01)
	char pad_3A6[0x2]; // 0x3a6(0x02)
	float EffectSpeed; // 0x3a8(0x04)
	float MaxTrailLength; // 0x3ac(0x04)
	float MaxLifeTime; // 0x3b0(0x04)
	float OnHitFadeOutTime; // 0x3b4(0x04)
	char pad_3B8[0x38]; // 0x3b8(0x38)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponConfigSetting
// Size: 0x88 (Inherited: 0x30)
class UWeaponConfigSetting : public UObject {
public:

	/*struct TSoftObjectPtr<UWeaponConstAsset>*/char ConstConfigPtr[0x28]; // 0x30(0x28)
	/*struct TSoftObjectPtr<UWeaponDataGraphConfig>*/char WeaponDataGraphConfig[0x28]; // 0x58(0x28)
	char pad_80[0x8]; // 0x80(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAnimConstAsset
// Size: 0x48 (Inherited: 0x38)
class UWeaponAnimConstAsset : public UDataAsset {
public:

	struct TArray<struct FWeaponAnimFilter> WeaponAnimFilter; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponConstAsset
// Size: 0xd90 (Inherited: 0x38)
class UWeaponConstAsset : public UDataAsset {
public:

	bool bEnableTraceIndependent; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	float ScopeSwitchTime; // 0x3c(0x04)
	float ScopeReflectCos; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	/*struct TSoftObjectPtr<UMaterialParameterCollection>*/char ScopeMatParamCollection[0x28]; // 0x48(0x28)
	/*struct TSoftObjectPtr<UMaterialParameterCollection>*/char MC_EdgeLightParam[0x28]; // 0x70(0x28)
	/*struct TSoftObjectPtr<UMaterialInterface>*/char WeaponBaseMaterial[0x28]; // 0x98(0x28)
	/*struct TMap<enum class EScopeLenMatState, struct TSoftObjectPtr<UMaterialInterface>>*/char RTScopeParentMaterials[0x50]; // 0xc0(0x50)
	struct TArray<struct FWeaponMaterialVariant> RTScopeMaterialVariants; // 0x110(0x10)
	/*struct TSoftObjectPtr<UMaterialInterface>*/char ScopeStencilWriteMaterial[0x28]; // 0x120(0x28)
	/*struct TSoftObjectPtr<UMaterialInterface>*/char ScopeStencilWriteMaterialTranslucent[0x28]; // 0x148(0x28)
	/*struct TSoftObjectPtr<UMaterialInterface>*/char ScopeDepthOnlyMaterial[0x28]; // 0x170(0x28)
	/*struct TSoftObjectPtr<UCurveFloat>*/char RTWeaponScaleCurve[0x28]; // 0x198(0x28)
	char ScopeMatIndex; // 0x1c0(0x01)
	bool bEnableCharacterMask; // 0x1c1(0x01)
	enum class ECrossHairBindMode ScopeCrossHairBindMode; // 0x1c2(0x01)
	char pad_1C3[0x5]; // 0x1c3(0x05)
	/*struct TSoftClassPtr<UObject>*/char ScopeCaptureClass[0x28]; // 0x1c8(0x28)
	struct TMap<enum class EScopeLenMatState, struct FName> ScopeLenMatSlotNames; // 0x1f0(0x50)
	bool bEnableCameraOffsetOptimize; // 0x240(0x01)
	char pad_241[0x7]; // 0x241(0x07)
	struct TArray<enum class EWeaponItemType> ZoomGuardBlackList; // 0x248(0x10)
	/*struct TSoftObjectPtr<UCurveFloat>*/char ZoomFovLerpFactor[0x28]; // 0x258(0x28)
	float LayoutAddtiveOffset; // 0x280(0x04)
	char pad_284[0x4]; // 0x284(0x04)
	/*struct TSoftObjectPtr<UCurveFloat>*/char DefaultLayoutCurve[0x28]; // 0x288(0x28)
	float FxScaleDefaultDistance; // 0x2b0(0x04)
	char pad_2B4[0x4]; // 0x2b4(0x04)
	/*struct TSoftObjectPtr<UCurveFloat>*/char MuzzleFlashScaleCurve[0x28]; // 0x2b8(0x28)
	/*struct TSoftObjectPtr<UCurveFloat>*/char HitEffectScaleCurve[0x28]; // 0x2e0(0x28)
	/*struct TSoftObjectPtr<UCurveFloat>*/char ProjectileEffectScaleCurve[0x28]; // 0x308(0x28)
	struct FMuzzleLightInfoConfig DefaultMuzzleLightConfig; // 0x330(0xb4)
	char pad_3E4[0x4]; // 0x3e4(0x04)
	struct TMap<int32_t, struct FMuzzleLightInfoConfig> WeatherMuzzleLightConfigs; // 0x3e8(0x50)
	bool bEnableWeaponBulletRealTrail; // 0x438(0x01)
	bool bApplyCharacterVelocityToProjectile; // 0x439(0x01)
	char pad_43A[0x6]; // 0x43a(0x06)
	/*struct TSet<struct UClass*>*/char BulletClassNotReplicate[0x50]; // 0x440(0x50)
	struct FName DefaultPickupAmmoSound; // 0x490(0x08)
	struct FName PickupAmmoAnimName; // 0x498(0x08)
	struct FText DefaultPickupAmmoTips; // 0x4a0(0x18)
	float DefaultPickupAmmoTipsDuration; // 0x4b8(0x04)
	float CallAmmoRouletteThreshold; // 0x4bc(0x04)
	float CharSphereRadiusForWeaponTrace; // 0x4c0(0x04)
	float UIDiscardTime; // 0x4c4(0x04)
	bool bEnableWeaponLoadAnim; // 0x4c8(0x01)
	char pad_4C9[0x7]; // 0x4c9(0x07)
	/*struct TSoftObjectPtr<UAnimMontage>*/char SingleReloadAnim[0x28]; // 0x4d0(0x28)
	/*struct TMap<struct TSoftClassPtr<UObject>, struct TSoftClassPtr<UObject>>*/char TppWeaponClassMap[0x50]; // 0x4f8(0x50)
	/*struct TMap<struct TSoftClassPtr<UObject>, struct TSoftClassPtr<UObject>>*/char TppWeaponBulletClassMap[0x50]; // 0x548(0x50)
	/*struct TSoftClassPtr<UObject>*/char WeaponDependentClass[0x28]; // 0x598(0x28)
	struct TMap<enum class EDFMGamePlayMode, int32_t> WeaponDiffToleranceForGameMode; // 0x5c0(0x50)
	struct FWeaponObjectDiffConfig WeaponDiffConfig; // 0x610(0x80)
	struct TMap<int32_t, struct FWeaponDiffOptions> WeaponDiffOverrideOptions; // 0x690(0x50)
	/*struct TArray<struct TSoftClassPtr<UObject>>*/char PreloadWeaponBPList[0x10]; // 0x6e0(0x10)
	struct FName StingerMissileHudName; // 0x6f0(0x08)
	float LaserCullDistance; // 0x6f8(0x04)
	float LaserTraceIntervalFor3P; // 0x6fc(0x04)
	struct TMap<float, float> LaserTraceIntervalMapFor3P; // 0x700(0x50)
	struct TMap<enum class EGPWeaponTickFrequency, float> WeaponTickFrequenciesMap; // 0x750(0x50)
	struct TArray<struct FWeaponFeatureOptions> WeaponFeatureOptions; // 0x7a0(0x10)
	/*struct TSoftObjectPtr<UPhysicsAsset>*/char StdPhysicsAsset[0x28]; // 0x7b0(0x28)
	/*struct TSoftObjectPtr<UPhysicsAsset>*/char StdPhysicsAsset_HD[0x28]; // 0x7d8(0x28)
	/*struct TSoftObjectPtr<UPhysicsAsset>*/char StdPhysicsAssetVadliate[0x28]; // 0x800(0x28)
	/*struct TSoftObjectPtr<USkeletalMesh>*/char FallbackMergeMesh[0x28]; // 0x828(0x28)
	struct FName RecBulletSocketName; // 0x850(0x08)
	struct FName BulletSocketName_2; // 0x858(0x08)
	struct FName BulletSocketName_3; // 0x860(0x08)
	struct FName BulletSocketName_4; // 0x868(0x08)
	struct FName LeafSpringName; // 0x870(0x08)
	bool bEnableFlashLight; // 0x878(0x01)
	char pad_879[0x7]; // 0x879(0x07)
	struct TArray<struct FWeaponOffsetSet> OffsetFormulaConfig; // 0x880(0x10)
	float ContinuousFiringEndDelay; // 0x890(0x04)
	float SingleFiringEndDelay; // 0x894(0x04)
	struct TMap<enum class EFiringAnimDim, struct UCurveFloat*> RTAdditiveAnimScaleCurve; // 0x898(0x50)
	bool bEnableRefPoseWhiteList; // 0x8e8(0x01)
	char pad_8E9[0x7]; // 0x8e9(0x07)
	/*struct TSet<uint64_t>*/char SupportRefPoseItems[0x50]; // 0x8f0(0x50)
	/*struct TSoftObjectPtr<UCurveFloat>*/char GunKickFovCurveFloat[0x28]; // 0x940(0x28)
	/*struct TSoftObjectPtr<UCurveFloat>*/char ViewKickFovCurveFloat[0x28]; // 0x968(0x28)
	/*struct TSoftObjectPtr<UCurveFloat>*/char GunSwayFovCurveFloat[0x28]; // 0x990(0x28)
	float FactorForDeltaRotFromPlayer; // 0x9b8(0x04)
	float AimWithFrontSightTolerantAngle; // 0x9bc(0x04)
	bool AimWithFrontSightUseLogicAsBasic; // 0x9c0(0x01)
	char pad_9C1[0x7]; // 0x9c1(0x07)
	/*struct TSet<struct FSoftClassPath>*/char SupportInstantBulletBP[0x50]; // 0x9c8(0x50)
	struct FBulletDsMakeDamageConfig BulletDsMakeDamageConfig_Mobile; // 0xa18(0x10)
	struct FBulletDsMakeDamageConfig BulletDsMakeDamageConfig_HD; // 0xa28(0x10)
	/*struct TSoftObjectPtr<UGPAudioEventAsset>*/char FireAudioForSlowVideo[0x28]; // 0xa38(0x28)
	struct TArray<int32_t> AutoSwitchEquipPositions; // 0xa60(0x10)
	struct TArray<int32_t> MainWeaponEquipPositions; // 0xa70(0x10)
	struct TArray<struct FName> BasicAnimID; // 0xa80(0x10)
	struct TArray<struct FName> Basic3cAnimID; // 0xa90(0x10)
	float ShowEffectAngleMin; // 0xaa0(0x04)
	char pad_AA4[0x4]; // 0xaa4(0x04)
	/*struct TSoftObjectPtr<UCurveFloat>*/char LaserFlareFOVScaleCurve[0x28]; // 0xaa8(0x28)
	/*struct TSoftObjectPtr<UCurveFloat>*/char LaserFlareDistanceScaleCurve[0x28]; // 0xad0(0x28)
	bool bBossUseEffect; // 0xaf8(0x01)
	char pad_AF9[0x3]; // 0xaf9(0x03)
	float BossEffectOpacity; // 0xafc(0x04)
	float BossEffectScale; // 0xb00(0x04)
	bool bPlayerUseEffect; // 0xb04(0x01)
	char pad_B05[0x3]; // 0xb05(0x03)
	float PlayerEffectOpacity; // 0xb08(0x04)
	float PlayerEffectScale; // 0xb0c(0x04)
	struct FSoftObjectPath LaserFlareMeshObjectPath; // 0xb10(0x18)
	struct FSoftObjectPath LaserFlareMaterialObjectPath; // 0xb28(0x18)
	bool bEnableDebugLine; // 0xb40(0x01)
	char pad_B41[0x7]; // 0xb41(0x07)
	struct FAntiCheatConfig_BulletSpawn ACConfig_BulletSpawn; // 0xb48(0xb0)
	struct TArray<enum class EGPWeaponStateType> VisibleStates; // 0xbf8(0x10)
	struct TArray<struct FSoftObjectPath> PreLoadAssets; // 0xc08(0x10)
	struct TArray<struct FSoftObjectPath> PreloadAssets_Client; // 0xc18(0x10)
	struct TArray<struct FSoftObjectPath> PreloadAssets_Client_Mobile; // 0xc28(0x10)
	struct TArray<struct FSoftObjectPath> PreloadAssets_Client_HD; // 0xc38(0x10)
	/*struct TSet<struct UObject*>*/char CacheObjects[0x50]; // 0xc48(0x50)
	struct UCurveFloat* CacheLaserFlareFOVScaleCurve; // 0xc98(0x08)
	struct UCurveFloat* CacheLaserFlareDistanceScaleCurve; // 0xca0(0x08)
	struct FWeaponMeshOption WeaponMeshOption; // 0xca8(0xb0)
	struct FWeaponMeshAnimOption WeaponMeshAnimOption; // 0xd58(0x28)
	struct TArray<enum class EFSMCharacterState> WeaponHiddenCheckStates; // 0xd80(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentAdapter
// Size: 0x848 (Inherited: 0x5f0)
class UWeaponDataComponentAdapter : public UGPWeaponDataComponentAdapter {
public:

	char pad_5F0[0x18]; // 0x5f0(0x18)
	struct TArray<struct UWeaponAdapterItemBase*> AdapterLists; // 0x608(0x10)
	struct TMap<uint64_t, struct UWeaponAdapterItemBase*> AdapterMap; // 0x618(0x50)
	char pad_668[0x10]; // 0x668(0x10)
	struct TMap<struct UClass*, struct UObject*> AdapterControllerMap; // 0x678(0x50)
	/*struct TSet<struct UObject*>*/char AssetCaches[0x50]; // 0x6c8(0x50)
	char pad_718[0xa8]; // 0x718(0xa8)
	struct TArray<struct UWeaponAdapterItemBase*> TacticalEquipLists; // 0x7c0(0x10)
	struct FModularWeaponDynamicAttributesBase AdapterDynamicAttributes; // 0x7d0(0x28)
	char pad_7F8[0x50]; // 0x7f8(0x50)

	void SetPartDynamicAttrValues(struct TArray<uint64_t>& PartGids, struct TArray<struct FName>& AttrNames, struct TArray<float>& Values); // Function GPGameplay.WeaponDataComponentAdapter.SetPartDynamicAttrValues // (Final|Native|Public|HasOutParms) // @ game+0x36d2600
	void SetPartDynamicAttrValue(uint64_t PartGid, struct FName AttrName, float Value); // Function GPGameplay.WeaponDataComponentAdapter.SetPartDynamicAttrValue // (Final|Native|Public) // @ game+0x36d2500
	void ServerSetWeaponSightDataRecordSingle(struct FName AdapterType, bool bEnable, uint64_t ItemID); // Function GPGameplay.WeaponDataComponentAdapter.ServerSetWeaponSightDataRecordSingle // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36d23f0
	void ServerSetWeaponSightDataRecord(uint64_t BipodID, uint64_t LaserID, uint64_t FlashLightID, int32_t ScopeCount); // Function GPGameplay.WeaponDataComponentAdapter.ServerSetWeaponSightDataRecord // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36d22b0
	void ServerSetPartDynamicAttrValues(struct TArray<uint64_t> PartGids, struct TArray<struct FName> AttrNames, struct TArray<float> Values); // Function GPGameplay.WeaponDataComponentAdapter.ServerSetPartDynamicAttrValues // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36d20f0
	void ServerSetPartDynamicAttrValue(uint64_t PartGid, struct FName AttrName, float Value); // Function GPGameplay.WeaponDataComponentAdapter.ServerSetPartDynamicAttrValue // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36d1ff0
	void OnRep_AdapterDynamicAttributes(); // Function GPGameplay.WeaponDataComponentAdapter.OnRep_AdapterDynamicAttributes // (Final|Native|Public) // @ game+0x36d1cb0
	void ClientSetPartDynamicAttrValues(struct FModularWeaponDynamicAttributesBase InitAdapterDynamicAttributes); // Function GPGameplay.WeaponDataComponentAdapter.ClientSetPartDynamicAttrValues // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x36d12c0
	void ClientSetPartDynamicAttrValue(uint64_t PartGid, struct FName AttrName, float Value); // Function GPGameplay.WeaponDataComponentAdapter.ClientSetPartDynamicAttrValue // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x36d11c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentAdapterInterface
// Size: 0x30 (Inherited: 0x30)
class UWeaponDataComponentAdapterInterface : public UInterface {
public:


	bool SupportFXFunction(enum class EFxFuntionType FXType, struct FGPModularWeaponPartNode& FunctionNode); // Function GPGameplay.WeaponDataComponentAdapterInterface.SupportFXFunction // (Native|Public|HasOutParms) // @ game+0x36d28f0
	bool SupportFunction(enum class EWeaponAddFunction Func); // Function GPGameplay.WeaponDataComponentAdapterInterface.SupportFunction // (Native|Public) // @ game+0x36d29f0
	bool SupportAnimFunction(enum class EWeaponPartAnimFunctionType AnimType, struct FGPModularWeaponPartNode& FunctionNode); // Function GPGameplay.WeaponDataComponentAdapterInterface.SupportAnimFunction // (Native|Public|HasOutParms) // @ game+0x36d27f0
	void OnMeshComponentReady(struct USkeletalMeshComponent* MeshCom); // Function GPGameplay.WeaponDataComponentAdapterInterface.OnMeshComponentReady // (Native|Public) // @ game+0x36d1c20
	void OnAllMeshComponentReady(); // Function GPGameplay.WeaponDataComponentAdapterInterface.OnAllMeshComponentReady // (Native|Public) // @ game+0x174aa00
	bool IsAdapterExisted(enum class EWeaponAdapterType AdapterType); // Function GPGameplay.WeaponDataComponentAdapterInterface.IsAdapterExisted // (Native|Public) // @ game+0x1761460
	void InitAdapters(struct TArray<uint64_t> AdapterIds); // Function GPGameplay.WeaponDataComponentAdapterInterface.InitAdapters // (Native|Public) // @ game+0x36d1a10
	void GetOnWeaponAdapterFunctionChangedDelegates(); // Function GPGameplay.WeaponDataComponentAdapterInterface.GetOnWeaponAdapterFunctionChangedDelegates // (Native|Public) // @ game+0x36d19a0
	struct UWeaponAdapterItemBase* GetAdapterByType(enum class EWeaponAdapterType AdapterType); // Function GPGameplay.WeaponDataComponentAdapterInterface.GetAdapterByType // (Native|Public) // @ game+0x36d1730
	struct UAnimSequence* GetAccessoryAnimSeq(enum class EWeaponAdapterItemType AdapterItemType, enum class EWeaponAdapterHandIKPoseType IKPoseType); // Function GPGameplay.WeaponDataComponentAdapterInterface.GetAccessoryAnimSeq // (Native|Public) // @ game+0x36d1660
	bool CanZoom(); // Function GPGameplay.WeaponDataComponentAdapterInterface.CanZoom // (Native|Public) // @ game+0x928af0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentAnimInterface
// Size: 0x30 (Inherited: 0x30)
class UWeaponDataComponentAnimInterface : public UGPWeaponDataComponentAnimInterface {
public:


	void StopWeaponRecAnimation(); // Function GPGameplay.WeaponDataComponentAnimInterface.StopWeaponRecAnimation // (Native|Public) // @ game+0x36d8120
	void StopWeaponOperationChartacterAnim(); // Function GPGameplay.WeaponDataComponentAnimInterface.StopWeaponOperationChartacterAnim // (Native|Public) // @ game+0x36d8100
	void SetWeaponMeshTickOnce(); // Function GPGameplay.WeaponDataComponentAnimInterface.SetWeaponMeshTickOnce // (Native|Public) // @ game+0x36d80e0
	void SetWeaponMeshTick(bool bEnable, bool bEnableTickWhenNotRendered); // Function GPGameplay.WeaponDataComponentAnimInterface.SetWeaponMeshTick // (Native|Public) // @ game+0x36d8010
	void SetNeedUpdateAnimation(bool& bNeedUpdate); // Function GPGameplay.WeaponDataComponentAnimInterface.SetNeedUpdateAnimation // (Native|Public|HasOutParms) // @ game+0x36d7f70
	void SetNeedPlayWeaponAnimation(bool& bPlay); // Function GPGameplay.WeaponDataComponentAnimInterface.SetNeedPlayWeaponAnimation // (Native|Public|HasOutParms) // @ game+0x36d7ed0
	void RequestLoadWeaponAnim(); // Function GPGameplay.WeaponDataComponentAnimInterface.RequestLoadWeaponAnim // (Native|Public) // @ game+0x36d7d10
	float PlayFirstEquipAnim(float blendIn, float blendOut); // Function GPGameplay.WeaponDataComponentAnimInterface.PlayFirstEquipAnim // (Native|Public) // @ game+0x36d7c30
	float PlayFastUnEquipAnimNoBlend(struct FString ContextString, float blendIn, float blendOut); // Function GPGameplay.WeaponDataComponentAnimInterface.PlayFastUnEquipAnimNoBlend // (Native|Public) // @ game+0x36d7aa0
	float PlayFastUnEquipAnim(struct FString ContextString, float blendIn, float blendOut); // Function GPGameplay.WeaponDataComponentAnimInterface.PlayFastUnEquipAnim // (Native|Public) // @ game+0x36d7910
	float PlayFastEquipAnim(struct FString ContextString, float blendIn, float blendOut); // Function GPGameplay.WeaponDataComponentAnimInterface.PlayFastEquipAnim // (Native|Public) // @ game+0x36d7780
	void OnAnimLoadReady(); // Function GPGameplay.WeaponDataComponentAnimInterface.OnAnimLoadReady // (Native|Public) // @ game+0x36d7690
	bool NeedToUpdateAnimation(); // Function GPGameplay.WeaponDataComponentAnimInterface.NeedToUpdateAnimation // (Native|Public) // @ game+0x17604e0
	bool NeedToPlayWeaponRecAnimation(); // Function GPGameplay.WeaponDataComponentAnimInterface.NeedToPlayWeaponRecAnimation // (Native|Public) // @ game+0x17606a0
	bool IsWeaponTableSet(); // Function GPGameplay.WeaponDataComponentAnimInterface.IsWeaponTableSet // (Native|Public|Const) // @ game+0x36d7660
	bool IsPlayingAnyMontage(); // Function GPGameplay.WeaponDataComponentAnimInterface.IsPlayingAnyMontage // (Native|Public) // @ game+0x174fbb0
	float InteractivePutWeapon(struct FString ContextString, enum class EInteractivePutWeaponType PutWeaponType, bool NeedInacvtiveAnim, float blendIn, float blendOut, bool bUseAnimTime, float InAnimTime); // Function GPGameplay.WeaponDataComponentAnimInterface.InteractivePutWeapon // (Native|Public) // @ game+0x36d73c0
	float InteractiveGetWeapon(struct FString ContextString, enum class EInteractiveGetWeaponType GetWeaponType, float blendIn, float blendOut, bool bUseAnimTime, float InAnimTime); // Function GPGameplay.WeaponDataComponentAnimInterface.InteractiveGetWeapon // (Native|Public) // @ game+0x36d7160
	bool HasWeaponPartAnimSeq(uint64_t& ItemID, struct FName& AnimName, enum class EChracterPoseType& PoseType, struct FName& MapKeyName); // Function GPGameplay.WeaponDataComponentAnimInterface.HasWeaponPartAnimSeq // (Native|Public|HasOutParms) // @ game+0x36d6fb0
	void GetZoomWaggleParam(float& WaggleScope, float& WaggleSpeed); // Function GPGameplay.WeaponDataComponentAnimInterface.GetZoomWaggleParam // (Native|Public|HasOutParms) // @ game+0x36d6ec0
	float GetZoomOutAnimTime(); // Function GPGameplay.WeaponDataComponentAnimInterface.GetZoomOutAnimTime // (Native|Public) // @ game+0x36d6e80
	float GetZoomInAnimTime(); // Function GPGameplay.WeaponDataComponentAnimInterface.GetZoomInAnimTime // (Native|Public) // @ game+0x174a240
	struct UAnimSequenceBase* GetWeaponPartAnimSeq(uint64_t& ItemID, struct FName& AnimName, enum class EChracterPoseType& PoseType, struct FName& MapKeyName); // Function GPGameplay.WeaponDataComponentAnimInterface.GetWeaponPartAnimSeq // (Native|Public|HasOutParms) // @ game+0x36d6cd0
	struct TArray<struct UAnimSequenceBase*> GetWeaponOperationAnimSeqArray(struct FName AnimName, enum class EChracterPoseType PoseType, enum class EAnimationSpecialUseType UseType, enum class EEightDirectionType DirectionType); // Function GPGameplay.WeaponDataComponentAnimInterface.GetWeaponOperationAnimSeqArray // (Native|Public) // @ game+0x36d6ae0
	void GetWeaponMeshTickDebugInfo(struct FString& Result); // Function GPGameplay.WeaponDataComponentAnimInterface.GetWeaponMeshTickDebugInfo // (Native|Public|HasOutParms) // @ game+0x36d6a00
	struct UAnimSequenceBase* GetSpecTagAnimWeaponOperationSeq(struct FName& VariableName, struct FGameplayTag& Tag, enum class EChracterPoseType& PoseType, enum class EAnimationSpecialUseType& UseType, enum class EEightDirectionType& DirectionType); // Function GPGameplay.WeaponDataComponentAnimInterface.GetSpecTagAnimWeaponOperationSeq // (Native|Public|HasOutParms) // @ game+0x36d6100
	struct UAnimSequenceBase* GetSpecTagAnimBasePosSeq(struct FName& VariableName, struct FGameplayTag& Tag, enum class EChracterPoseType& PoseType, enum class EAnimationSpecialUseType& UseType, enum class EEightDirectionType& DirectionType); // Function GPGameplay.WeaponDataComponentAnimInterface.GetSpecTagAnimBasePosSeq // (Native|Public|HasOutParms) // @ game+0x36d5ef0
	struct UAnimSequenceBase* GetSpecTagAnim(enum class EWeaponAnimDataTableType TableType, struct FName& VariableName, struct FGameplayTag& Tag, enum class EChracterPoseType& PoseType, enum class EAnimationSpecialUseType& UseType, enum class EEightDirectionType& DirectionType); // Function GPGameplay.WeaponDataComponentAnimInterface.GetSpecTagAnim // (Native|Public|HasOutParms) // @ game+0x36d5cd0
	struct UAnimSequenceBase* GetSpecStringAnimWeaponOperationSeq(struct FName& VariableName, struct FString inString, enum class EChracterPoseType& PoseType, enum class EAnimationSpecialUseType& UseType, enum class EEightDirectionType& DirectionType); // Function GPGameplay.WeaponDataComponentAnimInterface.GetSpecStringAnimWeaponOperationSeq // (Native|Public|HasOutParms) // @ game+0x36d5ad0
	struct UAnimSequenceBase* GetSpecStringAnim(enum class EWeaponAnimDataTableType TableType, struct FName& VariableName, struct FString inString, enum class EChracterPoseType& PoseType, enum class EAnimationSpecialUseType& UseType, enum class EEightDirectionType& DirectionType); // Function GPGameplay.WeaponDataComponentAnimInterface.GetSpecStringAnim // (Native|Public|HasOutParms) // @ game+0x36d5890
	struct TArray<struct UAnimSequenceBase*> GetSpecialWeaponAnimSeqArray(struct FName AnimName, enum class EChracterPoseType PoseType, enum class EAnimationSpecialUseType UseType, enum class EEightDirectionType DirectionType); // Function GPGameplay.WeaponDataComponentAnimInterface.GetSpecialWeaponAnimSeqArray // (Native|Public) // @ game+0x36d6810
	struct UAnimSequence* GetSpecialWeaponAnimSeq(struct FName& AnimName, enum class EChracterPoseType& PoseType, enum class EAnimationSpecialUseType& UseType, enum class EEightDirectionType& DirectionType); // Function GPGameplay.WeaponDataComponentAnimInterface.GetSpecialWeaponAnimSeq // (Native|Public|HasOutParms) // @ game+0x36d6660
	struct UAnimMontage* GetSpecialWeaponAnimMontage(struct FName& AnimName, enum class EChracterPoseType& PoseType, enum class EAnimationSpecialUseType& UseType, enum class EEightDirectionType& DirectionType); // Function GPGameplay.WeaponDataComponentAnimInterface.GetSpecialWeaponAnimMontage // (Native|Public|HasOutParms) // @ game+0x36d64b0
	struct UBlendSpaceBase* GetSpecialWeaponAnimBS(struct FName& AnimName, enum class EChracterPoseType& PoseType, enum class EAnimationSpecialUseType& UseType, enum class EEightDirectionType& DirectionType); // Function GPGameplay.WeaponDataComponentAnimInterface.GetSpecialWeaponAnimBS // (Native|Public|HasOutParms) // @ game+0x36d6310
	bool GetIsRightFire(); // Function GPGameplay.WeaponDataComponentAnimInterface.GetIsRightFire // (Native|Public) // @ game+0x36d57e0
	struct FName GetCrrentAnimId(); // Function GPGameplay.WeaponDataComponentAnimInterface.GetCrrentAnimId // (Native|Public) // @ game+0x36d5400
	struct UAnimSequence* GetAnimOperationSeq(struct FName& AnimName, enum class EChracterPoseType& PoseType, enum class EAnimationSpecialUseType& UseType, enum class EEightDirectionType& DirectionType); // Function GPGameplay.WeaponDataComponentAnimInterface.GetAnimOperationSeq // (Native|Public|HasOutParms) // @ game+0x36d4df0
	struct UAnimMontage* GetAnimOperationMontage(struct FName& AnimName, enum class EChracterPoseType& PoseType, enum class EAnimationSpecialUseType& UseType, enum class EEightDirectionType& DirectionType); // Function GPGameplay.WeaponDataComponentAnimInterface.GetAnimOperationMontage // (Native|Public|HasOutParms) // @ game+0x36d4c50
	struct UBlendSpaceBase* GetAnimOperationBS(struct FName& AnimName, enum class EChracterPoseType& PoseType, enum class EAnimationSpecialUseType& UseType, enum class EEightDirectionType& DirectionType); // Function GPGameplay.WeaponDataComponentAnimInterface.GetAnimOperationBS // (Native|Public|HasOutParms) // @ game+0x36d4ab0
	struct TWeakObjectPtr<struct UAnimSequenceBase> GetAnimByType(struct FName AnimType); // Function GPGameplay.WeaponDataComponentAnimInterface.GetAnimByType // (Native|Public) // @ game+0x36d4a20
	struct UAnimSequence* GetAnimBasePosSeq(struct FName& AnimName, enum class EChracterPoseType& PoseType, enum class EAnimationSpecialUseType& UseType, enum class EEightDirectionType& DirectionType); // Function GPGameplay.WeaponDataComponentAnimInterface.GetAnimBasePosSeq // (Native|Public|HasOutParms) // @ game+0x36d4880
	struct UBlendSpaceBase* GetAnimBasePosBS(struct FName& AnimName, enum class EChracterPoseType& PoseType, enum class EAnimationSpecialUseType& UseType, enum class EEightDirectionType& DirectionType); // Function GPGameplay.WeaponDataComponentAnimInterface.GetAnimBasePosBS // (Native|Public|HasOutParms) // @ game+0x36d46e0
	struct UAnimMontage* GetAnimBaseMontage(struct FName& AnimName, enum class EChracterPoseType& PoseType, enum class EAnimationSpecialUseType& UseType, enum class EEightDirectionType& DirectionType); // Function GPGameplay.WeaponDataComponentAnimInterface.GetAnimBaseMontage // (Native|Public|HasOutParms) // @ game+0x36d4540
	float GetAnimationSequenceLengthByEventForCharacter(enum class EGPWeaponInnerEvent InWeaponEvent); // Function GPGameplay.WeaponDataComponentAnimInterface.GetAnimationSequenceLengthByEventForCharacter // (Native|Public) // @ game+0x36d5070
	void GetAnimationListDebugInfo(struct FString& Result); // Function GPGameplay.WeaponDataComponentAnimInterface.GetAnimationListDebugInfo // (Native|Public|HasOutParms) // @ game+0x36d4f90
	void BlendOutCurrentMontage(float BlendOutTime); // Function GPGameplay.WeaponDataComponentAnimInterface.BlendOutCurrentMontage // (Native|Public) // @ game+0x36d44c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentAppearanceInterface
// Size: 0x30 (Inherited: 0x30)
class UWeaponDataComponentAppearanceInterface : public UInterface {
public:


	bool IsModularWeapon(); // Function GPGameplay.WeaponDataComponentAppearanceInterface.IsModularWeapon // (Native|Public) // @ game+0xaa29f0
	void GetGPWeaponAppearanceInterface(); // Function GPGameplay.WeaponDataComponentAppearanceInterface.GetGPWeaponAppearanceInterface // (Native|Public) // @ game+0x36d57a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentConfig
// Size: 0x730 (Inherited: 0x5f0)
class UWeaponDataComponentConfig : public UGPWeaponDataComponentBase {
public:

	char pad_5F0[0x8]; // 0x5f0(0x08)
	struct FWeaponAttributeSetConfig WeaponAttributes; // 0x5f8(0x120)
	struct FWeaponViewConfig WeaponViewConfig; // 0x718(0x08)
	struct FWeaponLogicConfig WeaponLogicConfig; // 0x720(0x04)
	char pad_724[0x4]; // 0x724(0x04)
	struct UGPASC* TempEditableGPASC; // 0x728(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentConfigInterface
// Size: 0x30 (Inherited: 0x30)
class UWeaponDataComponentConfigInterface : public UInterface {
public:


	struct FName GetSoundFXId(); // Function GPGameplay.WeaponDataComponentConfigInterface.GetSoundFXId // (Native|Public) // @ game+0x36d5850
	float GetAttributeValue(struct FName& AttributeSetName, struct FName& AttributeKey); // Function GPGameplay.WeaponDataComponentConfigInterface.GetAttributeValue // (Native|Public|HasOutParms) // @ game+0x36d51d0
	void ApplyConfigToAttribute(struct FName& AttributeSetName, struct FName& AttributeKey, float NewValue); // Function GPGameplay.WeaponDataComponentConfigInterface.ApplyConfigToAttribute // (Native|Public|HasOutParms) // @ game+0x36d43a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentCore
// Size: 0x808 (Inherited: 0x730)
class UWeaponDataComponentCore : public UGPWeaponDataComponentCore {
public:

	char pad_730[0x8]; // 0x730(0x08)
	uint64_t Guid; // 0x738(0x08)
	char pad_740[0x50]; // 0x740(0x50)
	struct TWeakObjectPtr<struct UGPAttributeSetOther> CharacterAttrbuteSetOther; // 0x790(0x08)
	int32_t BitMaskPropertyValues; // 0x798(0x04)
	char pad_79C[0x6c]; // 0x79c(0x6c)

	void SetBoolProperty(enum class EWeaponBoolPropertyType PropertyType, bool Enable); // Function GPGameplay.WeaponDataComponentCore.SetBoolProperty // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36d7e00
	void OnRep_BoolPropertyChanged(); // Function GPGameplay.WeaponDataComponentCore.OnRep_BoolPropertyChanged // (Native|Protected) // @ game+0x21b1c40
	struct TWeakObjectPtr<struct UGPAttributeSetOther> GetCharacterAttrbuteSetOther(); // Function GPGameplay.WeaponDataComponentCore.GetCharacterAttrbuteSetOther // (Native|Public) // @ game+0x36d53c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentCoreInterface
// Size: 0x30 (Inherited: 0x30)
class UWeaponDataComponentCoreInterface : public UInterface {
public:


	void SetBoolProperty(enum class EWeaponBoolPropertyType PropertyType, bool Enable); // Function GPGameplay.WeaponDataComponentCoreInterface.SetBoolProperty // (Native|Public) // @ game+0x36d7d30
	void RemoveAttributeCache(); // Function GPGameplay.WeaponDataComponentCoreInterface.RemoveAttributeCache // (Native|Public) // @ game+0x174aa00
	void GetWeaponOwnerInterface(); // Function GPGameplay.WeaponDataComponentCoreInterface.GetWeaponOwnerInterface // (Native|Public) // @ game+0x36d6c90
	struct FWeaponThrowableDataAttribute GetThrowableDataAttributeRefWritable(); // Function GPGameplay.WeaponDataComponentCoreInterface.GetThrowableDataAttributeRefWritable // (Native|Public) // @ game+0x36d69c0
	struct FWeaponMeleeDataAttribute GetMeleeDataAttributeRefWritable(); // Function GPGameplay.WeaponDataComponentCoreInterface.GetMeleeDataAttributeRefWritable // (Native|Public) // @ game+0x36d5810
	void GetGPWeaponDataInterface(); // Function GPGameplay.WeaponDataComponentCoreInterface.GetGPWeaponDataInterface // (Native|Public) // @ game+0x36d57a0
	void GetDataRecFunction(struct FRecFunctionRow& DataRecFunction); // Function GPGameplay.WeaponDataComponentCoreInterface.GetDataRecFunction // (Native|Public|HasOutParms) // @ game+0x36d5670
	void GetDataModifierDebugInfo(struct FString& Result); // Function GPGameplay.WeaponDataComponentCoreInterface.GetDataModifierDebugInfo // (Native|Public|HasOutParms) // @ game+0x36d55a0
	struct FWeaponDataAttribute GetDataAttribute(); // Function GPGameplay.WeaponDataComponentCoreInterface.GetDataAttribute // (Native|Public) // @ game+0x36d5560
	struct FWeaponDataAppearance GetDataAppearanceRefWritable(); // Function GPGameplay.WeaponDataComponentCoreInterface.GetDataAppearanceRefWritable // (Native|Public) // @ game+0x36d5520
	struct FWeaponDataAppearance GetDataAppearanceRef(); // Function GPGameplay.WeaponDataComponentCoreInterface.GetDataAppearanceRef // (Native|Public) // @ game+0x36d54e0
	struct FWeaponDataHitFX GetDataAppearanceConfigHitFX(uint64_t InHitFXId); // Function GPGameplay.WeaponDataComponentCoreInterface.GetDataAppearanceConfigHitFX // (Native|Public) // @ game+0x36d5440
	struct TWeakObjectPtr<struct UGPAttributeSetOther> GetCharacterAttrbuteSetOther(); // Function GPGameplay.WeaponDataComponentCoreInterface.GetCharacterAttrbuteSetOther // (Native|Public) // @ game+0x36d5380
	bool GetBoolProperty(enum class EWeaponBoolPropertyType PropertyType); // Function GPGameplay.WeaponDataComponentCoreInterface.GetBoolProperty // (Native|Public) // @ game+0x36d52f0
	int32_t GetBitMaskPropertyValues(); // Function GPGameplay.WeaponDataComponentCoreInterface.GetBitMaskPropertyValues // (Native|Public) // @ game+0x36d52c0
	void GetAttributeDebugInfo(struct FString& Result); // Function GPGameplay.WeaponDataComponentCoreInterface.GetAttributeDebugInfo // (Native|Public|HasOutParms) // @ game+0x36d5100
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentDamage
// Size: 0x698 (Inherited: 0x698)
class UWeaponDataComponentDamage : public UGPWeaponDataComponentDamage {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentFiringInterface
// Size: 0x30 (Inherited: 0x30)
class UWeaponDataComponentFiringInterface : public UInterface {
public:


	struct UGPWeaponFireModeThrowable* GetFireModeThrowable(); // Function GPGameplay.WeaponDataComponentFiringInterface.GetFireModeThrowable // (Native|Public) // @ game+0x36e1540
	struct UGPWeaponFireModePhysicSimulate* GetFireModePhysicSimulate(); // Function GPGameplay.WeaponDataComponentFiringInterface.GetFireModePhysicSimulate // (Native|Public) // @ game+0xaa1400
	float GetFireDurationSeconds(); // Function GPGameplay.WeaponDataComponentFiringInterface.GetFireDurationSeconds // (Native|Public) // @ game+0x36e1510
	int32_t GetCrruentFireModeType(); // Function GPGameplay.WeaponDataComponentFiringInterface.GetCrruentFireModeType // (Native|Public) // @ game+0x1036810
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentPreviewLine
// Size: 0x720 (Inherited: 0x5f0)
class UWeaponDataComponentPreviewLine : public UGPWeaponDataComponentBase {
public:

	/*struct TSoftClassPtr<UObject>*/char PreviewLineClassPtr[0x28]; // 0x5f0(0x28)
	/*struct TSoftClassPtr<UObject>*/char HitPointActorClassPtr[0x28]; // 0x618(0x28)
	struct FName SocketName; // 0x640(0x08)
	float Speed; // 0x648(0x04)
	float IntersectionPointLenth; // 0x64c(0x04)
	struct FVector TargetOffset; // 0x650(0x0c)
	float SimFrequency; // 0x65c(0x04)
	float MaxSimTime; // 0x660(0x04)
	float GravityScale; // 0x664(0x04)
	struct FVector ActorScale1; // 0x668(0x0c)
	struct FVector ActorScale2; // 0x674(0x0c)
	float ActorScale1Dis; // 0x680(0x04)
	float ActorScale2Dis; // 0x684(0x04)
	bool bUseCompolex; // 0x688(0x01)
	char pad_689[0x7]; // 0x689(0x07)
	struct AGPPreviewLineActorBase* PreviewLine; // 0x690(0x08)
	struct AActor* HitPointActor; // 0x698(0x08)
	bool bPreViewIsVisible; // 0x6a0(0x01)
	bool bPreViewVisibleDirty; // 0x6a1(0x01)
	char pad_6A2[0x2]; // 0x6a2(0x02)
	struct FVector BulletStartPos; // 0x6a4(0x0c)
	struct FRotator BulletRotate; // 0x6b0(0x0c)
	char pad_6BC[0x64]; // 0x6bc(0x64)

	void UpdateServerPreviewData(struct FVector StartLocation, struct FVector StartVelocity); // Function GPGameplay.WeaponDataComponentPreviewLine.UpdateServerPreviewData // (Net|Native|Event|Public|NetServer|HasDefaults) // @ game+0x36e2550
	void UpdatePreviewVisible(); // Function GPGameplay.WeaponDataComponentPreviewLine.UpdatePreviewVisible // (Final|Native|Private) // @ game+0x36e2530
	void UpdatePreviewData(bool bSendToServer); // Function GPGameplay.WeaponDataComponentPreviewLine.UpdatePreviewData // (Final|Native|Private) // @ game+0x36e24a0
	void UpdateAIStartFirePreviewData(); // Function GPGameplay.WeaponDataComponentPreviewLine.UpdateAIStartFirePreviewData // (Final|Native|Public) // @ game+0x36e2480
	void StartAyncPredict(); // Function GPGameplay.WeaponDataComponentPreviewLine.StartAyncPredict // (Final|Native|Private) // @ game+0x36e21d0
	void ShowPreviewLine(bool bEnableTick); // Function GPGameplay.WeaponDataComponentPreviewLine.ShowPreviewLine // (Final|Native|Private) // @ game+0x36e2080
	void OnPreviewAssetLoaded(struct TArray<struct FSoftObjectPath> Assets); // Function GPGameplay.WeaponDataComponentPreviewLine.OnPreviewAssetLoaded // (Final|Native|Private) // @ game+0x36e1d40
	void InitUseAsyncTraceSystem(); // Function GPGameplay.WeaponDataComponentPreviewLine.InitUseAsyncTraceSystem // (Final|Native|Private) // @ game+0x36e1c90
	void HidePreviewLine(bool bEnableTick); // Function GPGameplay.WeaponDataComponentPreviewLine.HidePreviewLine // (Final|Native|Private) // @ game+0x36e1ad0
	float GetProjectilePathSimFrequency(); // Function GPGameplay.WeaponDataComponentPreviewLine.GetProjectilePathSimFrequency // (Final|Native|Private) // @ game+0x36e17b0
	struct FVector CheckStartPosBlocked(struct AGPCharacter* GPChar, struct FVector pos); // Function GPGameplay.WeaponDataComponentPreviewLine.CheckStartPosBlocked // (Final|Native|Private|HasDefaults) // @ game+0x36e10c0
	void CancelPreviewAssetLoad(); // Function GPGameplay.WeaponDataComponentPreviewLine.CancelPreviewAssetLoad // (Final|Native|Private) // @ game+0x36e10a0
	void CancelAyncPredict(); // Function GPGameplay.WeaponDataComponentPreviewLine.CancelAyncPredict // (Final|Native|Private) // @ game+0x36e1080
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentProxy
// Size: 0x8e8 (Inherited: 0x7c8)
class UWeaponDataComponentProxy : public UGPWeaponDataComponentProxy {
public:

	char pad_7C8[0xe8]; // 0x7c8(0xe8)
	struct UWeaponDataComponentAmmo* DcAmmo; // 0x8b0(0x08)
	char pad_8B8[0x18]; // 0x8b8(0x18)
	float WeaponAmmoCount; // 0x8d0(0x04)
	float WeaponCarriedAmmoCount; // 0x8d4(0x04)
	float WeaponChangeClipTime; // 0x8d8(0x04)
	float WeaponChangeClipTimeWhenEmpty; // 0x8dc(0x04)
	float WeaponChangeClipTimScale; // 0x8e0(0x04)
	char pad_8E4[0x4]; // 0x8e4(0x04)

	bool SupportFXFunction(enum class EFxFuntionType FXType, struct FGPModularWeaponPartNode& FunctionNode); // Function GPGameplay.WeaponDataComponentProxy.SupportFXFunction // (Native|Public|HasOutParms) // @ game+0x36e22f0
	bool SupportFunction(enum class EWeaponAddFunction Func); // Function GPGameplay.WeaponDataComponentProxy.SupportFunction // (Native|Public) // @ game+0x36e23f0
	bool SupportAnimFunction(enum class EWeaponPartAnimFunctionType AnimType, struct FGPModularWeaponPartNode& FunctionNode); // Function GPGameplay.WeaponDataComponentProxy.SupportAnimFunction // (Native|Public|HasOutParms) // @ game+0x36e21f0
	void Rep_OnRepWeaponChangeClipTimScale(); // Function GPGameplay.WeaponDataComponentProxy.Rep_OnRepWeaponChangeClipTimScale // (Final|Native|Protected) // @ game+0x36e1f30
	void Rep_OnRepWeaponChangeClipTimeWhenEmpty(); // Function GPGameplay.WeaponDataComponentProxy.Rep_OnRepWeaponChangeClipTimeWhenEmpty // (Final|Native|Protected) // @ game+0x88f4d0
	void Rep_OnRepWeaponChangeClipTime(); // Function GPGameplay.WeaponDataComponentProxy.Rep_OnRepWeaponChangeClipTime // (Final|Native|Protected) // @ game+0x88f4d0
	void Rep_OnRepWeaponCarriedAmmoCount(); // Function GPGameplay.WeaponDataComponentProxy.Rep_OnRepWeaponCarriedAmmoCount // (Final|Native|Protected) // @ game+0x36e1f10
	void OnRep_WeaponAmmoCount(); // Function GPGameplay.WeaponDataComponentProxy.OnRep_WeaponAmmoCount // (Final|Native|Protected) // @ game+0x36e1ed0
	bool IsAdapterExisted(enum class EWeaponAdapterType AdapterType); // Function GPGameplay.WeaponDataComponentProxy.IsAdapterExisted // (Native|Public) // @ game+0x36e1cb0
	void InitAdapters(struct TArray<uint64_t> AdapterIds); // Function GPGameplay.WeaponDataComponentProxy.InitAdapters // (Native|Public) // @ game+0x36e1b60
	void GetZoomWaggleParam(float& WaggleScope, float& WaggleSpeed); // Function GPGameplay.WeaponDataComponentProxy.GetZoomWaggleParam // (Native|Public|HasOutParms) // @ game+0x36e19e0
	float GetZoomOutAnimTime(); // Function GPGameplay.WeaponDataComponentProxy.GetZoomOutAnimTime // (Native|Public) // @ game+0x36e1890
	float GetZoomInAnimTime(); // Function GPGameplay.WeaponDataComponentProxy.GetZoomInAnimTime // (Native|Public) // @ game+0x36e1820
	bool GetSupportOpenSightOnFire(); // Function GPGameplay.WeaponDataComponentProxy.GetSupportOpenSightOnFire // (Native|Public) // @ game+0x36e17e0
	struct FSoftObjectPath GetPartSkeletalMesh3P(uint64_t ItemID); // Function GPGameplay.WeaponDataComponentProxy.GetPartSkeletalMesh3P // (Native|Public|HasDefaults) // @ game+0x36e1700
	struct FSoftObjectPath GetPartSkeletalMesh1P(uint64_t ItemID); // Function GPGameplay.WeaponDataComponentProxy.GetPartSkeletalMesh1P // (Native|Public|HasDefaults) // @ game+0x36e1650
	struct UGPModularWeaponDesc* GetModularWeaponDesc(bool bRefreshDynamicAttr); // Function GPGameplay.WeaponDataComponentProxy.GetModularWeaponDesc // (Native|Public) // @ game+0x36e15b0
	uint64_t GetMagazineItemID(); // Function GPGameplay.WeaponDataComponentProxy.GetMagazineItemID // (Native|Public) // @ game+0x36e1570
	struct USkeletalMeshComponent* GetCharacterBagSkeletalMeshComponent(bool bUseFPP); // Function GPGameplay.WeaponDataComponentProxy.GetCharacterBagSkeletalMeshComponent // (Native|Public) // @ game+0x36e1470
	struct UAnimSequence* GetAccessoryAnimSeq(enum class EWeaponAdapterItemType AdapterItemType, enum class EWeaponAdapterHandIKPoseType IKPoseType); // Function GPGameplay.WeaponDataComponentProxy.GetAccessoryAnimSeq // (Native|Public) // @ game+0x36e13a0
	bool CanZoom(); // Function GPGameplay.WeaponDataComponentProxy.CanZoom // (Native|Public) // @ game+0x36e1040
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentReadData
// Size: 0x5f0 (Inherited: 0x5f0)
class UWeaponDataComponentReadData : public UGPWeaponDataComponentBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentRPGAmmo
// Size: 0x1a0 (Inherited: 0x158)
class UWeaponDataComponentRPGAmmo : public UGPWeaponViewComponentBase {
public:

	struct FSoftObjectPath RPGAmmoMeshPath; // 0x158(0x18)
	struct USkeletalMeshComponent* AmmoMeshCom; // 0x170(0x08)
	struct USkeletalMesh* AmmoMesh; // 0x178(0x08)
	bool bShowAmmoOutsideChangeClip; // 0x180(0x01)
	char pad_181[0xf]; // 0x181(0x0f)
	/*struct TScriptInterface<IWeaponProxyInterface>*/char WeaponProxy[0x10]; // 0x190(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentStateInterface
// Size: 0x30 (Inherited: 0x30)
class UWeaponDataComponentStateInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentZoomInterface
// Size: 0x30 (Inherited: 0x30)
class UWeaponDataComponentZoomInterface : public UGPWeaponDataComponentZoomInterface {
public:


	bool IsZoomingForFire(); // Function GPGameplay.WeaponDataComponentZoomInterface.IsZoomingForFire // (Native|Public) // @ game+0x174e640
	void GetZoomWaggleParam(float& WaggleScope, float& WaggleSpeed); // Function GPGameplay.WeaponDataComponentZoomInterface.GetZoomWaggleParam // (Native|Public|HasOutParms) // @ game+0x36e1900
	float GetZoomRate(); // Function GPGameplay.WeaponDataComponentZoomInterface.GetZoomRate // (Native|Public) // @ game+0x36e18d0
	float GetZoomOutAnimTime(); // Function GPGameplay.WeaponDataComponentZoomInterface.GetZoomOutAnimTime // (Native|Public) // @ game+0x36e1860
	float GetZoomInAnimTime(); // Function GPGameplay.WeaponDataComponentZoomInterface.GetZoomInAnimTime // (Native|Public) // @ game+0x174ef30
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataGraphConfig
// Size: 0x48 (Inherited: 0x38)
class UWeaponDataGraphConfig : public UDataAsset {
public:

	struct TArray<struct FWeaponDataGraphConfigNode> GraphNodes; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataAttributeManager
// Size: 0x98 (Inherited: 0x38)
class UWeaponDataAttributeManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)
	struct TMap<uint32_t, struct FWeaponDataAttribute> WeaponAttributeCaches; // 0x48(0x50)

	void ClearCaches(); // Function GPGameplay.WeaponDataAttributeManager.ClearCaches // (Final|Native|Public) // @ game+0x36ed110
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataAppearanceManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponDataAppearanceManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataAssistedAimingManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponDataAssistedAimingManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataAssistedAimingGroupManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponDataAssistedAimingGroupManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataAimAssistorManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponDataAimAssistorManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataBulletManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponDataBulletManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataCharacterStateManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponDataCharacterStateManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataCharacterMovementSpeedManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponDataCharacterMovementSpeedManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataCrossHairManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponDataCrossHairManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataRecoilManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponDataRecoilManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataSpreadManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponDataSpreadManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataAimingManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponDataAimingManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataAnimManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponDataAnimManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataFXManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponDataFXManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataFXResManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponDataFXResManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AmmoDataManager
// Size: 0x98 (Inherited: 0x38)
class UAmmoDataManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x60]; // 0x38(0x60)

	bool IsMatchWeapon(uint64_t WeaponRecId, uint64_t AmmoItemId); // Function GPGameplay.AmmoDataManager.IsMatchWeapon // (Final|Native|Public) // @ game+0x36ed260
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AmmoDataOverrideManager
// Size: 0x98 (Inherited: 0x38)
class UAmmoDataOverrideManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x60]; // 0x38(0x60)

	struct FAmmoDataOverideRow GetAmmoDataOverride(uint64_t WeaponRecId, uint64_t AmmoItemId); // Function GPGameplay.AmmoDataOverrideManager.GetAmmoDataOverride // (Final|Native|Public) // @ game+0x36ed150
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AmmoRandomDataManager
// Size: 0x48 (Inherited: 0x38)
class UAmmoRandomDataManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataViewParamManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponDataViewParamManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataMeshManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponDataMeshManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataHitFXManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponDataHitFXManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdditiveAnimManager
// Size: 0x98 (Inherited: 0x38)
class UWeaponAdditiveAnimManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x60]; // 0x38(0x60)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAppearanceForCharacterManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponAppearanceForCharacterManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterDataBipodManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponAdapterDataBipodManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterDataLamManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponAdapterDataLamManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterDataFlashLightManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponAdapterDataFlashLightManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponSocketTransformManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponSocketTransformManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponPerkManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponPerkManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponMaskMaterialManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponMaskMaterialManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponPlayerInputManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponPlayerInputManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponGunKickManager
// Size: 0x98 (Inherited: 0x38)
class UWeaponGunKickManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x60]; // 0x38(0x60)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireShakeManager
// Size: 0x98 (Inherited: 0x38)
class UWeaponFireShakeManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x60]; // 0x38(0x60)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.PoorWeaponManager
// Size: 0x48 (Inherited: 0x38)
class UPoorWeaponManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.PoorFunctionManager
// Size: 0x48 (Inherited: 0x38)
class UPoorFunctionManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponMainAttributeManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponMainAttributeManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataModifierRuleSummaryFastManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponDataModifierRuleSummaryFastManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.StingerMissileManager
// Size: 0x48 (Inherited: 0x38)
class UStingerMissileManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponModelModifierManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponModelModifierManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.MagazineBoneLocalTranslationsManager
// Size: 0x48 (Inherited: 0x38)
class UMagazineBoneLocalTranslationsManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponProcedureAnimManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponProcedureAnimManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponProcedureAnim4DirManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponProcedureAnim4DirManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponGunSwayManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponGunSwayManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponHoldBreathManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponHoldBreathManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ScoWeaponPairParameterManager
// Size: 0x40 (Inherited: 0x38)
class UScoWeaponPairParameterManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x8]; // 0x38(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AnimCrouchManager
// Size: 0x48 (Inherited: 0x38)
class UAnimCrouchManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AnimGunSwingManager
// Size: 0x48 (Inherited: 0x38)
class UAnimGunSwingManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDeferredDecal
// Size: 0x3f0 (Inherited: 0x380)
class AWeaponDeferredDecal : public ADecalActor {
public:

	char pad_380[0x10]; // 0x380(0x10)
	float Duration; // 0x390(0x04)
	bool bEnableFadeOut; // 0x394(0x01)
	char pad_395[0x3]; // 0x395(0x03)
	float FadeOutDuration; // 0x398(0x04)
	struct FName FadeOutMaterialParamName; // 0x39c(0x08)
	bool bRandomRotate; // 0x3a4(0x01)
	bool bRandomScale; // 0x3a5(0x01)
	char pad_3A6[0x2]; // 0x3a6(0x02)
	struct FVector2D RandomScaleMinMax; // 0x3a8(0x08)
	char bDestroyOwnerAfterFade : 1; // 0x3b0(0x01)
	char pad_3B0_1 : 7; // 0x3b0(0x01)
	char pad_3B1[0x2f]; // 0x3b1(0x2f)
	struct UMaterialInstanceDynamic* MaterialInstanceDynamic; // 0x3e0(0x08)
	char pad_3E8[0x8]; // 0x3e8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponBlackboard
// Size: 0x170 (Inherited: 0x80)
class UWeaponBlackboard : public UGPWeaponBlackboard {
public:

	char pad_80[0xf0]; // 0x80(0xf0)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.SceneWeaponDataManager
// Size: 0x48 (Inherited: 0x38)
class USceneWeaponDataManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDependentInterface
// Size: 0x30 (Inherited: 0x30)
class UWeaponDependentInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireAssistedAimingDebuggerComponent
// Size: 0x100 (Inherited: 0x100)
class UWeaponFireAssistedAimingDebuggerComponent : public UActorComponent {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireAssistedAimingDFM
// Size: 0x2d0 (Inherited: 0x48)
class UWeaponFireAssistedAimingDFM : public UGPWeaponFireAssistedAimingBase {
public:

	struct FWeaponAssistedAimingConfigSet AssistedAimingConfig; // 0x48(0x50)
	struct FWeaponAssistedAimingConfigSet AssistedAimingConfigForAiming; // 0x98(0x50)
	struct UWeaponDataComponentFiring* DCFiringGame; // 0xe8(0x08)
	struct UWeaponFuncComponentFiring* FCFiringGame; // 0xf0(0x08)
	struct UClientBaseSetting* AssistedAimingBaseSetting; // 0xf8(0x08)
	char pad_100[0x28]; // 0x100(0x28)
	struct TArray<struct AActor*> SearchActors; // 0x128(0x10)
	char pad_138[0xc]; // 0x138(0x0c)
	struct TWeakObjectPtr<struct AGPCharacter> LastTargetCharacterForFire; // 0x144(0x08)
	char pad_14C[0x4]; // 0x14c(0x04)
	struct TArray<struct AActor*> TraceActorsToIgnore; // 0x150(0x10)
	struct TArray<struct UPrimitiveComponent*> TraceCompsToIgnore; // 0x160(0x10)
	char pad_170[0x18]; // 0x170(0x18)
	struct UGPWeaponGlobals* WeaponGlobals; // 0x188(0x08)
	char pad_190[0x78]; // 0x190(0x78)
	struct UGPPlayerInput* PlayerInput; // 0x208(0x08)
	char pad_210[0x1c]; // 0x210(0x1c)
	struct TWeakObjectPtr<struct AActor> LastHitTarget; // 0x22c(0x08)
	char pad_234[0x9c]; // 0x234(0x9c)

	void OnMakeDamage(struct AGPWeaponBulletBase* Bullet, struct FHitResult& HitResult); // Function GPGameplay.WeaponFireAssistedAimingDFM.OnMakeDamage // (Final|Native|Protected|HasOutParms) // @ game+0x36f0860
	void OnInitAssistedAimingAssets(struct TArray<struct FSoftObjectPath> Curves); // Function GPGameplay.WeaponFireAssistedAimingDFM.OnInitAssistedAimingAssets // (Final|Native|Protected) // @ game+0x36f06d0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireDataAnalysis
// Size: 0x30 (Inherited: 0x30)
class UWeaponFireDataAnalysis : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.PlacementPreviewActorBase
// Size: 0x388 (Inherited: 0x378)
class APlacementPreviewActorBase : public AActor {
public:

	bool bUseRangeDisplay; // 0x378(0x01)
	char pad_379[0x3]; // 0x379(0x03)
	float RangeDisplay; // 0x37c(0x04)
	bool bPlacementPreviewValid; // 0x380(0x01)
	bool bPlacementPreviewConflict; // 0x381(0x01)
	char pad_382[0x6]; // 0x382(0x06)

	void BP_OnPreviewTransformChanged(struct FVector NewLoc, struct FRotator NewRot); // Function GPGameplay.PlacementPreviewActorBase.BP_OnPreviewTransformChanged // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x7ed88c0
	void BP_OnPreviewLocationValidChanged(bool CurrLocValid); // Function GPGameplay.PlacementPreviewActorBase.BP_OnPreviewLocationValidChanged // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void BP_OnPreviewConflictPlaceChanged(bool NewLocConflict); // Function GPGameplay.PlacementPreviewActorBase.BP_OnPreviewConflictPlaceChanged // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireRecoil
// Size: 0x48 (Inherited: 0x48)
class UWeaponFireRecoil : public UGPWeaponFireRecoilBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireRecoilPUBGM
// Size: 0x178 (Inherited: 0x48)
class UWeaponFireRecoilPUBGM : public UGPWeaponFireRecoilBase {
public:

	struct FRecoilConfigPUBGM RecoilConfig; // 0x48(0x38)
	struct FRecoilConfigPUBGM RecoilConfigForZooming; // 0x80(0x38)
	struct FCameraShakeConfigPUBGM CameraShakeConfig; // 0xb8(0x30)
	char pad_E8[0x90]; // 0xe8(0x90)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireSocket
// Size: 0x98 (Inherited: 0x80)
class UWeaponFireSocket : public UGPWeaponFireSocket {
public:

	char pad_80[0x18]; // 0x80(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireSpread
// Size: 0x48 (Inherited: 0x48)
class UWeaponFireSpread : public UGPWeaponFireSpreadBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireSpreadCFM
// Size: 0x68 (Inherited: 0x48)
class UWeaponFireSpreadCFM : public UGPWeaponFireSpreadBase {
public:

	int32_t MaxShotsFired; // 0x48(0x04)
	float MinInaccuracy; // 0x4c(0x04)
	float MaxInaccuracy; // 0x50(0x04)
	float SpreadBase; // 0x54(0x04)
	float SpreadModifierForStanding; // 0x58(0x04)
	float SpreadModifierForWalking; // 0x5c(0x04)
	float SpreadModifierForJumping; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireSpreadDFM
// Size: 0x4d0 (Inherited: 0x48)
class UWeaponFireSpreadDFM : public UGPWeaponFireSpreadBase {
public:

	/*struct TScriptInterface<IWeaponFireSpreadOwnerInterface>*/char WeaponFireSpreadDfmOwnerInterface[0x10]; // 0x48(0x10)
	struct FWeaponSpreadConfig WaistSpreadConfig; // 0x58(0xc0)
	struct FWeaponSpreadConfig AimSpreadConfig; // 0x118(0xc0)
	struct FWeaponSpreadModifierConfig WaistSpreadModifierConfig; // 0x1d8(0x40)
	struct FWeaponSpreadModifierConfig AimSpreadModifierConfig; // 0x218(0x40)
	char pad_258[0x220]; // 0x258(0x220)
	/*struct TSet<struct UObject*>*/char CacheObjects[0x50]; // 0x478(0x50)
	char pad_4C8[0x8]; // 0x4c8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireSpreadOwnerInterface
// Size: 0x30 (Inherited: 0x30)
class UWeaponFireSpreadOwnerInterface : public UGPWeaponFireSpreadOwnerInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireSpreadPUBGM
// Size: 0xe0 (Inherited: 0x48)
class UWeaponFireSpreadPUBGM : public UGPWeaponFireSpreadBase {
public:

	struct FSpreadConfigPUBGM SpreadConfig; // 0x48(0x34)
	struct FSpreadConfigPUBGM SpreadConfigForZooming; // 0x7c(0x34)
	/*struct TScriptInterface<IWeaponFireSpreadOwnerInterface>*/char WeaponFireSpreadOwnerInterface[0x10]; // 0xb0(0x10)
	char pad_C0[0x20]; // 0xc0(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireStat
// Size: 0x88 (Inherited: 0x38)
class UWeaponFireStat : public UWorldSubsystem {
public:

	char pad_38[0x30]; // 0x38(0x30)
	float FireToHitDelay; // 0x68(0x04)
	float AvgFireToHitDelay; // 0x6c(0x04)
	float FireToServerNotify; // 0x70(0x04)
	float AvgFireToServerNotify; // 0x74(0x04)
	/*struct FMulticastInlineDelegate*/char OnDataChange[0x10]; // 0x78(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFixedAudioInterface
// Size: 0x30 (Inherited: 0x30)
class UWeaponFixedAudioInterface : public UInterface {
public:


	void StopLowHPAudio(); // Function GPGameplay.WeaponFixedAudioInterface.StopLowHPAudio // (Native|Public) // @ game+0x174a9c0
	void StopDestoryAudio(); // Function GPGameplay.WeaponFixedAudioInterface.StopDestoryAudio // (Native|Public) // @ game+0x174a9a0
	void SetRotateVerticalSpeed(float InSpeed); // Function GPGameplay.WeaponFixedAudioInterface.SetRotateVerticalSpeed // (Native|Public) // @ game+0x361db00
	void SetRotateVerticalLimit(); // Function GPGameplay.WeaponFixedAudioInterface.SetRotateVerticalLimit // (Native|Public) // @ game+0xaa2b00
	void SetRotateHorizontalSpeed(float InSpeed); // Function GPGameplay.WeaponFixedAudioInterface.SetRotateHorizontalSpeed // (Native|Public) // @ game+0x1767a20
	void SetRotateHorizontalLimit(); // Function GPGameplay.WeaponFixedAudioInterface.SetRotateHorizontalLimit // (Native|Public) // @ game+0x928210
	void SetOvetHeatRTPC(float InValue); // Function GPGameplay.WeaponFixedAudioInterface.SetOvetHeatRTPC // (Native|Public) // @ game+0x3689840
	void PlayLowHPAudio(); // Function GPGameplay.WeaponFixedAudioInterface.PlayLowHPAudio // (Native|Public) // @ game+0x3689ad0
	void PlayGetOutAudio(); // Function GPGameplay.WeaponFixedAudioInterface.PlayGetOutAudio // (Native|Public) // @ game+0x12a7850
	void PlayGetInAudio(); // Function GPGameplay.WeaponFixedAudioInterface.PlayGetInAudio // (Native|Public) // @ game+0xaa2a20
	void PlayDestoryAudio(); // Function GPGameplay.WeaponFixedAudioInterface.PlayDestoryAudio // (Native|Public) // @ game+0x174af80
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFSMStateSwitchPot
// Size: 0xb8 (Inherited: 0xb0)
class UWeaponFSMStateSwitchPot : public UGPWeaponFSMStateBase {
public:

	char pad_B0[0x8]; // 0xb0(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentAdapter
// Size: 0x168 (Inherited: 0x168)
class UWeaponFuncComponentAdapter : public UGPWeaponFuncComponentAdapter {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentAdditiveAnim
// Size: 0x330 (Inherited: 0x168)
class UWeaponFuncComponentAdditiveAnim : public UGPWeaponFuncComponentBase {
public:

	char pad_168[0x178]; // 0x168(0x178)
	/*struct TSet<struct UObject*>*/char LoadedAssets[0x50]; // 0x2e0(0x50)

	void OnWeaponScopeRangeChanged(); // Function GPGameplay.WeaponFuncComponentAdditiveAnim.OnWeaponScopeRangeChanged // (Final|Native|Protected) // @ game+0x36f8310
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentAdditiveAnimInterface
// Size: 0x30 (Inherited: 0x30)
class UWeaponFuncComponentAdditiveAnimInterface : public UInterface {
public:


	void GetSpine2AdditiveResult(struct FTransform& Result); // Function GPGameplay.WeaponFuncComponentAdditiveAnimInterface.GetSpine2AdditiveResult // (Native|Public|HasOutParms|HasDefaults) // @ game+0x36f7cb0
	void GetLeftHandAdditiveResult(struct FTransform& Result); // Function GPGameplay.WeaponFuncComponentAdditiveAnimInterface.GetLeftHandAdditiveResult // (Native|Public|HasOutParms|HasDefaults) // @ game+0x36f7bd0
	bool EnableAdditiveAnim(); // Function GPGameplay.WeaponFuncComponentAdditiveAnimInterface.EnableAdditiveAnim // (Native|Public) // @ game+0xaa29f0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentAimOutline
// Size: 0x1a0 (Inherited: 0x100)
class UWeaponDataComponentAimOutline : public UActorComponent {
public:

	float AimCircleRadius; // 0x100(0x04)
	float AimCircleFarRadius; // 0x104(0x04)
	float AimLerpDistance; // 0x108(0x04)
	float AimDistance; // 0x10c(0x04)
	float AimStartDistance; // 0x110(0x04)
	float AimStartAngle; // 0x114(0x04)
	struct UCurveFloat* HeightAngleCure; // 0x118(0x08)
	bool bDebug; // 0x120(0x01)
	char pad_121[0x3]; // 0x121(0x03)
	struct FName CrossHairHudName; // 0x124(0x08)
	char pad_12C[0x4]; // 0x12c(0x04)
	struct UClass* LineActorClass; // 0x130(0x08)
	struct FVector LenthScale; // 0x138(0x0c)
	struct FName SocketName; // 0x144(0x08)
	char pad_14C[0x4]; // 0x14c(0x04)
	struct UClass* MarkerClass; // 0x150(0x08)
	bool HideLine; // 0x158(0x01)
	char pad_159[0x3]; // 0x159(0x03)
	float AimInterval; // 0x15c(0x04)
	float NormalInterval; // 0x160(0x04)
	struct FName TargetSocketName; // 0x164(0x08)
	struct FVector TargetSocketOffset; // 0x16c(0x0c)
	float SpecialReloadTime; // 0x178(0x04)
	int32_t SpecialReloadShootNum; // 0x17c(0x04)
	float UIAnimDelay; // 0x180(0x04)
	float TraceOffset; // 0x184(0x04)
	struct TArray<int32_t> InvalidAimSkillIDs; // 0x188(0x10)
	float TickRate; // 0x198(0x04)
	char pad_19C[0x4]; // 0x19c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentAimOutline
// Size: 0x280 (Inherited: 0x168)
class UWeaponFuncComponentAimOutline : public UGPWeaponFuncComponentBase {
public:

	char pad_168[0x8]; // 0x168(0x08)
	bool LocalZooming; // 0x170(0x01)
	char pad_171[0x7]; // 0x171(0x07)
	bool bIsLastSpectatingShowPanel; // 0x178(0x01)
	bool bAsyncRayTracing; // 0x179(0x01)
	char pad_17A[0x6]; // 0x17a(0x06)
	struct AActor* RayHitActor; // 0x180(0x08)
	struct AActor* LastRayHitActor; // 0x188(0x08)
	struct TArray<struct AActor*> RayHitActors; // 0x190(0x10)
	struct TArray<uint64_t> LastSerchUins; // 0x1a0(0x10)
	char pad_1B0[0x30]; // 0x1b0(0x30)
	struct TArray<struct AActor*> LineCubePool; // 0x1e0(0x10)
	struct TArray<struct AActor*> LineCubeUsed; // 0x1f0(0x10)
	struct TArray<struct TWeakObjectPtr<struct AActor>> MarkerUsed; // 0x200(0x10)
	struct TArray<struct TWeakObjectPtr<struct AActor>> MarkerCurrent; // 0x210(0x10)
	struct TMap<uint64_t, struct TWeakObjectPtr<struct UGPSupportWeaponMarkerItem>> MarkerMap; // 0x220(0x50)
	char pad_270[0x10]; // 0x270(0x10)

	void TickAimOutline(); // Function GPGameplay.WeaponFuncComponentAimOutline.TickAimOutline // (Final|Native|Public) // @ game+0x36f8400
	void SwithchOutWhenFire(); // Function GPGameplay.WeaponFuncComponentAimOutline.SwithchOutWhenFire // (Final|Native|Public) // @ game+0x36f83e0
	void SetHomingUin(uint64_t Uin); // Function GPGameplay.WeaponFuncComponentAimOutline.SetHomingUin // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x36f8350
	void RefreshUI(); // Function GPGameplay.WeaponFuncComponentAimOutline.RefreshUI // (Final|Native|Public|BlueprintCallable) // @ game+0x36f8330
	void OnWeaponInteractive(bool PutOrGet); // Function GPGameplay.WeaponFuncComponentAimOutline.OnWeaponInteractive // (Native|Public) // @ game+0x36f8280
	void OnSupportAimShow(struct FString FunctionName, struct UBaseUIView* View); // Function GPGameplay.WeaponFuncComponentAimOutline.OnSupportAimShow // (Final|Native|Public) // @ game+0x36f80c0
	void OnAmmoCountChange(float WeaponAmmoCount, float CarryWeaponAmmoCount); // Function GPGameplay.WeaponFuncComponentAimOutline.OnAmmoCountChange // (Final|Native|Public) // @ game+0x36f7dd0
	void AsyncRayTrace(); // Function GPGameplay.WeaponFuncComponentAimOutline.AsyncRayTrace // (Final|Native|Public) // @ game+0x36f7bb0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AutoAddAmmoHelper
// Size: 0x50 (Inherited: 0x30)
class UAutoAddAmmoHelper : public UObject {
public:

	char pad_30[0x10]; // 0x30(0x10)
	struct UWeaponFuncComponentAmmo* FuncAmmo; // 0x40(0x08)
	char pad_48[0x8]; // 0x48(0x08)

	void OnModifyAmmoTimeout(); // Function GPGameplay.AutoAddAmmoHelper.OnModifyAmmoTimeout // (Final|Native|Public) // @ game+0x36f8020
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentAmmoInterface
// Size: 0x30 (Inherited: 0x30)
class UWeaponFuncComponentAmmoInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentAntiCheat
// Size: 0x2b0 (Inherited: 0x168)
class UWeaponFuncComponentAntiCheat : public UGPWeaponFuncComponentBase {
public:

	char pad_168[0x28]; // 0x168(0x28)
	/*struct TScriptInterface<IGPWeaponDataInterface>*/char WeaponDataInterface[0x10]; // 0x190(0x10)
	char pad_1A0[0x110]; // 0x1a0(0x110)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentBulletModel
// Size: 0x480 (Inherited: 0x168)
class UWeaponFuncComponentBulletModel : public UGPWeaponFuncComponentBase {
public:

	char pad_168[0xe0]; // 0x168(0xe0)
	struct UObject* BulletMesh; // 0x248(0x08)
	struct UObject* LeafSpringMesh; // 0x250(0x08)
	char pad_258[0x8]; // 0x258(0x08)
	struct FMeshChildrenInfo MagazineChildrenInfo; // 0x260(0x70)
	struct FMeshChildrenInfo CLMagazineChildrenInfo; // 0x2d0(0x70)
	struct FMeshChildrenInfo RecChildrenInfo; // 0x340(0x70)
	char pad_3B0[0x68]; // 0x3b0(0x68)
	uint64_t SkinApperanceId; // 0x418(0x08)
	bool bHasSkinBulletMesh; // 0x420(0x01)
	char pad_421[0x7]; // 0x421(0x07)
	/*struct TSoftObjectPtr<UObject>*/char SkinBulletMesh[0x28]; // 0x428(0x28)
	uint64_t LastSkinApperanceId; // 0x450(0x08)
	uint64_t SkinGid; // 0x458(0x08)
	uint64_t LastSkinGID; // 0x460(0x08)
	struct UMaterialInstanceDynamic* DynamicMaterialForSkin; // 0x468(0x08)
	struct TArray<struct UObject*> CacheSkinAssets; // 0x470(0x10)

	void UpdateSkinMaterial(struct UObject* NewMeshPtr, uint64_t AmmoId); // Function GPGameplay.WeaponFuncComponentBulletModel.UpdateSkinMaterial // (Final|Native|Protected) // @ game+0x36f8420
	void OnLoadSkinAssets(struct TArray<struct FSoftObjectPath> SoftObjectPaths); // Function GPGameplay.WeaponFuncComponentBulletModel.OnLoadSkinAssets // (Final|Native|Public) // @ game+0x36f7e90
	void HideBulletModelExceptRec(); // Function GPGameplay.WeaponFuncComponentBulletModel.HideBulletModelExceptRec // (Final|Native|Protected) // @ game+0x36f7db0
	void HideBulletModel(); // Function GPGameplay.WeaponFuncComponentBulletModel.HideBulletModel // (Final|Native|Protected) // @ game+0x36f7d90
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentDamage
// Size: 0x168 (Inherited: 0x168)
class UWeaponFuncComponentDamage : public UGPWeaponFuncComponentDamage {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentFireShake
// Size: 0x940 (Inherited: 0x168)
class UWeaponFuncComponentFireShake : public UGPWeaponFuncComponentBase {
public:

	char pad_168[0xc0]; // 0x168(0xc0)
	struct FCameraRollData CameraRollData; // 0x228(0x518)
	struct FShakeRuntimeItem LocXRuntimeItem; // 0x740(0x78)
	struct FShakeRuntimeItem LocYRuntimeItem; // 0x7b8(0x78)
	struct FShakeRuntimeItem LocZRuntimeItem; // 0x830(0x78)
	char pad_8A8[0x38]; // 0x8a8(0x38)
	struct UWeaponDataComponentFiring* FDFiring; // 0x8e0(0x08)
	struct UWeaponFireRecoilDFM* FireRecoil; // 0x8e8(0x08)
	/*struct TSet<struct UObject*>*/char LoadedAssets[0x50]; // 0x8f0(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentFiringAnim
// Size: 0x2c50 (Inherited: 0x168)
class UWeaponFuncComponentFiringAnim : public UGPWeaponFuncComponentBase {
public:

	char pad_168[0x2a60]; // 0x168(0x2a60)
	struct UWeaponDataComponentState* DCState; // 0x2bc8(0x08)
	struct UWeaponFuncComponentOffset* FuncOffset; // 0x2bd0(0x08)
	struct UWeaponFuncComponentZoom* FuncZoom; // 0x2bd8(0x08)
	struct UWeaponFuncComponentAppearance* ViewAppearance; // 0x2be0(0x08)
	struct UWeaponDataComponentAdapter* DcAdapter; // 0x2be8(0x08)
	/*struct TSet<struct UObject*>*/char AssetCache[0x50]; // 0x2bf0(0x50)
	struct TWeakObjectPtr<struct AGPPlayerCameraManager> IGPCamMgr; // 0x2c40(0x08)
	char pad_2C48[0x8]; // 0x2c48(0x08)

	void OnUseRTChanged(); // Function GPGameplay.WeaponFuncComponentFiringAnim.OnUseRTChanged // (Final|Native|Protected) // @ game+0x36fdc30
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentGunKick
// Size: 0x300 (Inherited: 0x168)
class UWeaponFuncComponentGunKick : public UGPWeaponFuncComponentBase {
public:

	char pad_168[0x148]; // 0x168(0x148)
	/*struct TSet<struct UCurveVector*>*/char CacheCurves[0x50]; // 0x2b0(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentInspect
// Size: 0x1b8 (Inherited: 0x168)
class UWeaponFuncComponentInspect : public UGPWeaponFuncComponentBase {
public:

	char pad_168[0x8]; // 0x168(0x08)
	struct TWeakObjectPtr<struct UWeaponDataComponentAnim> DCAnim; // 0x170(0x08)
	float ThisInspectEndTime; // 0x178(0x04)
	float ThisInspectTime; // 0x17c(0x04)
	float ExitInspectTime; // 0x180(0x04)
	char pad_184[0x4]; // 0x184(0x04)
	struct UAnimMontage* WeaponInspectMontage; // 0x188(0x08)
	bool bIsTPPBefore; // 0x190(0x01)
	char pad_191[0x3]; // 0x191(0x03)
	struct TWeakObjectPtr<struct UGPCameraModeComponent> DCCameraMode; // 0x194(0x08)
	char pad_19C[0x1c]; // 0x19c(0x1c)

	void CheckInspectEnd(bool& bStopInspect); // Function GPGameplay.WeaponFuncComponentInspect.CheckInspectEnd // (Final|Native|Protected|HasOutParms) // @ game+0x36fca60
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentInspectInterface
// Size: 0x30 (Inherited: 0x30)
class UWeaponFuncComponentInspectInterface : public UInterface {
public:


	bool IsInspecting(); // Function GPGameplay.WeaponFuncComponentInspectInterface.IsInspecting // (Native|Public) // @ game+0xaa29f0
	float GetInspectingLeftTime(); // Function GPGameplay.WeaponFuncComponentInspectInterface.GetInspectingLeftTime // (Native|Public) // @ game+0x36e1510
	bool EnableInspect(); // Function GPGameplay.WeaponFuncComponentInspectInterface.EnableInspect // (Native|Public) // @ game+0x928af0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentLayout
// Size: 0x210 (Inherited: 0x168)
class UWeaponFuncComponentLayout : public UGPWeaponFuncComponentBase {
public:

	char pad_168[0x18]; // 0x168(0x18)
	struct UCurveFloat* LayoutCurve; // 0x180(0x08)
	char pad_188[0x88]; // 0x188(0x88)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentOffset
// Size: 0x290 (Inherited: 0x168)
class UWeaponFuncComponentOffset : public UGPWeaponFuncComponentBase {
public:

	char pad_168[0x58]; // 0x168(0x58)
	struct UWeaponFuncComponentAppearance* ViewAppearance; // 0x1c0(0x08)
	struct UWeaponDataComponentAdapter* DcAdapter; // 0x1c8(0x08)
	struct UWeaponBlackboard* WeaponBlackboard; // 0x1d0(0x08)
	char pad_1D8[0xb8]; // 0x1d8(0xb8)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentPerk
// Size: 0x178 (Inherited: 0x168)
class UWeaponFuncComponentPerk : public UGPWeaponFuncComponentBase {
public:

	/*struct FMulticastInlineDelegate*/char PerkInfoChangedDelegate[0x10]; // 0x168(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentPVE
// Size: 0x170 (Inherited: 0x168)
class UWeaponFuncComponentPVE : public UGPWeaponFuncComponentBase {
public:

	char pad_168[0x8]; // 0x168(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentSpread
// Size: 0x460 (Inherited: 0x168)
class UWeaponFuncComponentSpread : public UGPWeaponFuncComponentBase {
public:

	char pad_168[0x20]; // 0x168(0x20)
	struct UGPWeaponFireSpreadBase* FireSpreadMethod; // 0x188(0x08)
	struct UWeaponDataComponentZoom* DataComponentZoom; // 0x190(0x08)
	char pad_198[0x2c8]; // 0x198(0x2c8)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentState
// Size: 0x168 (Inherited: 0x168)
class UWeaponFuncComponentState : public UGPWeaponFuncComponentState {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncCompPenetratingGun
// Size: 0x188 (Inherited: 0x168)
class UWeaponFuncCompPenetratingGun : public UGPWeaponFuncComponentBase {
public:

	bool bAsyncRayTracing; // 0x168(0x01)
	char pad_169[0xf]; // 0x169(0x0f)
	struct AActor* RayHitActor; // 0x178(0x08)
	char pad_180[0x8]; // 0x180(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponGameInstanceSubSystem
// Size: 0x40 (Inherited: 0x38)
class UWeaponGameInstanceSubSystem : public UGPSubsystemBase {
public:

	struct UWeaponConstAsset* CacheConstConfig; // 0x38(0x08)

	void ClearWeaponConstConfigCache(bool bForceClearInnerPreloadAsset); // Function GPGameplay.WeaponGameInstanceSubSystem.ClearWeaponConstConfigCache // (Final|Native|Public|BlueprintCallable) // @ game+0x36fcaf0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponGameModeDataTableMananger
// Size: 0x130 (Inherited: 0x30)
class UWeaponGameModeDataTableMananger : public UObject {
public:

	char pad_30[0x10]; // 0x30(0x10)
	struct TMap<uint64_t, struct FWeaponThrowableDataDamageArray> WeaponThrowableDataDamageMap; // 0x40(0x50)
	struct TMap<uint64_t, struct FWeaponThrowableDataProjectileArray> WeaponThrowableDataProjectileMap; // 0x90(0x50)
	struct TMap<uint64_t, struct FThreatMarkerDataArray> SkillThreatMarkerDataMap; // 0xe0(0x50)

	struct UWeaponGameModeDataTableMananger* STATIC_GetInstance(struct UObject* WorldContextObject); // Function GPGameplay.WeaponGameModeDataTableMananger.GetInstance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x36fd220
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponHudModel
// Size: 0x158 (Inherited: 0x30)
class UWeaponHudModel : public UObject {
public:

	struct AWeaponBase* WeaponObject; // 0x30(0x08)
	struct UWeaponHudController* WeaponHudController; // 0x38(0x08)
	uint32_t AttachPosition; // 0x40(0x04)
	uint32_t GunHash; // 0x44(0x04)
	enum class EGPWeaponFiringMode CurFiringMode; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
	struct TArray<enum class EGPWeaponFiringMode> SupportedFiringModes; // 0x50(0x10)
	bool bSupportLaser; // 0x60(0x01)
	bool bSupportFlashLight; // 0x61(0x01)
	bool bSupportBip; // 0x62(0x01)
	char pad_63[0x1]; // 0x63(0x01)
	int32_t CurPowerFlashCount; // 0x64(0x04)
	int32_t PowerFlashStateType; // 0x68(0x04)
	int32_t MAX_TACTICAL_EQUIP_NUM; // 0x6c(0x04)
	int32_t MAX_TACTICAL_EQUIP_NUM_EACH_SIDE; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
	struct TArray<char> DirectionEquipNum; // 0x78(0x10)
	struct TArray<char> DirectionEquipOnNum; // 0x88(0x10)
	struct TArray<char> bSupportTacticalEquips; // 0x98(0x10)
	struct TArray<struct UWeaponAdapterItemBase*> TacticalEquips; // 0xa8(0x10)
	float TriggerShowMustDuration; // 0xb8(0x04)
	float fKeyboardDownTime; // 0xbc(0x04)
	bool bShowTacticalEquipPanel; // 0xc0(0x01)
	bool bSupportQuicklyAdapt; // 0xc1(0x01)
	char pad_C2[0x6]; // 0xc2(0x06)
	struct TArray<struct FZoomRateItem> SupportedZoomRates; // 0xc8(0x10)
	int32_t CurZoomRateIndex; // 0xd8(0x04)
	char pad_DC[0x4]; // 0xdc(0x04)
	uint64_t CurScopeItemId; // 0xe0(0x08)
	char pad_E8[0x1]; // 0xe8(0x01)
	bool bSupportRangeFinder; // 0xe9(0x01)
	char pad_EA[0x2]; // 0xea(0x02)
	int32_t CurAmmoCount; // 0xec(0x04)
	int32_t ClipAmmoSize; // 0xf0(0x04)
	int32_t CarriedAmmoCount; // 0xf4(0x04)
	bool bEnableAmmoTip; // 0xf8(0x01)
	char pad_F9[0x3]; // 0xf9(0x03)
	float LowAmmoPresent; // 0xfc(0x04)
	struct FWeaponHudModelDelegates WeaponDelegates; // 0x100(0x50)
	float LastToggleTacticalEquipsTime; // 0x150(0x04)
	char pad_154[0x4]; // 0x154(0x04)

	void ToggleWeaponAddFunction(); // Function GPGameplay.WeaponHudModel.ToggleWeaponAddFunction // (Final|Native|Public) // @ game+0x36fe5f0
	void TickTacticalEquip(float DeltaTime); // Function GPGameplay.WeaponHudModel.TickTacticalEquip // (Final|Native|Public) // @ game+0x36fe570
	void ShowTacticalEquipPanel(bool IsDown); // Function GPGameplay.WeaponHudModel.ShowTacticalEquipPanel // (Final|Native|Public) // @ game+0x36fe2e0
	void OnSwitchTacticalEquip(bool IsDown); // Function GPGameplay.WeaponHudModel.OnSwitchTacticalEquip // (Final|Native|Public) // @ game+0x36fdba0
	void OnScopeAdapterChanged(); // Function GPGameplay.WeaponHudModel.OnScopeAdapterChanged // (Final|Native|Protected) // @ game+0x36fdb80
	void OnRangeScopeChanged(); // Function GPGameplay.WeaponHudModel.OnRangeScopeChanged // (Final|Native|Protected) // @ game+0x36fdb40
	void OnRangeFinderFunction(); // Function GPGameplay.WeaponHudModel.OnRangeFinderFunction // (Final|Native|Public) // @ game+0x36fdb20
	void OnPowerFlashState(int32_t StateType); // Function GPGameplay.WeaponHudModel.OnPowerFlashState // (Final|Native|Public) // @ game+0x36fdaa0
	void OnOpenPowerFlash(); // Function GPGameplay.WeaponHudModel.OnOpenPowerFlash // (Final|Native|Public) // @ game+0x36fda80
	void OnNotifyWeaponListChanged(); // Function GPGameplay.WeaponHudModel.OnNotifyWeaponListChanged // (Final|Native|Protected) // @ game+0x36fda60
	void OnNotifyWeaponDescChanged(); // Function GPGameplay.WeaponHudModel.OnNotifyWeaponDescChanged // (Final|Native|Protected) // @ game+0x36fda20
	void OnNotifyScopeChanged(bool bScopeAdapterChanged); // Function GPGameplay.WeaponHudModel.OnNotifyScopeChanged // (Final|Native|Protected) // @ game+0x36fd990
	void OnNotifyRepInventoryItem(); // Function GPGameplay.WeaponHudModel.OnNotifyRepInventoryItem // (Final|Native|Protected) // @ game+0x36fd970
	void OnNotifyBindCharacterChanged(); // Function GPGameplay.WeaponHudModel.OnNotifyBindCharacterChanged // (Final|Native|Protected) // @ game+0x36fd950
	void OnNotifyAmmoChanged(float AmmoCount, float CarryWeaponAmmoCount); // Function GPGameplay.WeaponHudModel.OnNotifyAmmoChanged // (Final|Native|Protected) // @ game+0x36fd890
	void OnNotifyActiveWeaponChanged(); // Function GPGameplay.WeaponHudModel.OnNotifyActiveWeaponChanged // (Final|Native|Protected) // @ game+0x36fd870
	bool GetDirAllTacticEquipsOpen(int32_t Direction); // Function GPGameplay.WeaponHudModel.GetDirAllTacticEquipsOpen // (Final|Native|Public) // @ game+0x36fd190
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponHudController
// Size: 0x150 (Inherited: 0x30)
class UWeaponHudController : public UObject {
public:

	struct TArray<struct UWeaponHudModel*> WeaponHudModels; // 0x30(0x10)
	struct FWeaponHudOptions HudOptions; // 0x40(0x01)
	char pad_41[0x57]; // 0x41(0x57)
	struct FWeaponHudControllerDelegates WeaponHudControllerDelegates; // 0x98(0x80)
	char pad_118[0x1c]; // 0x118(0x1c)
	struct TWeakObjectPtr<struct AWeaponBase> PreWeaponCache; // 0x134(0x08)
	struct TWeakObjectPtr<struct AWeaponBase> NewWeaponCache; // 0x13c(0x08)
	struct TWeakObjectPtr<struct UWeaponHudController> ThisWeakPtr; // 0x144(0x08)
	char pad_14C[0x4]; // 0x14c(0x04)

	void SwitchZoomRate(); // Function GPGameplay.WeaponHudController.SwitchZoomRate // (Final|Native|Public) // @ game+0x36fe550
	void SwitchToTargetWeapon(struct AWeaponBase* InWeapon); // Function GPGameplay.WeaponHudController.SwitchToTargetWeapon // (Final|Native|Public) // @ game+0x36fe4d0
	void SwitchToTargetScope(/*struct TScriptInterface<IRangeScopeInterface>& NewScope, int32_t ScopeZoomRateIndex*/); // Function GPGameplay.WeaponHudController.SwitchToTargetScope // (Final|Native|Public|HasOutParms) // @ game+0x36fe3f0
	void SwitchFireMode(struct AWeaponBase* InWeapon); // Function GPGameplay.WeaponHudController.SwitchFireMode // (Final|Native|Public) // @ game+0x36fe370
	void SetZoomType(enum class EScopeZoomType ZoomType); // Function GPGameplay.WeaponHudController.SetZoomType // (Final|Native|Public) // @ game+0x36fe260
	void OnNotifyWeaponListChanged(); // Function GPGameplay.WeaponHudController.OnNotifyWeaponListChanged // (Final|Native|Public) // @ game+0x36fda40
	void OnNotifyActiveWeaponChanged(struct AWeaponBase* PreWeapon, struct AWeaponBase* NewWeapon); // Function GPGameplay.WeaponHudController.OnNotifyActiveWeaponChanged // (Final|Native|Public) // @ game+0x36fd7b0
	void OnLocalPlayerPawnReady(); // Function GPGameplay.WeaponHudController.OnLocalPlayerPawnReady // (Final|Native|Public) // @ game+0x36fd790
	void OnLocalPlayerPawnChanged(struct AActor* OldCharacter, struct AActor* NewCharacter); // Function GPGameplay.WeaponHudController.OnLocalPlayerPawnChanged // (Final|Native|Public) // @ game+0x36fd6d0
	bool IsCurrentAiming(); // Function GPGameplay.WeaponHudController.IsCurrentAiming // (Final|Native|Public) // @ game+0x36fd5c0
	struct UWeaponHudModel* GetLastWeaponInfo(bool bIgnoreNull); // Function GPGameplay.WeaponHudController.GetLastWeaponInfo // (Final|Native|Public) // @ game+0x36fd2a0
	struct UWeaponHudModel* GetCurWeaponInfo(); // Function GPGameplay.WeaponHudController.GetCurWeaponInfo // (Final|Native|Public) // @ game+0x36fd160
	void GetCurScope(); // Function GPGameplay.WeaponHudController.GetCurScope // (Final|Native|Public) // @ game+0x36fd120
	struct UBreathInfo* GetBreathInfo(); // Function GPGameplay.WeaponHudController.GetBreathInfo // (Final|Native|Public|Const) // @ game+0x36fcf80
	struct UWeaponHudController* STATIC_Get(struct UObject* WorldContext); // Function GPGameplay.WeaponHudController.Get // (Final|Native|Static|Public) // @ game+0x36fcf00
	struct TArray<struct UWeaponHudModel*> FindWeaponsByEquipPositions(struct TArray<uint32_t> AttachPositions); // Function GPGameplay.WeaponHudController.FindWeaponsByEquipPositions // (Final|Native|Public) // @ game+0x36fcd80
	struct TArray<struct UWeaponHudModel*> FindWeaponsByEquipPosition(uint32_t AttachPosition); // Function GPGameplay.WeaponHudController.FindWeaponsByEquipPosition // (Final|Native|Public) // @ game+0x36fcca0
	struct UWeaponHudModel* FindWeaponInfo(struct AWeaponBase* Weapon); // Function GPGameplay.WeaponHudController.FindWeaponInfo // (Final|Native|Public) // @ game+0x36fcc10
	struct UWeaponHudModel* FindFirstWeaponByEquipPosition(uint32_t AttachPosition); // Function GPGameplay.WeaponHudController.FindFirstWeaponByEquipPosition // (Final|Native|Public) // @ game+0x36fcb80
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponInterface
// Size: 0x30 (Inherited: 0x30)
class UWeaponInterface : public UGPWeaponInterface {
public:


	void TryAddAmmoByCheckPoint(); // Function GPGameplay.WeaponInterface.TryAddAmmoByCheckPoint // (Native|Public) // @ game+0x3607f50
	bool ShouldDiscardWeaponOnDeactivateEnd(); // Function GPGameplay.WeaponInterface.ShouldDiscardWeaponOnDeactivateEnd // (Native|Public) // @ game+0x364e460
	void RefreshWeaponReplicatedExtraData(struct FWeaponReplicateExtraData& WeaponRepExtendData); // Function GPGameplay.WeaponInterface.RefreshWeaponReplicatedExtraData // (Native|Public|HasOutParms) // @ game+0x37032b0
	void RefreshWeaponAdapterDynamicAttributes(struct FModularWeaponDynamicAttributesBase& DynamicAttributes); // Function GPGameplay.WeaponInterface.RefreshWeaponAdapterDynamicAttributes // (Native|Public|HasOutParms) // @ game+0x37030e0
	float PlayFirstEquipAnim(float blendIn, float blendOut); // Function GPGameplay.WeaponInterface.PlayFirstEquipAnim // (Native|Public) // @ game+0x3702ee0
	float PlayFastUnEquipAnimNoBlend(struct FString ContextString, float blendIn, float blendOut); // Function GPGameplay.WeaponInterface.PlayFastUnEquipAnimNoBlend // (Native|Public) // @ game+0x3702d50
	float PlayFastUnEquipAnim(struct FString ContextString, float blendIn, float blendOut); // Function GPGameplay.WeaponInterface.PlayFastUnEquipAnim // (Native|Public) // @ game+0x3702bc0
	float PlayFastEquipAnim(struct FString ContextString, float blendIn, float blendOut); // Function GPGameplay.WeaponInterface.PlayFastEquipAnim // (Native|Public) // @ game+0x3702a30
	void OnWeaponDeactivateEnd(); // Function GPGameplay.WeaponInterface.OnWeaponDeactivateEnd // (Native|Public) // @ game+0x36080a0
	void OnWeaponDeactivateBegin(); // Function GPGameplay.WeaponInterface.OnWeaponDeactivateBegin // (Native|Public) // @ game+0x364e510
	void OnWeaponActivateEnd(); // Function GPGameplay.WeaponInterface.OnWeaponActivateEnd // (Native|Public) // @ game+0x364e4b0
	void OnWeaponActivateBegin(); // Function GPGameplay.WeaponInterface.OnWeaponActivateBegin // (Native|Public) // @ game+0x364e7b0
	bool IsSubmachineWeapon(); // Function GPGameplay.WeaponInterface.IsSubmachineWeapon // (Native|Public) // @ game+0x37028b0
	bool IsPVEWeapon(); // Function GPGameplay.WeaponInterface.IsPVEWeapon // (Native|Public) // @ game+0x3702850
	bool IsPistolWeapon(); // Function GPGameplay.WeaponInterface.IsPistolWeapon // (Native|Public) // @ game+0x3702880
	bool IsConfigEffective(); // Function GPGameplay.WeaponInterface.IsConfigEffective // (Native|Public) // @ game+0x37027f0
	float InteractivePutWeapon(struct FString ContextString, enum class EInteractivePutWeaponType PutWeaponType, bool NeedInacvtiveAnim, float blendIn, float blendOut, bool bUseAnimTime, float InAnimTime); // Function GPGameplay.WeaponInterface.InteractivePutWeapon // (Native|Public) // @ game+0x3702520
	float InteractiveGetWeapon(struct FString ContextString, enum class EInteractiveGetWeaponType GetWeaponType, float blendIn, float blendOut, bool bUseAnimTime, float InAnimTime); // Function GPGameplay.WeaponInterface.InteractiveGetWeapon // (Native|Public) // @ game+0x37022c0
	enum class EWeaponItemType GetWeaponType(); // Function GPGameplay.WeaponInterface.GetWeaponType // (Native|Public) // @ game+0x37021b0
	struct AWeaponBase* GetWeaponBase(); // Function GPGameplay.WeaponInterface.GetWeaponBase // (Native|Public) // @ game+0x3701c30
	void GetThisWeapon(); // Function GPGameplay.WeaponInterface.GetThisWeapon // (Native|Public) // @ game+0x3701b40
	void GetThirdPersonWeapon(); // Function GPGameplay.WeaponInterface.GetThirdPersonWeapon // (Native|Public) // @ game+0x3701b00
	struct FSoftObjectPath GetPartSkeletalMesh3P(uint64_t ItemID); // Function GPGameplay.WeaponInterface.GetPartSkeletalMesh3P // (Native|Public|HasDefaults) // @ game+0x3701a10
	struct FSoftObjectPath GetPartSkeletalMesh1P(uint64_t ItemID); // Function GPGameplay.WeaponInterface.GetPartSkeletalMesh1P // (Native|Public|HasDefaults) // @ game+0x3701960
	uint64_t GetOverrideAnimId(); // Function GPGameplay.WeaponInterface.GetOverrideAnimId // (Native|Public) // @ game+0x3701930
	void GetOrCreateThirdPersonWeapon(); // Function GPGameplay.WeaponInterface.GetOrCreateThirdPersonWeapon // (Native|Public) // @ game+0x37018f0
	struct UGPModularWeaponDesc* GetModularWeaponDesc(bool bRefreshDynamicAttr); // Function GPGameplay.WeaponInterface.GetModularWeaponDesc // (Native|Public) // @ game+0x3701770
	struct FItemID GetItemId(); // Function GPGameplay.WeaponInterface.GetItemId // (Native|Public) // @ game+0x37015c0
	void GetFirstPersonWeapon(); // Function GPGameplay.WeaponInterface.GetFirstPersonWeapon // (Native|Public) // @ game+0x3701580
	enum class EEquipmentPartDamageType GetEquipmentPartDamageType(); // Function GPGameplay.WeaponInterface.GetEquipmentPartDamageType // (Native|Public) // @ game+0x3701550
	struct FName GetCrrentAnimId(); // Function GPGameplay.WeaponInterface.GetCrrentAnimId // (Native|Public) // @ game+0x37012a0
	struct USkeletalMeshComponent* GetCharacterBagSkeletalMeshComponent(bool bUseFPP); // Function GPGameplay.WeaponInterface.GetCharacterBagSkeletalMeshComponent // (Native|Public) // @ game+0x3701200
	bool CanAimOn(); // Function GPGameplay.WeaponInterface.CanAimOn // (Native|Public) // @ game+0x3700ec0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponPreviewLineManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponPreviewLineManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponManagerInterface
// Size: 0x30 (Inherited: 0x30)
class UWeaponManagerInterface : public UGPWeaponManagerInterface {
public:


	void UnInit(); // Function GPGameplay.WeaponManagerInterface.UnInit // (Native|Public) // @ game+0x36d7690
	bool SwitchWeaponEquipPosition(uint32_t EquipPositionA, uint32_t EquipPositionB); // Function GPGameplay.WeaponManagerInterface.SwitchWeaponEquipPosition // (Native|Public) // @ game+0x3709910
	bool SwitchToWeapon(enum class ESwitchWeaponContext SWContext, uint32_t EquipPosition, enum class EWeaponSwitchType SwitchType); // Function GPGameplay.WeaponManagerInterface.SwitchToWeapon // (Native|Public) // @ game+0x3709800
	bool SwitchToTargetWeapon(enum class ESwitchWeaponContext SWContext, struct AWeaponBase* Weapon, enum class EWeaponSwitchType SwitchType, bool Force); // Function GPGameplay.WeaponManagerInterface.SwitchToTargetWeapon // (Native|Public) // @ game+0x37096b0
	bool SwitchToPreWeapon(enum class ESwitchWeaponContext SWContext, enum class EWeaponSwitchType SwitchType, bool bCanUseEmptyHand); // Function GPGameplay.WeaponManagerInterface.SwitchToPreWeapon // (Native|Public) // @ game+0x37095a0
	bool SwitchToNextWeapon(enum class ESwitchWeaponContext SWContext, enum class EWeaponSwitchType SwitchType, bool bCanUseEmptyHand); // Function GPGameplay.WeaponManagerInterface.SwitchToNextWeapon // (Native|Public) // @ game+0x3709490
	bool SwitchToMeleeWeapon(enum class ESwitchWeaponContext SWContext, enum class EWeaponSwitchType SwitchType, bool bCanUseEmptyHand); // Function GPGameplay.WeaponManagerInterface.SwitchToMeleeWeapon // (Native|Public) // @ game+0x3709380
	bool SwitchToMainWeapon(enum class ESwitchWeaponContext SWContext, enum class EWeaponSwitchType SwitchType); // Function GPGameplay.WeaponManagerInterface.SwitchToMainWeapon // (Native|Public) // @ game+0x37092b0
	bool SwitchToLastUsedWeapon(enum class ESwitchWeaponContext SWContext, enum class EWeaponSwitchType SwitchType, bool bCanUseEmptyHand, bool IncludeSkillWeapon); // Function GPGameplay.WeaponManagerInterface.SwitchToLastUsedWeapon // (Native|Public) // @ game+0x3709160
	bool SwitchToEmptyHand(enum class ESwitchWeaponContext SWContext, enum class EWeaponSwitchType SwitchType); // Function GPGameplay.WeaponManagerInterface.SwitchToEmptyHand // (Native|Public) // @ game+0x3709090
	bool SwitchToDefaultWeapon(enum class ESwitchWeaponContext SWContext, enum class EWeaponSwitchType SwitchType); // Function GPGameplay.WeaponManagerInterface.SwitchToDefaultWeapon // (Native|Public) // @ game+0x3708fc0
	bool RemoveWeaponInScene(/*struct TScriptInterface<IWeaponInterface>& Weapon*/); // Function GPGameplay.WeaponManagerInterface.RemoveWeaponInScene // (Native|Public|HasOutParms) // @ game+0x3708f10
	bool RemoveWeaponByWeaponId(uint64_t WeaponID, bool bRemoveAll); // Function GPGameplay.WeaponManagerInterface.RemoveWeaponByWeaponId // (Native|Public) // @ game+0x3708e40
	bool RemoveWeaponBySkillId(uint64_t SkillId, bool bRemoveAll); // Function GPGameplay.WeaponManagerInterface.RemoveWeaponBySkillId // (Native|Public) // @ game+0x3708d70
	bool RemoveWeapon(uint32_t EquipPosition); // Function GPGameplay.WeaponManagerInterface.RemoveWeapon // (Native|Public) // @ game+0x3708cd0
	bool RemoveAllWeaponExcludeSkillWeapon(bool bAutoSwitchNext); // Function GPGameplay.WeaponManagerInterface.RemoveAllWeaponExcludeSkillWeapon // (Native|Public) // @ game+0x3708c30
	bool RemoveAllWeapon(bool bAutoSwitchNext); // Function GPGameplay.WeaponManagerInterface.RemoveAllWeapon // (Native|Public) // @ game+0x3708b90
	void OnPostNetInit(); // Function GPGameplay.WeaponManagerInterface.OnPostNetInit // (Native|Public) // @ game+0x3708ab0
	void OnCharacterDied(); // Function GPGameplay.WeaponManagerInterface.OnCharacterDied // (Native|Public) // @ game+0x3708a90
	bool Init(); // Function GPGameplay.WeaponManagerInterface.Init // (Native|Public) // @ game+0x3708380
	bool HasPendingSwitchWeapon(); // Function GPGameplay.WeaponManagerInterface.HasPendingSwitchWeapon // (Native|Public) // @ game+0x3708350
	struct TArray<struct AWeaponBase*> GetWeaponList(); // Function GPGameplay.WeaponManagerInterface.GetWeaponList // (Native|Public) // @ game+0x3708270
	int32_t GetWeaponCount(bool bIncludeMeleeWeapon); // Function GPGameplay.WeaponManagerInterface.GetWeaponCount // (Native|Public) // @ game+0x37081d0
	void GetWeaponByPosition(uint32_t EquipPosition); // Function GPGameplay.WeaponManagerInterface.GetWeaponByPosition // (Native|Public) // @ game+0x3708130
	void GetWeaponByGid(uint64_t gid); // Function GPGameplay.WeaponManagerInterface.GetWeaponByGid // (Native|Public) // @ game+0x3708080
	void GetWeapon(uint32_t EquipPosition); // Function GPGameplay.WeaponManagerInterface.GetWeapon // (Native|Public) // @ game+0x3707fe0
	struct AWeaponBase* GetPendingActiveWeapon(); // Function GPGameplay.WeaponManagerInterface.GetPendingActiveWeapon // (Native|Public) // @ game+0x3707fb0
	void GetLastUsedWeapon(); // Function GPGameplay.WeaponManagerInterface.GetLastUsedWeapon // (Native|Public) // @ game+0x3707f70
	void GetEmptyHandWeapon(); // Function GPGameplay.WeaponManagerInterface.GetEmptyHandWeapon // (Native|Public) // @ game+0x3707ed0
	struct FString GetDebugString(); // Function GPGameplay.WeaponManagerInterface.GetDebugString // (Native|Public) // @ game+0x3707e50
	void GetCurrentWeapon(); // Function GPGameplay.WeaponManagerInterface.GetCurrentWeapon // (Native|Public) // @ game+0x3707e10
	void GetAllWeapon(); // Function GPGameplay.WeaponManagerInterface.GetAllWeapon // (Native|Public) // @ game+0x3707d40
	void GetAllEmptyHandWeapon(); // Function GPGameplay.WeaponManagerInterface.GetAllEmptyHandWeapon // (Native|Public) // @ game+0x3707d00
	struct TArray<struct AWeaponBase*> GetAllCurrentWeapon(); // Function GPGameplay.WeaponManagerInterface.GetAllCurrentWeapon // (Native|Public) // @ game+0x3707c20
	bool ForceSwitchToLastUsedWeapon(enum class ESwitchWeaponContext SWContext, enum class EWeaponSwitchType SwitchType, bool bCanUseEmptyHand, bool IncludeSkillWeapon); // Function GPGameplay.WeaponManagerInterface.ForceSwitchToLastUsedWeapon // (Native|Public) // @ game+0x3707ad0
	void EndInteractive(); // Function GPGameplay.WeaponManagerInterface.EndInteractive // (Native|Public) // @ game+0x3707ab0
	void BeginInteractive(); // Function GPGameplay.WeaponManagerInterface.BeginInteractive // (Native|Public) // @ game+0x36d80e0
	bool AddWeaponInScene(struct AWeaponBase* InWeapon, uint64_t RecID, uint64_t Guid, uint32_t EquipPosition); // Function GPGameplay.WeaponManagerInterface.AddWeaponInScene // (Native|Public) // @ game+0x3707970
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponMeleeDataAnimManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponMeleeDataAnimManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponMeleeComboDataManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponMeleeComboDataManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponMeleeDataAttributeManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponMeleeDataAttributeManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponMeleeDataAppearanceManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponMeleeDataAppearanceManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponObManager
// Size: 0x40 (Inherited: 0x30)
class UWeaponObManager : public UObject {
public:

	char pad_30[0x10]; // 0x30(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponOptimize
// Size: 0x30 (Inherited: 0x30)
class UWeaponOptimize : public UObject {
public:


	void STATIC_OptimizeWeaponMeshTick(struct USkeletalMeshComponent* MeshComp, bool InEnableTick); // Function GPGameplay.WeaponOptimize.OptimizeWeaponMeshTick // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3708ad0
	bool STATIC_IsWeaponWeapon3PEffectOptimizeEnabled(); // Function GPGameplay.WeaponOptimize.IsWeaponWeapon3PEffectOptimizeEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3708820
	bool STATIC_IsWeaponSignificanceEnabled(); // Function GPGameplay.WeaponOptimize.IsWeaponSignificanceEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x37087f0
	bool STATIC_IsWeaponMeshTickOptimizeEnabled(); // Function GPGameplay.WeaponOptimize.IsWeaponMeshTickOptimizeEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x37087c0
	bool STATIC_IsWeaponFeatureOptimizeEnable(); // Function GPGameplay.WeaponOptimize.IsWeaponFeatureOptimizeEnable // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3708790
	bool STATIC_IsWeaponFeatureDebugEnable(); // Function GPGameplay.WeaponOptimize.IsWeaponFeatureDebugEnable // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3708760
	bool STATIC_IsWeaponActorVisibleInDPVS_WeaponProxy(/*struct TScriptInterface<IGPWeaponProxyInterface>& InWeapon*/); // Function GPGameplay.WeaponOptimize.IsWeaponActorVisibleInDPVS_WeaponProxy // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x37086c0
	bool STATIC_IsWeaponActorVisibleInDPVS_Weapon(/*struct TScriptInterface<IGPWeaponInterface>& InWeapon*/); // Function GPGameplay.WeaponOptimize.IsWeaponActorVisibleInDPVS_Weapon // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3708620
	bool STATIC_IsFppObWeaponCreateDelay(); // Function GPGameplay.WeaponOptimize.IsFppObWeaponCreateDelay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x37085f0
	bool STATIC_IsFireTraceInfoCacheEnabled(); // Function GPGameplay.WeaponOptimize.IsFireTraceInfoCacheEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x37085c0
	bool STATIC_IsEnableWeaponDPVSDebug(); // Function GPGameplay.WeaponOptimize.IsEnableWeaponDPVSDebug // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3708590
	bool STATIC_IsAimingResultCacheEnabled(); // Function GPGameplay.WeaponOptimize.IsAimingResultCacheEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3708560
	bool STATIC_IsAiInstantHitEnabled(); // Function GPGameplay.WeaponOptimize.IsAiInstantHitEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3708530
	bool STATIC_Is3PWeaponPoolEnabled(); // Function GPGameplay.WeaponOptimize.Is3PWeaponPoolEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3708500
	bool STATIC_Is3PWeaponDataModifyEnabled(); // Function GPGameplay.WeaponOptimize.Is3PWeaponDataModifyEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x37084d0
	bool STATIC_Is3PWeaponBulletNetSyncedOnPC(); // Function GPGameplay.WeaponOptimize.Is3PWeaponBulletNetSyncedOnPC // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x37084a0
	bool STATIC_Is3PTraceOptimizeEnabled(); // Function GPGameplay.WeaponOptimize.Is3PTraceOptimizeEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3708470
	bool STATIC_Is3PSimpleEnabled(); // Function GPGameplay.WeaponOptimize.Is3PSimpleEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3708440
	bool STATIC_Is3PLoadWeaponAnimEnabled(); // Function GPGameplay.WeaponOptimize.Is3PLoadWeaponAnimEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3708410
	bool STATIC_Is3PLoadMeshEnabled(); // Function GPGameplay.WeaponOptimize.Is3PLoadMeshEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x37083e0
	bool STATIC_Is3PBulletTracerOptimizeEnabled(); // Function GPGameplay.WeaponOptimize.Is3PBulletTracerOptimizeEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x37083b0
	int32_t STATIC_GetWeaponWeapon3PSignificanceLevel(); // Function GPGameplay.WeaponOptimize.GetWeaponWeapon3PSignificanceLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3708320
	bool STATIC_GetIsEnableLaserHighFrequencyUpdate(); // Function GPGameplay.WeaponOptimize.GetIsEnableLaserHighFrequencyUpdate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3707f40
	int32_t STATIC_GetForceFeatureLevel(); // Function GPGameplay.WeaponOptimize.GetForceFeatureLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3707f10
	float STATIC_GetAppearanceTickInterval(bool b3P); // Function GPGameplay.WeaponOptimize.GetAppearanceTickInterval // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3707d80
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponProxyInterface
// Size: 0x30 (Inherited: 0x30)
class UWeaponProxyInterface : public UInterface {
public:


	bool SupportFXFunction(enum class EFxFuntionType FXType, struct FGPModularWeaponPartNode& FunctionNode); // Function GPGameplay.WeaponProxyInterface.SupportFXFunction // (Native|Public|HasOutParms) // @ game+0x370f450
	bool SupportFunction(enum class EWeaponAddFunction Func); // Function GPGameplay.WeaponProxyInterface.SupportFunction // (Native|Public) // @ game+0x370f550
	bool SupportAnimFunction(enum class EWeaponPartAnimFunctionType AnimType, struct FGPModularWeaponPartNode& FunctionNode); // Function GPGameplay.WeaponProxyInterface.SupportAnimFunction // (Native|Public|HasOutParms) // @ game+0x370f350
	bool IsAdapterExisted(enum class EWeaponAdapterType AdapterType); // Function GPGameplay.WeaponProxyInterface.IsAdapterExisted // (Native|Public) // @ game+0x370f200
	void InitAdapters(struct TArray<uint64_t> AdapterIds); // Function GPGameplay.WeaponProxyInterface.InitAdapters // (Native|Public) // @ game+0x370f0e0
	void GetZoomWaggleParam(float& WaggleScope, float& WaggleSpeed); // Function GPGameplay.WeaponProxyInterface.GetZoomWaggleParam // (Native|Public|HasOutParms) // @ game+0x370f000
	float GetZoomOutAnimTime(); // Function GPGameplay.WeaponProxyInterface.GetZoomOutAnimTime // (Native|Public) // @ game+0x1755080
	float GetZoomInAnimTime(); // Function GPGameplay.WeaponProxyInterface.GetZoomInAnimTime // (Native|Public) // @ game+0x36e18d0
	struct UWeaponAdapterRangeScopeManager* GetWeaponDataRangeScopeManager(); // Function GPGameplay.WeaponProxyInterface.GetWeaponDataRangeScopeManager // (Native|Public) // @ game+0x370efd0
	void GetWeaponDataConfig(); // Function GPGameplay.WeaponProxyInterface.GetWeaponDataConfig // (Native|Public) // @ game+0x370ef90
	void GetWeaponDataAppearance(); // Function GPGameplay.WeaponProxyInterface.GetWeaponDataAppearance // (Native|Public) // @ game+0x370ef50
	void GetWeaponDataAdapter(); // Function GPGameplay.WeaponProxyInterface.GetWeaponDataAdapter // (Native|Public) // @ game+0x370ef10
	bool GetSupportOpenSightOnFire(); // Function GPGameplay.WeaponProxyInterface.GetSupportOpenSightOnFire // (Native|Public) // @ game+0x1755340
	uint64_t GetOverrideAnimId(); // Function GPGameplay.WeaponProxyInterface.GetOverrideAnimId // (Native|Public) // @ game+0x3583160
	uint64_t GetMagazineItemID(); // Function GPGameplay.WeaponProxyInterface.GetMagazineItemID // (Native|Public) // @ game+0x370ed40
	struct USkeletalMeshComponent* GetCharacterBagSkeletalMeshComponent(bool bUseFPP); // Function GPGameplay.WeaponProxyInterface.GetCharacterBagSkeletalMeshComponent // (Native|Public) // @ game+0x370ec10
	struct UAnimSequence* GetAccessoryAnimSeq(enum class EWeaponAdapterItemType AdapterItemType, enum class EWeaponAdapterHandIKPoseType IKPoseType); // Function GPGameplay.WeaponProxyInterface.GetAccessoryAnimSeq // (Native|Public) // @ game+0x36d1660
	bool CanZoom(); // Function GPGameplay.WeaponProxyInterface.CanZoom // (Native|Public) // @ game+0x1036840
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponPVEDataAttributeManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponPVEDataAttributeManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponReplicateComponent
// Size: 0x840 (Inherited: 0x580)
class UWeaponReplicateComponent : public UGPWeaponReplicateComponent {
public:

	char pad_580[0xd0]; // 0x580(0xd0)
	struct TArray<struct AActor*> CacheCreatedActor; // 0x650(0x10)
	/*struct TArray<struct TScriptInterface<IWeaponInterface>>*/char WeaponAttachmentList[0x10]; // 0x660(0x10)
	char pad_670[0x8]; // 0x670(0x08)
	struct FWeaponReplicateExtraDataArray WeaponReplicatedExtraDataList; // 0x678(0x118)
	struct FWeaponAdapterDynamicAttributesData AdapterDynamicAttrData; // 0x790(0x70)
	struct TArray<struct FWeaponOBAmmoDataInfo> OBAmmoDataInfos; // 0x800(0x10)
	struct TArray<struct FWeaponOBAmmoNum> OBAmmoNum; // 0x810(0x10)
	struct FWeaponIdentity OBWeaponIdentity; // 0x820(0x04)
	char pad_824[0x4]; // 0x824(0x04)
	struct FWeaponDPVSProxy WeaponDPVSProxy; // 0x828(0x18)

	void UpdateWeaponExtraData(struct FWeaponIdentity& InWeaponIdentity); // Function GPGameplay.WeaponReplicateComponent.UpdateWeaponExtraData // (Final|Native|Protected|HasOutParms) // @ game+0x370f5e0
	void OnRepExtraDataList(); // Function GPGameplay.WeaponReplicateComponent.OnRepExtraDataList // (Final|Native|Protected) // @ game+0x370f290
	void OnRep_WeaponDPVSProxy(); // Function GPGameplay.WeaponReplicateComponent.OnRep_WeaponDPVSProxy // (Final|Native|Public) // @ game+0x370f330
	void OnRep_OBWeaponIdentity(); // Function GPGameplay.WeaponReplicateComponent.OnRep_OBWeaponIdentity // (Final|Native|Protected) // @ game+0x370f310
	void OnRep_OBWeaponAmmoNum(); // Function GPGameplay.WeaponReplicateComponent.OnRep_OBWeaponAmmoNum // (Final|Native|Protected) // @ game+0x370f2f0
	void OnRep_OBWeaponAmmoDataInfo(); // Function GPGameplay.WeaponReplicateComponent.OnRep_OBWeaponAmmoDataInfo // (Final|Native|Protected) // @ game+0x370f2d0
	void OnRep_AdapterDynamicAttrData(); // Function GPGameplay.WeaponReplicateComponent.OnRep_AdapterDynamicAttrData // (Final|Native|Protected) // @ game+0x370f2b0
	struct FWeaponIdentity GetOBWeaponIdentity(); // Function GPGameplay.WeaponReplicateComponent.GetOBWeaponIdentity // (Final|Native|Public) // @ game+0x370ed70
	struct FWeaponOBAmmoNum GetObAmmoInfo(struct FWeaponIdentity& Identity); // Function GPGameplay.WeaponReplicateComponent.GetObAmmoInfo // (Final|Native|Public|HasOutParms) // @ game+0x370ee60
	struct FWeaponOBAmmoDataInfo GetObAmmoDataInfo(struct FWeaponIdentity& Identity); // Function GPGameplay.WeaponReplicateComponent.GetObAmmoDataInfo // (Final|Native|Public|HasOutParms) // @ game+0x370eda0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponSkinApperanceModiferBase
// Size: 0x40 (Inherited: 0x30)
class UWeaponSkinApperanceModiferBase : public UObject {
public:

	/*struct TScriptInterface<IWeaponSkinModifierInterface>*/char SkinModifierInterface[0x10]; // 0x30(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponSkinComponentBase
// Size: 0x5f8 (Inherited: 0x5f0)
class UWeaponSkinComponentBase : public UGPWeaponDataComponentBase {
public:

	struct AWeaponBase* WeaponBaseOwner; // 0x5f0(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.MysticalSkinBasicParamTableManager
// Size: 0x40 (Inherited: 0x38)
class UMysticalSkinBasicParamTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x8]; // 0x38(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.MysticalSkinInfoDataTableManager
// Size: 0x48 (Inherited: 0x38)
class UMysticalSkinInfoDataTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.MysticalSkinIntervalManager
// Size: 0x48 (Inherited: 0x38)
class UMysticalSkinIntervalManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.FMysticalSkinColorMaterialManager
// Size: 0x48 (Inherited: 0x38)
class UFMysticalSkinColorMaterialManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	uint64_t GetDefaultAppearanceID(uint64_t InSkinId); // Function GPGameplay.FMysticalSkinColorMaterialManager.GetDefaultAppearanceID // (Final|Native|Public) // @ game+0x370ecb0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponSkinModifierInterface
// Size: 0x30 (Inherited: 0x30)
class UWeaponSkinModifierInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponSkinModifierManager
// Size: 0x88 (Inherited: 0x38)
class UWeaponSkinModifierManager : public UWorldSubsystem {
public:

	struct TMap<enum class EWeaponSkinRenderMode, struct UWeaponSkinModifier*> SkinModifiers; // 0x38(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponSkinUtil
// Size: 0x30 (Inherited: 0x30)
class UWeaponSkinUtil : public UObject {
public:


	void STATIC_SetMaterialBaseParam(struct UMaterialInterface* OriginMaterial, struct UMaterialInstanceDynamic* DynamicMaterial, struct FMatrix LocalToMesh); // Function GPGameplay.WeaponSkinUtil.SetMaterialBaseParam // (Final|Native|Static|Public|HasDefaults) // @ game+0x3713d30
	struct TArray<struct UMaterialInterface*> STATIC_ReplaceMaterials(struct USkeletalMeshComponent* InMeshComponent, struct FReplaceMaterialParam ReplaceParam); // Function GPGameplay.WeaponSkinUtil.ReplaceMaterials // (Final|Native|Static|Public) // @ game+0x3713b20
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponSystem
// Size: 0x390 (Inherited: 0x38)
class UWeaponSystem : public UWorldSubsystem {
public:

	char pad_38[0x20]; // 0x38(0x20)
	struct FAimingResult CacheAimingResult; // 0x58(0xb0)
	char pad_108[0x8]; // 0x108(0x08)
	struct TMap<uint32_t, struct USkeletalMesh*> MergeSkeletalMeshCache; // 0x110(0x50)
	struct TMap<uint64_t, struct FAnimData> WeaponAnimCache; // 0x160(0x50)
	struct TMap<struct FSoftObjectPath, struct UObject*> CacheAssets; // 0x1b0(0x50)
	char pad_200[0x8]; // 0x200(0x08)
	struct UWeaponObManager* WeaponObManager; // 0x208(0x08)
	char pad_210[0x8]; // 0x210(0x08)
	struct UWeaponConstAsset* CacheConstConfig; // 0x218(0x08)
	struct UPhysicsAsset* CacheStdPhysicsAsset; // 0x220(0x08)
	struct UPhysicsAsset* CacheValidateStdPhysicsAsset; // 0x228(0x08)
	/*struct TScriptInterface<IWeaponDependentInterface>*/char WeaponDependent[0x10]; // 0x230(0x10)
	char pad_240[0x28]; // 0x240(0x28)
	struct UWeaponHudController* WeaponHudModel; // 0x268(0x08)
	char pad_270[0x58]; // 0x270(0x58)
	struct URangeScopeSceneCaptureComponent* ScopeSceneCaptureComponent; // 0x2c8(0x08)
	char pad_2D0[0xc0]; // 0x2d0(0xc0)

	void OnMergeComplete(bool InbMergeSuccess, struct UModularWeaponDesc* Desc, struct USkeletalMesh* MergeSkeletalMesh, uint32_t MeshID, bool bInFirstPerson, bool bInFPP); // Function GPGameplay.WeaponSystem.OnMergeComplete // (Final|Native|Public) // @ game+0x37137a0
	void OnEnterGameFlowStage(enum class EGameFlowStageType GameFlowStage); // Function GPGameplay.WeaponSystem.OnEnterGameFlowStage // (Final|Native|Public) // @ game+0x3713700
	void OnAnimLoadComplete(struct TArray<struct FSoftObjectPath> InPaths, uint64_t WeaponID); // Function GPGameplay.WeaponSystem.OnAnimLoadComplete // (Final|Native|Public) // @ game+0x3713280
	struct UWeaponHudController* GetOrCreateWeaponHudModel(); // Function GPGameplay.WeaponSystem.GetOrCreateWeaponHudModel // (Native|Public) // @ game+0x3712dc0
	struct UObject* AsyncLoadAndCacheObject(struct FSoftObjectPath& ObjectPath); // Function GPGameplay.WeaponSystem.AsyncLoadAndCacheObject // (Native|Public|HasOutParms|HasDefaults) // @ game+0x37128c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponSystemInterface
// Size: 0x30 (Inherited: 0x30)
class UWeaponSystemInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowableAttachInterface
// Size: 0x30 (Inherited: 0x30)
class UWeaponThrowableAttachInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowableDataComponentPreview
// Size: 0x748 (Inherited: 0x5f0)
class UWeaponThrowableDataComponentPreview : public UGPWeaponDataComponentBase {
public:

	/*struct TSoftClassPtr<UObject>*/char PreviewLineClassPtr[0x28]; // 0x5f0(0x28)
	/*struct TSoftClassPtr<UObject>*/char HitPointActorClassPtr[0x28]; // 0x618(0x28)
	bool bLerpPreviewVelocity; // 0x640(0x01)
	char pad_641[0x3]; // 0x641(0x03)
	float VelocityLerpFactor; // 0x644(0x04)
	struct AGPPreviewLineActorBase* PreviewLine; // 0x648(0x08)
	struct AActor* HitPointActor; // 0x650(0x08)
	bool bIsPreviewLineVisible; // 0x658(0x01)
	bool bIsPreviewLineVisibleDirty; // 0x659(0x01)
	char pad_65A[0x6]; // 0x65a(0x06)
	struct UWeaponFireModeThrowable* FireModeThrowable; // 0x660(0x08)
	struct UWeaponFireModeParamsThrowable* FireModeParamsThrowable; // 0x668(0x08)
	char pad_670[0xc4]; // 0x670(0xc4)
	float ClientFakeEndTime; // 0x734(0x04)
	struct FVector ClientFakeOffset; // 0x738(0x0c)
	int32_t PreviewLineSimFrequency; // 0x744(0x04)

	void UpdatePreviewVisible(); // Function GPGameplay.WeaponThrowableDataComponentPreview.UpdatePreviewVisible // (Final|Native|Private) // @ game+0x3716e50
	void UpdatePreviewDeltaVelocity(struct FVector& TargetDeltaVelocity); // Function GPGameplay.WeaponThrowableDataComponentPreview.UpdatePreviewDeltaVelocity // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x3716dc0
	void TryInitPreviewLine(); // Function GPGameplay.WeaponThrowableDataComponentPreview.TryInitPreviewLine // (Final|Native|Public) // @ game+0x3716da0
	void StartAyncPredict(); // Function GPGameplay.WeaponThrowableDataComponentPreview.StartAyncPredict // (Final|Native|Public) // @ game+0x3716d80
	void ShowPreviewLine(); // Function GPGameplay.WeaponThrowableDataComponentPreview.ShowPreviewLine // (Final|Native|Private) // @ game+0x3716d60
	void OnPreviewAssetLoaded(struct TArray<struct FSoftObjectPath> Assets); // Function GPGameplay.WeaponThrowableDataComponentPreview.OnPreviewAssetLoaded // (Final|Native|Public) // @ game+0x3716bd0
	void InitUseAsyncTraceSystem(); // Function GPGameplay.WeaponThrowableDataComponentPreview.InitUseAsyncTraceSystem // (Final|Native|Public) // @ game+0x3716b90
	void InitPredictBaseParams(); // Function GPGameplay.WeaponThrowableDataComponentPreview.InitPredictBaseParams // (Final|Native|Public) // @ game+0x3716b70
	void HidePreviewLine(); // Function GPGameplay.WeaponThrowableDataComponentPreview.HidePreviewLine // (Final|Native|Private) // @ game+0x3716b50
	struct FVector GetClientFakeOffset(float Time); // Function GPGameplay.WeaponThrowableDataComponentPreview.GetClientFakeOffset // (Final|Native|Private|HasDefaults|Const) // @ game+0x3716ab0
	float GetClientFakeEndTime(); // Function GPGameplay.WeaponThrowableDataComponentPreview.GetClientFakeEndTime // (Final|Native|Public|Const) // @ game+0x3716a90
	void ClearClientFakeEndTime(); // Function GPGameplay.WeaponThrowableDataComponentPreview.ClearClientFakeEndTime // (Final|Native|Public) // @ game+0x37169e0
	void CheckClientFakeOffset(float InOffsetTime); // Function GPGameplay.WeaponThrowableDataComponentPreview.CheckClientFakeOffset // (Final|Native|Private) // @ game+0x3716960
	void CancelPreviewAssetLoad(); // Function GPGameplay.WeaponThrowableDataComponentPreview.CancelPreviewAssetLoad // (Final|Native|Public) // @ game+0x3716940
	void CancelAyncPredict(); // Function GPGameplay.WeaponThrowableDataComponentPreview.CancelAyncPredict // (Final|Native|Public) // @ game+0x3716920
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowableTableManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponThrowableTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowableDataAttributeManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponThrowableDataAttributeManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowableSkinApperanceTableManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponThrowableSkinApperanceTableManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowableDataProjectileManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponThrowableDataProjectileManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowableDataDamageManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponThrowableDataDamageManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowableDataFXManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponThrowableDataFXManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowableDataAudioManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponThrowableDataAudioManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowableDataAnimManager
// Size: 0x48 (Inherited: 0x38)
class UWeaponThrowableDataAnimManager : public UDataTableSystemManagerBase {
public:

	char pad_38[0x10]; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowableFuncComponentFiring
// Size: 0x188 (Inherited: 0x188)
class UWeaponThrowableFuncComponentFiring : public UGPWeaponFuncComponentFiring {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowableSpawnActorInterface
// Size: 0x30 (Inherited: 0x30)
class UWeaponThrowableSpawnActorInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowUASFXComponent
// Size: 0x290 (Inherited: 0x168)
class UWeaponThrowUASFXComponent : public UGPWeaponFuncComponentBase {
public:

	struct TArray<struct UFXResourceContainerComponent*> FXArray; // 0x168(0x10)
	char pad_178[0x10]; // 0x178(0x10)
	bool bIsPlayedFx; // 0x188(0x01)
	bool bIsFXInDelayHide; // 0x189(0x01)
	bool bIsPlay3PEffect; // 0x18a(0x01)
	char pad_18B[0xd]; // 0x18b(0x0d)
	float FXDelayShowTime; // 0x198(0x04)
	struct FName UASFXNameLeft; // 0x19c(0x08)
	struct FName UASFXNameRight; // 0x1a4(0x08)
	struct FName UASFXNameLeft_Other; // 0x1ac(0x08)
	struct FName UASFXNameRight_Other; // 0x1b4(0x08)
	char pad_1BC[0x4]; // 0x1bc(0x04)
	struct FTransform UASFXLeftLoccalTrans; // 0x1c0(0x30)
	struct FTransform UASFXRightLoccalTrans; // 0x1f0(0x30)
	struct FTransform UASFXLeftLoccalTrans_3P; // 0x220(0x30)
	struct FTransform UASFXRightLoccalTrans_3P; // 0x250(0x30)
	struct TArray<struct FName> WeaponMeshSocketArray; // 0x280(0x10)

	void DestroyEffect(); // Function GPGameplay.WeaponThrowUASFXComponent.DestroyEffect // (Final|Native|Protected) // @ game+0x3719030
	void DelayActiveFX(); // Function GPGameplay.WeaponThrowUASFXComponent.DelayActiveFX // (Final|Native|Protected) // @ game+0x3719010
	void BeginPlayEffect(); // Function GPGameplay.WeaponThrowUASFXComponent.BeginPlayEffect // (Final|Native|Protected) // @ game+0x3718d50
	void ActiveFXWithVisible(); // Function GPGameplay.WeaponThrowUASFXComponent.ActiveFXWithVisible // (Final|Native|Protected) // @ game+0x3718d30
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponViewComponentImpact
// Size: 0x1910 (Inherited: 0x158)
class UWeaponViewComponentImpact : public UGPWeaponViewComponentImpact {
public:

	float bImpactLightMinTime; // 0x158(0x04)
	char pad_15C[0x172c]; // 0x15c(0x172c)
	/*struct TScriptInterface<IWeaponProxyInterface>*/char WeaponProxy[0x10]; // 0x1888(0x10)
	char pad_1898[0x8]; // 0x1898(0x08)
	struct AGPPlayerCameraManager* CachePlayerCameraManager; // 0x18a0(0x08)
	char pad_18A8[0x8]; // 0x18a8(0x08)
	struct TMap<enum class EHitEffectColor, struct FLinearColor> HitEffectColorMap; // 0x18b0(0x50)
	char pad_1900[0x10]; // 0x1900(0x10)

	void PlayImpactEffects(struct FHitResult& Hit, struct FVector& BulletStartLoc, bool bOnlyRicochet, char HitInfoOptFlag, bool bIsOverlapImpactForwardOfBlockImpact, bool bIsFirstOverlapImpact); // Function GPGameplay.WeaponViewComponentImpact.PlayImpactEffects // (Native|Protected|HasOutParms|HasDefaults) // @ game+0x3719b70
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponZoomHudInterface
// Size: 0x30 (Inherited: 0x30)
class UWeaponZoomHudInterface : public UInterface {
public:


	void UpdateViewWitchZoomProgress(float ZoomProgress); // Function GPGameplay.WeaponZoomHudInterface.UpdateViewWitchZoomProgress // (Native|Public) // @ game+0x1767a20
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeldingGunComponent
// Size: 0x678 (Inherited: 0x5f0)
class UWeldingGunComponent : public UGPWeaponDataComponentBase {
public:

	struct UFXResourceContainerComponent* FireEffectComp; // 0x5f0(0x08)
	struct UFXResourceContainerComponent* HitEffectComp; // 0x5f8(0x08)
	char pad_600[0x10]; // 0x600(0x10)
	int32_t AttackerValueIDToVehicleOrFixWeapon; // 0x610(0x04)
	struct FName FireEffectID; // 0x614(0x08)
	struct FName FireEffectSocketName; // 0x61c(0x08)
	struct FName AttackHitEffectID; // 0x624(0x08)
	struct FName RepairHitEffectID; // 0x62c(0x08)
	char pad_634[0x4]; // 0x634(0x04)
	struct UGPAudioEventAsset* RepairLoopAudio; // 0x638(0x08)
	struct UGPAudioEventAsset* RepairStopAudio; // 0x640(0x08)
	struct UGPAudioEventAsset* EnemyRepairLoopAudio; // 0x648(0x08)
	struct UGPAudioEventAsset* EnemyRepairStopAudio; // 0x650(0x08)
	/*struct FMulticastInlineDelegate*/char OnShow[0x10]; // 0x658(0x10)
	/*struct FMulticastInlineDelegate*/char OnFire[0x10]; // 0x668(0x10)

	void UpdateHitEffect(bool IsAttack, struct FVector HitPoint); // Function GPGameplay.WeldingGunComponent.UpdateHitEffect // (Final|Native|Public|HasDefaults) // @ game+0x3719e00
	void StopAudio(); // Function GPGameplay.WeldingGunComponent.StopAudio // (Final|Native|Protected) // @ game+0x3719de0
	void StopAllEffect(); // Function GPGameplay.WeldingGunComponent.StopAllEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x3719dc0
	void StartFireEffect(); // Function GPGameplay.WeldingGunComponent.StartFireEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x3719da0
	void PlayAudio(); // Function GPGameplay.WeldingGunComponent.PlayAudio // (Final|Native|Protected) // @ game+0x3719b50
	void HideHitEffect(); // Function GPGameplay.WeldingGunComponent.HideHitEffect // (Final|Native|Public) // @ game+0x3719080
	void CreateHitEffect(struct FVector Location); // Function GPGameplay.WeldingGunComponent.CreateHitEffect // (Final|Native|Protected|HasDefaults) // @ game+0x3718f80
	void CheckHitEffect(); // Function GPGameplay.WeldingGunComponent.CheckHitEffect // (Final|Native|Protected) // @ game+0x3718f60
	bool CheckHit(struct FHitResult& OutHitResult, struct FVector StartLoc, struct FVector EndLoc); // Function GPGameplay.WeldingGunComponent.CheckHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x3718df0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WorldDamageMaker
// Size: 0x48 (Inherited: 0x30)
class UWorldDamageMaker : public UObject {
public:

	char pad_30[0x18]; // 0x30(0x18)

	struct UWorldDamageMaker* STATIC_Get(); // Function GPGameplay.WorldDamageMaker.Get // (Final|Native|Static|Public) // @ game+0x3719050
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ZiplineDraftGear
// Size: 0x3a8 (Inherited: 0x378)
class AZiplineDraftGear : public AActor {
public:

	struct USceneComponent* RootComp; // 0x378(0x08)
	struct UStaticMeshComponent* ZiplineCouplerLock; // 0x380(0x08)
	struct UStaticMeshComponent* ZiplineCouplerLine; // 0x388(0x08)
	struct UStaticMeshComponent* ZiplineDraftGear; // 0x390(0x08)
	struct UStaticMeshComponent* SubRoot; // 0x398(0x08)
	struct FName DraftSocketName; // 0x3a0(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ZiplineInteractorActor
// Size: 0x458 (Inherited: 0x378)
class AZiplineInteractorActor : public AActor {
public:

	bool bIsVerticalZipline; // 0x378(0x01)
	bool bOverrideSpeedParams; // 0x379(0x01)
	char pad_37A[0x2]; // 0x37a(0x02)
	float ZiplineMoveMaxSpeed; // 0x37c(0x04)
	float ZiplineMoveStartSpeed; // 0x380(0x04)
	float ZiplineMoveSpeedAcc; // 0x384(0x04)
	bool bEnableGreenPointGetOn; // 0x388(0x01)
	bool bEnableRedPointGetOn; // 0x389(0x01)
	bool bEnableZiplineGetOn; // 0x38a(0x01)
	bool bEnableAutonomousGetOff; // 0x38b(0x01)
	bool bEnableRotationHorizontalLerp; // 0x38c(0x01)
	bool bEnableRotationVerticalLerp; // 0x38d(0x01)
	bool bFaceToEnd; // 0x38e(0x01)
	char pad_38F[0x1]; // 0x38f(0x01)
	float RedStartOffset; // 0x390(0x04)
	float GreenStartOffset; // 0x394(0x04)
	struct UClass* DraftGearClass; // 0x398(0x08)
	float DraftGearTargetOffsetDistance; // 0x3a0(0x04)
	float DraftGearDeltaOffsetDistance; // 0x3a4(0x04)
	float DraftGearRelativeStartSpeed; // 0x3a8(0x04)
	float DraftGearLerpSpeed; // 0x3ac(0x04)
	int32_t ZiplineMarkerType; // 0x3b0(0x04)
	bool bNeedMarker; // 0x3b4(0x01)
	char pad_3B5[0x3]; // 0x3b5(0x03)
	struct USplineComponent* SplineComp; // 0x3b8(0x08)
	struct USceneComponent* GreenTopPoint; // 0x3c0(0x08)
	struct UBoxComponent* GreenCollision; // 0x3c8(0x08)
	struct UArrowComponent* GreenArrow; // 0x3d0(0x08)
	struct UArrowComponent* GreenDropArrow; // 0x3d8(0x08)
	struct USceneComponent* RedTopPoint; // 0x3e0(0x08)
	struct UBoxComponent* RedCollision; // 0x3e8(0x08)
	struct UArrowComponent* RedArrow; // 0x3f0(0x08)
	struct UArrowComponent* RedDropArrow; // 0x3f8(0x08)
	struct UStaticMeshComponent* GreenStartPoint; // 0x400(0x08)
	struct UStaticMeshComponent* GreenCharacterPoint; // 0x408(0x08)
	struct UStaticMeshComponent* RedStartPoint; // 0x410(0x08)
	struct UStaticMeshComponent* RedCharacterPoint; // 0x418(0x08)
	char pad_420[0x31]; // 0x420(0x31)
	bool bPointTooClose; // 0x451(0x01)
	char pad_452[0x6]; // 0x452(0x06)

	void OnNeedShowMarker(); // Function GPGameplay.ZiplineInteractorActor.OnNeedShowMarker // (Final|Native|Public) // @ game+0x3719b30
	void OnNeedHideMarker(); // Function GPGameplay.ZiplineInteractorActor.OnNeedHideMarker // (Final|Native|Public) // @ game+0x3719b10
	void OnExitZiplineArea(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function GPGameplay.ZiplineInteractorActor.OnExitZiplineArea // (Final|Native|Public|BlueprintCallable) // @ game+0x37199d0
	void OnExitRedStartArea(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function GPGameplay.ZiplineInteractorActor.OnExitRedStartArea // (Final|Native|Public) // @ game+0x3719890
	void OnExitGreenStartArea(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function GPGameplay.ZiplineInteractorActor.OnExitGreenStartArea // (Final|Native|Public) // @ game+0x3719750
	void OnEnterZiplineArea(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function GPGameplay.ZiplineInteractorActor.OnEnterZiplineArea // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3719550
	void OnEnterRedStartArea(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function GPGameplay.ZiplineInteractorActor.OnEnterRedStartArea // (Final|Native|Public|HasOutParms) // @ game+0x3719350
	void OnEnterGreenStartArea(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function GPGameplay.ZiplineInteractorActor.OnEnterGreenStartArea // (Final|Native|Public|HasOutParms) // @ game+0x3719150
	void OnCooldown(); // Function GPGameplay.ZiplineInteractorActor.OnCooldown // (Final|Native|Public) // @ game+0x3719130
	void OnAvailable(bool bIsGreen); // Function GPGameplay.ZiplineInteractorActor.OnAvailable // (Final|Native|Public) // @ game+0x37190a0
	void BindOverlapEvent(struct UBoxComponent* InComp); // Function GPGameplay.ZiplineInteractorActor.BindOverlapEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x3718d70
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AnimNotifyState_FootContact
// Size: 0x50 (Inherited: 0x38)
class UAnimNotifyState_FootContact : public UAnimNotifyState {
public:

	float NextFootContactStartTime; // 0x38(0x04)
	struct FVector NextFootContactLocOffset; // 0x3c(0x0c)
	char pad_48[0x8]; // 0x48(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.BaseGameMode
// Size: 0x528 (Inherited: 0x460)
class ABaseGameMode : public AGameMode {
public:

	char pad_460[0x50]; // 0x460(0x50)
	float DropMatchKickDelayTime; // 0x4b0(0x04)
	float KickAllPlayerDelayTime; // 0x4b4(0x04)
	float StartMatchTimeout; // 0x4b8(0x04)
	float AllQuitEndGameProtectTime; // 0x4bc(0x04)
	float KickATeamDelayTime; // 0x4c0(0x04)
	float ExitGameDelayTime; // 0x4c4(0x04)
	struct UClass* OBSpectatorPlayerControllerClass; // 0x4c8(0x08)
	char pad_4D0[0xc]; // 0x4d0(0x0c)
	float NoConnectionTimeout; // 0x4dc(0x04)
	char pad_4E0[0x8]; // 0x4e0(0x08)
	/*struct FMulticastInlineDelegate*/char OnPlayerLoginEvent[0x10]; // 0x4e8(0x10)
	/*struct FMulticastInlineDelegate*/char OnPlayerDropMatchEvent[0x10]; // 0x4f8(0x10)
	char bGameEnded : 1; // 0x508(0x01)
	char pad_508_1 : 7; // 0x508(0x01)
	char pad_509[0x1f]; // 0x509(0x1f)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.BaseGameState
// Size: 0x3f0 (Inherited: 0x3d8)
class ABaseGameState : public AGameState {
public:

	float GameStartTime; // 0x3d8(0x04)
	char pad_3DC[0x14]; // 0x3dc(0x14)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.BaseGameViewportClient
// Size: 0x300 (Inherited: 0x2f0)
class UBaseGameViewportClient : public UGameViewportClient {
public:

	char pad_2F0[0x10]; // 0x2f0(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.BasePlayerController
// Size: 0x6d0 (Inherited: 0x6d0)
class ABasePlayerController : public APlayerController {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.BasePlayerState
// Size: 0x4b0 (Inherited: 0x4a0)
class ABasePlayerState : public APlayerState {
public:

	uint64_t Uin; // 0x4a0(0x08)
	bool bOffline; // 0x4a8(0x01)
	char pad_4A9[0x7]; // 0x4a9(0x07)

	void OnRep_Uin(); // Function GPGameplay.BasePlayerState.OnRep_Uin // (Native|Public) // @ game+0xbcc900
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentAppearance
// Size: 0xae8 (Inherited: 0x550)
class UWeaponDataComponentAppearance : public UGPWeaponDataComponentAppearance {
public:

	char pad_550[0x538]; // 0x550(0x538)
	/*struct TScriptInterface<IWeaponProxyInterface>*/char WeaponProxy[0x10]; // 0xa88(0x10)
	/*struct TSet<struct FName>*/char CustomFireSocketNames[0x50]; // 0xa98(0x50)

	void OnInteractorPostProcessOutline(bool bEnable, int32_t DepthValue); // Function GPGameplay.WeaponDataComponentAppearance.OnInteractorPostProcessOutline // (Native|Public) // @ game+0x36d76b0
	void OnBuildMeshComplete(); // Function GPGameplay.WeaponDataComponentAppearance.OnBuildMeshComplete // (Native|Public) // @ game+0x17553a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentAppearance
// Size: 0x3e0 (Inherited: 0x220)
class UWeaponFuncComponentAppearance : public UGPWeaponFuncComponentAppearance {
public:

	struct AGPCharacterBase* CharacterBase; // 0x220(0x08)
	char pad_228[0x1b8]; // 0x228(0x1b8)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAttributeCenterComponent
// Size: 0x250 (Inherited: 0x100)
class UGPAttributeCenterComponent : public UActorComponent {
public:

	char pad_100[0x30]; // 0x100(0x30)
	struct TArray<struct UClass*> StaticAttributes; // 0x130(0x10)
	struct TArray<struct UGPAttributeSet*> SpawnedAttributes; // 0x140(0x10)
	struct TArray<struct FName> InitGroupsNames; // 0x150(0x10)
	char pad_160[0xf0]; // 0x160(0xf0)

	void RefreshCurrentAttributeValue(struct FString AttributeName); // Function GPGameplay.GPAttributeCenterComponent.RefreshCurrentAttributeValue // (Final|Native|Public) // @ game+0x35b6ef0
	void RefreshAllDirtyAttributeValue(); // Function GPGameplay.GPAttributeCenterComponent.RefreshAllDirtyAttributeValue // (Final|Native|Public) // @ game+0x35b6ed0
	void OnRep_SpawnedAttributes(); // Function GPGameplay.GPAttributeCenterComponent.OnRep_SpawnedAttributes // (Final|Native|Public) // @ game+0x35b6970
	void MarkAttributeDirty(struct FString AttributeName, bool bImmediatlyUpdate); // Function GPGameplay.GPAttributeCenterComponent.MarkAttributeDirty // (Final|Native|Public) // @ game+0x35b51b0
	void ApplyAttributeOperatorEffectClass(struct UClass* AOEClass); // Function GPGameplay.GPAttributeCenterComponent.ApplyAttributeOperatorEffectClass // (Final|Native|Public|BlueprintCallable) // @ game+0x35b5100
	void ApplyAttributeOperatorEffect(struct UAttributeOperatorEffect* AOE); // Function GPGameplay.GPAttributeCenterComponent.ApplyAttributeOperatorEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x35b5080
	void AddAttributeSetImpl(struct UGPAttributeSet* Set); // Function GPGameplay.GPAttributeCenterComponent.AddAttributeSetImpl // (Final|Native|Public) // @ game+0x35b5000
	struct UGPAttributeSet* AddAttributeSetByClassImpl(struct UClass* SetClass, bool bInitDefault); // Function GPGameplay.GPAttributeCenterComponent.AddAttributeSetByClassImpl // (Final|Native|Public) // @ game+0x35b4f30
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.IntCharacter
// Size: 0x8c0 (Inherited: 0x798)
class AIntCharacter : public ACHARACTER {
public:

	char pad_798[0x8]; // 0x798(0x08)
	char bEnableInterpolate : 1; // 0x7a0(0x01)
	char bEnableExtrapolate : 1; // 0x7a0(0x01)
	char pad_7A0_2 : 6; // 0x7a0(0x01)
	char pad_7A1[0x3]; // 0x7a1(0x03)
	int32_t bIsProned; // 0x7a4(0x04)
	char bIsJumped : 1; // 0x7a8(0x01)
	char bIsJumpedOverride : 1; // 0x7a8(0x01)
	char pad_7A8_2 : 6; // 0x7a8(0x01)
	char pad_7A9[0x3]; // 0x7a9(0x03)
	struct FTurningPlaceData RepTurningPlaceData; // 0x7ac(0x08)
	struct FStartStopData RepStartStopData; // 0x7b4(0x20)
	char pad_7D4[0xe0]; // 0x7d4(0xe0)
	char bA; // 0x8b4(0x01)
	char pad_8B5[0x3]; // 0x8b5(0x03)
	struct FCharacterMoveHandle MoveHandle; // 0x8b8(0x08)

	void ServerMove_Cosmetic(float Timestamp, struct FVector_NetQuantize100 ClientVelocity, float ClientDeltaTime); // Function GPGameplay.IntCharacter.ServerMove_Cosmetic // (Net|Native|Event|Public|NetServer) // @ game+0x36899c0
	void SendCharacterStates(struct FCharacterStats States); // Function GPGameplay.IntCharacter.SendCharacterStates // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x36898c0
	void OnRep_TurningPlaceData(); // Function GPGameplay.IntCharacter.OnRep_TurningPlaceData // (Final|Native|Public) // @ game+0x88f4d0
	void OnRep_StartStopData(); // Function GPGameplay.IntCharacter.OnRep_StartStopData // (Final|Native|Public) // @ game+0x36897a0
	void OnRep_IsProned(); // Function GPGameplay.IntCharacter.OnRep_IsProned // (Native|Public) // @ game+0x3689780
	void OnRep_IsJumpedOverride(); // Function GPGameplay.IntCharacter.OnRep_IsJumpedOverride // (Final|Native|Public) // @ game+0x88f4d0
	void OnRep_IsJumped(); // Function GPGameplay.IntCharacter.OnRep_IsJumped // (Final|Native|Public) // @ game+0x88f4d0
	void OnRep_AutonomousInitRepProne(bool bProne); // Function GPGameplay.IntCharacter.OnRep_AutonomousInitRepProne // (Native|Public) // @ game+0x36896f0
	void OnRep_AutonomousInitRepCrouch(bool bCrouch); // Function GPGameplay.IntCharacter.OnRep_AutonomousInitRepCrouch // (Native|Public) // @ game+0x3689660
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentFiring
// Size: 0x908 (Inherited: 0x7e0)
class UWeaponDataComponentFiring : public UGPWeaponDataComponentFiring {
public:

	char pad_7E0[0x8]; // 0x7e0(0x08)
	float TotalChargeTime; // 0x7e8(0x04)
	float ChargeWPBulletInitSpeed_2; // 0x7ec(0x04)
	float ChargeWPBulletInitSpeed_3; // 0x7f0(0x04)
	float ChargeWPBulletInitSpeed_4; // 0x7f4(0x04)
	float ChargeWPBulletSpeedPercent_2; // 0x7f8(0x04)
	float ChargeWPBulletSpeedPercent_3; // 0x7fc(0x04)
	float ChargeWPBulletSpeedPercent_4; // 0x800(0x04)
	char pad_804[0x1c]; // 0x804(0x1c)
	struct TArray<struct UFXResourceContainerComponent*> CacheFxRes; // 0x820(0x10)
	char pad_830[0x8]; // 0x830(0x08)
	struct AGPCharacterBase* CharacterBase; // 0x838(0x08)
	char pad_840[0xc8]; // 0x840(0xc8)

	void ClientFixDataRecoil(struct FWeaponDataRecoil InWaistDataRecoil, struct FWeaponDataRecoil InAimDataRecoil, struct FWeaponDataForCharacterState InDataCharacterState); // Function GPGameplay.WeaponDataComponentFiring.ClientFixDataRecoil // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x36e11b0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentFiring
// Size: 0x1f0 (Inherited: 0x188)
class UWeaponFuncComponentFiring : public UGPWeaponFuncComponentFiring {
public:

	char pad_188[0x50]; // 0x188(0x50)
	struct UGPAnimProxyComponent* AnimProxyComponent; // 0x1d8(0x08)
	struct UWeaponFuncComponentSpread* FuncComponentSpread; // 0x1e0(0x08)
	struct UWeaponDataComponentAdapter* DcAdapter; // 0x1e8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.CompositedRangeScope
// Size: 0x160 (Inherited: 0x30)
class UCompositedRangeScope : public UObject {
public:

	char pad_30[0x48]; // 0x30(0x48)
	/*struct TArray<struct TScriptInterface<IRangeScopeInterface>>*/char SubRangeScopes[0x10]; // 0x78(0x10)
	struct TMap<enum class EScopeZoomType, struct FScopeCollection> ScopeMap; // 0x88(0x50)
	char pad_D8[0x58]; // 0xd8(0x58)
	/*struct TScriptInterface<IRangeScopeInterface>*/char CurScope[0x10]; // 0x130(0x10)
	/*struct TScriptInterface<IRangeScopeInterface>*/char PreScope[0x10]; // 0x140(0x10)
	char pad_150[0x10]; // 0x150(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageCaculatorBase
// Size: 0x30 (Inherited: 0x30)
class UDamageCaculatorBase : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageStateRecorder
// Size: 0x48 (Inherited: 0x30)
class UDamageStateRecorder : public UObject {
public:

	char pad_30[0x18]; // 0x30(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageValidationRuleBase
// Size: 0x60 (Inherited: 0x30)
class UDamageValidationRuleBase : public UObject {
public:

	/*struct TScriptInterface<IDamageValidateSystemInterface>*/char DamageValidateSystem[0x10]; // 0x30(0x10)
	char pad_40[0x18]; // 0x40(0x18)
	float MaxRewind1PTime; // 0x58(0x04)
	float MaxRewind3PTime; // 0x5c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPFSMActionInstance
// Size: 0xb8 (Inherited: 0x88)
class UGPFSMActionInstance : public USMActionInstance {
public:

	struct UGPFSMInstance* FSMOwner; // 0x88(0x08)
	char pad_90[0x10]; // 0x90(0x10)
	bool EnableStateTaskTick; // 0xa0(0x01)
	char pad_A1[0x17]; // 0xa1(0x17)

	void TriggerTransitionEvent(enum class EGPFSMTransitionEvent CurrentEvent); // Function GPGameplay.GPFSMActionInstance.TriggerTransitionEvent // (Native|Public|BlueprintCallable) // @ game+0x35fa2d0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DrawTransformComponent
// Size: 0x128 (Inherited: 0x100)
class UDrawTransformComponent : public UActorComponent {
public:

	struct FTransformHistoryData HistoryData; // 0x100(0x20)
	float DataLifeSpan; // 0x120(0x04)
	char pad_124[0x4]; // 0x124(0x04)

	struct TArray<struct FTransform> SampleHistoryValues(float SampleInterval, int32_t DesiredSampleNum); // Function GPGameplay.DrawTransformComponent.SampleHistoryValues // (Final|Native|Public|BlueprintCallable) // @ game+0x358d7b0
	struct FTransform GetHistoryValue(float HistoryTime); // Function GPGameplay.DrawTransformComponent.GetHistoryValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x358d450
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSkeletalMeshComponentBase
// Size: 0xf78 (Inherited: 0xf28)
class UGPSkeletalMeshComponentBase : public USkeletalMeshComponent {
public:

	char pad_F28[0x18]; // 0xf28(0x18)
	bool bEnableUpdateChildComponentOptimize; // 0xf40(0x01)
	bool bEnableReduceUpdateChildComponentCall; // 0xf41(0x01)
	bool bEnableOverlapsOptimize; // 0xf42(0x01)
	bool bEnableTickWhenNotRendered; // 0xf43(0x01)
	float DistanceFactorWhenSkipTick; // 0xf44(0x04)
	char bSkipUpdateChildComponentsWhenHidden : 1; // 0xf48(0x01)
	char bSkipSlaveRenderWhenHidden : 1; // 0xf48(0x01)
	char pad_F48_2 : 6; // 0xf48(0x01)
	char pad_F49[0x7]; // 0xf49(0x07)
	struct AGPCharacter* OwnerCharBase; // 0xf50(0x08)
	bool isLocalFocus; // 0xf58(0x01)
	char pad_F59[0x1f]; // 0xf59(0x1f)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GameplayAbilityWeaponState
// Size: 0x4b0 (Inherited: 0x4b0)
class UGameplayAbilityWeaponState : public UGPWeaponStateBase {
public:


	enum class EGPWeaponStateType GetStateType(); // Function GPGameplay.GameplayAbilityWeaponState.GetStateType // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1767070
	bool ActivateAbilityByStateType(enum class EGPWeaponStateType StateType); // Function GPGameplay.GameplayAbilityWeaponState.ActivateAbilityByStateType // (Native|Public|BlueprintCallable) // @ game+0x3590680
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimInstanceBase
// Size: 0x290 (Inherited: 0x280)
class UGPAnimInstanceBase : public UAnimInstance {
public:

	char pad_280[0x10]; // 0x280(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAbilityLockerDataBase
// Size: 0x30 (Inherited: 0x30)
class UGPAbilityLockerDataBase : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAbilityEntitySystemBase
// Size: 0x38 (Inherited: 0x30)
class UGPAbilityEntitySystemBase : public UObject {
public:

	struct TWeakObjectPtr<struct ASkillSubsystem> SkillSubsystem; // 0x30(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPActorChannel
// Size: 0x2b8 (Inherited: 0x298)
class UGPActorChannel : public UActorChannel {
public:

	char pad_298[0x20]; // 0x298(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimInstance_LocomotionBase
// Size: 0x290 (Inherited: 0x280)
class UGPAnimInstance_LocomotionBase : public UAnimInstance {
public:

	char pad_280[0x10]; // 0x280(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPMarkerItemBase
// Size: 0x438 (Inherited: 0x30)
class UGPMarkerItemBase : public UObject {
public:

	enum class EGPMarkerViewStatus MarkerStatus; // 0x30(0x01)
	char pad_31[0xf]; // 0x31(0x0f)
	struct FMarkInit InitData; // 0x40(0x150)
	struct AGPMarkerManager* MarkerManager; // 0x190(0x08)
	struct UUserWidget* MarkerWidget; // 0x198(0x08)
	struct AActor* MarkedActor; // 0x1a0(0x08)
	char pad_1A8[0x8]; // 0x1a8(0x08)
	struct FMarkingBaseInfo MarkingBaseInfo; // 0x1b0(0x30)
	char pad_1E0[0xb4]; // 0x1e0(0xb4)
	enum class EMarkerEdgeType MoblieMarkerEdgeType; // 0x294(0x01)
	char pad_295[0x3]; // 0x295(0x03)
	struct FVector2D MoblieCustomCircleScale; // 0x298(0x08)
	enum class EMarkerEdgeType HDMarkerEdgeType; // 0x2a0(0x01)
	char pad_2A1[0x3]; // 0x2a1(0x03)
	struct FVector2D HDCustomCircleScale; // 0x2a4(0x08)
	float CoverRayTraceCoolDownTime; // 0x2ac(0x04)
	bool bMarkingCheckByScreenPos; // 0x2b0(0x01)
	char pad_2B1[0x3]; // 0x2b1(0x03)
	float NoBindActorMarkerExistTime; // 0x2b4(0x04)
	struct FVector ActorWorldLocationOffset; // 0x2b8(0x0c)
	bool bCoverTweenEnable; // 0x2c4(0x01)
	enum class EMarkerRefreshFrequencyLevel DistanceRefreshLevel; // 0x2c5(0x01)
	enum class EMarkerRefreshFrequencyLevel CoverRefreshLevel; // 0x2c6(0x01)
	enum class EMarkerRefreshFrequencyLevel AimedRefreshLevel; // 0x2c7(0x01)
	enum class EMarkerRefreshFrequencyLevel AimedCircleRefreshLevel; // 0x2c8(0x01)
	enum class EMarkerRefreshFrequencyLevel ScaleRefreshLevel; // 0x2c9(0x01)
	char pad_2CA[0x2]; // 0x2ca(0x02)
	float UpdateInterval; // 0x2cc(0x04)
	char pad_2D0[0x8]; // 0x2d0(0x08)
	struct FMarkerViewCreateConfig MarkerViewCreateConfig; // 0x2d8(0xd0)
	char pad_3A8[0x38]; // 0x3a8(0x38)
	struct FMarkingBubbleConfig MarkerBubbleConfig; // 0x3e0(0x40)
	char pad_420[0x18]; // 0x420(0x18)

	void ShowDebugMarkerInfo(); // Function GPGameplay.GPMarkerItemBase.ShowDebugMarkerInfo // (Final|Native|Public) // @ game+0x3630210
	void OnMarkerNoBindActorShowTimerFinished(); // Function GPGameplay.GPMarkerItemBase.OnMarkerNoBindActorShowTimerFinished // (Final|Native|Public) // @ game+0x362fbe0
	void OnBubbleTimerFinished(); // Function GPGameplay.GPMarkerItemBase.OnBubbleTimerFinished // (Final|Native|Public) // @ game+0x362f970
	void OnAudioLoadComplete(struct FSoftObjectPath& AudioSoftPath); // Function GPGameplay.GPMarkerItemBase.OnAudioLoadComplete // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x362f890
	bool IsAnyViewCreateConfigHasInit(); // Function GPGameplay.GPMarkerItemBase.IsAnyViewCreateConfigHasInit // (Final|Native|Public) // @ game+0x362f6a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPNetworkActorComponent
// Size: 0x108 (Inherited: 0x100)
class UGPNetworkActorComponent : public UActorComponent {
public:

	enum class ENetworkNotifyPriority NetworkNotifyPriority; // 0x100(0x01)
	char pad_101[0x7]; // 0x101(0x07)

	bool BPGetIsLocalFocus(); // Function GPGameplay.GPNetworkActorComponent.BPGetIsLocalFocus // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3637660
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimReloadNotifyBase
// Size: 0x40 (Inherited: 0x40)
class UGPAnimReloadNotifyBase : public UAnimNotify {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPBaseSpring
// Size: 0x48 (Inherited: 0x30)
class UGPBaseSpring : public UObject {
public:

	float Radio; // 0x30(0x04)
	float SmoothTime; // 0x34(0x04)
	float DampingRadio; // 0x38(0x04)
	float RadioTarget; // 0x3c(0x04)
	float SpringVelocity; // 0x40(0x04)
	float VelocityTarget; // 0x44(0x04)

	void SpringDamper(float DeltaTime); // Function GPGameplay.GPBaseSpring.SpringDamper // (Final|Native|Public|BlueprintCallable) // @ game+0x35b2270
	void SetTarget(float& InRadioTarget); // Function GPGameplay.GPBaseSpring.SetTarget // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x35b21d0
	void SetSpring(float& InSpringTime, float& InSpringRadio); // Function GPGameplay.GPBaseSpring.SetSpring // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x35b20f0
	void FadeOut(float DeltaTime); // Function GPGameplay.GPBaseSpring.FadeOut // (Native|Public|BlueprintCallable) // @ game+0xaa2b40
	void Close(); // Function GPGameplay.GPBaseSpring.Close // (Final|Native|Public|BlueprintCallable) // @ game+0x35b1930
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAttributeBaseComponent
// Size: 0x108 (Inherited: 0x100)
class UGPAttributeBaseComponent : public UActorComponent {
public:

	struct UGPAttributeCenterComponent* OwnerAttrubteComponent; // 0x100(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAttributeSet
// Size: 0x38 (Inherited: 0x30)
class UGPAttributeSet : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCameraModifier
// Size: 0x50 (Inherited: 0x50)
class UGPCameraModifier : public UCameraModifier {
public:


	void Init(struct AGPPlayerCameraManager* GPCameraMgr); // Function GPGameplay.GPCameraModifier.Init // (Native|Public) // @ game+0x35c6270
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.IntCharacterMovementComponent
// Size: 0x7c8 (Inherited: 0x7a0)
class UIntCharacterMovementComponent : public UCharacterMovementComponent {
public:

	char pad_7A0[0x28]; // 0x7a0(0x28)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPDialogAsyncActionBase
// Size: 0x38 (Inherited: 0x38)
class UGPDialogAsyncActionBase : public UBlueprintAsyncActionBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPFSMInstanceBase
// Size: 0x640 (Inherited: 0x608)
class UGPFSMInstanceBase : public USMInstance {
public:

	struct AActor* GPActor; // 0x608(0x08)
	struct USMInstance* MasterOwner; // 0x610(0x08)
	struct UGPFSMInstance* FSMOwner; // 0x618(0x08)
	struct UGPNetworkComponent* GPIdentity; // 0x620(0x08)
	struct UGPBlackboardComponent* BlackBoard; // 0x628(0x08)
	struct USMStateMachineComponent* FSMComponent; // 0x630(0x08)
	struct AActor* FSMActorOwner; // 0x638(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPFSMStateMachineComponent
// Size: 0x1f0 (Inherited: 0x1d0)
class UGPFSMStateMachineComponent : public USMStateMachineComponent {
public:

	char pad_1D0[0x8]; // 0x1d0(0x08)
	bool bIsCharacterMainFSM; // 0x1d8(0x01)
	bool bDisableSimulatedProxyLocalTransition; // 0x1d9(0x01)
	bool bDisableTransitionNetworkTransaction; // 0x1da(0x01)
	bool bDisableSimulatedProxyTick; // 0x1db(0x01)
	char pad_1DC[0x4]; // 0x1dc(0x04)
	struct AActor* GPActor; // 0x1e0(0x08)
	struct AGPCharacterBase* GPOwner; // 0x1e8(0x08)

	void ServerRequestState(enum class EGPFSMTransitionEvent transitionEvent); // Function GPGameplay.GPFSMStateMachineComponent.ServerRequestState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35fd920
	void ServerReceivePredictState(enum class EGPFSMTransitionEvent transitionEvent, int32_t clientTickNumber, struct FGPFSMNetworkedTransaction Transition); // Function GPGameplay.GPFSMStateMachineComponent.ServerReceivePredictState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35fd6e0
	void ServerReceiveFSMGlobalEvent(struct FGameplayTag EventTag); // Function GPGameplay.GPFSMStateMachineComponent.ServerReceiveFSMGlobalEvent // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35fd650
	void ServerDoingPredictState(enum class EGPFSMTransitionEvent transitionEvent, int32_t clientTickNumber, struct FGPFSMNetworkedTransaction Transition, bool bNeedServerCheck); // Function GPGameplay.GPFSMStateMachineComponent.ServerDoingPredictState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35fd3d0
	void OnHeavyTaskSyncServerStates(); // Function GPGameplay.GPFSMStateMachineComponent.OnHeavyTaskSyncServerStates // (Final|Native|Public) // @ game+0x35fd2e0
	void OnHeavyTaskFSMInitialize(); // Function GPGameplay.GPFSMStateMachineComponent.OnHeavyTaskFSMInitialize // (Final|Native|Public) // @ game+0x35fd2c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPFSMStateInstance
// Size: 0x660 (Inherited: 0xd0)
class UGPFSMStateInstance : public USMStateInstance {
public:

	struct UGPFSMInstance* FSMOwner; // 0xd0(0x08)
	char pad_D8[0x10]; // 0xd8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_Timeout[0x10]; // 0xe8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_StartSprint[0x10]; // 0xf8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_StartSuperSprint[0x10]; // 0x108(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndSprintToStop[0x10]; // 0x118(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndSprintToMoving[0x10]; // 0x128(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_Finish[0x10]; // 0x138(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_NormalToADS[0x10]; // 0x148(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_AdsToNormal[0x10]; // 0x158(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_BeginVault[0x10]; // 0x168(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndVault[0x10]; // 0x178(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_BeginOperate[0x10]; // 0x188(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndOperate[0x10]; // 0x198(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_BeginZipline[0x10]; // 0x1a8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndZipline[0x10]; // 0x1b8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_CancelZipline[0x10]; // 0x1c8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_CancelOperate[0x10]; // 0x1d8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_ToLooting[0x10]; // 0x1e8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_ToReborn[0x10]; // 0x1f8(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_BuffFinish[0x10]; // 0x208(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Cast[0x10]; // 0x218(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Charged[0x10]; // 0x228(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Charging[0x10]; // 0x238(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Restored[0x10]; // 0x248(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_SpawnObjectFinish[0x10]; // 0x258(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Terminate[0x10]; // 0x268(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Ultimate[0x10]; // 0x278(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_NormalBreak[0x10]; // 0x288(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Timeout[0x10]; // 0x298(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Break[0x10]; // 0x2a8(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_BeginCharging[0x10]; // 0x2b8(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_BeginCooling[0x10]; // 0x2c8(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_BeginPreparing[0x10]; // 0x2d8(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_EndPrepare[0x10]; // 0x2e8(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_CancelPrepare[0x10]; // 0x2f8(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Yes[0x10]; // 0x308(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_No[0x10]; // 0x318(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_SkillEnerngyChange[0x10]; // 0x328(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Failed[0x10]; // 0x338(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_EnergyChanged[0x10]; // 0x348(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Death[0x10]; // 0x358(0x10)
	/*struct FMulticastInlineDelegate*/char SkillEvent_Uncharged[0x10]; // 0x368(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_BeginRelaxIdle[0x10]; // 0x378(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndRelaxIdle[0x10]; // 0x388(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_BeginStarApp[0x10]; // 0x398(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_BeginStarAppInRegName[0x10]; // 0x3a8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndStarApp[0x10]; // 0x3b8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_BeginCutScne[0x10]; // 0x3c8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndCutScne[0x10]; // 0x3d8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_ToLeftLean[0x10]; // 0x3e8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_ToRightLean[0x10]; // 0x3f8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndLean[0x10]; // 0x408(0x10)
	/*struct FMulticastInlineDelegate*/char GpfsmTransitionEvent_EndClimbLadder[0x10]; // 0x418(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_CarryBodyGetOnVehicle[0x10]; // 0x428(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_CarryBodyGetOffVehicle[0x10]; // 0x438(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_BeginBeHit[0x10]; // 0x448(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndBeHit[0x10]; // 0x458(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_CancelBeHit[0x10]; // 0x468(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_StartAutoDriveVehicle[0x10]; // 0x478(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_CancelAutoDriveVehicle[0x10]; // 0x488(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_GetOnFlyBase[0x10]; // 0x498(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_GetOffFlyBase[0x10]; // 0x4a8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_BeginUseSkill[0x10]; // 0x4b8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndUseSkill[0x10]; // 0x4c8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_BeginLeftHandSkill[0x10]; // 0x4d8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndLeftHandSkill[0x10]; // 0x4e8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_BeginRightHandSkill[0x10]; // 0x4f8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndRightHandSkill[0x10]; // 0x508(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_BeginDoubleHandsSkill[0x10]; // 0x518(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndDoubleHandsSkill[0x10]; // 0x528(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_BeginLegsSkill[0x10]; // 0x538(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndLegsSkill[0x10]; // 0x548(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_BeginSpecialSkill[0x10]; // 0x558(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndSpecialSkill[0x10]; // 0x568(0x10)
	/*struct FMulticastInlineDelegate*/char GpfsmTransitionEvent_BeginAssassinate[0x10]; // 0x578(0x10)
	/*struct FMulticastInlineDelegate*/char GpfsmTransitionEvent_EndAssassinate[0x10]; // 0x588(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_SkillToSkillADS[0x10]; // 0x598(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_SkillADSToSkill[0x10]; // 0x5a8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndRescue[0x10]; // 0x5b8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_StartSearchItem[0x10]; // 0x5c8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndSearchItem[0x10]; // 0x5d8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_StartWeaponInspect[0x10]; // 0x5e8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndWeaponInspect[0x10]; // 0x5f8(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_StartWeaponBipodDeploy[0x10]; // 0x608(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_EndWeaponBipodDeploy[0x10]; // 0x618(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_SafeHouseEnterRange[0x10]; // 0x628(0x10)
	/*struct FMulticastInlineDelegate*/char GPFSMTransitionEvent_SafeHouseLeaveRange[0x10]; // 0x638(0x10)
	enum class EFSMCharacterState CurCharacterState; // 0x648(0x01)
	bool EnableStateTaskTick; // 0x649(0x01)
	char pad_64A[0x16]; // 0x64a(0x16)

	void TriggerTransitionEvent(enum class EGPFSMTransitionEvent CurrentEvent); // Function GPGameplay.GPFSMStateInstance.TriggerTransitionEvent // (Native|Public|BlueprintCallable) // @ game+0x35fa350
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPInputLogicImpl
// Size: 0x38 (Inherited: 0x30)
class UGPInputLogicImpl : public UObject {
public:

	struct AGPPlayerController* PlayerController; // 0x30(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ModularWeaponDesc
// Size: 0x180 (Inherited: 0x30)
class UModularWeaponDesc : public UObject {
public:

	struct TArray<struct FGPModularWeaponPartNode> WeaponParts; // 0x30(0x10)
	uint64_t SkinId; // 0x40(0x08)
	uint64_t FancyColorID; // 0x48(0x08)
	struct FWeaponSkinInfo SkinInfo; // 0x50(0x88)
	char pad_D8[0x1]; // 0xd8(0x01)
	bool bLockAllAppearance; // 0xd9(0x01)
	bool bTreeInit; // 0xda(0x01)
	bool bInitExtraModels; // 0xdb(0x01)
	bool bInitStyleAppendModel; // 0xdc(0x01)
	char pad_DD[0x3b]; // 0xdd(0x3b)
	uint64_t PoorItemId; // 0x118(0x08)
	char pad_120[0x58]; // 0x120(0x58)
	bool bIsBipodDeploy; // 0x178(0x01)
	char pad_179[0x7]; // 0x179(0x07)

	void UpdateWeaponSkinParamsByRandomSeed(uint64_t RandomSeed); // Function GPGameplay.ModularWeaponDesc.UpdateWeaponSkinParamsByRandomSeed // (Final|Native|Public) // @ game+0x3694100
	void UpdateWeaponSkinParams(uint64_t MysticalId, float Wear, struct TArray<struct FWeaponSkinParam> Params); // Function GPGameplay.ModularWeaponDesc.UpdateWeaponSkinParams // (Final|Native|Public) // @ game+0x3693f50
	struct FTransform UpdateNodeAttachPositionWithTuneValueImpl(int32_t InPartIndex, struct TArray<uint64_t> InFindSocketsItemId, struct FName FindSocketName, int32_t SocketPositionIndex, enum class EWeaponPartMeshType MeshType); // Function GPGameplay.ModularWeaponDesc.UpdateNodeAttachPositionWithTuneValueImpl // (Final|Native|Protected|HasDefaults) // @ game+0x3693d00
	struct FTransform UpdateNodeAttachPositionImpl(int32_t InPartIndex, enum class EWeaponPartMeshType MeshType, bool UpdateTunes); // Function GPGameplay.ModularWeaponDesc.UpdateNodeAttachPositionImpl // (Final|Native|Protected|HasDefaults) // @ game+0x3693bc0
	void UpdateNodeAttachPosition(enum class EWeaponPartMeshType MeshType, bool UpdateTunes); // Function GPGameplay.ModularWeaponDesc.UpdateNodeAttachPosition // (Final|Native|Public) // @ game+0x3693af0
	struct FTransform UpdateExtraModelAttachPositionImpl(int32_t InPartIndex, struct FTunePartFunctionTable& TunePartFunctionRow, int32_t SocketPositionIndex, enum class EWeaponPartMeshType MeshType); // Function GPGameplay.ModularWeaponDesc.UpdateExtraModelAttachPositionImpl // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x3693900
	void ToGunDescRow_Internal(struct TArray<struct FGunDescRow>& OutArray, struct FGPModularWeaponPartNode& TargetPart, int16_t& DepthIndex, int16_t ParentIndex, uint32_t SocketId); // Function GPGameplay.ModularWeaponDesc.ToGunDescRow_Internal // (Final|Native|Protected|HasOutParms) // @ game+0x36935e0
	void ToGunDescRow(struct TArray<struct FGunDescRow>& OutArray); // Function GPGameplay.ModularWeaponDesc.ToGunDescRow // (Final|Native|Public|HasOutParms) // @ game+0x3693440
	bool ShouldShowApperanceInteral(uint64_t SocketGUID); // Function GPGameplay.ModularWeaponDesc.ShouldShowApperanceInteral // (Final|Native|Private) // @ game+0x36933b0
	bool ShouldShowApperance(uint64_t SocketGUID); // Function GPGameplay.ModularWeaponDesc.ShouldShowApperance // (Final|Native|Public) // @ game+0x3693320
	void SetSkinInfoFromPbWeaponSkinInfoParam(struct FPbWeaponSkinInfoParam InSkinInfoParam); // Function GPGameplay.ModularWeaponDesc.SetSkinInfoFromPbWeaponSkinInfoParam // (Final|Native|Public) // @ game+0x3692ef0
	void SetSkinInfo(struct FWeaponSkinInfo& InSkinInfo); // Function GPGameplay.ModularWeaponDesc.SetSkinInfo // (Final|Native|Public|HasOutParms) // @ game+0x3692d50
	void SetSkinApperanceId(uint64_t InSkinApperanceId); // Function GPGameplay.ModularWeaponDesc.SetSkinApperanceId // (Final|Native|Public) // @ game+0x3692cd0
	bool SetSkin(uint64_t InSkinId, uint64_t InFancyColorID); // Function GPGameplay.ModularWeaponDesc.SetSkin // (Final|Native|Public) // @ game+0x3692c10
	void SetSkillSkinInfo(uint64_t AvatarID, bool EnemyVisible, bool teammateVisible); // Function GPGameplay.ModularWeaponDesc.SetSkillSkinInfo // (Final|Native|Public) // @ game+0x3692b00
	void SetRootGUID(uint64_t Guid); // Function GPGameplay.ModularWeaponDesc.SetRootGUID // (Final|Native|Public) // @ game+0x3692a80
	void SetPoorItemId(uint64_t InPoorItemId); // Function GPGameplay.ModularWeaponDesc.SetPoorItemId // (Final|Native|Public) // @ game+0x3692a00
	void SetPartNodeGUIDFromSocketGUID(uint64_t SocketGUID, uint64_t Guid); // Function GPGameplay.ModularWeaponDesc.SetPartNodeGUIDFromSocketGUID // (Final|Native|Public) // @ game+0x3692940
	void SetPartNodeBindTypeFromSocketGUID(uint64_t SocketGUID, char BindType); // Function GPGameplay.ModularWeaponDesc.SetPartNodeBindTypeFromSocketGUID // (Final|Native|Public) // @ game+0x3692880
	void SetPartNodeBindPlayerIdFromSocketGUID(uint64_t SocketGUID, uint64_t BindPlayerId); // Function GPGameplay.ModularWeaponDesc.SetPartNodeBindPlayerIdFromSocketGUID // (Final|Native|Public) // @ game+0x36927c0
	void SetKillCnt(int32_t KillCnt); // Function GPGameplay.ModularWeaponDesc.SetKillCnt // (Final|Native|Public) // @ game+0x3692740
	void SeteTuneNodeValueFromDesc(uint64_t SocketGUID, struct UModularWeaponDesc* Desc); // Function GPGameplay.ModularWeaponDesc.SeteTuneNodeValueFromDesc // (Final|Native|Public) // @ game+0x3693260
	void SeteTuneNodeValue(uint64_t SocketGUID, uint64_t InTuneID, float InValue); // Function GPGameplay.ModularWeaponDesc.SeteTuneNodeValue // (Final|Native|Public) // @ game+0x3693160
	void SetBipodDeploy(bool bIsDeploy); // Function GPGameplay.ModularWeaponDesc.SetBipodDeploy // (Final|Native|Public) // @ game+0x3692680
	void SetApplyTune(bool inApplyTune); // Function GPGameplay.ModularWeaponDesc.SetApplyTune // (Final|Native|Public) // @ game+0x36925f0
	void RevertDirfyFlagNodeFromSnapshot(struct UModularWeaponDesc* Snapshot); // Function GPGameplay.ModularWeaponDesc.RevertDirfyFlagNodeFromSnapshot // (Final|Native|Public) // @ game+0x3692570
	void ResetNode(uint64_t SocketGUID); // Function GPGameplay.ModularWeaponDesc.ResetNode // (Final|Native|Public) // @ game+0x36924f0
	void ResetGUID(); // Function GPGameplay.ModularWeaponDesc.ResetGUID // (Final|Native|Public) // @ game+0x36924d0
	void RemoveParts(int32_t InPartIndex); // Function GPGameplay.ModularWeaponDesc.RemoveParts // (Final|Native|Public) // @ game+0x3692450
	void RelinkSocketGUID(); // Function GPGameplay.ModularWeaponDesc.RelinkSocketGUID // (Final|Native|Public) // @ game+0x3692430
	void ReleaseSubNode(struct FGPModularWeaponPartNode& SubNode); // Function GPGameplay.ModularWeaponDesc.ReleaseSubNode // (Final|Native|Protected|HasOutParms) // @ game+0x3692380
	void ReleasePartsSubTreeSpace(int32_t InRootNodeIndex); // Function GPGameplay.ModularWeaponDesc.ReleasePartsSubTreeSpace // (Final|Native|Protected) // @ game+0x3692300
	void RefreshApperanceData(); // Function GPGameplay.ModularWeaponDesc.RefreshApperanceData // (Final|Native|Public) // @ game+0x36922c0
	void RedirectSkinInfo(); // Function GPGameplay.ModularWeaponDesc.RedirectSkinInfo // (Final|Native|Public) // @ game+0x36922a0
	bool PrepareSkinApperanceIDFromIDs(struct FWeaponSkinInfo& InWeaponSkinInfo); // Function GPGameplay.ModularWeaponDesc.PrepareSkinApperanceIDFromIDs // (Final|Native|Protected|HasOutParms) // @ game+0x36920f0
	enum class EModularWeaponDescCompare STATIC_NodeType2CompareType(enum class EModularPartNodeType LCompareType); // Function GPGameplay.ModularWeaponDesc.NodeType2CompareType // (Final|Native|Static|Public) // @ game+0x3691790
	void MoveSrcNodeToDestNode(int32_t SrcNodeIndex, int32_t DestNodeIndex, struct FName& SocketName); // Function GPGameplay.ModularWeaponDesc.MoveSrcNodeToDestNode // (Final|Native|Public|HasOutParms) // @ game+0x3691680
	void LoadWeaponSkinAttachModel(); // Function GPGameplay.ModularWeaponDesc.LoadWeaponSkinAttachModel // (Final|Native|Public) // @ game+0x36915e0
	void LoadClientOnlyWeaponExtraModelInfoImpl(uint64_t ItemID); // Function GPGameplay.ModularWeaponDesc.LoadClientOnlyWeaponExtraModelInfoImpl // (Final|Native|Protected) // @ game+0x3691560
	void LoadClientOnlyWeaponExtraModelInfo(); // Function GPGameplay.ModularWeaponDesc.LoadClientOnlyWeaponExtraModelInfo // (Final|Native|Public) // @ game+0x3691540
	bool IsSimulateStateBySocketGUID(uint64_t SocketGUID); // Function GPGameplay.ModularWeaponDesc.IsSimulateStateBySocketGUID // (Final|Native|Public) // @ game+0x36914b0
	bool STATIC_IsSimulateState(uint64_t SocketFlag); // Function GPGameplay.ModularWeaponDesc.IsSimulateState // (Final|Native|Static|Public) // @ game+0x3691430
	bool IsSelfSimulateStateBySocketGUID(uint64_t SocketGUID); // Function GPGameplay.ModularWeaponDesc.IsSelfSimulateStateBySocketGUID // (Final|Native|Public) // @ game+0x36913a0
	bool STATIC_IsSelfSimulateState(uint64_t SocketFlag); // Function GPGameplay.ModularWeaponDesc.IsSelfSimulateState // (Final|Native|Static|Public) // @ game+0x3691320
	bool IsParentSimulateStateBySocketGUID(uint64_t SocketGUID); // Function GPGameplay.ModularWeaponDesc.IsParentSimulateStateBySocketGUID // (Final|Native|Public) // @ game+0x3691290
	bool STATIC_IsParentSimulateState(uint64_t SocketFlag); // Function GPGameplay.ModularWeaponDesc.IsParentSimulateState // (Final|Native|Static|Public) // @ game+0x3691210
	bool IsMergeablePartImpl(int32_t PartNodeIndex, bool b1P); // Function GPGameplay.ModularWeaponDesc.IsMergeablePartImpl // (Final|Native|Protected) // @ game+0x3691120
	bool IsMergeablePart(int32_t PartNodeIndex, bool b1P); // Function GPGameplay.ModularWeaponDesc.IsMergeablePart // (Final|Native|Public) // @ game+0x3691060
	bool IsLockApperance(uint64_t SocketGUID); // Function GPGameplay.ModularWeaponDesc.IsLockApperance // (Final|Native|Public|Const) // @ game+0x3690fd0
	bool IsFinetune(uint64_t SocketGUID); // Function GPGameplay.ModularWeaponDesc.IsFinetune // (Final|Native|Public) // @ game+0x3690f40
	bool HasPart(uint64_t PartGUID); // Function GPGameplay.ModularWeaponDesc.HasPart // (Final|Native|Public) // @ game+0x3690eb0
	bool STATIC_HasModularWeaponDescCompare(enum class EModularWeaponDescCompare LCompareType, enum class EModularWeaponDescCompare RCompareType); // Function GPGameplay.ModularWeaponDesc.HasModularWeaponDescCompare // (Final|Native|Static|Public) // @ game+0x3690df0
	struct TArray<int32_t> GetWeaponPartNodeIndexByType(enum class EAdapterItemType AdapterType); // Function GPGameplay.ModularWeaponDesc.GetWeaponPartNodeIndexByType // (Final|Native|Public|Const) // @ game+0x3690d20
	struct TArray<int32_t> GetWeaponPartNodeIndexByExtraModelType(enum class EWeaponExtraModelType ExtraModelType); // Function GPGameplay.ModularWeaponDesc.GetWeaponPartNodeIndexByExtraModelType // (Final|Native|Public|Const) // @ game+0x3690c50
	struct FGPModularWeaponPartNode GetWeaponPartNodeFromSocketGUIDWithIndex(uint64_t SocketGUID, int32_t& OutIndex); // Function GPGameplay.ModularWeaponDesc.GetWeaponPartNodeFromSocketGUIDWithIndex // (Final|Native|Public|HasOutParms|Const) // @ game+0x3690b70
	struct FGPModularWeaponPartNode GetWeaponPartNodeFromSocketGUID(uint64_t SocketGUID); // Function GPGameplay.ModularWeaponDesc.GetWeaponPartNodeFromSocketGUID // (Final|Native|Public|Const) // @ game+0x3690ad0
	struct FGPModularWeaponPartNode GetWeaponPartNodeFromItemID(uint64_t ItemID, bool& bFound); // Function GPGameplay.ModularWeaponDesc.GetWeaponPartNodeFromItemID // (Final|Native|Public|HasOutParms|Const) // @ game+0x36909f0
	struct FGPModularWeaponPartNode GetWeaponPartNodeByGUID(uint64_t InPartGUID, int32_t& OutIndex); // Function GPGameplay.ModularWeaponDesc.GetWeaponPartNodeByGUID // (Final|Native|Public|HasOutParms|Const) // @ game+0x3690910
	struct FGPModularWeaponPartNode GetWeaponPartNode(int32_t Index); // Function GPGameplay.ModularWeaponDesc.GetWeaponPartNode // (Final|Native|Public|Const) // @ game+0x3690870
	struct FGPModularWeaponPartNode GetWeaponParentPartNodeByGUID(uint64_t InPartGUID); // Function GPGameplay.ModularWeaponDesc.GetWeaponParentPartNodeByGUID // (Final|Native|Public|Const) // @ game+0x36907d0
	struct TArray<uint64_t> GetUnLinkedParentNodeSocketGUIDs(); // Function GPGameplay.ModularWeaponDesc.GetUnLinkedParentNodeSocketGUIDs // (Final|Native|Public) // @ game+0x3690750
	bool GetTuneNodeValue(uint64_t SocketGUID, uint64_t TuneId, float& TuneValue); // Function GPGameplay.ModularWeaponDesc.GetTuneNodeValue // (Final|Native|Public|HasOutParms) // @ game+0x3690640
	uint64_t GetTuneNodeSocketNamesCount(uint64_t ItemID, uint64_t SocketGUID, uint64_t TuneId); // Function GPGameplay.ModularWeaponDesc.GetTuneNodeSocketNamesCount // (Final|Native|Public) // @ game+0x3690540
	uint32_t GetTreeHashAboutStaticWeaponPart(); // Function GPGameplay.ModularWeaponDesc.GetTreeHashAboutStaticWeaponPart // (Final|Native|Public) // @ game+0x3690510
	struct FWeaponSkinInfo GetSkinInfo(); // Function GPGameplay.ModularWeaponDesc.GetSkinInfo // (Final|Native|Public) // @ game+0x36904d0
	uint64_t GetSkinId(); // Function GPGameplay.ModularWeaponDesc.GetSkinId // (Final|Native|Public|Const) // @ game+0x36904a0
	uint64_t GetRootGUID(); // Function GPGameplay.ModularWeaponDesc.GetRootGUID // (Final|Native|Public) // @ game+0x3690470
	uint64_t GetPendantID(); // Function GPGameplay.ModularWeaponDesc.GetPendantID // (Final|Native|Public) // @ game+0x3690440
	struct FPbWeaponSkinInfoParam GetPbWeaponSkinInfoParam(); // Function GPGameplay.ModularWeaponDesc.GetPbWeaponSkinInfoParam // (Final|Native|Public) // @ game+0x3690340
	int32_t GetPartNodeIndexFromSocketGUID(uint64_t SocketGUID); // Function GPGameplay.ModularWeaponDesc.GetPartNodeIndexFromSocketGUID // (Final|Native|Public) // @ game+0x36902b0
	struct FGPModularWeaponPartNode GetParentNodeFromSocketGUID(uint64_t SocketGUID); // Function GPGameplay.ModularWeaponDesc.GetParentNodeFromSocketGUID // (Final|Native|Public) // @ game+0x3690210
	struct FGPModularWeaponPartNode GetParentNodeFromItemIDs(uint64_t SocketGUID, struct TArray<uint64_t> ItemIds); // Function GPGameplay.ModularWeaponDesc.GetParentNodeFromItemIDs // (Final|Native|Public|Const) // @ game+0x36900a0
	struct FModularContext GetModularContext(); // Function GPGameplay.ModularWeaponDesc.GetModularContext // (Final|Native|Public) // @ game+0x368ff50
	bool GetIsApplyTune(); // Function GPGameplay.ModularWeaponDesc.GetIsApplyTune // (Final|Native|Public) // @ game+0x368ff20
	uint64_t GetFancyColorID(); // Function GPGameplay.ModularWeaponDesc.GetFancyColorID // (Final|Native|Public|Const) // @ game+0x368fef0
	bool GetBipodDeploy(); // Function GPGameplay.ModularWeaponDesc.GetBipodDeploy // (Final|Native|Public) // @ game+0x368fed0
	void GetAllVisableParts(struct TArray<struct FGPModularWeaponPartNode>& OutPartNodes); // Function GPGameplay.ModularWeaponDesc.GetAllVisableParts // (Final|Native|Public|HasOutParms) // @ game+0x368fca0
	struct TArray<struct FGPModularWeaponPartNode> GetAllParts(); // Function GPGameplay.ModularWeaponDesc.GetAllParts // (Final|Native|Public|Const) // @ game+0x368fc70
	void FromGunDescRow(struct TArray<struct FGunDescRow>& inArray); // Function GPGameplay.ModularWeaponDesc.FromGunDescRow // (Final|Native|Public|HasOutParms) // @ game+0x368fad0
	void FromBaseWeaponID(uint64_t BaseWeaponId); // Function GPGameplay.ModularWeaponDesc.FromBaseWeaponID // (Final|Native|Public) // @ game+0x368fa50
	void ForceLoadClientOnlyWeaponExtraModelInfo(); // Function GPGameplay.ModularWeaponDesc.ForceLoadClientOnlyWeaponExtraModelInfo // (Final|Native|Public) // @ game+0x368fa30
	void EndModify(); // Function GPGameplay.ModularWeaponDesc.EndModify // (Final|Native|Public) // @ game+0x368fa10
	uint64_t STATIC_EncodeSocketGUIDFromParentSocketGUID(uint64_t SocketId, uint64_t ParentSocketGUID, enum class EModularPartNodeType NodeType); // Function GPGameplay.ModularWeaponDesc.EncodeSocketGUIDFromParentSocketGUID // (Final|Native|Static|Public) // @ game+0x368f920
	uint64_t STATIC_EncodeSocketGUID(uint64_t SocketId, uint64_t Depth, uint64_t ParentSocketGUID, enum class EModularPartNodeType NodeType); // Function GPGameplay.ModularWeaponDesc.EncodeSocketGUID // (Final|Native|Static|Public) // @ game+0x368f7f0
	uint64_t STATIC_DecodeSocketIDFromSocketGUID(uint64_t SocketGUID); // Function GPGameplay.ModularWeaponDesc.DecodeSocketIDFromSocketGUID // (Final|Native|Static|Public) // @ game+0x368f710
	uint64_t STATIC_DecodeSocketDepthFromSocketGUID(uint64_t SocketGUID); // Function GPGameplay.ModularWeaponDesc.DecodeSocketDepthFromSocketGUID // (Final|Native|Static|Public) // @ game+0x368f690
	uint64_t STATIC_DecodeParentSocketGUIDFromSocketGUID(uint64_t SocketGUID); // Function GPGameplay.ModularWeaponDesc.DecodeParentSocketGUIDFromSocketGUID // (Final|Native|Static|Public) // @ game+0x368f610
	enum class EModularPartNodeType STATIC_DecodeNodeTypeFromSocketGUID(uint64_t SocketGUID); // Function GPGameplay.ModularWeaponDesc.DecodeNodeTypeFromSocketGUID // (Final|Native|Static|Public) // @ game+0x368f590
	bool CompareRenderResult(struct UModularWeaponDesc* Desc, enum class EModularWeaponDescCompare CompareType); // Function GPGameplay.ModularWeaponDesc.CompareRenderResult // (Final|Native|Public) // @ game+0x368f450
	void ClearNodeAttachPosition(); // Function GPGameplay.ModularWeaponDesc.ClearNodeAttachPosition // (Final|Native|Public) // @ game+0x368f410
	void CleanTree(); // Function GPGameplay.ModularWeaponDesc.CleanTree // (Native|Public) // @ game+0x8964b0
	void CleanExtraModelInfo(enum class EModularPartNodeType NodeType); // Function GPGameplay.ModularWeaponDesc.CleanExtraModelInfo // (Final|Native|Public) // @ game+0x368f390
	int32_t BuildTree(uint64_t InRootPartItemID, uint64_t InRootPartFunctionID, uint64_t InRootPartAnimFunctionID, uint64_t InRootPartAudioFunctionID, uint64_t InRootPartFxFunctionID, uint64_t InRootPartsTypeId, char InRootPartsTypePriority, uint64_t Guid, enum class EAdapterItemType InRootPartType, struct FItemInfoContext& ItemInfo); // Function GPGameplay.ModularWeaponDesc.BuildTree // (Final|Native|Public|HasOutParms) // @ game+0x368f050
	void BuildFromWeaponParts(struct TArray<struct FGPModularWeaponPartNode>& InWeaponPartNodes); // Function GPGameplay.ModularWeaponDesc.BuildFromWeaponParts // (Final|Native|Public|HasOutParms) // @ game+0x368ee20
	void BuildFromModularWeaponDesc(struct UModularWeaponDesc* WeaponDesc); // Function GPGameplay.ModularWeaponDesc.BuildFromModularWeaponDesc // (Final|Native|Public) // @ game+0x368eda0
	void BeginModify(); // Function GPGameplay.ModularWeaponDesc.BeginModify // (Final|Native|Public) // @ game+0x368ed80
	void AttachSrcNodeToDestNode(int32_t SrcNodeIndex, int32_t DestNodeIndex, uint32_t DestSocketId); // Function GPGameplay.ModularWeaponDesc.AttachSrcNodeToDestNode // (Final|Native|Protected) // @ game+0x368ec80
	void AttachPendant(uint64_t PendantItemId); // Function GPGameplay.ModularWeaponDesc.AttachPendant // (Final|Native|Public) // @ game+0x368ec00
	void AttachNodeToDestNode(int32_t SrcNodeIndex, int32_t DestNodeIndex, struct FName& SocketName, bool bRemoveExist); // Function GPGameplay.ModularWeaponDesc.AttachNodeToDestNode // (Final|Native|Protected|HasOutParms) // @ game+0x368eab0
	int32_t AddAPartToTree(int32_t ParentIndex, uint32_t ParentSocketId, uint64_t AttachingPartID, uint64_t AttachingPartGUID, struct FItemInfoContext ItemInfo); // Function GPGameplay.ModularWeaponDesc.AddAPartToTree // (Native|Public) // @ game+0x368e880
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPathFollower
// Size: 0x380 (Inherited: 0x378)
class AGPPathFollower : public AActor {
public:

	struct UGPPathFollowComponent* PathFollowComponent; // 0x378(0x08)

	void Stop(); // Function GPGameplay.GPPathFollower.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x36409d0
	void Resume(); // Function GPGameplay.GPPathFollower.Resume // (Final|Native|Public|BlueprintCallable) // @ game+0x3640710
	void Reset(); // Function GPGameplay.GPPathFollower.Reset // (Final|Native|Public|BlueprintCallable) // @ game+0x21b34a0
	void Play(); // Function GPGameplay.GPPathFollower.Play // (Final|Native|Public|BlueprintCallable) // @ game+0x3640450
	void Pause(); // Function GPGameplay.GPPathFollower.Pause // (Final|Native|Public|BlueprintCallable) // @ game+0x3640430
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPreviewLineActorBase
// Size: 0x3c0 (Inherited: 0x378)
class AGPPreviewLineActorBase : public AActor {
public:

	struct TArray<struct FVector> PathPoints; // 0x378(0x10)
	char pad_388[0x8]; // 0x388(0x08)
	struct FTransform CurrentCameraTrans; // 0x390(0x30)

	void UpdatePreview(bool bIsTracingLine); // Function GPGameplay.GPPreviewLineActorBase.UpdatePreview // (Native|Public) // @ game+0x3653a50
	void TrySetRenderMatrixMode(enum class ERenderMatrixMode RenderMatrixMode); // Function GPGameplay.GPPreviewLineActorBase.TrySetRenderMatrixMode // (Native|Public) // @ game+0xbcc120
	void ShowPreview(); // Function GPGameplay.GPPreviewLineActorBase.ShowPreview // (Native|Public) // @ game+0xbcc1a0
	void HideAllInstance(); // Function GPGameplay.GPPreviewLineActorBase.HideAllInstance // (Native|Public) // @ game+0xbcb8a0
	void Clear(); // Function GPGameplay.GPPreviewLineActorBase.Clear // (Native|Public) // @ game+0xbcb880
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPRagDollPhysicsComponent
// Size: 0x9b0 (Inherited: 0x100)
class UGPRagDollPhysicsComponent : public UActorComponent {
public:

	char pad_100[0x1f0]; // 0x100(0x1f0)
	/*struct FMulticastInlineDelegate*/char OnRagdollStart[0x10]; // 0x2f0(0x10)
	/*struct FMulticastInlineDelegate*/char OnRagdollStop[0x10]; // 0x300(0x10)
	/*struct FMulticastInlineDelegate*/char OnRagdollErrorRecord[0x10]; // 0x310(0x10)
	char pad_320[0x68]; // 0x320(0x68)
	bool bEnablePhysicsBodyDebug; // 0x388(0x01)
	char pad_389[0x1]; // 0x389(0x01)
	bool bEnableRagdollPhysics; // 0x38a(0x01)
	char pad_38B[0x1]; // 0x38b(0x01)
	struct FName DeathConfigName; // 0x38c(0x08)
	float AnimationDetectCapsuleHeight; // 0x394(0x04)
	float AnimationDetectCapsuleRadius; // 0x398(0x04)
	float LimbPhysicsConvergenceDuration; // 0x39c(0x04)
	int32_t RaycastRate; // 0x3a0(0x04)
	char pad_3A4[0x4]; // 0x3a4(0x04)
	struct USkeletalMesh* DefaultRagdollSkeletalMesh; // 0x3a8(0x08)
	struct TArray<struct UPhysicsAsset*> DefaultRagdollPhysicsAssets; // 0x3b0(0x10)
	struct TArray<struct FName> ReplicatePhysicsBodyNameArray; // 0x3c0(0x10)
	struct FRagDollReplicateData RagDollReplicateData; // 0x3d0(0x4c)
	bool bDeathAnimEndFlag; // 0x41c(0x01)
	char pad_41D[0x3]; // 0x41d(0x03)
	struct FVector_NetQuantize100 DeathStartSkeletalMeshLocation; // 0x420(0x0c)
	float DeathStartSkeletalMeshYaw; // 0x42c(0x04)
	float ErrorPerLinearDiff; // 0x430(0x04)
	float ErrorPerAngularDiff; // 0x434(0x04)
	float MaxRestoredStateError; // 0x438(0x04)
	float PositionLerpSpeed; // 0x43c(0x04)
	float AngleLerpSpeed; // 0x440(0x04)
	float LinearSpeedChangeWeight; // 0x444(0x04)
	float AngularSpeedChangeWeight; // 0x448(0x04)
	float MaxLinearHardSnapDistance; // 0x44c(0x04)
	float ErrorAccumulationSeconds; // 0x450(0x04)
	float ErrorAccumulationDistanceSq; // 0x454(0x04)
	float ErrorAccumulationSimilarity; // 0x458(0x04)
	float ServerRigidbodyOrientationCorrectStrength; // 0x45c(0x04)
	float ClientAuthorityRPCRate; // 0x460(0x04)
	float ClientSendRPCPositionThreshold; // 0x464(0x04)
	float LocationErrorThreshold; // 0x468(0x04)
	float HeightErrorThreshold; // 0x46c(0x04)
	struct FRagDollDeathAnimAssets DeathAnimAssets; // 0x470(0x130)
	char bEnableKinematicHip : 1; // 0x5a0(0x01)
	char pad_5A0_1 : 7; // 0x5a0(0x01)
	char pad_5A1[0x7]; // 0x5a1(0x07)
	struct UAnimSequence* DeathAnim; // 0x5a8(0x08)
	char bAIUsePlayDeathAssets; // 0x5b0(0x01)
	char pad_5B1[0xb]; // 0x5b1(0x0b)
	float DeathAnimEndMaxLength; // 0x5bc(0x04)
	bool bEnableWeaponRagdoll; // 0x5c0(0x01)
	char pad_5C1[0x7]; // 0x5c1(0x07)
	struct AAWeaponRagdollActor* WeaponRagdollActor; // 0x5c8(0x08)
	struct UClass* WeaponRagdollActorClass; // 0x5d0(0x08)
	struct USkeletalMesh* CacheOldSkeletalMesh; // 0x5d8(0x08)
	char pad_5E0[0x8]; // 0x5e0(0x08)
	struct AGPCharacterBase* GPCharacter; // 0x5e8(0x08)
	struct USkeletalMeshComponent* SkeletalMeshComponent; // 0x5f0(0x08)
	struct UGPSkeletalMeshComponent* GPMesh; // 0x5f8(0x08)
	struct UGPAnimProxyBaseComponent* AnimProxyComponent; // 0x600(0x08)
	struct TWeakObjectPtr<struct UCharacterMovementComponent> MovementComponent; // 0x608(0x08)
	char pad_610[0x10]; // 0x610(0x10)
	struct TArray<struct AActor*> IgnoredActors; // 0x620(0x10)
	struct TWeakObjectPtr<struct UPhysicsAsset> CachedDefaultPhysicsAsset; // 0x630(0x08)
	struct TWeakObjectPtr<struct UGPRagdollManager> RagdollManager; // 0x638(0x08)
	struct TWeakObjectPtr<struct AGPCharacterBase> AuthoritativeClientCharacter; // 0x640(0x08)
	char pad_648[0x168]; // 0x648(0x168)
	struct TMap<int32_t, float> BodyLinearDamping; // 0x7b0(0x50)
	struct TMap<int32_t, float> LimbsLinearDamping; // 0x800(0x50)
	struct TMap<int32_t, float> BodyAnglerDamping; // 0x850(0x50)
	struct TMap<int32_t, float> LimbsAnglerDamping; // 0x8a0(0x50)
	char pad_8F0[0x74]; // 0x8f0(0x74)
	struct FRagdollImpendingDeathInfo ImpendingDeathInfo; // 0x964(0x28)
	char pad_98C[0x4]; // 0x98c(0x04)
	struct UAnimSequence* ImpendingDeathAnim; // 0x990(0x08)
	char pad_998[0x18]; // 0x998(0x18)

	void StopWeaponRagdollActor(); // Function GPGameplay.GPRagDollPhysicsComponent.StopWeaponRagdollActor // (Final|Native|Public) // @ game+0x36539b0
	void StopReplicate(); // Function GPGameplay.GPRagDollPhysicsComponent.StopReplicate // (Final|Native|Protected) // @ game+0x3653990
	void ServerGatherPhysicBodyCollectionData(int32_t FrameIndex, float DeltaSeconds); // Function GPGameplay.GPRagDollPhysicsComponent.ServerGatherPhysicBodyCollectionData // (Net|Native|Event|Public|NetServer) // @ game+0x3653710
	void RPC_ServerUpdateDeathPhysicsMovement(struct AGPCharacterBase* UpdatePhysicsCharacter, float InSendPhysicsSimulateTime, struct TArray<struct FRepMovement> InReplicatePhysicsMovementArray); // Function GPGameplay.GPRagDollPhysicsComponent.RPC_ServerUpdateDeathPhysicsMovement // (Net|Native|Event|Public|NetServer) // @ game+0x3653490
	void RPC_EnablePhysicsBodyCollectionDebug(bool bEnable); // Function GPGameplay.GPRagDollPhysicsComponent.RPC_EnablePhysicsBodyCollectionDebug // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35e4130
	void RPC_ClientRemoveDeathPhysicsAuthority(struct AGPCharacterBase* UpdatePhysicsCharacter); // Function GPGameplay.GPRagDollPhysicsComponent.RPC_ClientRemoveDeathPhysicsAuthority // (Net|Native|Event|Public|NetClient) // @ game+0x3653400
	void RPC_ClientNotifyAuthority(struct AGPCharacterBase* UpdatePhysicsCharacter, struct AGPCharacterBase* InAuthoritativeClientCharacter); // Function GPGameplay.GPRagDollPhysicsComponent.RPC_ClientNotifyAuthority // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3653330
	void RPC_ClientAuthorityNotifyStop(struct AGPCharacterBase* UpdatePhysicsCharacter, float SimulateTime); // Function GPGameplay.GPRagDollPhysicsComponent.RPC_ClientAuthorityNotifyStop // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3653260
	void RecoverCacheSkeletalMesh(); // Function GPGameplay.GPRagDollPhysicsComponent.RecoverCacheSkeletalMesh // (Final|Native|Protected) // @ game+0x36535e0
	void OnRep_ReplicatePhysics(); // Function GPGameplay.GPRagDollPhysicsComponent.OnRep_ReplicatePhysics // (Native|Protected) // @ game+0x17553a0
	void OnClientGPCharacterDie(struct AGPCharacterBase* InCharacter); // Function GPGameplay.GPRagDollPhysicsComponent.OnClientGPCharacterDie // (Final|Native|Protected) // @ game+0x36531e0
	void MulticastServerClearByImpendingDeath(struct FRagDollReplicateData InRagDollReplicateData); // Function GPGameplay.GPRagDollPhysicsComponent.MulticastServerClearByImpendingDeath // (Net|NetReliableNative|Event|NetMulticast|Public|NetValidate) // @ game+0x3652fe0
	void MulticastActorLocation(struct FVector_NetQuantize10 InActorLocation, float InMeshOffsetZ); // Function GPGameplay.GPRagDollPhysicsComponent.MulticastActorLocation // (Net|NetReliableNative|Event|NetMulticast|Public|NetValidate) // @ game+0x3652ec0
	void Multicast_ClearRagDollPhysicsReplicateData(); // Function GPGameplay.GPRagDollPhysicsComponent.Multicast_ClearRagDollPhysicsReplicateData // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x22b8690
	float GetPhysicsWeight(); // Function GPGameplay.GPRagDollPhysicsComponent.GetPhysicsWeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3652dc0
	void ClientReceivePhysicBodyCollectionData(struct FRagdollPhysicsBodyCollectionData PhysicsBodyCollectionData, int32_t FrameIndex, float DeltaSeconds); // Function GPGameplay.GPRagDollPhysicsComponent.ClientReceivePhysicBodyCollectionData // (Net|Native|Event|NetMulticast|Public) // @ game+0x3652ab0
	bool CheckConstraintAndDisableLimbBody(); // Function GPGameplay.GPRagDollPhysicsComponent.CheckConstraintAndDisableLimbBody // (Final|Native|Protected) // @ game+0x3652a80
	bool CheckBeginRagdollOverlap(); // Function GPGameplay.GPRagDollPhysicsComponent.CheckBeginRagdollOverlap // (Final|Native|Protected) // @ game+0x3652a50
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPWeaponBase
// Size: 0x390 (Inherited: 0x378)
class AGPWeaponBase : public AActor {
public:

	struct USkeletalMeshComponent* WeaponMesh; // 0x378(0x08)
	struct UWeaponDataComponentConfig* Config; // 0x380(0x08)
	char pad_388[0x8]; // 0x388(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponInputBaseLogic
// Size: 0x30 (Inherited: 0x30)
class UWeaponInputBaseLogic : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPWeaponPartAnimInstance
// Size: 0xa30 (Inherited: 0x280)
class UGPWeaponPartAnimInstance : public UAnimInstance {
public:

	struct FGPWeaponPartAnimInstanceProxy LocalProxy; // 0x280(0x7b0)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentAnimBase
// Size: 0x858 (Inherited: 0x160)
class UWeaponDataComponentAnimBase : public UGPWeaponDataComponentAnim {
public:

	char pad_160[0x8]; // 0x160(0x08)
	/*struct TScriptInterface<IWeaponProxyInterface>*/char WeaponProxy[0x10]; // 0x168(0x10)
	struct FName WeaponAnimBasePosRowNameBase; // 0x178(0x08)
	struct FName WeaponAnimBasePosRowName; // 0x180(0x08)
	struct FName WeaponAnimBasePosRowNameOverride; // 0x188(0x08)
	struct FName WeaponAnimBasePosAnimLastOverrideName; // 0x190(0x08)
	int64_t WeaponAnimId; // 0x198(0x08)
	int64_t SkinApperanceId; // 0x1a0(0x08)
	char pad_1A8[0x18]; // 0x1a8(0x18)
	struct FName AiAnimPosRowName; // 0x1c0(0x08)
	char pad_1C8[0x2c]; // 0x1c8(0x2c)
	bool DontSkip3pFireAnim; // 0x1f4(0x01)
	char pad_1F5[0x83]; // 0x1f5(0x83)
	struct UGPAnimDataComponent* GPAnimDataComponent; // 0x278(0x08)
	struct UGPAnimProxyComponent* GPAnimProxyComponent; // 0x280(0x08)
	struct UGPAIDataComponentAnim* AIGPAnimDataComponent; // 0x288(0x08)
	char pad_290[0x470]; // 0x290(0x470)
	struct UWeaponManagerComponent* WeaponManagerComponent; // 0x700(0x08)
	char pad_708[0x18]; // 0x708(0x18)
	struct TArray<struct UObject*> RecordLocalAnimationList; // 0x720(0x10)
	char pad_730[0x20]; // 0x730(0x20)
	struct UGPAnimProxyBaseComponent* CharacterAnimProxyComponent; // 0x750(0x08)
	char pad_758[0x8]; // 0x758(0x08)
	struct UCameraShake* CurCameraShake; // 0x760(0x08)
	char pad_768[0xf0]; // 0x768(0xf0)

	void InitGetWeaponManagerComponent(); // Function GPGameplay.WeaponDataComponentAnimBase.InitGetWeaponManagerComponent // (Final|Native|Protected) // @ game+0x36d1b30
	struct UWeaponManagerComponent* GetWeaponManagerComponent(); // Function GPGameplay.WeaponDataComponentAnimBase.GetWeaponManagerComponent // (Final|Native|Protected) // @ game+0x36d19e0
	bool EnablePlayInteractivePutWeaponAnim(); // Function GPGameplay.WeaponDataComponentAnimBase.EnablePlayInteractivePutWeaponAnim // (Native|Public) // @ game+0x36d1630
	bool EnablePlayInteractiveGetWeaponAnim(); // Function GPGameplay.WeaponDataComponentAnimBase.EnablePlayInteractiveGetWeaponAnim // (Native|Public) // @ game+0x368f790
	void DelaySetWeaponMeshHidden(); // Function GPGameplay.WeaponDataComponentAnimBase.DelaySetWeaponMeshHidden // (Final|Native|Public) // @ game+0x36d1610
	void DelayAttachBackWeaponMesh(bool bAttachBack, float DelayTime, struct FString ContextString); // Function GPGameplay.WeaponDataComponentAnimBase.DelayAttachBackWeaponMesh // (Final|Native|Public) // @ game+0x36d1480
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentAnim
// Size: 0x160 (Inherited: 0x160)
class UWeaponFuncComponentAnim : public UGPWeaponFuncComponentAnim {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponManagerComponent
// Size: 0x440 (Inherited: 0x118)
class UWeaponManagerComponent : public UGPWeaponManagerComponent {
public:

	char pad_118[0x18]; // 0x118(0x18)
	/*struct TScriptInterface<IWeaponManagerInterface>*/char WeaponManagerInterface[0x10]; // 0x130(0x10)
	struct AGPCharacterBase* CharacterOwner; // 0x140(0x08)
	char pad_148[0x8]; // 0x148(0x08)
	struct TArray<struct UClass*> DefaultWeapon1Classes; // 0x150(0x10)
	struct TArray<int64_t> DefaultWeaponItemIdsConfig; // 0x160(0x10)
	bool bUseWeaponDefaultWeaponItemId; // 0x170(0x01)
	char pad_171[0x7]; // 0x171(0x07)
	struct UClass* EmptyHandWeaponClass; // 0x178(0x08)
	uint64_t EmptyHandOverrideID; // 0x180(0x08)
	bool bUseEmptyHandOverride; // 0x188(0x01)
	char pad_189[0x7]; // 0x189(0x07)
	struct TArray<struct AWeaponBase*> WeaponList; // 0x190(0x10)
	struct TArray<uint64_t> WeaponIDList; // 0x1a0(0x10)
	char WeaponSlot; // 0x1b0(0x01)
	char pad_1B1[0x7]; // 0x1b1(0x07)
	struct AWeaponBase* EmptyHandWeapon; // 0x1b8(0x08)
	/*struct TArray<struct TScriptInterface<IWeaponInterface>>*/char EmptyHandWeapons[0x10]; // 0x1c0(0x10)
	struct FSwitchWeaponContext RuntimeContext; // 0x1d0(0x60)
	char pad_230[0xb0]; // 0x230(0xb0)
	struct FTimerHandle AutoCollectWeaponUsingTimeTimerHandle; // 0x2e0(0x08)
	char pad_2E8[0x8]; // 0x2e8(0x08)
	struct TArray<uint64_t> HadFirstEquipWeaponID; // 0x2f0(0x10)
	char pad_300[0x10]; // 0x300(0x10)
	struct FSwitchWeaponTimeLineRepData TimeLineRepData; // 0x310(0x20)
	char pad_330[0xf0]; // 0x330(0xf0)
	float CancleSwitchWeaponVaildTime; // 0x420(0x04)
	char pad_424[0x4]; // 0x424(0x04)
	struct TArray<struct FQueuedAddWeaponContext> AddWeaponContextQueue; // 0x428(0x10)
	char pad_438[0x8]; // 0x438(0x08)

	bool SwitchWeaponEquipPosition(uint32_t EquipPositionA, uint32_t EquipPositionB); // Function GPGameplay.WeaponManagerComponent.SwitchWeaponEquipPosition // (Native|Public) // @ game+0x3704640
	bool SwitchToWeapon(enum class ESwitchWeaponContext SWContext, uint32_t EquipPosition, enum class EWeaponSwitchType SwitchType); // Function GPGameplay.WeaponManagerComponent.SwitchToWeapon // (Native|Public) // @ game+0x3704530
	bool SwitchToTargetWeaponInner(/*enum class ESwitchWeaponContext SWContext, struct TScriptInterface<IWeaponInterface>& Weapon, enum class EWeaponSwitchType SwitchType, bool bForce*/); // Function GPGameplay.WeaponManagerComponent.SwitchToTargetWeaponInner // (Final|Native|Protected|HasOutParms) // @ game+0x37043c0
	bool SwitchToTargetWeapon(enum class ESwitchWeaponContext SWContext, struct AWeaponBase* Weapon, enum class EWeaponSwitchType SwitchType, bool Force); // Function GPGameplay.WeaponManagerComponent.SwitchToTargetWeapon // (Native|Public) // @ game+0x3704270
	bool SwitchToPreWeapon(enum class ESwitchWeaponContext SWContext, enum class EWeaponSwitchType SwitchType, bool bCanUseEmptyHand); // Function GPGameplay.WeaponManagerComponent.SwitchToPreWeapon // (Native|Public) // @ game+0x3704160
	bool SwitchToNextWeaponReverse(enum class ESwitchWeaponContext SwitchWeaponContext, enum class EWeaponSwitchType SwitchType, bool bCanUseEmptyHand); // Function GPGameplay.WeaponManagerComponent.SwitchToNextWeaponReverse // (Final|Native|Public) // @ game+0x3704050
	bool SwitchToNextWeapon(enum class ESwitchWeaponContext SWContext, enum class EWeaponSwitchType SwitchType, bool bCanUseEmptyHand); // Function GPGameplay.WeaponManagerComponent.SwitchToNextWeapon // (Native|Public|BlueprintCallable) // @ game+0x3703f40
	bool SwitchToMeleeWeapon(enum class ESwitchWeaponContext SWContext, enum class EWeaponSwitchType SwitchType, bool bCanUseEmptyHand); // Function GPGameplay.WeaponManagerComponent.SwitchToMeleeWeapon // (Native|Public) // @ game+0x3703e30
	bool SwitchToMainWeapon(enum class ESwitchWeaponContext SWContext, enum class EWeaponSwitchType SwitchType); // Function GPGameplay.WeaponManagerComponent.SwitchToMainWeapon // (Native|Public) // @ game+0x3703d60
	bool SwitchToLastUsedWeapon(enum class ESwitchWeaponContext SWContext, enum class EWeaponSwitchType SwitchType, bool bCanUseEmptyHand, bool IncludeSkillWeapon); // Function GPGameplay.WeaponManagerComponent.SwitchToLastUsedWeapon // (Native|Public) // @ game+0x3703c10
	bool SwitchToEmptyHand(enum class ESwitchWeaponContext SWContext, enum class EWeaponSwitchType SwitchType); // Function GPGameplay.WeaponManagerComponent.SwitchToEmptyHand // (Native|Public) // @ game+0x3703b40
	bool SwitchToDefaultWeapon(enum class ESwitchWeaponContext SWContext, enum class EWeaponSwitchType SwitchType); // Function GPGameplay.WeaponManagerComponent.SwitchToDefaultWeapon // (Native|Public) // @ game+0x3703a70
	void SetWeaponSlot(char InWeaponSlot); // Function GPGameplay.WeaponManagerComponent.SetWeaponSlot // (Final|Native|Public) // @ game+0x37039f0
	void ServerSwitchToTargetWeapon(struct AWeaponBase* TargetWeapon, enum class EWeaponSwitchType SwitchType); // Function GPGameplay.WeaponManagerComponent.ServerSwitchToTargetWeapon // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x37038f0
	void ServerSwitchToNextWeapon(enum class ESwitchWeaponContext SWContext, enum class EWeaponSwitchType SwitchType, bool bCanUseEmptyHand); // Function GPGameplay.WeaponManagerComponent.ServerSwitchToNextWeapon // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x37037b0
	void ServerRemoveWeapon(struct AWeaponBase* TargetWeapon); // Function GPGameplay.WeaponManagerComponent.ServerRemoveWeapon // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x37036f0
	void RPC_ServerVerifyFrame(struct FSwitchWeaponFrame ClientFrame, struct FSwitchWeaponAntiCheatCode InCheckCode); // Function GPGameplay.WeaponManagerComponent.RPC_ServerVerifyFrame // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3702fe0
	void RPC_ClientNotifyFrameInValid(int32_t ClientFrameNo); // Function GPGameplay.WeaponManagerComponent.RPC_ClientNotifyFrameInValid // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x35f1870
	bool RemoveWeaponInScene(/*struct TScriptInterface<IWeaponInterface>& Weapon*/); // Function GPGameplay.WeaponManagerComponent.RemoveWeaponInScene // (Native|Public|HasOutParms) // @ game+0x3703640
	bool RemoveWeaponByWeaponId(uint64_t WeaponID, bool bRemoveAll); // Function GPGameplay.WeaponManagerComponent.RemoveWeaponByWeaponId // (Native|Public) // @ game+0x3703570
	bool RemoveWeaponBySkillId(uint64_t SkillId, bool bRemoveAll); // Function GPGameplay.WeaponManagerComponent.RemoveWeaponBySkillId // (Native|Public) // @ game+0x37034a0
	bool RemoveWeapon(uint32_t EquipPosition); // Function GPGameplay.WeaponManagerComponent.RemoveWeapon // (Native|Public) // @ game+0x3703400
	bool RemoveAllWeapon(bool bAutoSwitchNext); // Function GPGameplay.WeaponManagerComponent.RemoveAllWeapon // (Native|Public) // @ game+0x3703360
	void ProcessInteruptSkillWeaponSwitching(); // Function GPGameplay.WeaponManagerComponent.ProcessInteruptSkillWeaponSwitching // (Final|Native|Public) // @ game+0x3702fc0
	void OnRepWeaponList(); // Function GPGameplay.WeaponManagerComponent.OnRepWeaponList // (Final|Native|Protected) // @ game+0x37029f0
	void OnRepWeaponIDList(); // Function GPGameplay.WeaponManagerComponent.OnRepWeaponIDList // (Final|Native|Protected) // @ game+0x37029d0
	void OnRep_RemoteTimeLineData(); // Function GPGameplay.WeaponManagerComponent.OnRep_RemoteTimeLineData // (Final|Native|Public) // @ game+0x3702a10
	void OnCharacterReborn(); // Function GPGameplay.WeaponManagerComponent.OnCharacterReborn // (Final|Native|Protected) // @ game+0x37029b0
	void MeleeFireInLogic(); // Function GPGameplay.WeaponManagerComponent.MeleeFireInLogic // (Final|Native|Public|BlueprintCallable) // @ game+0x3702990
	bool IsWeaponExist(struct FWeaponIdentity& InWeaponIdentity); // Function GPGameplay.WeaponManagerComponent.IsWeaponExist // (Native|Public|HasOutParms) // @ game+0x37028e0
	bool IsDefaultWeaponSlot(); // Function GPGameplay.WeaponManagerComponent.IsDefaultWeaponSlot // (Final|Native|Public) // @ game+0x3702820
	bool IsCanCancelSwitchCurrentWeapon(); // Function GPGameplay.WeaponManagerComponent.IsCanCancelSwitchCurrentWeapon // (Final|Native|Public) // @ game+0x37027c0
	void InitWeaponManagerConfig(struct FWeaponManagerConfig& InConfig); // Function GPGameplay.WeaponManagerComponent.InitWeaponManagerConfig // (Final|Native|Public|HasOutParms) // @ game+0x3702220
	bool HasPendingSwitchWeapon(); // Function GPGameplay.WeaponManagerComponent.HasPendingSwitchWeapon // (Native|Public) // @ game+0x37021e0
	struct TArray<struct AWeaponBase*> GetWeaponListMain(); // Function GPGameplay.WeaponManagerComponent.GetWeaponListMain // (Native|Public) // @ game+0x3702130
	struct TArray<struct AWeaponBase*> GetWeaponListByType(enum class EWeaponItemType WeaponType); // Function GPGameplay.WeaponManagerComponent.GetWeaponListByType // (Native|Public) // @ game+0x3702050
	struct TArray<struct AWeaponBase*> GetWeaponList(); // Function GPGameplay.WeaponManagerComponent.GetWeaponList // (Native|Public) // @ game+0x3701fa0
	struct TArray<uint64_t> GetWeaponIDList(); // Function GPGameplay.WeaponManagerComponent.GetWeaponIDList // (Native|Public) // @ game+0x3701f20
	int32_t GetWeaponCount(bool bIncludeMeleeWeapon); // Function GPGameplay.WeaponManagerComponent.GetWeaponCount // (Native|Public) // @ game+0x3701e80
	void GetWeaponByPosition(uint32_t EquipPosition); // Function GPGameplay.WeaponManagerComponent.GetWeaponByPosition // (Native|Public) // @ game+0x3701dd0
	void GetWeaponByIdentity(struct FWeaponIdentity& InWeaponIdentity); // Function GPGameplay.WeaponManagerComponent.GetWeaponByIdentity // (Native|Public|HasOutParms) // @ game+0x3701d10
	void GetWeaponByGid(uint64_t gid); // Function GPGameplay.WeaponManagerComponent.GetWeaponByGid // (Native|Public) // @ game+0x3701c60
	void GetWeapon(uint32_t EquipPosition); // Function GPGameplay.WeaponManagerComponent.GetWeapon // (Native|Public) // @ game+0x3701b80
	struct AWeaponBase* GetPendingActiveWeapon(); // Function GPGameplay.WeaponManagerComponent.GetPendingActiveWeapon // (Native|Public) // @ game+0x3701ac0
	struct AWeaponBase* GetNextWeapon(bool bCanUseEmptyHand, bool bReverse); // Function GPGameplay.WeaponManagerComponent.GetNextWeapon // (Native|Protected|Const) // @ game+0x3701810
	struct AWeaponBase* GetMeleeOrEmptyWeapon(); // Function GPGameplay.WeaponManagerComponent.GetMeleeOrEmptyWeapon // (Final|Native|Public) // @ game+0x3701740
	struct AWeaponBase* GetLastWeapon(bool bCanUseEmptyHand, bool IncludeSkillWeapon); // Function GPGameplay.WeaponManagerComponent.GetLastWeapon // (Native|Protected|Const) // @ game+0x3701660
	void GetLastUsedWeapon(); // Function GPGameplay.WeaponManagerComponent.GetLastUsedWeapon // (Native|Public) // @ game+0x3701610
	void GetEmptyHandWeapons(); // Function GPGameplay.WeaponManagerComponent.GetEmptyHandWeapons // (Native|Public) // @ game+0x37014e0
	struct AWeaponBase* GetEmptyHandWeaponBase(); // Function GPGameplay.WeaponManagerComponent.GetEmptyHandWeaponBase // (Native|Public) // @ game+0x37014b0
	void GetEmptyHandWeapon(); // Function GPGameplay.WeaponManagerComponent.GetEmptyHandWeapon // (Native|Public) // @ game+0x3701460
	struct AWeaponBase* GetDefaultWeapon(/*struct TScriptInterface<IWeaponInterface> IgnoreWeapon*/); // Function GPGameplay.WeaponManagerComponent.GetDefaultWeapon // (Native|Protected) // @ game+0x37013b0
	struct FString GetDebugString(); // Function GPGameplay.WeaponManagerComponent.GetDebugString // (Native|Public) // @ game+0x3701330
	void GetCurrentWeapon(); // Function GPGameplay.WeaponManagerComponent.GetCurrentWeapon // (Native|Public) // @ game+0x37012e0
	struct TMap<uint64_t, float> GetAllWeaponUsingTime(); // Function GPGameplay.WeaponManagerComponent.GetAllWeaponUsingTime // (Final|Native|Public) // @ game+0x37010c0
	void GetAllWeapon(); // Function GPGameplay.WeaponManagerComponent.GetAllWeapon // (Native|Public) // @ game+0x3701050
	void GetAllEmptyHandWeapon(); // Function GPGameplay.WeaponManagerComponent.GetAllEmptyHandWeapon // (Native|Public) // @ game+0x3700fe0
	struct TArray<struct AWeaponBase*> GetAllCurrentWeapon(); // Function GPGameplay.WeaponManagerComponent.GetAllCurrentWeapon // (Native|Public) // @ game+0x3700f60
	void EndInteractive(); // Function GPGameplay.WeaponManagerComponent.EndInteractive // (Native|Public) // @ game+0x3700f30
	void CollectionWeaponUsingTime(); // Function GPGameplay.WeaponManagerComponent.CollectionWeaponUsingTime // (Final|Native|Public) // @ game+0x3700f10
	void ClientPreSwitchToTargetWeapon(struct AWeaponBase* TargetWeapon); // Function GPGameplay.WeaponManagerComponent.ClientPreSwitchToTargetWeapon // (Native|Protected) // @ game+0x35fd650
	void CancelSwitchCurrentWeapon(); // Function GPGameplay.WeaponManagerComponent.CancelSwitchCurrentWeapon // (Final|Native|Public) // @ game+0x3700ef0
	bool BP_RemoveWeapon(int32_t EquipPosition); // Function GPGameplay.WeaponManagerComponent.BP_RemoveWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0x3700e00
	struct AWeaponBase* BP_GetWeaponByPosition(uint32_t EquipPosition); // Function GPGameplay.WeaponManagerComponent.BP_GetWeaponByPosition // (Native|Public) // @ game+0x3700d60
	struct AWeaponBase* BP_GetWeaponByIdentity(struct FWeaponIdentity& InWeaponIdentity); // Function GPGameplay.WeaponManagerComponent.BP_GetWeaponByIdentity // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3700cb0
	struct AWeaponBase* BP_GetWeaponByGid(uint64_t gid); // Function GPGameplay.WeaponManagerComponent.BP_GetWeaponByGid // (Native|Public) // @ game+0x3700c10
	struct AWeaponBase* BP_GetWeapon(uint32_t EquipPosition); // Function GPGameplay.WeaponManagerComponent.BP_GetWeapon // (Native|Public) // @ game+0x3700b70
	struct AWeaponBase* BP_GetNextWeapon(bool bCanUseEmptyHand); // Function GPGameplay.WeaponManagerComponent.BP_GetNextWeapon // (Native|Protected) // @ game+0x3700ad0
	struct AWeaponBase* BP_GetLastUsedWeapon(); // Function GPGameplay.WeaponManagerComponent.BP_GetLastUsedWeapon // (Native|Public|BlueprintCallable) // @ game+0x3700aa0
	struct AWeaponBase* BP_GetEmptyHandWeapon(); // Function GPGameplay.WeaponManagerComponent.BP_GetEmptyHandWeapon // (Native|Public) // @ game+0x3700a70
	struct AWeaponBase* BP_GetCurrentWeapon(); // Function GPGameplay.WeaponManagerComponent.BP_GetCurrentWeapon // (Native|Public) // @ game+0x3700a40
	struct AWeaponBase* BP_GetCurActiveWeapon(); // Function GPGameplay.WeaponManagerComponent.BP_GetCurActiveWeapon // (Native|Public|BlueprintCallable) // @ game+0x3700a10
	struct TArray<struct AWeaponBase*> BP_GetAllWeapon(); // Function GPGameplay.WeaponManagerComponent.BP_GetAllWeapon // (Native|Public) // @ game+0x3700990
	bool BP_AddWeaponDesc(struct UModularWeaponDesc* WeaponDesc, int64_t Guid, int32_t EquipPosition); // Function GPGameplay.WeaponManagerComponent.BP_AddWeaponDesc // (Final|Native|Public|BlueprintCallable) // @ game+0x3700890
	void BeginInteractive(); // Function GPGameplay.WeaponManagerComponent.BeginInteractive // (Native|Public) // @ game+0x3700e90
	void ActivatePendingWeapon(enum class EWeaponSwitchType SwitchType); // Function GPGameplay.WeaponManagerComponent.ActivatePendingWeapon // (Native|Protected) // @ game+0x3700810
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.RangeScopeLensProxy
// Size: 0x550 (Inherited: 0x30)
class URangeScopeLensProxy : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)
	struct FScoFunctionRow ScoConfig; // 0x38(0x288)
	struct USkeletalMeshComponent* MeshComp; // 0x2c0(0x08)
	char pad_2C8[0x28]; // 0x2c8(0x28)
	struct FScopeLenMaterialProxy MaterialProxy; // 0x2f0(0x1c0)
	struct FScopeMaterialCondition MaterialCondition; // 0x4b0(0x02)
	char pad_4B2[0x6]; // 0x4b2(0x06)
	struct UMaterialInstanceDynamic* NoRTMat; // 0x4b8(0x08)
	struct UMaterialInstanceDynamic* NoRTStillMat; // 0x4c0(0x08)
	struct UMaterialInstanceDynamic* RTMat; // 0x4c8(0x08)
	char pad_4D0[0x78]; // 0x4d0(0x78)
	struct UMaterialInterface* ScopeStencilWirteMaterial; // 0x548(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ReconnectionSystemBase
// Size: 0x40 (Inherited: 0x30)
class UReconnectionSystemBase : public UObject {
public:

	float HeartbeatMax; // 0x30(0x04)
	float ConnectPingMax; // 0x34(0x04)
	char bEnableSystem : 1; // 0x38(0x01)
	char bTickWhilePaused : 1; // 0x38(0x01)
	char pad_38_2 : 6; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)

	bool RemoveConnection(struct APlayerController* PC); // Function GPGameplay.ReconnectionSystemBase.RemoveConnection // (Native|Public) // @ game+0x9212f0
	bool FoundConnection(struct APlayerController* PC); // Function GPGameplay.ReconnectionSystemBase.FoundConnection // (Final|Native|Public) // @ game+0x36a6c60
	struct APlayerController* FindConnection(uint64_t ConnectionID); // Function GPGameplay.ReconnectionSystemBase.FindConnection // (Native|Public) // @ game+0x36a6bc0
	bool AddConnection(struct APlayerController* PC); // Function GPGameplay.ReconnectionSystemBase.AddConnection // (Native|Public) // @ game+0x921c20
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ScreenEffectBase
// Size: 0x2a8 (Inherited: 0x30)
class UScreenEffectBase : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)
	struct FScreenEffectInfo CacheScreenEffectInfo; // 0x38(0xf0)
	struct FScreenEffectResource CurrentEffectResource; // 0x128(0x178)
	char pad_2A0[0x8]; // 0x2a0(0x08)

	void SetEffectSourceActor(struct AActor* Actor); // Function GPGameplay.ScreenEffectBase.SetEffectSourceActor // (Native|Public|BlueprintCallable) // @ game+0x36a7e30
	void OnUpdatePostprocessViewportParam(struct FName InParamName, struct FVector2D InViewPortLeftTop, struct FVector2D InViewPortSize); // Function GPGameplay.ScreenEffectBase.OnUpdatePostprocessViewportParam // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x36a7b80
	void OnUpdateEffectVectorParam(struct FName InParamName, struct FVector InValue); // Function GPGameplay.ScreenEffectBase.OnUpdateEffectVectorParam // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x36a79c0
	void OnUpdateEffectTextureParam(struct FName InParamName, struct UTexture* InValue); // Function GPGameplay.ScreenEffectBase.OnUpdateEffectTextureParam // (Native|Public|BlueprintCallable) // @ game+0x36a7820
	void OnUpdateEffectParticleParam(struct FName InParamName, struct FParticleSysParam InValue); // Function GPGameplay.ScreenEffectBase.OnUpdateEffectParticleParam // (Native|Public|BlueprintCallable) // @ game+0x36a7520
	void OnUpdateEffectLinearColorParam(struct FName InParamName, struct FLinearColor InValue); // Function GPGameplay.ScreenEffectBase.OnUpdateEffectLinearColorParam // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x36a7380
	void OnUpdateEffectFloatParam(struct FName InParamName, float InValue); // Function GPGameplay.ScreenEffectBase.OnUpdateEffectFloatParam // (Native|Public|BlueprintCallable) // @ game+0x36a71e0
	void OnShow(); // Function GPGameplay.ScreenEffectBase.OnShow // (Native|Public|BlueprintCallable) // @ game+0x921830
	void OnInit(struct FScreenEffectInfo ScreenEffectInfo, struct FName InEffectName); // Function GPGameplay.ScreenEffectBase.OnInit // (Native|Public|BlueprintCallable) // @ game+0x36a6e40
	void OnHide(); // Function GPGameplay.ScreenEffectBase.OnHide // (Native|Public|BlueprintCallable) // @ game+0xaa2210
	void OnFadeOut(); // Function GPGameplay.ScreenEffectBase.OnFadeOut // (Native|Public|BlueprintCallable) // @ game+0x924260
	void OnDeactive(); // Function GPGameplay.ScreenEffectBase.OnDeactive // (Native|Public|BlueprintCallable) // @ game+0x8964b0
	void OnActive(); // Function GPGameplay.ScreenEffectBase.OnActive // (Native|Public|BlueprintCallable) // @ game+0x895c00
	float GetEffectFloatParam(struct FName InParamName); // Function GPGameplay.ScreenEffectBase.GetEffectFloatParam // (Native|Public|BlueprintCallable) // @ game+0x36a6d00
	void ClearHideState(); // Function GPGameplay.ScreenEffectBase.ClearHideState // (Native|Public|BlueprintCallable) // @ game+0x895960
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ScreenEffectControllerBase
// Size: 0x148 (Inherited: 0x30)
class UScreenEffectControllerBase : public UObject {
public:

	char pad_30[0x10]; // 0x30(0x10)
	struct UScreenEffectBase* EffectView; // 0x40(0x08)
	struct FScreenEffectInfo CacheEffectInfo; // 0x48(0xf0)
	char pad_138[0x10]; // 0x138(0x10)

	void SetEffectSourceActor(struct AActor* Actor); // Function GPGameplay.ScreenEffectControllerBase.SetEffectSourceActor // (Native|Public|BlueprintCallable) // @ game+0x36a7e30
	void SetEffectResoureTime(int32_t Index, float InTime); // Function GPGameplay.ScreenEffectControllerBase.SetEffectResoureTime // (Native|Public|BlueprintCallable) // @ game+0x36a7d60
	void OnUpdatePostprocessViewportParam(struct FName InParamName, struct FVector2D InViewPortLeftTop, struct FVector2D InViewPortSize); // Function GPGameplay.ScreenEffectControllerBase.OnUpdatePostprocessViewportParam // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x36a7c70
	void OnUpdateEffectVectorParam(struct FName InParamName, struct FVector InValue); // Function GPGameplay.ScreenEffectControllerBase.OnUpdateEffectVectorParam // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x36a7aa0
	void OnUpdateEffectTextureParam(struct FName InParamName, struct UTexture* InValue); // Function GPGameplay.ScreenEffectControllerBase.OnUpdateEffectTextureParam // (Native|Public|BlueprintCallable) // @ game+0x36a78f0
	void OnUpdateEffectParticleParam(struct FName InParamName, struct FParticleSysParam InValue); // Function GPGameplay.ScreenEffectControllerBase.OnUpdateEffectParticleParam // (Native|Public|BlueprintCallable) // @ game+0x36a76a0
	void OnUpdateEffectLinearColorParam(struct FName InParamName, struct FLinearColor InValue); // Function GPGameplay.ScreenEffectControllerBase.OnUpdateEffectLinearColorParam // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x36a7450
	void OnUpdateEffectFloatParam(struct FName InParamName, float InValue); // Function GPGameplay.ScreenEffectControllerBase.OnUpdateEffectFloatParam // (Native|Public|BlueprintCallable) // @ game+0x36a72b0
	void OnShow(); // Function GPGameplay.ScreenEffectControllerBase.OnShow // (Native|Public|BlueprintCallable) // @ game+0x921830
	void OnInit(struct FScreenEffectInfo ScreenEffectInfo, struct FName InEffectName); // Function GPGameplay.ScreenEffectControllerBase.OnInit // (Native|Public|BlueprintCallable) // @ game+0x36a6e40
	void OnHide(); // Function GPGameplay.ScreenEffectControllerBase.OnHide // (Native|Public|BlueprintCallable) // @ game+0xaa2210
	void OnFadeOut(); // Function GPGameplay.ScreenEffectControllerBase.OnFadeOut // (Native|Public|BlueprintCallable) // @ game+0x8964b0
	void OnDeactive(); // Function GPGameplay.ScreenEffectControllerBase.OnDeactive // (Native|Public|BlueprintCallable) // @ game+0x924260
	void OnActive(); // Function GPGameplay.ScreenEffectControllerBase.OnActive // (Native|Public|BlueprintCallable) // @ game+0x895c00
	struct UScreenEffectBase* GetEffectView(); // Function GPGameplay.ScreenEffectControllerBase.GetEffectView // (Final|Native|Public|BlueprintCallable) // @ game+0xe9b730
	float GetEffectFloatParam(struct FName InParamName); // Function GPGameplay.ScreenEffectControllerBase.GetEffectFloatParam // (Native|Public|BlueprintCallable) // @ game+0x36a6da0
	void FadeOutLimitDeactive(); // Function GPGameplay.ScreenEffectControllerBase.FadeOutLimitDeactive // (Final|Native|Public) // @ game+0x36a6ba0
	void ClearHideState(); // Function GPGameplay.ScreenEffectControllerBase.ClearHideState // (Native|Public|BlueprintCallable) // @ game+0xaa9890
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.EReplicationGraphNode
// Size: 0x58 (Inherited: 0x30)
class UEReplicationGraphNode : public UObject {
public:

	struct TArray<struct UEReplicationGraphNode*> AllChildNodes; // 0x30(0x10)
	char pad_40[0x18]; // 0x40(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemBase
// Size: 0x258 (Inherited: 0x100)
class UWeaponAdapterItemBase : public UActorComponent {
public:

	char pad_100[0x18]; // 0x100(0x18)
	struct UWeaponDataComponentAdapter* DcAdapter; // 0x118(0x08)
	struct TArray<struct FName> ReplicatedAttrNames; // 0x120(0x10)
	char pad_130[0x128]; // 0x130(0x128)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponBulletPhysicsSimulate
// Size: 0x6f8 (Inherited: 0x630)
class AWeaponBulletPhysicsSimulate : public AGPWeaponBulletProjectile {
public:

	struct FWeaponBulletPhysicsSimulateInitParam BulletPhysicsSimulateParam; // 0x630(0x60)
	struct FWeaponBulletEffectView BulletEffectView; // 0x690(0x50)
	struct UWeaponBulletPhysicsSimulateView* BulletView; // 0x6e0(0x08)
	char pad_6E8[0x4]; // 0x6e8(0x04)
	int32_t SkillId; // 0x6ec(0x04)
	int32_t SkillEntityID; // 0x6f0(0x04)
	char pad_6F4[0x4]; // 0x6f4(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentAmmo
// Size: 0x770 (Inherited: 0x5f0)
class UWeaponDataComponentAmmo : public UGPWeaponDataComponentBase {
public:

	char pad_5F0[0x10]; // 0x5f0(0x10)
	struct FRepAmmoTimeLine RepAmmoTimeLine; // 0x600(0x20)
	char pad_620[0xd0]; // 0x620(0xd0)
	/*struct TScriptInterface<IWeaponStateTimeLineOwnerInterface>*/char IWSTimeLineOwner[0x10]; // 0x6f0(0x10)
	struct UGPWeaponAttributeSetWeaponAmmo* AttrSetAmmo; // 0x700(0x08)
	float PendingAutoReloadAmmoTime; // 0x708(0x04)
	int32_t BulletIndex; // 0x70c(0x04)
	/*struct FMulticastInlineDelegate*/char OnAmmoChanged[0x10]; // 0x710(0x10)
	/*struct FMulticastInlineDelegate*/char OnCarriedAmmoChanged[0x10]; // 0x720(0x10)
	char pad_730[0x18]; // 0x730(0x18)
	/*struct TScriptInterface<IGPWeaponDataInterface>*/char DCData[0x10]; // 0x748(0x10)
	char pad_758[0x18]; // 0x758(0x18)

	void RPC_ServerVerifyFrame(struct FAmmoKeyFrame KeyFrame, float AntiCheatCode); // Function GPGameplay.WeaponDataComponentAmmo.RPC_ServerVerifyFrame // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36d1e40
	void RPC_ClientOnNotifyFrameInValid(int32_t LocalFrameNo); // Function GPGameplay.WeaponDataComponentAmmo.RPC_ClientOnNotifyFrameInValid // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x17553e0
	void RecieveObWeaponData(int32_t CurrentAmmo, int32_t CarriedAmmo); // Function GPGameplay.WeaponDataComponentAmmo.RecieveObWeaponData // (Native|Public) // @ game+0x36d1f30
	void OnWeaponAmmoOrCarriedAmmoChanged(float NewClipAmmoCount, float NewCarriedAmmoCount); // Function GPGameplay.WeaponDataComponentAmmo.OnWeaponAmmoOrCarriedAmmoChanged // (Native|Protected) // @ game+0x36d1d70
	void OnWeaponAmmoCountChanged(float NewClipAmmoCount); // Function GPGameplay.WeaponDataComponentAmmo.OnWeaponAmmoCountChanged // (Native|Protected) // @ game+0x36d1cf0
	void OnRep_AmmoValue(); // Function GPGameplay.WeaponDataComponentAmmo.OnRep_AmmoValue // (Final|Native|Public) // @ game+0x36d1cd0
	void OnClipAmmoSizeChange(float OldValue, float NewValue); // Function GPGameplay.WeaponDataComponentAmmo.OnClipAmmoSizeChange // (Native|Protected) // @ game+0x36d1b50
	struct FAmmoContext GetCurrentAmmoData(int32_t ClipNum); // Function GPGameplay.WeaponDataComponentAmmo.GetCurrentAmmoData // (Native|Public) // @ game+0x36d18c0
	struct TArray<struct FAmmoDataItem> GetCurReloadParam(); // Function GPGameplay.WeaponDataComponentAmmo.GetCurReloadParam // (Native|Public) // @ game+0x36d1840
	void GetCarriedAmmoChangedDelegate(); // Function GPGameplay.WeaponDataComponentAmmo.GetCarriedAmmoChangedDelegate // (Final|Native|Public) // @ game+0x36d1800
	void GetAmmoChangedDelegate(); // Function GPGameplay.WeaponDataComponentAmmo.GetAmmoChangedDelegate // (Final|Native|Public) // @ game+0x36d17c0
	void ClearPreviewAmmoGuard(); // Function GPGameplay.WeaponDataComponentAmmo.ClearPreviewAmmoGuard // (Final|Native|Protected) // @ game+0x36d11a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentState
// Size: 0x820 (Inherited: 0x7c8)
class UWeaponDataComponentState : public UGPWeaponDataComponentStateFSM {
public:

	char pad_7C8[0x8]; // 0x7c8(0x08)
	struct AWeaponBase* WeaponOwnerBase; // 0x7d0(0x08)
	char pad_7D8[0x8]; // 0x7d8(0x08)
	/*struct TScriptInterface<IWeaponDataComponentAnimInterface>*/char DCAnim[0x10]; // 0x7e0(0x10)
	char pad_7F0[0x30]; // 0x7f0(0x30)

	void RequestServerVerifyStateFrameForFire(struct FStateFrame WSFrame, float InCheckCode, struct FFireAntiCheatInfo FireAntiCheatInfo); // Function GPGameplay.WeaponDataComponentState.RequestServerVerifyStateFrameForFire // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36e1f50
	void OnStateStartFireForAI(); // Function GPGameplay.WeaponDataComponentState.OnStateStartFireForAI // (Final|Native|Protected) // @ game+0x1750020
	void OnStateStartFire(); // Function GPGameplay.WeaponDataComponentState.OnStateStartFire // (Final|Native|Protected) // @ game+0x36e1ef0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentZoom
// Size: 0x710 (Inherited: 0x610)
class UWeaponDataComponentZoom : public UGPWeaponDataComponentZoom {
public:

	char pad_610[0x8]; // 0x610(0x08)
	struct FZoomConfig ZoomConfig; // 0x618(0x80)
	char pad_698[0x8]; // 0x698(0x08)
	struct AGPPlayerCameraManager* CachePlayerCameraManager; // 0x6a0(0x08)
	char pad_6A8[0x8]; // 0x6a8(0x08)
	struct AGPCharacterBase* CacheCharacter; // 0x6b0(0x08)
	struct UWeaponDataComponentCore* DcCore; // 0x6b8(0x08)
	/*struct TSet<struct UObject*>*/char CacheObjects[0x50]; // 0x6c0(0x50)

	bool ShowZoomHUD(struct FName HudName, bool bActive); // Function GPGameplay.WeaponDataComponentZoom.ShowZoomHUD // (Final|Native|Public|BlueprintCallable) // @ game+0x36e2110
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDecalDetectionComponent
// Size: 0x810 (Inherited: 0x7f0)
class UWeaponDecalDetectionComponent : public UStaticMeshComponent {
public:

	float StartOffset; // 0x7f0(0x04)
	float TraceLength; // 0x7f4(0x04)
	bool bTraceDebug; // 0x7f8(0x01)
	char bEnableDetection : 1; // 0x7f9(0x01)
	char pad_7F9_1 : 7; // 0x7f9(0x01)
	char pad_7FA[0x2]; // 0x7fa(0x02)
	float MaterialRadiusScale; // 0x7fc(0x04)
	float CheckDetectionRadiusScale; // 0x800(0x04)
	char pad_804[0x4]; // 0x804(0x04)
	struct UMaterialInstanceDynamic* Mat; // 0x808(0x08)

	void DetectionDecalVisibility(); // Function GPGameplay.WeaponDecalDetectionComponent.DetectionDecalVisibility // (Final|Native|Protected|BlueprintCallable) // @ game+0x36ed130
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireModeInstantHit
// Size: 0x168 (Inherited: 0x160)
class UWeaponFireModeInstantHit : public UGPWeaponFireModeInstantHit {
public:

	char pad_160[0x8]; // 0x160(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireModePhysicSimulate
// Size: 0x4e8 (Inherited: 0x100)
class UWeaponFireModePhysicSimulate : public UGPWeaponFireModePhysicSimulate {
public:

	char pad_100[0x8]; // 0x100(0x08)
	struct TArray<struct AActor*> ActorsToIgnore; // 0x108(0x10)
	struct TArray<struct UPrimitiveComponent*> CompsToIgnore; // 0x118(0x10)
	struct UGPWeaponDataComponentState* DCState; // 0x128(0x08)
	char pad_130[0x168]; // 0x130(0x168)
	struct TArray<struct FDamageAttenConfigItem> DamageAttenConfig; // 0x298(0x10)
	char pad_2A8[0x30]; // 0x2a8(0x30)
	uint64_t CurrentDelayDamageFireId; // 0x2d8(0x08)
	struct TArray<struct FRequestPointHitActionParam> DelayApplyHitResults; // 0x2e0(0x10)
	char pad_2F0[0xa0]; // 0x2f0(0xa0)
	struct TMap<uint64_t, struct FWeaponInstantHitBulletInfo> InstantHitBulletInfoMap; // 0x390(0x50)
	char pad_3E0[0x108]; // 0x3e0(0x108)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireModeParamsThrowable
// Size: 0x258 (Inherited: 0x220)
class UWeaponFireModeParamsThrowable : public UGPWeaponFireModeParamsThrowable {
public:

	uint64_t ProjectileId; // 0x220(0x08)
	uint64_t DamageId; // 0x228(0x08)
	uint64_t FXId; // 0x230(0x08)
	bool bGetWeaponCanSwitchWeapon; // 0x238(0x01)
	char pad_239[0x7]; // 0x239(0x07)
	uint64_t AudioId; // 0x240(0x08)
	uint64_t PreFXId; // 0x248(0x08)
	float PreFXTIime; // 0x250(0x04)
	char pad_254[0x4]; // 0x254(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireModeThrowable
// Size: 0x208 (Inherited: 0x1f8)
class UWeaponFireModeThrowable : public UGPWeaponFireModeThrowable {
public:

	struct UWeaponFireModeParamsThrowable* WeaponFireModeParamsThrowable; // 0x1f8(0x08)
	bool bResetCurrentWeapon; // 0x200(0x01)
	bool bPreviewActive; // 0x201(0x01)
	char pad_202[0x6]; // 0x202(0x06)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireRecoilDFM
// Size: 0x2760 (Inherited: 0x48)
class UWeaponFireRecoilDFM : public UGPWeaponFireRecoilBase {
public:

	struct UWeaponDataComponentFiring* DCFiringGame; // 0x48(0x08)
	struct UWeaponFuncComponentFiring* FCFiringGame; // 0x50(0x08)
	struct AGPPlayerCameraManager* CameraManager; // 0x58(0x08)
	struct UWeaponDataComponentAdapter* DcAdapter; // 0x60(0x08)
	char pad_68[0x8]; // 0x68(0x08)
	struct UWeaponBlackboard* WeaponBlackboard; // 0x70(0x08)
	char pad_78[0x8]; // 0x78(0x08)
	struct FWeaponRecoilModifierConfig RecoilModifierConfig; // 0x80(0x11d8)
	struct FWeaponRecoilModifierConfig RecoilModifierConfigForAiming; // 0x1258(0x11d8)
	struct FWeaponCameraRecoverConfig CameraRecover; // 0x2430(0x28)
	char pad_2458[0x28]; // 0x2458(0x28)
	struct FWeaponRecoilShakeRuntime RecoilShakeRuntimeItemYaw; // 0x2480(0xa0)
	struct FWeaponRecoilShakeRuntime RecoilShakeRuntimeItemPitch; // 0x2520(0xa0)
	struct FWeaponRecoilShakeManualCurveRuntime RecoilShakeManualCurveRuntimeItem; // 0x25c0(0x48)
	char pad_2608[0x118]; // 0x2608(0x118)
	struct TArray<struct UObject*> CacheLoadedObjects; // 0x2720(0x10)
	char pad_2730[0x30]; // 0x2730(0x30)

	void LoadYawShakeCurve(struct FSoftObjectPath& SoftObjectPath); // Function GPGameplay.WeaponFireRecoilDFM.LoadYawShakeCurve // (Native|Protected|HasOutParms|HasDefaults) // @ game+0x36f3fb0
	void LoadPitchShakeCurve(struct FSoftObjectPath& SoftObjectPath); // Function GPGameplay.WeaponFireRecoilDFM.LoadPitchShakeCurve // (Native|Protected|HasOutParms|HasDefaults) // @ game+0x36f3ed0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentAmmo
// Size: 0x1a8 (Inherited: 0x168)
class UWeaponFuncComponentAmmo : public UGPWeaponFuncComponentBase {
public:

	char pad_168[0x10]; // 0x168(0x10)
	struct UWeaponDataComponentAmmo* DcAmmo; // 0x178(0x08)
	struct UAutoAddAmmoHelper* AutoAddAmmoHelper; // 0x180(0x08)
	char pad_188[0x20]; // 0x188(0x20)

	void ServerSetFullAmmo(); // Function GPGameplay.WeaponFuncComponentAmmo.ServerSetFullAmmo // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3578a00
	void ServerReloadAmmo(); // Function GPGameplay.WeaponFuncComponentAmmo.ServerReloadAmmo // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x360c9a0
	void OnWeaponAmmoChanged(float NewClipAmmoCount, float NewCarriedAmmoCount); // Function GPGameplay.WeaponFuncComponentAmmo.OnWeaponAmmoChanged // (Final|Native|Protected) // @ game+0x36f81c0
	void ClientOnAutoAddAmmoComplete(); // Function GPGameplay.WeaponFuncComponentAmmo.ClientOnAutoAddAmmoComplete // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x360c9c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentCrosshair
// Size: 0x260 (Inherited: 0x168)
class UWeaponFuncComponentCrosshair : public UGPWeaponFuncComponentBase {
public:

	struct FWeaponCrosshairConfig CrosshairConfig; // 0x168(0xa0)
	char pad_208[0x18]; // 0x208(0x18)
	struct UWeaponDataComponentZoom* DCZoom; // 0x220(0x08)
	struct UWeaponBlackboard* WeaponBlackboard; // 0x228(0x08)
	struct UWeaponFuncComponentSpread* FuncSpread; // 0x230(0x08)
	struct UWeaponDataComponentFiring* DCFiring; // 0x238(0x08)
	struct AGPCharacter* GPCharacter; // 0x240(0x08)
	/*struct TScriptInterface<IWeaponFuncComponentInspectInterface>*/char FCInspect[0x10]; // 0x248(0x10)
	struct AWeaponBase* WeaponBase; // 0x258(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentEffect
// Size: 0x438 (Inherited: 0x158)
class UWeaponFuncComponentEffect : public UGPWeaponViewComponentBase {
public:

	struct FWeaponEffectData EffectData; // 0x158(0x30)
	struct FMuzzleLightAttachInfo MuzzleLightAttachInfo; // 0x188(0x24)
	struct FMuzzleLightInfoConfig MuzzleLightInfoConfig; // 0x1ac(0xb4)
	char MuzzleLightLevel; // 0x260(0x01)
	char pad_261[0x7]; // 0x261(0x07)
	struct TArray<struct FWeaponEffectRes> CreatedEffectList; // 0x268(0x10)
	struct TArray<struct FWeaponEffectRes> CreatedEffectListZooming; // 0x278(0x10)
	struct FWeaponEffectRes CreatedBulletTracerSP; // 0x288(0x80)
	struct TArray<struct FWeaponEffectRes> CreatedBulletTracerSPList; // 0x308(0x10)
	struct TArray<enum class EGPWeaponInnerEvent> CacheTirggerEvents; // 0x318(0x10)
	char pad_328[0x10]; // 0x328(0x10)
	/*struct TScriptInterface<IWeaponDataComponentAppearanceInterface>*/char DCAppearance[0x10]; // 0x338(0x10)
	/*struct TScriptInterface<IWeaponProxyInterface>*/char WeaponProxy[0x10]; // 0x348(0x10)
	struct UWeaponManagerComponent* WeaponManagerComponent; // 0x358(0x08)
	struct AGPPlayerCameraManager* CachePlayerCameraManager; // 0x360(0x08)
	char pad_368[0x28]; // 0x368(0x28)
	struct UClass* Bullet3PProjectileClass; // 0x390(0x08)
	char pad_398[0xa0]; // 0x398(0xa0)

	void OnPerfGearPipelineQualityChanged(enum class EPerfGearQualityLevel QualityLevel); // Function GPGameplay.WeaponFuncComponentEffect.OnPerfGearPipelineQualityChanged // (Final|Native|Protected) // @ game+0x36f8040
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentGunSway
// Size: 0x11c0 (Inherited: 0x168)
class UWeaponFuncComponentGunSway : public UGPWeaponFuncComponentBase {
public:

	char pad_168[0x18]; // 0x168(0x18)
	struct UWeaponDataComponentAdapter* DcAdapter; // 0x180(0x08)
	char pad_188[0x60]; // 0x188(0x60)
	struct TArray<struct UObject*> CacheLoadedObjects; // 0x1e8(0x10)
	char pad_1F8[0xfc8]; // 0x1f8(0xfc8)

	void OnWeaponZoomingStateChanged(bool bIsZooming); // Function GPGameplay.WeaponFuncComponentGunSway.OnWeaponZoomingStateChanged // (Final|Native|Protected) // @ game+0x36fdc50
	void OnPoseChanged(); // Function GPGameplay.WeaponFuncComponentGunSway.OnPoseChanged // (Native|Public) // @ game+0x3578a00
	void OnBreathValueFull(); // Function GPGameplay.WeaponFuncComponentGunSway.OnBreathValueFull // (Final|Native|Protected) // @ game+0x36fd6b0
	void OnBreathStateChanged(enum class EBreathState PreState, enum class EBreathState CurState); // Function GPGameplay.WeaponFuncComponentGunSway.OnBreathStateChanged // (Final|Native|Protected) // @ game+0x36fd5f0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentZoom
// Size: 0x550 (Inherited: 0x168)
class UWeaponFuncComponentZoom : public UGPWeaponFuncComponentZoom {
public:

	char pad_168[0x8]; // 0x168(0x08)
	struct UWeaponDataComponentZoom* DCZoom; // 0x170(0x08)
	struct AGPPlayerCameraManager* CachePlayerCameraManager; // 0x178(0x08)
	struct UWeaponBlackboard* WeaponBlackboard; // 0x180(0x08)
	struct FCompositedZoomInParam ZoomInParams; // 0x188(0x10)
	char pad_198[0x88]; // 0x198(0x88)
	struct FZoomCurves ZoomCurvesOverride; // 0x220(0x18)
	char pad_238[0x308]; // 0x238(0x308)
	/*struct TScriptInterface<IWeaponZoomHudInterface>*/char AimHud[0x10]; // 0x540(0x10)

	void SetZoomRate(enum class EZoomInParamType ParamType, bool bOverride, float ZoomRate); // Function GPGameplay.WeaponFuncComponentZoom.SetZoomRate // (Final|Native|Public|BlueprintCallable) // @ game+0x36fe160
	void SetWeaponFov(enum class EZoomInParamType ParamType, bool bOverride, float WeaponFOV); // Function GPGameplay.WeaponFuncComponentZoom.SetWeaponFov // (Final|Native|Public|BlueprintCallable) // @ game+0x36fe060
	void SetTargetCameraTransformInWeaponSpace(enum class EZoomInParamType ParamType, bool bOverride, struct FTransform Trans); // Function GPGameplay.WeaponFuncComponentZoom.SetTargetCameraTransformInWeaponSpace // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x36fdee0
	void SetCameraOffsetForDebug(float CamOffset); // Function GPGameplay.WeaponFuncComponentZoom.SetCameraOffsetForDebug // (Final|Native|Public|BlueprintCallable) // @ game+0x36fde60
	void SetCameraOffset(enum class EZoomInParamType ParamType, float CamOffset); // Function GPGameplay.WeaponFuncComponentZoom.SetCameraOffset // (Final|Native|Public|BlueprintCallable) // @ game+0x36fdda0
	void SetCameraFOV(enum class EZoomInParamType ParamType, float CamFov); // Function GPGameplay.WeaponFuncComponentZoom.SetCameraFOV // (Final|Native|Public|BlueprintCallable) // @ game+0x36fdce0
	float GetZoomInCameraFov(); // Function GPGameplay.WeaponFuncComponentZoom.GetZoomInCameraFov // (Final|Native|Public|BlueprintCallable) // @ game+0x36fd590
	struct FZoomInParamBase GetTargetParam(); // Function GPGameplay.WeaponFuncComponentZoom.GetTargetParam // (Final|Native|Public|BlueprintCallable) // @ game+0x36fd4f0
	float GetParamWeaponFov(enum class EZoomInParamType ParamType); // Function GPGameplay.WeaponFuncComponentZoom.GetParamWeaponFov // (Final|Native|Public|BlueprintCallable) // @ game+0x36fd460
	float GetParamCameraOffset(enum class EZoomInParamType ParamType); // Function GPGameplay.WeaponFuncComponentZoom.GetParamCameraOffset // (Final|Native|Public|BlueprintCallable) // @ game+0x36fd3d0
	float GetParamCameraFov(enum class EZoomInParamType ParamType); // Function GPGameplay.WeaponFuncComponentZoom.GetParamCameraFov // (Final|Native|Public|BlueprintCallable) // @ game+0x36fd340
	struct FTransform GetCenterTransformInWeaponSpace(); // Function GPGameplay.WeaponFuncComponentZoom.GetCenterTransformInWeaponSpace // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x36fd0c0
	bool GetCenterTransformInCameraSpace(struct FTransform& OutTransform); // Function GPGameplay.WeaponFuncComponentZoom.GetCenterTransformInCameraSpace // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x36fcfe0
	float GetCameraOffsetForDebug(); // Function GPGameplay.WeaponFuncComponentZoom.GetCameraOffsetForDebug // (Final|Native|Public|BlueprintCallable) // @ game+0x36fcfb0
	struct FTransform CalcWeaponTransInCamDelta(); // Function GPGameplay.WeaponFuncComponentZoom.CalcWeaponTransInCamDelta // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x36fca00
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowableBulletProjectile
// Size: 0xe38 (Inherited: 0x730)
class AWeaponThrowableBulletProjectile : public AGPWeaponBulletThrowableProjectile {
public:

	char pad_730[0x50]; // 0x730(0x50)
	struct UFXResourceContainerComponent* PreExplosionFXComp; // 0x780(0x08)
	char pad_788[0x8]; // 0x788(0x08)
	struct UFXResourceContainerComponent* DragTailFXComp; // 0x790(0x08)
	char pad_798[0x8]; // 0x798(0x08)
	struct UFXResourceContainerComponent* TailFXComp; // 0x7a0(0x08)
	char pad_7A8[0x8]; // 0x7a8(0x08)
	struct UFXResourceContainerComponent* ExplosionFXComp; // 0x7b0(0x08)
	struct ULiteSequencePlayerComponent* PlayerComp; // 0x7b8(0x08)
	char pad_7C0[0x8]; // 0x7c0(0x08)
	struct USkeletalMeshComponent* BulletSkeletalMeshComp; // 0x7c8(0x08)
	bool bExplosionEffectUseObjectPool; // 0x7d0(0x01)
	bool bPreExplosionEffectUseObjectPool; // 0x7d1(0x01)
	bool bEnableMakeDamageToBreakableActor; // 0x7d2(0x01)
	char pad_7D3[0x1]; // 0x7d3(0x01)
	float MinimalSimpleMoveDistance; // 0x7d4(0x04)
	bool ResetLocWhenStickToBoneTarget; // 0x7d8(0x01)
	char pad_7D9[0x3]; // 0x7d9(0x03)
	int32_t ExplosionFXStencilIndex; // 0x7dc(0x04)
	enum class ERendererStencilMask ExplosionFXStencilMask; // 0x7e0(0x01)
	bool bStopAudioWhenDoExplosion; // 0x7e1(0x01)
	char pad_7E2[0x6]; // 0x7e2(0x06)
	uint64_t ThreatId; // 0x7e8(0x08)
	uint64_t ProjectileId; // 0x7f0(0x08)
	uint64_t DamageId; // 0x7f8(0x08)
	uint64_t FXId; // 0x800(0x08)
	uint64_t AudioId; // 0x808(0x08)
	uint64_t PreFXId; // 0x810(0x08)
	float PreFXTIime; // 0x818(0x04)
	char pad_81C[0x4]; // 0x81c(0x04)
	uint64_t ItemID; // 0x820(0x08)
	uint64_t SkinApperanceId; // 0x828(0x08)
	uint64_t OriginAvatarId; // 0x830(0x08)
	char pad_838[0x4b8]; // 0x838(0x4b8)
	bool bCanOverlapByBullet; // 0xcf0(0x01)
	char pad_CF1[0x3]; // 0xcf1(0x03)
	struct FRotator ExplosionEffectRotatorAdditive; // 0xcf4(0x0c)
	bool ExplosionEffectAttachToProjectileOwner; // 0xd00(0x01)
	char pad_D01[0x4f]; // 0xd01(0x4f)
	struct TArray<uint64_t> LoadAssetHandles; // 0xd50(0x10)
	bool bEnableStopPlayWaningVoice; // 0xd60(0x01)
	char pad_D61[0x3]; // 0xd61(0x03)
	float EnableStopPlayWaningVoiceDist; // 0xd64(0x04)
	bool bIsRegisterToGPProjectileGameComponent; // 0xd68(0x01)
	char pad_D69[0xaf]; // 0xd69(0xaf)
	bool bIsInProjectileMoving; // 0xe18(0x01)
	bool bEnalbeDamagePassiveVoice; // 0xe19(0x01)
	char pad_E1A[0x2]; // 0xe1a(0x02)
	struct FName ThrowAttachableTag; // 0xe1c(0x08)
	float TranslucencySortDistance; // 0xe24(0x04)
	enum class EAbilityThrowableStickyType StickyType; // 0xe28(0x01)
	char pad_E29[0x7]; // 0xe29(0x07)
	struct UGPAudioEventAsset* StickyToTargetEvent; // 0xe30(0x08)

	void UnRegisterToGPProjectileGameComponent(); // Function GPGameplay.WeaponThrowableBulletProjectile.UnRegisterToGPProjectileGameComponent // (Final|Native|Protected) // @ game+0x3713f40
	void StickyToTarget(struct FHitResult& ImpactResult); // Function GPGameplay.WeaponThrowableBulletProjectile.StickyToTarget // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3713e70
	void RegisterToGPProjectileGameComponent(struct UFXResourceContainerComponent* TargetFXComponent); // Function GPGameplay.WeaponThrowableBulletProjectile.RegisterToGPProjectileGameComponent // (Final|Native|Protected) // @ game+0x3713aa0
	void OnExplosionEffectLifeTime(); // Function GPGameplay.WeaponThrowableBulletProjectile.OnExplosionEffectLifeTime // (Final|Native|Public) // @ game+0x3713780
	void OnAudioLoad(struct FSoftObjectPath& AudioSoftPath, struct FName AudioName, enum class EGPAudioBlueprintType AudioType, struct FVector TargetLocation, struct AActor* TargetActor); // Function GPGameplay.WeaponThrowableBulletProjectile.OnAudioLoad // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x3713520
	bool NeedKeepStartStopAudio(); // Function GPGameplay.WeaponThrowableBulletProjectile.NeedKeepStartStopAudio // (Final|Native|Protected) // @ game+0x3713250
	void MultiPlayBounceAudio(struct FName AudioName, struct FVector Location, int32_t Bounce); // Function GPGameplay.WeaponThrowableBulletProjectile.MultiPlayBounceAudio // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x3712ec0
	void MulticastClientProjectileStop(struct FHitResult ImpactResult); // Function GPGameplay.WeaponThrowableBulletProjectile.MulticastClientProjectileStop // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x3713190
	void MulticastClientPlayPreExplosionEffect(struct FVector ServerLoc, struct FRotator ServerRotator); // Function GPGameplay.WeaponThrowableBulletProjectile.MulticastClientPlayPreExplosionEffect // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x37130b0
	void MulticastClientPlayExplosionEffect(struct FVector ServerLoc, struct FRotator ServerRotator); // Function GPGameplay.WeaponThrowableBulletProjectile.MulticastClientPlayExplosionEffect // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x3712fd0
	void LoadProjectileMeshAssets(); // Function GPGameplay.WeaponThrowableBulletProjectile.LoadProjectileMeshAssets // (Final|Native|Protected) // @ game+0x3712ea0
	bool IsProjectileUnderWater(); // Function GPGameplay.WeaponThrowableBulletProjectile.IsProjectileUnderWater // (Final|Native|Protected) // @ game+0x3712e70
	bool IsExplosionEffectPlayLiteSequence(); // Function GPGameplay.WeaponThrowableBulletProjectile.IsExplosionEffectPlayLiteSequence // (Final|Native|Protected) // @ game+0x3712e40
	struct FName GetPreExplosionEffectName(); // Function GPGameplay.WeaponThrowableBulletProjectile.GetPreExplosionEffectName // (Final|Native|Protected) // @ game+0x3712e00
	float GetExplosionEffectTime(); // Function GPGameplay.WeaponThrowableBulletProjectile.GetExplosionEffectTime // (Final|Native|Protected) // @ game+0x3712d90
	struct FName GetExplosionEffectName(); // Function GPGameplay.WeaponThrowableBulletProjectile.GetExplosionEffectName // (Final|Native|Protected) // @ game+0x3712d50
	void DeactivateTailFX(); // Function GPGameplay.WeaponThrowableBulletProjectile.DeactivateTailFX // (Final|Native|Protected) // @ game+0x3712d30
	void ClientPlayPreExplosionEffect(); // Function GPGameplay.WeaponThrowableBulletProjectile.ClientPlayPreExplosionEffect // (Native|Protected) // @ game+0x36c99f0
	void ClientPlayExplosionEffect_PureParticle(struct FName EffectName); // Function GPGameplay.WeaponThrowableBulletProjectile.ClientPlayExplosionEffect_PureParticle // (Native|Protected) // @ game+0x3712ca0
	void ClientPlayExplosionEffect_LiteSequence(struct FName EffectName); // Function GPGameplay.WeaponThrowableBulletProjectile.ClientPlayExplosionEffect_LiteSequence // (Native|Protected) // @ game+0x3712c10
	void ClientPlayExplosionEffect(); // Function GPGameplay.WeaponThrowableBulletProjectile.ClientPlayExplosionEffect // (Native|Protected) // @ game+0x3578900
	void BP_SetExplosionEffectVectorParams(struct FName Name, struct FVector Params); // Function GPGameplay.WeaponThrowableBulletProjectile.BP_SetExplosionEffectVectorParams // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3712b40
	void BP_SetExplosionEffectFloatParams(struct FName Name, float Params); // Function GPGameplay.WeaponThrowableBulletProjectile.BP_SetExplosionEffectFloatParams // (Final|Native|Public|BlueprintCallable) // @ game+0x3712a80
	void BP_SetExplosionEffectColorParams(struct FName Name, struct FLinearColor Params); // Function GPGameplay.WeaponThrowableBulletProjectile.BP_SetExplosionEffectColorParams // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x37129b0
	void BP_OverlapByBullet(struct AGPWeaponBulletProjectile* Bullet); // Function GPGameplay.WeaponThrowableBulletProjectile.BP_OverlapByBullet // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x7ed88c0
	void BP_OnStopExplosionEffect(struct UFXResourceContainerComponent* ExplosionEffect); // Function GPGameplay.WeaponThrowableBulletProjectile.BP_OnStopExplosionEffect // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x7ed88c0
	void BP_OnPlayExplosionEffect(struct UFXResourceContainerComponent* ExplosionEffect); // Function GPGameplay.WeaponThrowableBulletProjectile.BP_OnPlayExplosionEffect // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x7ed88c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponSkinLogicComponent
// Size: 0xa8 (Inherited: 0x30)
class UWeaponSkinLogicComponent : public UObject {
public:

	struct TArray<struct FWeaponSkinEffectTrigger> TriggerConfig; // 0x30(0x10)
	struct UModularWeaponDataComponentAppearance* DataComponentAppearance; // 0x40(0x08)
	struct AWeaponBase* OwnerWeapon; // 0x48(0x08)
	struct TMap<enum class EGPWeaponInnerEvent, struct FWeaponSkinEffectTriggerEvent> TriggerMap; // 0x50(0x50)
	struct UMaterialSequencerPlayer* AnimPlayer; // 0xa0(0x08)

	void OnAnimFinsh(struct UMaterialSequencer* Anim); // Function GPGameplay.WeaponSkinLogicComponent.OnAnimFinsh // (Native|Protected) // @ game+0x36497b0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponSkinModifier
// Size: 0x30 (Inherited: 0x30)
class UWeaponSkinModifier : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowableDataComponentFiring
// Size: 0x7f8 (Inherited: 0x7e0)
class UWeaponThrowableDataComponentFiring : public UGPWeaponDataComponentFiring {
public:

	char pad_7E0[0x8]; // 0x7e0(0x08)
	bool bHideMeshInFire; // 0x7e8(0x01)
	bool bForbidProneMoveInPreFire; // 0x7e9(0x01)
	char pad_7EA[0xe]; // 0x7ea(0x0e)

	void ProcessDoFire(); // Function GPGameplay.WeaponThrowableDataComponentFiring.ProcessDoFire // (Native|Protected) // @ game+0x17512a0
	void ProcessBeginFire(); // Function GPGameplay.WeaponThrowableDataComponentFiring.ProcessBeginFire // (Native|Protected) // @ game+0xaa9910
	void ClearFireThrowHideFlag(bool bForce); // Function GPGameplay.WeaponThrowableDataComponentFiring.ClearFireThrowHideFlag // (Native|Protected) // @ game+0x3716a00
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AnimNotifyState_LeftFootContact
// Size: 0x50 (Inherited: 0x50)
class UAnimNotifyState_LeftFootContact : public UAnimNotifyState_FootContact {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.AnimNotifyState_RightFootContact
// Size: 0x50 (Inherited: 0x50)
class UAnimNotifyState_RightFootContact : public UAnimNotifyState_FootContact {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPGameMode
// Size: 0x5f8 (Inherited: 0x528)
class AGPGameMode : public ABaseGameMode {
public:

	struct AGPGameState* GPGameState; // 0x528(0x08)
	struct TArray<struct AGPCharacter*> AllCharacters; // 0x530(0x10)
	char pad_540[0x8]; // 0x540(0x08)
	struct TArray<struct UClass*> DataComponentClassList; // 0x548(0x10)
	struct TArray<struct UActorComponent*> GlobalDataComponents; // 0x558(0x10)
	char pad_568[0x28]; // 0x568(0x28)
	struct TMap<struct FName, struct FTimerHandle> WaitForPlayerLoadingLevelTimeHandleMap; // 0x590(0x50)
	enum class EGPDamageMode DamageMode; // 0x5e0(0x01)
	enum class EGPDamageFeature DamageFeature; // 0x5e1(0x01)
	enum class EWeaponAmmoLogicType WeaponAmmoLogic; // 0x5e2(0x01)
	char pad_5E3[0x5]; // 0x5e3(0x05)
	struct UClass* DSLogicClass; // 0x5e8(0x08)
	struct UDSLogicBase* DsLogic; // 0x5f0(0x08)

	void WaitForPlayerLoadingLevelTimeOut(struct FName CheckLoadLevelReason); // Function GPGameplay.GPGameMode.WaitForPlayerLoadingLevelTimeOut // (Final|Native|Public) // @ game+0x35fd9a0
	void NotifyStartMatchWithAllPlayerLoadLevelCompleted(); // Function GPGameplay.GPGameMode.NotifyStartMatchWithAllPlayerLoadLevelCompleted // (Native|Event|Public|BlueprintEvent) // @ game+0x35fd2a0
	void NotifyPlayerLoadLevelCompleted(struct APlayerController* Player, struct FName CheckLoadLevelReason); // Function GPGameplay.GPGameMode.NotifyPlayerLoadLevelCompleted // (Final|Native|Public) // @ game+0x35fd1e0
	int32_t GetTeamMemberCountType(); // Function GPGameplay.GPGameMode.GetTeamMemberCountType // (Final|Native|Public) // @ game+0x35fd1b0
	int32_t GetSubGameModeType(); // Function GPGameplay.GPGameMode.GetSubGameModeType // (Final|Native|Public) // @ game+0x35fd180
	int32_t GetMainGameModeType(); // Function GPGameplay.GPGameMode.GetMainGameModeType // (Final|Native|Public) // @ game+0x35fd150
	int32_t GetGameRoomType(); // Function GPGameplay.GPGameMode.GetGameRoomType // (Final|Native|Public) // @ game+0x35fd120
	int32_t GetGameMapID(); // Function GPGameplay.GPGameMode.GetGameMapID // (Final|Native|Public) // @ game+0x35fd0f0
	struct AGPCharacter* GetCharacterByUin(uint64_t Uin); // Function GPGameplay.GPGameMode.GetCharacterByUin // (Final|Native|Public) // @ game+0x35fd060
	struct AGPCharacter* GetCharacterByGUID(uint32_t Guid); // Function GPGameplay.GPGameMode.GetCharacterByGUID // (Final|Native|Public) // @ game+0x35fcfd0
	struct TArray<struct AGPCharacter*> GetAllCharacters(bool bForceReCollect); // Function GPGameplay.GPGameMode.GetAllCharacters // (Final|Native|Public|BlueprintCallable) // @ game+0x35fced0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPGameState
// Size: 0x500 (Inherited: 0x3f0)
class AGPGameState : public ABaseGameState {
public:

	bool bStartMathWithAllPlayerReady; // 0x3f0(0x01)
	char DamageMode; // 0x3f1(0x01)
	char DamageFeature; // 0x3f2(0x01)
	enum class EWeaponAmmoLogicType WeaponAmmoLogic; // 0x3f3(0x01)
	bool bEnableDamageValidate; // 0x3f4(0x01)
	char pad_3F5[0x3]; // 0x3f5(0x03)
	struct TArray<struct APhysicsVolume*> AllWaterVolumes; // 0x3f8(0x10)
	float GameLastTime; // 0x408(0x04)
	char pad_40C[0x4]; // 0x40c(0x04)
	/*struct FMulticastInlineDelegate*/char OnPlayerRebornEvent[0x10]; // 0x410(0x10)
	struct FFadeInfo FadeStateInfo; // 0x420(0x24)
	bool IsInFade; // 0x444(0x01)
	char pad_445[0x3]; // 0x445(0x03)
	/*struct FMulticastInlineDelegate*/char ServerFadeOutEvent[0x10]; // 0x448(0x10)
	char pad_458[0x20]; // 0x458(0x20)
	bool HasFinished3CGuide; // 0x478(0x01)
	char pad_479[0xf]; // 0x479(0x0f)
	bool bIsLowPerformanceMode; // 0x488(0x01)
	char pad_489[0x3]; // 0x489(0x03)
	int32_t NewAddKillInfoStartIndex; // 0x48c(0x04)
	char pad_490[0x8]; // 0x490(0x08)
	struct TArray<struct FKillInfo> KillInfoArray; // 0x498(0x10)
	struct TArray<struct FKillInfo> KillInfoArrayBuffer; // 0x4a8(0x10)
	int32_t MaxBufferRange; // 0x4b8(0x04)
	char pad_4BC[0x4]; // 0x4bc(0x04)
	struct UItemInfoBaseProvider* ItemInfoBaseProvider; // 0x4c0(0x08)
	struct UReconnectionSystemBase* ReconnectSys; // 0x4c8(0x08)
	struct TArray<struct FAllPlayerLoadLevelCompletedInfo> AllPlayerLoadLevelCompletedInfoArray; // 0x4d0(0x10)
	struct UGPMarkerEffectComponent* GPMarkerSystem; // 0x4e0(0x08)
	struct UGPAudioControllerComponent* GPAudioControllerComponent; // 0x4e8(0x08)
	struct UGPProjectileGameComponent* ProjectileGameComponent; // 0x4f0(0x08)
	struct FDSTickInfo DSTickInfo; // 0x4f8(0x08)

	void StopStageFadeClientWithTimeout(); // Function GPGameplay.GPGameState.StopStageFadeClientWithTimeout // (Final|Native|Private) // @ game+0x3608a00
	void StopFadeClient(); // Function GPGameplay.GPGameState.StopFadeClient // (Final|Native|Public|BlueprintCallable) // @ game+0x36089e0
	void StartFadeClient(struct FFadeInfo FadeInfo); // Function GPGameplay.GPGameState.StartFadeClient // (Native|Public|BlueprintCallable) // @ game+0x36087f0
	void SetFadeOutOnMinTime(); // Function GPGameplay.GPGameState.SetFadeOutOnMinTime // (Final|Native|Public|BlueprintCallable) // @ game+0x3608490
	struct FAllPlayerLoadLevelCompletedInfo ServerFindOrAddAllPlayerLoadLevelCompletedInfo(struct FName CheckLoadLevelReason); // Function GPGameplay.GPGameState.ServerFindOrAddAllPlayerLoadLevelCompletedInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x36083f0
	void RegisterProjectileGameComponent(); // Function GPGameplay.GPGameState.RegisterProjectileGameComponent // (Final|Native|Protected) // @ game+0x36083d0
	void RealStopFadeClient(); // Function GPGameplay.GPGameState.RealStopFadeClient // (Native|Public|BlueprintCallable) // @ game+0x36083b0
	void ProcessLoadLevelPercentage(int32_t Percentage); // Function GPGameplay.GPGameState.ProcessLoadLevelPercentage // (Final|Native|Private) // @ game+0x3608330
	void OnServerStopFadeInternal(); // Function GPGameplay.GPGameState.OnServerStopFadeInternal // (Native|Protected) // @ game+0x3608310
	void OnServerStopFade(bool Force); // Function GPGameplay.GPGameState.OnServerStopFade // (Final|Native|Public|BlueprintCallable) // @ game+0x3608280
	void OnServerStartFade(struct FFadeInfo FadeInfo); // Function GPGameplay.GPGameState.OnServerStartFade // (Native|Public|BlueprintCallable) // @ game+0x36081b0
	void OnServerFadeMinTimeOver(); // Function GPGameplay.GPGameState.OnServerFadeMinTimeOver // (Final|Native|Public) // @ game+0x3608190
	bool OnSameTeam(struct AActor* Actor1, struct AActor* Actor2); // Function GPGameplay.GPGameState.OnSameTeam // (Native|Public|BlueprintCallable) // @ game+0x36080c0
	void OnRep_NewAddKillInfoStartIndex(); // Function GPGameplay.GPGameState.OnRep_NewAddKillInfoStartIndex // (Final|Native|Protected) // @ game+0x3608080
	void OnRep_KillInfoArrayBuffer(); // Function GPGameplay.GPGameState.OnRep_KillInfoArrayBuffer // (Final|Native|Public) // @ game+0x3608060
	void OnRep_IsInFade(bool LastIsInFade); // Function GPGameplay.GPGameState.OnRep_IsInFade // (Native|Public) // @ game+0x3607fd0
	void OnRep_DSTickInfo(); // Function GPGameplay.GPGameState.OnRep_DSTickInfo // (Final|Native|Protected) // @ game+0x3607f70
	void OnRep_DamageMode(); // Function GPGameplay.GPGameState.OnRep_DamageMode // (Final|Native|Public) // @ game+0x3607fb0
	void OnRep_DamageFeature(); // Function GPGameplay.GPGameState.OnRep_DamageFeature // (Final|Native|Public) // @ game+0x3607f90
	void OnRep_bStartMathWithAllPlayerReady(); // Function GPGameplay.GPGameState.OnRep_bStartMathWithAllPlayerReady // (Native|Public) // @ game+0x36080a0
	void OnRep_AllPlayerLoadLevelCompletedInfoArray(); // Function GPGameplay.GPGameState.OnRep_AllPlayerLoadLevelCompletedInfoArray // (Native|Protected) // @ game+0x3607f50
	void MultiCastLoadLevel(struct TArray<struct FString> LevelNames, bool LoadVisible); // Function GPGameplay.GPGameState.MultiCastLoadLevel // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x3607e00
	bool GetHasFinished3CGuide(); // Function GPGameplay.GPGameState.GetHasFinished3CGuide // (Native|Public) // @ game+0x3607c60
	int32_t GetGroupAlivePlayerCount(int32_t InGroupIndex); // Function GPGameplay.GPGameState.GetGroupAlivePlayerCount // (Native|Public) // @ game+0x3607bc0
	struct UGPAudioControllerComponent* GetAudioControllerComponent(); // Function GPGameplay.GPGameState.GetAudioControllerComponent // (Final|Native|Public) // @ game+0x3607a10
	bool FindAllPlayerLoadLevelCompletedInfo(struct FName CheckLoadLevelReason, struct FAllPlayerLoadLevelCompletedInfo& AllPlayerLoadLevelCompletedInfo); // Function GPGameplay.GPGameState.FindAllPlayerLoadLevelCompletedInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3607560
	void ClientSetNewAddKillInfoStartIndex(int32_t StartIndex); // Function GPGameplay.GPGameState.ClientSetNewAddKillInfoStartIndex // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x36074d0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPGameViewportClient
// Size: 0x368 (Inherited: 0x300)
class UGPGameViewportClient : public UBaseGameViewportClient {
public:

	/*struct FDelegate*/char PreKeyDown[0x10]; // 0x300(0x10)
	char pad_310[0x58]; // 0x310(0x58)

	void STATIC_SetViewportRatioRange(struct UObject* WorldContext, struct FIntPoint InMinRatio, struct FIntPoint InMaxRatio); // Function GPGameplay.GPGameViewportClient.SetViewportRatioRange // (Final|Native|Static|Public|HasDefaults) // @ game+0x360cd00
	void STATIC_SetViewportRatio(struct UObject* WorldContext, struct FIntPoint NewRatio); // Function GPGameplay.GPGameViewportClient.SetViewportRatio // (Final|Native|Static|Public|HasDefaults) // @ game+0x360cc50
	void STATIC_SetCursor(struct UObject* WorldContext, enum class EMouseCursor InCursor); // Function GPGameplay.GPGameViewportClient.SetCursor // (Final|Native|Static|Public) // @ game+0x360c9e0
	bool PreKeyDown__DelegateSignature(struct FKey InKey); // DelegateFunction GPGameplay.GPGameViewportClient.PreKeyDown__DelegateSignature // (Public|Delegate) // @ game+0x7ed88c0
	void OnInputModeChanged(enum class EGPInputModeType OldType, enum class EGPInputModeType NewType); // Function GPGameplay.GPGameViewportClient.OnInputModeChanged // (Final|Native|Protected) // @ game+0x360c3f0
	void STATIC_EnableRatioConstrain(struct UObject* WorldContext); // Function GPGameplay.GPGameViewportClient.EnableRatioConstrain // (Final|Native|Static|Public) // @ game+0x360be10
	void STATIC_DisableRatioConstrain(struct UObject* WorldContext); // Function GPGameplay.GPGameViewportClient.DisableRatioConstrain // (Final|Native|Static|Public) // @ game+0x360bda0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPNetworkPlayerController
// Size: 0x7b0 (Inherited: 0x6d0)
class AGPNetworkPlayerController : public ABasePlayerController {
public:

	char pad_6D0[0x10]; // 0x6d0(0x10)
	struct AActor* DelayCachedViewTarget; // 0x6e0(0x08)
	char pad_6E8[0x10]; // 0x6e8(0x10)
	struct AActor* LocalFocusActor; // 0x6f8(0x08)
	bool EnableLiveSpectatingFeature; // 0x700(0x01)
	char pad_701[0x2]; // 0x701(0x02)
	bool bIsLiveSpectating; // 0x703(0x01)
	bool bIsSpectatingAI; // 0x704(0x01)
	char pad_705[0x3]; // 0x705(0x03)
	int32_t bBeingSpectatingCount; // 0x708(0x04)
	bool bIsLiveSpectatingForReset; // 0x70c(0x01)
	bool bServerAILabInDeathWatchFight; // 0x70d(0x01)
	char pad_70E[0x62]; // 0x70e(0x62)
	struct AActor* CurrentLocalFocusFromServer; // 0x770(0x08)
	struct AGPCharacterBase* CurrentLocalFocusPlayerPawn; // 0x778(0x08)
	struct AActor* CurrentSpectatingLocalFocusFromServer; // 0x780(0x08)
	char pad_788[0x10]; // 0x788(0x10)
	struct AActor* CurrentViewTargetCache; // 0x798(0x08)
	char pad_7A0[0x8]; // 0x7a0(0x08)
	struct UObject* CurrentReplay; // 0x7a8(0x08)

	void WhetherReplicateDynamicActors(bool bReplicateDynamic); // Function GPGameplay.GPNetworkPlayerController.WhetherReplicateDynamicActors // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x363a030
	void UpdateOBNiceInfo(); // Function GPGameplay.GPNetworkPlayerController.UpdateOBNiceInfo // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x363a010
	void TrySimulateSafeBoxOperate(int32_t boxId, float params1, float params2, int32_t OperateId); // Function GPGameplay.GPNetworkPlayerController.TrySimulateSafeBoxOperate // (Final|Native|Public|BlueprintCallable) // @ game+0x3639eb0
	void TryLiveSpectateLikeGod(float SpectatingHeight, bool useSpectificPoint, struct FVector TargetPoint); // Function GPGameplay.GPNetworkPlayerController.TryLiveSpectateLikeGod // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3639d90
	void TryLiveSpectateAINext(bool nextTarget); // Function GPGameplay.GPNetworkPlayerController.TryLiveSpectateAINext // (Final|Native|Public|BlueprintCallable) // @ game+0x3639d00
	void TryLeaveAISpectateMode(); // Function GPGameplay.GPNetworkPlayerController.TryLeaveAISpectateMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3639ce0
	void TryGoodJob(int32_t Uin); // Function GPGameplay.GPNetworkPlayerController.TryGoodJob // (Final|Native|Public|BlueprintCallable) // @ game+0x3639c60
	void TryGetSpectatorBriefInfo(); // Function GPGameplay.GPNetworkPlayerController.TryGetSpectatorBriefInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x3639c40
	void TryFiringModeTypeChanged(int32_t FiringMode); // Function GPGameplay.GPNetworkPlayerController.TryFiringModeTypeChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x3639bc0
	void TryFastSafeOperate(int32_t boxId, float params1, float params2, int32_t OperateId); // Function GPGameplay.GPNetworkPlayerController.TryFastSafeOperate // (Final|Native|Public|BlueprintCallable) // @ game+0x3639a80
	void TryEnterAISpectateMode(); // Function GPGameplay.GPNetworkPlayerController.TryEnterAISpectateMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3639a60
	void TryCallDeliverAI(int32_t Diff, int32_t Style, bool IsTeammate); // Function GPGameplay.GPNetworkPlayerController.TryCallDeliverAI // (Final|Native|Public|BlueprintCallable) // @ game+0x3639960
	void ServerTryLiveSpectateLikeGod(float SpectatingHeight, bool useSpectificPoint, struct FVector TargetPoint); // Function GPGameplay.GPNetworkPlayerController.ServerTryLiveSpectateLikeGod // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x36392e0
	void ServerSimulateSafeBoxOperate(int32_t boxId, float params1, float params2, int32_t OperateId); // Function GPGameplay.GPNetworkPlayerController.ServerSimulateSafeBoxOperate // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36391a0
	void ServerLiveSpectateAINext(bool nextTarget); // Function GPGameplay.GPNetworkPlayerController.ServerLiveSpectateAINext // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3639010
	void ServerLeaveAISpectateMode(); // Function GPGameplay.GPNetworkPlayerController.ServerLeaveAISpectateMode // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3638ff0
	void ServerGoodJob(uint64_t Uin); // Function GPGameplay.GPNetworkPlayerController.ServerGoodJob // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3638f60
	void ServerGetSpectatorBriefInfo(); // Function GPGameplay.GPNetworkPlayerController.ServerGetSpectatorBriefInfo // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3638f40
	void ServerFiringModeTypeChanged(int32_t FiringMode); // Function GPGameplay.GPNetworkPlayerController.ServerFiringModeTypeChanged // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3638eb0
	void ServerFastSafeOperate(int32_t boxId, float params1, float params2, int32_t OperateId); // Function GPGameplay.GPNetworkPlayerController.ServerFastSafeOperate // (Net|Native|Event|Public|NetServer) // @ game+0x3638d70
	void ServerEnterAISpectateMode(); // Function GPGameplay.GPNetworkPlayerController.ServerEnterAISpectateMode // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3638d50
	void ServerCallDeliverAI(int32_t Diff, int32_t Style, bool IsTeammate); // Function GPGameplay.GPNetworkPlayerController.ServerCallDeliverAI // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3638c50
	void Server2ClientTryInspectTeam(float DelayTime); // Function GPGameplay.GPNetworkPlayerController.Server2ClientTryInspectTeam // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3638bd0
	void RouteServerFuncByName(struct UObject* ObjectExecute, struct FName FuncName, struct TArray<char> FuncPamras); // Function GPGameplay.GPNetworkPlayerController.RouteServerFuncByName // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3638a80
	void ReplaySpectateSpectificTarget(struct AActor* Target, bool IsAI); // Function GPGameplay.GPNetworkPlayerController.ReplaySpectateSpectificTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x36389b0
	void Rep_SpectatingLocalFocus(); // Function GPGameplay.GPNetworkPlayerController.Rep_SpectatingLocalFocus // (Final|Native|Public) // @ game+0x3638990
	void Rep_IsSpectatingAI(); // Function GPGameplay.GPNetworkPlayerController.Rep_IsSpectatingAI // (Final|Native|Public) // @ game+0x3638970
	void Rep_IsLiveSpectatingForReset(); // Function GPGameplay.GPNetworkPlayerController.Rep_IsLiveSpectatingForReset // (Final|Native|Public) // @ game+0x3638950
	void Rep_IsLiveSpectating(); // Function GPGameplay.GPNetworkPlayerController.Rep_IsLiveSpectating // (Final|Native|Public) // @ game+0x3638930
	void Rep_CurrentLocalFocusPlayerPawn(); // Function GPGameplay.GPNetworkPlayerController.Rep_CurrentLocalFocusPlayerPawn // (Final|Native|Public) // @ game+0x3638910
	void Rep_CurrentLocalFocus(); // Function GPGameplay.GPNetworkPlayerController.Rep_CurrentLocalFocus // (Final|Native|Public) // @ game+0x36388f0
	void Rep_BeingSpectatingCountChanged(); // Function GPGameplay.GPNetworkPlayerController.Rep_BeingSpectatingCountChanged // (Final|Native|Public) // @ game+0x36388d0
	void PlayerTryLiveSpectateSpectificTarget(struct AActor* Target); // Function GPGameplay.GPNetworkPlayerController.PlayerTryLiveSpectateSpectificTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x3638850
	void PlayerTryLiveSpectateNext(bool nextTarget); // Function GPGameplay.GPNetworkPlayerController.PlayerTryLiveSpectateNext // (Final|Native|Public|BlueprintCallable) // @ game+0x36387c0
	void PlayerTryLeaveLiveSpectateMode(); // Function GPGameplay.GPNetworkPlayerController.PlayerTryLeaveLiveSpectateMode // (Final|Native|Public|BlueprintCallable) // @ game+0x36387a0
	bool PlayerTryEnterLiveSpectateMode(); // Function GPGameplay.GPNetworkPlayerController.PlayerTryEnterLiveSpectateMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3638770
	void OnServerCheckChangeWatchTargetTimeOut(); // Function GPGameplay.GPNetworkPlayerController.OnServerCheckChangeWatchTargetTimeOut // (Final|Native|Public) // @ game+0x3638750
	void GPSetViewTargetWithBlend(struct AActor* NewViewTarget, bool needPridict, bool onlyClient, float BlendTime, enum class EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing); // Function GPGameplay.GPNetworkPlayerController.GPSetViewTargetWithBlend // (Final|Native|Public|BlueprintCallable) // @ game+0x36383c0
	void GPServerSetViewTargetWithBlend(struct AActor* NewViewTarget, bool isClientPredicted, bool isTargetNull, int32_t TargetCacheID, float BlendTime, enum class EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing); // Function GPGameplay.GPNetworkPlayerController.GPServerSetViewTargetWithBlend // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3638170
	void GPClientSetViewTargetAck(int32_t TargetCacheID, float BlendTime, enum class EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing); // Function GPGameplay.GPNetworkPlayerController.GPClientSetViewTargetAck // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3637ff0
	bool GetEnableLiveSpectatingFeature(); // Function GPGameplay.GPNetworkPlayerController.GetEnableLiveSpectatingFeature // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3638600
	struct ABaseHUD* GetBaseHUD(); // Function GPGameplay.GPNetworkPlayerController.GetBaseHUD // (Final|Native|Public) // @ game+0x36385d0
	void DelaySetViewTarget(); // Function GPGameplay.GPNetworkPlayerController.DelaySetViewTarget // (Final|Native|Protected) // @ game+0x3637fb0
	void ClientToServerResetSpectateViewTarget(); // Function GPGameplay.GPNetworkPlayerController.ClientToServerResetSpectateViewTarget // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3637f90
	void ClientToServerAcceptChangeWatchTarget(); // Function GPGameplay.GPNetworkPlayerController.ClientToServerAcceptChangeWatchTarget // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35d75e0
	void ClientSinpleSetViewTargetWithBlend(struct AActor* NewViewTarget, float BlendTime, enum class EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing); // Function GPGameplay.GPNetworkPlayerController.ClientSinpleSetViewTargetWithBlend // (Final|Native|Public|BlueprintCallable) // @ game+0x3637e00
	void ClientInspectTeam(); // Function GPGameplay.GPNetworkPlayerController.ClientInspectTeam // (Native|Public) // @ game+0x35d4aa0
	void ClientGetSpectatorBriefInfo(struct TArray<struct FSpectatorBriefInfo> OutAllPlayerBriefInfo, struct TArray<struct FSpectatorBriefInfo> OutAllAIBriefInfo, struct TArray<struct FSpectatorBriefInfo> OutAllNPCBriefInfo); // Function GPGameplay.GPNetworkPlayerController.ClientGetSpectatorBriefInfo // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3637b70
	void ClientFastSafeOperate(int32_t boxId, float params1, float params2, int32_t OperateId); // Function GPGameplay.GPNetworkPlayerController.ClientFastSafeOperate // (Net|Native|Event|Public|NetClient) // @ game+0x3637a30
	void Client2Server_ServerLiveSpectateNext(bool nextTarget); // Function GPGameplay.GPNetworkPlayerController.Client2Server_ServerLiveSpectateNext // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36379a0
	void Client2Server_ServerLeaveLiveSpectateMode(); // Function GPGameplay.GPNetworkPlayerController.Client2Server_ServerLeaveLiveSpectateMode // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3637980
	void Client2Server_PlayerTryEnterLiveSpectateWithUin(uint64_t TargetUin, bool bFirstEnter); // Function GPGameplay.GPNetworkPlayerController.Client2Server_PlayerTryEnterLiveSpectateWithUin // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36378b0
	void Client2Server_PlayerTryEnterLiveSpectateWithNetGUID(uint32_t TargetNetGUID); // Function GPGameplay.GPNetworkPlayerController.Client2Server_PlayerTryEnterLiveSpectateWithNetGUID // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3637820
	void Client2Server_LiveSpectateSpectificTarget(struct AActor* Target); // Function GPGameplay.GPNetworkPlayerController.Client2Server_LiveSpectateSpectificTarget // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3637790
	void ClearClientOnDelayDeathWatchDelegateHandle(); // Function GPGameplay.GPNetworkPlayerController.ClearClientOnDelayDeathWatchDelegateHandle // (Final|Native|Public) // @ game+0x3637690
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPlayerState
// Size: 0x8e8 (Inherited: 0x4b0)
class AGPPlayerState : public ABasePlayerState {
public:

	char pad_4B0[0x8]; // 0x4b0(0x08)
	int32_t InnerTeamIndex; // 0x4b8(0x04)
	bool bDead; // 0x4bc(0x01)
	char pad_4BD[0x3]; // 0x4bd(0x03)
	int32_t DeadTickNum; // 0x4c0(0x04)
	float DeathWaitRescueTime; // 0x4c4(0x04)
	float DeathWaitRescueStartTime; // 0x4c8(0x04)
	float DeathWaitRescueEndTime; // 0x4cc(0x04)
	bool bFinishGame; // 0x4d0(0x01)
	char pad_4D1[0x1]; // 0x4d1(0x01)
	bool bDeathWaitingRescueEnd; // 0x4d2(0x01)
	enum class EPlayerGender PlayerGender; // 0x4d3(0x01)
	float CurrentDeathStartTime; // 0x4d4(0x04)
	char pad_4D8[0x10]; // 0x4d8(0x10)
	bool bSinglePlayer; // 0x4e8(0x01)
	char pad_4E9[0x7]; // 0x4e9(0x07)
	struct TArray<struct FTeamMemberInfo> MemberInfoList; // 0x4f0(0x10)
	struct TArray<struct FTeamMemberInfo> CampMemberInfoList; // 0x500(0x10)
	bool bIsPlayerAI; // 0x510(0x01)
	char pad_511[0x3]; // 0x511(0x03)
	float NeedLogImpendingDeathToDeathTime; // 0x514(0x04)
	bool bIsObserverPlayer; // 0x518(0x01)
	char pad_519[0x7]; // 0x519(0x07)
	struct FSpectInfo SpectInfo; // 0x520(0x30)
	struct TArray<struct FNiceInfo> bNiceInfo; // 0x550(0x10)
	struct FSpectWeaponInfo SpectWeaponInfo; // 0x560(0x0c)
	char pad_56C[0xc]; // 0x56c(0x0c)
	struct FSpectSafeBoxInfo SpectSafeBoxInfo; // 0x578(0x10)
	struct FSpectTelescopeInfo SpectTelescopeInfo; // 0x588(0x0c)
	char pad_594[0x4]; // 0x594(0x04)
	struct FSpectFashionMesh SpectFashionMesh; // 0x598(0x10)
	char pad_5A8[0x20]; // 0x5a8(0x20)
	struct TArray<struct AGPPlayerController*> AllSpectMeGPS; // 0x5c8(0x10)
	bool bReplicateSpectWeaponInfo; // 0x5d8(0x01)
	char pad_5D9[0x3]; // 0x5d9(0x03)
	struct TWeakObjectPtr<struct UGPMissionComponent> MissionComponentPtr; // 0x5dc(0x08)
	struct FPlayerDeathAndCarryDataInfo PlayerDeathAndCarryDataInfo; // 0x5e4(0x30)
	char pad_614[0x4]; // 0x614(0x04)
	struct TArray<struct FKillInfo> BeKillInfoHitstorys; // 0x618(0x10)
	struct TArray<struct FKillInfo> KillInfoHitstorys; // 0x628(0x10)
	float TotalHpDamage; // 0x638(0x04)
	int32_t PlatformID; // 0x63c(0x04)
	int32_t AccountType; // 0x640(0x04)
	int32_t TeamId; // 0x644(0x04)
	int32_t Camp; // 0x648(0x04)
	enum class EBattleFieldForcesType ForcesType; // 0x64c(0x01)
	char pad_64D[0x3]; // 0x64d(0x03)
	int32_t ArmForceID; // 0x650(0x04)
	enum class ETeamIdentity TeamIdentity; // 0x654(0x01)
	char pad_655[0x3]; // 0x655(0x03)
	struct FLoginInfo LoginInfo; // 0x658(0x18)
	uint32_t CharacterModeId; // 0x670(0x04)
	bool bIsWanted; // 0x674(0x01)
	char pad_675[0x3]; // 0x675(0x03)
	struct FKillInfo RevengeKillInfo; // 0x678(0x148)
	struct TArray<struct FCommonCountDownInfo> CountDownArray; // 0x7c0(0x10)
	struct TArray<struct FCommonCountDownInfo> ServerCountDownArray; // 0x7d0(0x10)
	struct TArray<struct FPlayerWeaponSkinSetup> PlayerWeaponSkinSetups; // 0x7e0(0x10)
	struct TArray<struct FPlayerWeaponSkinInfo> PlayerWeaponSkinInfos; // 0x7f0(0x10)
	struct TArray<struct FPlayerWeaponMysticalSkinInfo> PlayerWeaponMysticalSkinInfos; // 0x800(0x10)
	char pad_810[0x80]; // 0x810(0x80)
	int32_t PlayerGamePlayState; // 0x890(0x04)
	int32_t CurrentCharacterLiveStatus; // 0x894(0x04)
	char pad_898[0x18]; // 0x898(0x18)
	char bInGlitchVolume : 1; // 0x8b0(0x01)
	char pad_8B0_1 : 7; // 0x8b0(0x01)
	char pad_8B1[0x2f]; // 0x8b1(0x2f)
	char bIsDeadBox : 1; // 0x8e0(0x01)
	char pad_8E0_1 : 7; // 0x8e0(0x01)
	char pad_8E1[0x7]; // 0x8e1(0x07)

	void SetTeamIdentity(uint32_t Identity); // Function GPGameplay.GPPlayerState.SetTeamIdentity // (Final|Native|Public) // @ game+0x364f3b0
	void SetTeamId(int32_t InTeamId); // Function GPGameplay.GPPlayerState.SetTeamId // (Native|Public|BlueprintCallable) // @ game+0x364f320
	void SetRevengeKillInfo(struct FKillInfo& KillInfo); // Function GPGameplay.GPPlayerState.SetRevengeKillInfo // (Final|Native|Public|HasOutParms) // @ game+0x364f270
	void SetForcesType(enum class EBattleFieldForcesType InForcesType); // Function GPGameplay.GPPlayerState.SetForcesType // (Native|Public|BlueprintCallable) // @ game+0x364ee50
	void SetCountDown(struct FCommonCountDownInfo& CountDownInfo); // Function GPGameplay.GPPlayerState.SetCountDown // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x364ed60
	void SetCharacterModeId(uint32_t ID); // Function GPGameplay.GPPlayerState.SetCharacterModeId // (Native|Public) // @ game+0x364ecd0
	void SetCharacterIsWanted(bool bWanted); // Function GPGameplay.GPPlayerState.SetCharacterIsWanted // (Native|Public) // @ game+0x364ec40
	void SetCamp(int32_t InCamp); // Function GPGameplay.GPPlayerState.SetCamp // (Native|Public|BlueprintCallable) // @ game+0x364ebb0
	void SetArmedForceID(int32_t InArmForceID); // Function GPGameplay.GPPlayerState.SetArmedForceID // (Final|Native|Public|BlueprintCallable) // @ game+0x364eb30
	void OnTeamInfoChanged(); // Function GPGameplay.GPPlayerState.OnTeamInfoChanged // (Native|Public) // @ game+0xbcc8c0
	void OnRep_TeamId(); // Function GPGameplay.GPPlayerState.OnRep_TeamId // (Native|Public) // @ game+0x364e7b0
	void OnRep_SpectWeaponInfo(); // Function GPGameplay.GPPlayerState.OnRep_SpectWeaponInfo // (Native|Public) // @ game+0x364e790
	void OnRep_SpectTelescopeInfo(); // Function GPGameplay.GPPlayerState.OnRep_SpectTelescopeInfo // (Native|Public) // @ game+0x364e770
	void OnRep_SpectSafeBoxInfo(); // Function GPGameplay.GPPlayerState.OnRep_SpectSafeBoxInfo // (Native|Public) // @ game+0x364e750
	void OnRep_SpectMemberInfo(); // Function GPGameplay.GPPlayerState.OnRep_SpectMemberInfo // (Native|Public) // @ game+0x364e730
	void OnRep_SpectFashionMesh(); // Function GPGameplay.GPPlayerState.OnRep_SpectFashionMesh // (Final|Native|Public) // @ game+0x88f4d0
	void OnRep_ServerCountDownArray(struct TArray<struct FCommonCountDownInfo> OldServerCountDownArray); // Function GPGameplay.GPPlayerState.OnRep_ServerCountDownArray // (Final|Native|Protected) // @ game+0x364e5f0
	void OnRep_PlayerWeaponSkinSetup(); // Function GPGameplay.GPPlayerState.OnRep_PlayerWeaponSkinSetup // (Final|Native|Public) // @ game+0x364e5d0
	void OnRep_PlayerWeaponSkinInfos(); // Function GPGameplay.GPPlayerState.OnRep_PlayerWeaponSkinInfos // (Final|Native|Public) // @ game+0x88f4d0
	void OnRep_PlayerWeaponMysticalSkinInfos(); // Function GPGameplay.GPPlayerState.OnRep_PlayerWeaponMysticalSkinInfos // (Final|Native|Public) // @ game+0x88f4d0
	void OnRep_PlayerIsWanted(); // Function GPGameplay.GPPlayerState.OnRep_PlayerIsWanted // (Final|Native|Public) // @ game+0x364e5b0
	void OnRep_PlayerGamePlayState(); // Function GPGameplay.GPPlayerState.OnRep_PlayerGamePlayState // (Final|Native|Public) // @ game+0x364e590
	void OnRep_PlatformID(); // Function GPGameplay.GPPlayerState.OnRep_PlatformID // (Native|Public) // @ game+0xbcc8e0
	void OnRep_NiceInfo(); // Function GPGameplay.GPPlayerState.OnRep_NiceInfo // (Native|Public) // @ game+0x364e570
	void OnRep_MemberInfoList(); // Function GPGameplay.GPPlayerState.OnRep_MemberInfoList // (Final|Native|Public) // @ game+0x364e550
	void OnRep_LoginInfo(); // Function GPGameplay.GPPlayerState.OnRep_LoginInfo // (Native|Public) // @ game+0x36080a0
	void OnRep_InGlitchVolume(); // Function GPGameplay.GPPlayerState.OnRep_InGlitchVolume // (Final|Native|Public) // @ game+0x364e530
	void OnRep_ForcesType(); // Function GPGameplay.GPPlayerState.OnRep_ForcesType // (Native|Public) // @ game+0x364e510
	void OnRep_DeadTickNum(); // Function GPGameplay.GPPlayerState.OnRep_DeadTickNum // (Final|Native|Public) // @ game+0x364e4f0
	void OnRep_CurrentCharacterLiveStatus(); // Function GPGameplay.GPPlayerState.OnRep_CurrentCharacterLiveStatus // (Native|Public) // @ game+0x174a740
	void OnRep_CampMemberInfoList(); // Function GPGameplay.GPPlayerState.OnRep_CampMemberInfoList // (Final|Native|Public) // @ game+0x364e4d0
	void OnRep_Camp(); // Function GPGameplay.GPPlayerState.OnRep_Camp // (Native|Public) // @ game+0x364e4b0
	void OnRep_bIsDeadBox(); // Function GPGameplay.GPPlayerState.OnRep_bIsDeadBox // (Final|Native|Public) // @ game+0x364e830
	void OnRep_bFinishGame(); // Function GPGameplay.GPPlayerState.OnRep_bFinishGame // (Final|Native|Public) // @ game+0x364e810
	void OnRep_bDeathWaitingRescueEnd(); // Function GPGameplay.GPPlayerState.OnRep_bDeathWaitingRescueEnd // (Final|Native|Public) // @ game+0x364e7f0
	void OnRep_bDead(); // Function GPGameplay.GPPlayerState.OnRep_bDead // (Final|Native|Public) // @ game+0x364e7d0
	void OnRep_AccountType(); // Function GPGameplay.GPPlayerState.OnRep_AccountType // (Native|Public) // @ game+0x364e490
	bool IsOffline(); // Function GPGameplay.GPPlayerState.IsOffline // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x364e460
	bool HasTeamMemberForWatch(); // Function GPGameplay.GPPlayerState.HasTeamMemberForWatch // (Native|Public) // @ game+0x364e430
	int32_t GetTeamIdentity(); // Function GPGameplay.GPPlayerState.GetTeamIdentity // (Final|Native|Public) // @ game+0x364e400
	int32_t GetTeamID(); // Function GPGameplay.GPPlayerState.GetTeamID // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x364e3d0
	struct FKillInfo GetRevengeKillInfo(); // Function GPGameplay.GPPlayerState.GetRevengeKillInfo // (Final|Native|Public|Const) // @ game+0x364e140
	enum class EBattleFieldForcesType GetForcesType(); // Function GPGameplay.GPPlayerState.GetForcesType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x364e110
	bool GetCountDownByType(enum class ECountDownPriority CountDowType, struct FCommonCountDownInfo& CountDownInfo); // Function GPGameplay.GPPlayerState.GetCountDownByType // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x364dfe0
	uint32_t GetCharacterModeId(); // Function GPGameplay.GPPlayerState.GetCharacterModeId // (Native|Public) // @ game+0x364dfb0
	bool GetCharacterIsWanted(); // Function GPGameplay.GPPlayerState.GetCharacterIsWanted // (Native|Public) // @ game+0x364df80
	int32_t GetCamp(); // Function GPGameplay.GPPlayerState.GetCamp // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x364df50
	int32_t GetArmedForceID(); // Function GPGameplay.GPPlayerState.GetArmedForceID // (Native|Public|BlueprintCallable) // @ game+0x364df20
	void ClientOnAISendChatPreset(uint64_t PlayerUin, struct FString AINick, struct FName PresetId); // Function GPGameplay.GPPlayerState.ClientOnAISendChatPreset // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x364dd10
	void ClientOnAISendChat(uint64_t PlayerUin, struct FString AINick, struct FString Content); // Function GPGameplay.GPPlayerState.ClientOnAISendChat // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x364db90
	void AddKillInfo(struct FKillInfo& KillInfo); // Function GPGameplay.GPPlayerState.AddKillInfo // (Final|Native|Public|HasOutParms) // @ game+0x364da90
	void AddBeKillInfo(struct FKillInfo& KillInfo); // Function GPGameplay.GPPlayerState.AddBeKillInfo // (Final|Native|Public|HasOutParms) // @ game+0x364d9e0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ModularWeaponDataComponentAppearance
// Size: 0xb90 (Inherited: 0xae8)
class UModularWeaponDataComponentAppearance : public UWeaponDataComponentAppearance {
public:

	char pad_AE8[0x8]; // 0xae8(0x08)
	struct UModularWeaponDesc* ModularWeaponDesc; // 0xaf0(0x08)
	struct UModularWeaponMeshProxy* MeshProxy; // 0xaf8(0x08)
	struct USkeletalMesh* CompositeMesh; // 0xb00(0x08)
	char pad_B08[0x8]; // 0xb08(0x08)
	struct USkeletalMeshComponent* MainWeaponMeshSkeletalComponent; // 0xb10(0x08)
	struct UWeaponSkinLogicComponent* WeaponSkinLogicalComponent; // 0xb18(0x08)
	bool bSupportDualMagazine; // 0xb20(0x01)
	char pad_B21[0x4f]; // 0xb21(0x4f)
	struct TArray<struct UTexture*> CacheForceKeepFullMipLevels; // 0xb70(0x10)
	struct TArray<struct USkeletalMesh*> CacheForceKeepMeshFullMipLevels; // 0xb80(0x10)

	void UnSetForceKeepMeshFullMipLevels(); // Function GPGameplay.ModularWeaponDataComponentAppearance.UnSetForceKeepMeshFullMipLevels // (Final|Native|Protected) // @ game+0x36938e0
	void UnSetForceKeepFullMipLevels(); // Function GPGameplay.ModularWeaponDataComponentAppearance.UnSetForceKeepFullMipLevels // (Final|Native|Protected) // @ game+0x36938c0
	void SetForceKeepMeshFullMipLevels(); // Function GPGameplay.ModularWeaponDataComponentAppearance.SetForceKeepMeshFullMipLevels // (Final|Native|Protected) // @ game+0x3692720
	void SetForceKeepFullMipLevels(); // Function GPGameplay.ModularWeaponDataComponentAppearance.SetForceKeepFullMipLevels // (Final|Native|Protected) // @ game+0x3692700
	void OnSingleMeshComponentReady(struct USkeletalMeshComponent* MeshCom, uint64_t ItemID, uint64_t Guid); // Function GPGameplay.ModularWeaponDataComponentAppearance.OnSingleMeshComponentReady // (Final|Native|Protected) // @ game+0x3691ff0
	void ModifyWeaponParts(struct UModularWeaponDesc* TargetModularWeaponDesc); // Function GPGameplay.ModularWeaponDataComponentAppearance.ModifyWeaponParts // (Final|Native|Public) // @ game+0x3691600
	bool IsMeshCompositeFinished(); // Function GPGameplay.ModularWeaponDataComponentAppearance.IsMeshCompositeFinished // (Final|Native|Public|Const) // @ game+0x36911e0
	bool EnableForceMeshKeepFullMipLevels(); // Function GPGameplay.ModularWeaponDataComponentAppearance.EnableForceMeshKeepFullMipLevels // (Native|Protected) // @ game+0x368f7c0
	bool EnableForceKeepFullMipLevels(); // Function GPGameplay.ModularWeaponDataComponentAppearance.EnableForceKeepFullMipLevels // (Native|Protected) // @ game+0x368f790
	void CreateWeaponSkinLogicComponent(struct UClass* InClass); // Function GPGameplay.ModularWeaponDataComponentAppearance.CreateWeaponSkinLogicComponent // (Final|Native|Public) // @ game+0x368f510
	void ClearWeaponSkinLogicComponent(); // Function GPGameplay.ModularWeaponDataComponentAppearance.ClearWeaponSkinLogicComponent // (Final|Native|Public) // @ game+0x368f430
	void AssembleModularWeaponSkeletalMesh(); // Function GPGameplay.ModularWeaponDataComponentAppearance.AssembleModularWeaponSkeletalMesh // (Final|Native|Public) // @ game+0x368ea90
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.FixWeaponDataComponentAppearance
// Size: 0xaf0 (Inherited: 0xae8)
class UFixWeaponDataComponentAppearance : public UWeaponDataComponentAppearance {
public:

	char pad_AE8[0x8]; // 0xae8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ThrowWeaponDataAppearanceComp
// Size: 0xaf0 (Inherited: 0xae8)
class UThrowWeaponDataAppearanceComp : public UWeaponDataComponentAppearance {
public:

	float DelayVisibileTime; // 0xae8(0x04)
	char pad_AEC[0x4]; // 0xaec(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ModularWeaponFuncComponentAppearance
// Size: 0x410 (Inherited: 0x3e0)
class UModularWeaponFuncComponentAppearance : public UWeaponFuncComponentAppearance {
public:

	struct UModularWeaponDataComponentAppearance* DCMWAppearance; // 0x3e0(0x08)
	char pad_3E8[0x18]; // 0x3e8(0x18)
	struct TArray<struct UWeaponSkinComponentBase*> SkinComponents; // 0x400(0x10)

	void OnMeshCompositeFinishedCallBack(struct USkeletalMeshComponent* SkeletalMesh); // Function GPGameplay.ModularWeaponFuncComponentAppearance.OnMeshCompositeFinishedCallBack // (Final|Native|Protected) // @ game+0x3699f80
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.FixWeaponFuncComponentAppearance
// Size: 0x3e0 (Inherited: 0x3e0)
class UFixWeaponFuncComponentAppearance : public UWeaponFuncComponentAppearance {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponSocketOverrideFuncComponentAppearance
// Size: 0x3e0 (Inherited: 0x3e0)
class UWeaponSocketOverrideFuncComponentAppearance : public UWeaponFuncComponentAppearance {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowableFuncComponentAppearance
// Size: 0x3f0 (Inherited: 0x3e0)
class UWeaponThrowableFuncComponentAppearance : public UWeaponFuncComponentAppearance {
public:

	float DelayVisibileTime; // 0x3e0(0x04)
	bool bInDelayInVisible; // 0x3e4(0x01)
	char pad_3E5[0xb]; // 0x3e5(0x0b)

	void RecoverDelayVisible(); // Function GPGameplay.WeaponThrowableFuncComponentAppearance.RecoverDelayVisible // (Native|Protected) // @ game+0x1760200
	void ProcessDelayVisible(); // Function GPGameplay.WeaponThrowableFuncComponentAppearance.ProcessDelayVisible // (Native|Protected) // @ game+0x227b4f0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.CharacterAttributesCenterComponent
// Size: 0x2c8 (Inherited: 0x250)
class UCharacterAttributesCenterComponent : public UGPAttributeCenterComponent {
public:

	char pad_250[0x50]; // 0x250(0x50)
	struct TArray<struct FAttributeOpStructArray> AttributesOpsDebug; // 0x2a0(0x10)
	/*struct FMulticastInlineDelegate*/char OnRecvAttributesOpsDebugInfo[0x10]; // 0x2b0(0x10)
	char pad_2C0[0x8]; // 0x2c0(0x08)

	void ServerReponseToClientDumpInfo(struct TArray<struct FAttributeOpStructArray> Result); // Function GPGameplay.CharacterAttributesCenterComponent.ServerReponseToClientDumpInfo // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x35797d0
	struct UCharacterAttributesCenterComponent* STATIC_GetAttributesCenter(struct AActor* Owner); // Function GPGameplay.CharacterAttributesCenterComponent.GetAttributesCenter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3578a60
	void ClientRequestDumpInfo(); // Function GPGameplay.CharacterAttributesCenterComponent.ClientRequestDumpInfo // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3578a00
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.CharacterBase
// Size: 0xa78 (Inherited: 0x8c0)
class ACharacterBase : public AIntCharacter {
public:

	char pad_8C0[0x50]; // 0x8c0(0x50)
	struct USkeletalMeshComponent* FPPMesh; // 0x910(0x08)
	struct USkeletalMeshComponent* FPPMeshLowBody; // 0x918(0x08)
	struct TArray<struct USkeletalMeshComponent*> AllMesh; // 0x920(0x10)
	char pad_930[0x148]; // 0x930(0x148)

	void StartJump(); // Function GPGameplay.CharacterBase.StartJump // (Native|Public|BlueprintCallable) // @ game+0x3579aa0
	void SprintRequest(bool bSprint); // Function GPGameplay.CharacterBase.SprintRequest // (Native|Public|BlueprintCallable) // @ game+0x3579a10
	void SilentWalkRequest(bool bSilentWalk); // Function GPGameplay.CharacterBase.SilentWalkRequest // (Native|Public|BlueprintCallable) // @ game+0x3579980
	void PersistSprintRequest(bool bSprint); // Function GPGameplay.CharacterBase.PersistSprintRequest // (Native|Public|BlueprintCallable) // @ game+0x3579740
	void PersistRunRequest(bool bRun); // Function GPGameplay.CharacterBase.PersistRunRequest // (Native|Public|BlueprintCallable) // @ game+0x35796b0
	bool IsImpendingDeath(); // Function GPGameplay.CharacterBase.IsImpendingDeath // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3579200
	bool IsFalling(); // Function GPGameplay.CharacterBase.IsFalling // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35791d0
	bool IsDead(); // Function GPGameplay.CharacterBase.IsDead // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35791a0
	bool GetIsSprint(); // Function GPGameplay.CharacterBase.GetIsSprint // (Native|Public) // @ game+0x3579170
	bool GetIsProne(); // Function GPGameplay.CharacterBase.GetIsProne // (Native|Public|BlueprintCallable) // @ game+0x3579140
	bool GetIsInBasePoseState(); // Function GPGameplay.CharacterBase.GetIsInBasePoseState // (Native|Public) // @ game+0x3579110
	bool GetIsCrouch(); // Function GPGameplay.CharacterBase.GetIsCrouch // (Native|Public|BlueprintCallable) // @ game+0x35790e0
	void EndJump(); // Function GPGameplay.CharacterBase.EndJump // (Native|Public|BlueprintCallable) // @ game+0x3578a40
	void CharacterToggleProne(); // Function GPGameplay.CharacterBase.CharacterToggleProne // (Native|Public|BlueprintCallable) // @ game+0x3578940
	void CharacterToggleCrouch(); // Function GPGameplay.CharacterBase.CharacterToggleCrouch // (Native|Public|BlueprintCallable) // @ game+0x3578920
	void CharacterSprint(); // Function GPGameplay.CharacterBase.CharacterSprint // (Native|Public|BlueprintCallable) // @ game+0x3578900
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ChargeWeaponDataComponentFiring
// Size: 0x908 (Inherited: 0x908)
class UChargeWeaponDataComponentFiring : public UWeaponDataComponentFiring {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponMeleeDataComponentFiring
// Size: 0x908 (Inherited: 0x908)
class UWeaponMeleeDataComponentFiring : public UWeaponDataComponentFiring {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ChargeWeaponFuncComponentFiring
// Size: 0x1f8 (Inherited: 0x1f0)
class UChargeWeaponFuncComponentFiring : public UWeaponFuncComponentFiring {
public:

	char pad_1F0[0x8]; // 0x1f0(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterRangeScopeManager
// Size: 0x278 (Inherited: 0x160)
class UWeaponAdapterRangeScopeManager : public UCompositedRangeScope {
public:

	char pad_160[0x10]; // 0x160(0x10)
	struct UWeaponDataComponentAdapter* DcAdapter; // 0x170(0x08)
	struct UWeaponDataComponentZoom* DCZoom; // 0x178(0x08)
	char pad_180[0x80]; // 0x180(0x80)
	struct URangeScopeSceneCaptureComponent* SceneCaptureComponent; // 0x200(0x08)
	struct ACHARACTER* CharacterOwner; // 0x208(0x08)
	struct TWeakObjectPtr<struct AGPPlayerCameraManager> GPPlayerCameraManager; // 0x210(0x08)
	struct UWeaponBlackboard* WeaponBlackboard; // 0x218(0x08)
	char pad_220[0x58]; // 0x220(0x58)

	void OnSettingChanged(); // Function GPGameplay.WeaponAdapterRangeScopeManager.OnSettingChanged // (Final|Native|Protected) // @ game+0x36b9550
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageCaculatorOlio
// Size: 0x30 (Inherited: 0x30)
class UDamageCaculatorOlio : public UDamageCaculatorBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageCaculatorOlio02
// Size: 0x30 (Inherited: 0x30)
class UDamageCaculatorOlio02 : public UDamageCaculatorBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageStateRecorder_Character
// Size: 0x48 (Inherited: 0x48)
class UDamageStateRecorder_Character : public UDamageStateRecorder {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageStateRecorder_GeneralGun
// Size: 0x48 (Inherited: 0x48)
class UDamageStateRecorder_GeneralGun : public UDamageStateRecorder {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageStateRecorder_Vehicle
// Size: 0x48 (Inherited: 0x48)
class UDamageStateRecorder_Vehicle : public UDamageStateRecorder {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageVaildationRuleCheckActorPosition
// Size: 0xd0 (Inherited: 0x60)
class UDamageVaildationRuleCheckActorPosition : public UDamageValidationRuleBase {
public:

	float AllowServerTimeDiff; // 0x60(0x04)
	float PlayerCharaterRewindTimeOffset; // 0x64(0x04)
	float AICharaterRewindTimeOffset; // 0x68(0x04)
	float ConfigAllowStartFireLocationDiff; // 0x6c(0x04)
	float ValidateBaseMoveSpeed; // 0x70(0x04)
	bool bEnableCheckPlayerMakerPosition; // 0x74(0x01)
	bool bEnableCheckTakerPosition; // 0x75(0x01)
	bool bEnableCheckAITakerPosition; // 0x76(0x01)
	bool bEnableCheckPlayerTakerPosition; // 0x77(0x01)
	bool bEnableCheckInstigaterPosition; // 0x78(0x01)
	bool bEnableCheckInstigaterPositionWhenOnVehicle; // 0x79(0x01)
	char pad_7A[0x6]; // 0x7a(0x06)
	struct TMap<struct FName, struct FDamageVaildationCharacterBox> VaildationCharacterBoxes; // 0x80(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageValidateRule_HitNum
// Size: 0x60 (Inherited: 0x60)
class UDamageValidateRule_HitNum : public UDamageValidationRuleBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageValidationRule_CheckMeleeHitcanPath
// Size: 0x68 (Inherited: 0x60)
class UDamageValidationRule_CheckMeleeHitcanPath : public UDamageValidationRuleBase {
public:

	float CheckBulletMaxDistance; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageValidationRule_CheckProjectilePath
// Size: 0x70 (Inherited: 0x60)
class UDamageValidationRule_CheckProjectilePath : public UDamageValidationRuleBase {
public:

	float CheckBulletMaxDistance; // 0x60(0x04)
	float SimulateStepTime; // 0x64(0x04)
	bool DebugFullPath; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DamageValidationRuleCheckCharacterState
// Size: 0x68 (Inherited: 0x60)
class UDamageValidationRuleCheckCharacterState : public UDamageValidationRuleBase {
public:

	float AllowFireTimeDiff; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPFSMAction
// Size: 0xf0 (Inherited: 0xb8)
class UGPFSMAction : public UGPFSMActionInstance {
public:

	struct AGPCharacter* Owner; // 0xb8(0x08)
	struct AActor* OwnerActor; // 0xc0(0x08)
	struct UGPNetworkComponent* GPIdentity; // 0xc8(0x08)
	struct UGPBlackboardComponent* BlackBoard; // 0xd0(0x08)
	struct UGPFSMStateMachineInstance* ParentStateMachineStateInstance; // 0xd8(0x08)
	struct UGPFSMStateMachineComponent* FSMStateMachineComponent; // 0xe0(0x08)
	char pad_E8[0x8]; // 0xe8(0x08)

	void ServerReceiveTransitionEvent(enum class EGPFSMTransitionEvent EventType); // Function GPGameplay.GPFSMAction.ServerReceiveTransitionEvent // (Native|Public) // @ game+0x35f7360
	struct UGPFSMAction* GetActionByClass(struct UClass* ActionClass); // Function GPGameplay.GPFSMAction.GetActionByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35f6e90
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DrawWeaponOffsetComponent
// Size: 0x138 (Inherited: 0x128)
class UDrawWeaponOffsetComponent : public UDrawTransformComponent {
public:

	enum class EWeaponOffsetType CurOffsetType; // 0x128(0x01)
	char pad_129[0xf]; // 0x129(0x0f)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSkeletalMeshComponent
// Size: 0x1270 (Inherited: 0xf78)
class UGPSkeletalMeshComponent : public UGPSkeletalMeshComponentBase {
public:

	bool bEnableSimpleSpawnAnim; // 0xf78(0x01)
	char pad_F79[0x7]; // 0xf79(0x07)
	struct UClass* SimpleAnimClass; // 0xf80(0x08)
	float OwnerComponentTickInterval; // 0xf88(0x04)
	float NormalComponentTickInterval; // 0xf8c(0x04)
	bool bEnableComponentTick; // 0xf90(0x01)
	bool bUseCustomBounds; // 0xf91(0x01)
	bool bBoundsCalcUseOwnerTrans; // 0xf92(0x01)
	bool bDisableParentTransform; // 0xf93(0x01)
	bool bForceCalcBoundsDynamic; // 0xf94(0x01)
	bool bCalcBoundsDynamicUseCommonPhysAsset; // 0xf95(0x01)
	char pad_F96[0x2]; // 0xf96(0x02)
	struct UPhysicsAsset* BoundsCommonPhysicsAsset; // 0xf98(0x08)
	struct FVector FixedCustomBoundTranslationOffset; // 0xfa0(0x0c)
	struct FVector MeshTranslationOffset; // 0xfac(0x0c)
	bool MeshTranslationOffsetValid; // 0xfb8(0x01)
	char pad_FB9[0x3]; // 0xfb9(0x03)
	struct FBoxSphereBounds NormalBound; // 0xfbc(0x1c)
	struct FBoxSphereBounds CrouchBound; // 0xfd8(0x1c)
	struct FBoxSphereBounds LieDownBound; // 0xff4(0x1c)
	struct FBoxSphereBounds DeathPoseBound; // 0x1010(0x1c)
	struct FBoxSphereBounds RescuePoseBound; // 0x102c(0x1c)
	struct TMap<char, struct FBoxSphereBounds> CustomBounds; // 0x1048(0x50)
	char pad_1098[0x8]; // 0x1098(0x08)
	struct FGPAnimUpdateRateSettings AnimUpdateRateSettings; // 0x10a0(0x20)
	bool bTestSkipLocalPlayerUpdateTransform; // 0x10c0(0x01)
	char pad_10C1[0x3]; // 0x10c1(0x03)
	float DepthScale; // 0x10c4(0x04)
	bool bOverrideVisibleDistanceFactorThesholds; // 0x10c8(0x01)
	bool bNeedAnimToPhysicsInVehicle; // 0x10c9(0x01)
	char pad_10CA[0x2]; // 0x10ca(0x02)
	int32_t MinAnimOpLOD; // 0x10cc(0x04)
	int32_t ExplicitlyAnimOpLOD; // 0x10d0(0x04)
	int32_t MinAnimGraphLOD; // 0x10d4(0x04)
	int32_t ExplicitlyAnimGraphLOD; // 0x10d8(0x04)
	char pad_10DC[0x4]; // 0x10dc(0x04)
	struct USkeletalMesh* Pass2CacheSkeletalMesh; // 0x10e0(0x08)
	bool bUsePass2Opt; // 0x10e8(0x01)
	char pad_10E9[0x77]; // 0x10e9(0x77)
	bool bCanModifySkeletalMesh; // 0x1160(0x01)
	char pad_1161[0x27]; // 0x1161(0x27)
	struct AGPCharacter* OwnerPlayer; // 0x1188(0x08)
	struct AActor* OwnerActorHolder; // 0x1190(0x08)
	char pad_1198[0x15]; // 0x1198(0x15)
	bool bAddFOVMatrixForBeCarry; // 0x11ad(0x01)
	char pad_11AE[0xa]; // 0x11ae(0x0a)
	char bEnableCleanOverrideMaterialsAfterSetMesh : 1; // 0x11b8(0x01)
	char bEnableRestoreMaterialParameterFromCacheAfterSetMesh : 1; // 0x11b8(0x01)
	char pad_11B8_2 : 6; // 0x11b8(0x01)
	bool bUseMinLODWhenCreateRenderStateBP; // 0x11b9(0x01)
	char pad_11BA[0xae]; // 0x11ba(0xae)
	struct UGPAnimInstance* CurrentGPAnimInstance; // 0x1268(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSceneSkeletalMeshComponent
// Size: 0xf80 (Inherited: 0xf78)
class UGPSceneSkeletalMeshComponent : public UGPSkeletalMeshComponentBase {
public:

	char pad_F78[0x8]; // 0xf78(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GameplayAbilityWeaponStateFiring
// Size: 0x4b0 (Inherited: 0x4b0)
class UGameplayAbilityWeaponStateFiring : public UGameplayAbilityWeaponState {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAbilityBaseAnimInstance
// Size: 0x290 (Inherited: 0x290)
class UGPAbilityBaseAnimInstance : public UGPAnimInstanceBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAI3AnimInstance
// Size: 0x9e0 (Inherited: 0x290)
class UGPAI3AnimInstance : public UGPAnimInstanceBase {
public:

	struct FGPAI3AnimInstanceProxy LocalProxy; // 0x290(0x750)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAIAnimInstance
// Size: 0xf80 (Inherited: 0x290)
class UGPAIAnimInstance : public UGPAnimInstanceBase {
public:

	struct FGPAIAnimInstanceProxy LocalProxy; // 0x290(0xba0)
	struct UGPAnimProxyComponent* AnimProxyComponent; // 0xe30(0x08)
	struct ULineBatchComponent* FootLockDrawer; // 0xe38(0x08)
	char pad_E40[0x8]; // 0xe40(0x08)
	struct TArray<float> AnimLODDistanceFactorThesholds; // 0xe48(0x10)
	struct TArray<float> AnimLODDistanceFactorBackThesholds; // 0xe58(0x10)
	bool bUseNewDeathAnims; // 0xe68(0x01)
	char pad_E69[0x3]; // 0xe69(0x03)
	struct FGPAIAnimProxyFootIK AnimProxyFootIK; // 0xe6c(0x64)
	bool NeedResetFootIK; // 0xed0(0x01)
	char pad_ED1[0x7]; // 0xed1(0x07)
	struct UBlendSpaceBase* DefaultMachigunMoveBS; // 0xed8(0x08)
	struct UAnimSequence* DefaultVehicleIdleTPPAnim; // 0xee0(0x08)
	struct UAnimSequence* DefaultBasicLocomotionAnim; // 0xee8(0x08)
	struct UAnimSequence* DefaultBasicDeathAnim; // 0xef0(0x08)
	struct TMap<enum class EWeaponItemType, struct UAnimSequence*> DefaultBasicLeftHandGripPose; // 0xef8(0x50)
	struct AGPCharacter* OwnerPawn; // 0xf48(0x08)
	struct USkeletalMeshComponent* ParentMesh; // 0xf50(0x08)
	struct UGPSkeletalMeshComponent* ParentGPMesh; // 0xf58(0x08)
	struct TWeakObjectPtr<struct UAIDebugPanelV2> DebugPanel; // 0xf60(0x08)
	char pad_F68[0x18]; // 0xf68(0x18)

	void TriggerChangeURO(bool bOpen); // Function GPGameplay.GPAIAnimInstance.TriggerChangeURO // (Final|Native|Public|BlueprintCallable) // @ game+0x359fb60
	void SetToggleLocomotionAnim(struct UAnimSequence* Anim, bool bToggle); // Function GPGameplay.GPAIAnimInstance.SetToggleLocomotionAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x359fa90
	float GetRelevantAnimAssetTimeRemaining(int32_t MachineIndex, int32_t StateIndex); // Function GPGameplay.GPAIAnimInstance.GetRelevantAnimAssetTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x359f380
	float GetRelevantAnimAssetTime(int32_t MachineIndex, int32_t StateIndex); // Function GPGameplay.GPAIAnimInstance.GetRelevantAnimAssetTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x359f2c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimInstance
// Size: 0x18c0 (Inherited: 0x290)
class UGPAnimInstance : public UGPAnimInstanceBase {
public:

	struct FGPAnimInstanceProxy LocalProxy; // 0x290(0x13a0)
	struct UGPAnimProxyComponent* AnimProxyComponent; // 0x1630(0x08)
	char pad_1638[0x38]; // 0x1638(0x38)
	struct FGPCommonAnimationData CommAnimationData; // 0x1670(0x78)
	struct TArray<float> AnimLODDistanceFactorThesholds; // 0x16e8(0x10)
	struct TArray<float> AnimLODDistanceFactorBackThesholds; // 0x16f8(0x10)
	struct FVector LeftFootIKLocation; // 0x1708(0x0c)
	struct FRotator LeftFootIKRotation; // 0x1714(0x0c)
	struct FVector RightFootIKLocation; // 0x1720(0x0c)
	struct FRotator RightFootIKRotation; // 0x172c(0x0c)
	struct FGPAnimProxyFootIK AnimProxyFootIK; // 0x1738(0x50)
	bool IsMoving; // 0x1788(0x01)
	bool bIsStoping; // 0x1789(0x01)
	bool bMovingCache; // 0x178a(0x01)
	bool NeedStartLockM; // 0x178b(0x01)
	int32_t iStopingStage; // 0x178c(0x04)
	bool NeedResetFootIK; // 0x1790(0x01)
	char pad_1791[0x3]; // 0x1791(0x03)
	int32_t CurrentValidDirectionM; // 0x1794(0x04)
	int32_t CacheStartDirectionM; // 0x1798(0x04)
	float StartFootIkTime; // 0x179c(0x04)
	struct UCurveFloat* StartLeftFootCurve; // 0x17a0(0x08)
	struct UCurveFloat* StartRightFootCurve; // 0x17a8(0x08)
	struct FCustomizedOrientationWarpingAngleSetting CustomizedOrientationWarpingAngleSetting; // 0x17b0(0x20)
	float HitWallSpringTime; // 0x17d0(0x04)
	float HitWallSpringRadio; // 0x17d4(0x04)
	float HitWallAmplitude; // 0x17d8(0x04)
	char pad_17DC[0x4]; // 0x17dc(0x04)
	struct UBlendSpaceBase* DefaultMachigunMoveBS; // 0x17e0(0x08)
	struct UAnimSequence* DefaultAssassinateTPPAnim; // 0x17e8(0x08)
	struct UAnimSequence* DefaultProneAssassinateTPPAnim; // 0x17f0(0x08)
	struct UAnimSequence* DefaultImPedningDeathAssassinateTPPAnim; // 0x17f8(0x08)
	struct UAnimSequence* DefaultBeAssassinateTPPAnim; // 0x1800(0x08)
	struct UAnimSequence* DefaultProneBeAssassinateTPPAnim; // 0x1808(0x08)
	struct UAnimSequence* DefaultImPedningDeathBeAssassinateTPPAnim; // 0x1810(0x08)
	struct UAnimSequence* DefaultVehicleIdleTPPAnim; // 0x1818(0x08)
	struct UAnimSequence* TargetVaultAnim; // 0x1820(0x08)
	struct UAnimSequence* TargetVaultAnimCacheLong; // 0x1828(0x08)
	struct UCurveFloat* TPPZoomAnimCurve; // 0x1830(0x08)
	struct UCurveFloat* RecoilRecoveryCurve; // 0x1838(0x08)
	struct UCurveFloat* RecoilEndCurve; // 0x1840(0x08)
	struct UCurveFloat* RecoilFireForceAttenuationCurve; // 0x1848(0x08)
	struct UCurveFloat* ResistanceForceAttenuationCurve; // 0x1850(0x08)
	struct UAnimSequence* RecoilEndAnim; // 0x1858(0x08)
	float RecoilEndTriggerDuration; // 0x1860(0x04)
	char pad_1864[0x4]; // 0x1864(0x04)
	struct UAnimSequence* DefaultInactiveAnim; // 0x1868(0x08)
	uint32_t BlockHitAnimFlags; // 0x1870(0x04)
	char pad_1874[0x4]; // 0x1874(0x04)
	struct AGPCharacter* OwnerPawn; // 0x1878(0x08)
	struct USkeletalMeshComponent* ParentMesh; // 0x1880(0x08)
	struct UGPSkeletalMeshComponent* ParentGPMesh; // 0x1888(0x08)
	bool HDMoreDetail; // 0x1890(0x01)
	char pad_1891[0xf]; // 0x1891(0x0f)
	struct UAnimSequence* DefaultIdle2DyingSeq; // 0x18a0(0x08)
	char pad_18A8[0x18]; // 0x18a8(0x18)

	void TriggerChangeURO(bool bOpen); // Function GPGameplay.GPAnimInstance.TriggerChangeURO // (Final|Native|Public|BlueprintCallable) // @ game+0x35a8220
	float GetRelevantAnimAssetTimeRemaining(int32_t MachineIndex, int32_t StateIndex); // Function GPGameplay.GPAnimInstance.GetRelevantAnimAssetTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x35a7e60
	float GetRelevantAnimAssetTime(int32_t MachineIndex, int32_t StateIndex); // Function GPGameplay.GPAnimInstance.GetRelevantAnimAssetTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x35a7da0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPendantAnimInstance
// Size: 0xa10 (Inherited: 0x290)
class UGPPendantAnimInstance : public UGPAnimInstanceBase {
public:

	struct UCurveFloat* ParticleDampingCoefficientCurve; // 0x290(0x08)
	struct UCurveFloat* ParticleRadiusCurve; // 0x298(0x08)
	struct FGPPendantAnimInstanceProxy LocalProxy; // 0x2a0(0x760)
	char pad_A00[0x10]; // 0xa00(0x10)

	void SetItemID(uint64_t InItemID); // Function GPGameplay.GPPendantAnimInstance.SetItemID // (Final|Native|Public) // @ game+0x3640880
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPVehicleAnimInstance
// Size: 0x1220 (Inherited: 0x290)
class UGPVehicleAnimInstance : public UGPAnimInstanceBase {
public:

	struct FGPVehicleAnimInstanceProxy LocalProxy; // 0x290(0xeb0)
	struct UGPAnimProxyComponent* AnimProxyComponent; // 0x1140(0x08)
	char pad_1148[0x8]; // 0x1148(0x08)
	struct TArray<float> AnimLODDistanceFactorThesholds; // 0x1150(0x10)
	struct TArray<float> AnimLODDistanceFactorBackThesholds; // 0x1160(0x10)
	bool IsMoving; // 0x1170(0x01)
	bool bIsStoping; // 0x1171(0x01)
	bool bMovingCache; // 0x1172(0x01)
	bool NeedStartLockM; // 0x1173(0x01)
	int32_t iStopingStage; // 0x1174(0x04)
	int32_t CurrentValidDirectionM; // 0x1178(0x04)
	int32_t CacheStartDirectionM; // 0x117c(0x04)
	struct FCustomizedOrientationWarpingAngleSetting CustomizedOrientationWarpingAngleSetting; // 0x1180(0x20)
	struct UBlendSpaceBase* DefaultMachigunMoveBS; // 0x11a0(0x08)
	struct UAnimSequence* DefaultAssassinateTPPAnim; // 0x11a8(0x08)
	struct UAnimSequence* DefaultVehicleIdleTPPAnim; // 0x11b0(0x08)
	struct UCurveFloat* TPPZoomAnimCurve; // 0x11b8(0x08)
	struct UCurveFloat* RecoilRecoveryCurve; // 0x11c0(0x08)
	struct UCurveFloat* RecoilEndCurve; // 0x11c8(0x08)
	struct UCurveFloat* RecoilFireForceAttenuationCurve; // 0x11d0(0x08)
	struct UCurveFloat* ResistanceForceAttenuationCurve; // 0x11d8(0x08)
	struct UAnimSequence* RecoilEndAnim; // 0x11e0(0x08)
	float RecoilEndTriggerDuration; // 0x11e8(0x04)
	char pad_11EC[0x4]; // 0x11ec(0x04)
	struct UAnimSequence* DefaultInactiveAnim; // 0x11f0(0x08)
	struct AGPCharacter* OwnerPawn; // 0x11f8(0x08)
	struct USkeletalMeshComponent* ParentMesh; // 0x1200(0x08)
	struct UGPSkeletalMeshComponent* ParentGPMesh; // 0x1208(0x08)
	char pad_1210[0x10]; // 0x1210(0x10)

	void TriggerChangeURO(bool bOpen); // Function GPGameplay.GPVehicleAnimInstance.TriggerChangeURO // (Final|Native|Public|BlueprintCallable) // @ game+0x367c080
	float GetRelevantAnimAssetTimeRemaining(int32_t MachineIndex, int32_t StateIndex); // Function GPGameplay.GPVehicleAnimInstance.GetRelevantAnimAssetTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x367bfc0
	float GetRelevantAnimAssetTime(int32_t MachineIndex, int32_t StateIndex); // Function GPGameplay.GPVehicleAnimInstance.GetRelevantAnimAssetTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x367bf00
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPBalluteAnimInstance
// Size: 0xa50 (Inherited: 0x290)
class UGPBalluteAnimInstance : public UGPAnimInstanceBase {
public:

	struct APlayerParachuteActor* PlayerParachuteActor; // 0x290(0x08)
	bool bFPPMode; // 0x298(0x01)
	bool bCloseParachute; // 0x299(0x01)
	bool bOpenParachute; // 0x29a(0x01)
	bool bInParachuteIdle; // 0x29b(0x01)
	float ParachuteMoveX; // 0x29c(0x04)
	float ParachuteMoveY; // 0x2a0(0x04)
	char pad_2A4[0xc]; // 0x2a4(0x0c)
	struct FGPBalluteAnimInstanceProxy LocalProxy; // 0x2b0(0x7a0)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAbilityCommonLockerData
// Size: 0x50 (Inherited: 0x30)
class UGPAbilityCommonLockerData : public UGPAbilityLockerDataBase {
public:

	struct AActor* Target; // 0x30(0x08)
	int32_t Stage; // 0x38(0x04)
	char pad_3C[0x14]; // 0x3c(0x14)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAbilityLaserPointerLockerData
// Size: 0x50 (Inherited: 0x30)
class UGPAbilityLaserPointerLockerData : public UGPAbilityLockerDataBase {
public:

	struct AActor* Target; // 0x30(0x08)
	int32_t Stage; // 0x38(0x04)
	char pad_3C[0x14]; // 0x3c(0x14)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAbilityDataSystem
// Size: 0x38 (Inherited: 0x38)
class UGPAbilityDataSystem : public UGPAbilityEntitySystemBase {
public:


	void SkillReplaceFireImage(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityDataSystem.SkillReplaceFireImage // (Final|Native|Public) // @ game+0x359bf60
	void SkillReplaceFire(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityDataSystem.SkillReplaceFire // (Final|Native|Public) // @ game+0x359bee0
	void SetButtonState(int32_t SkillEntityIndex, enum class ESkillButtonState State); // Function GPGameplay.GPAbilityDataSystem.SetButtonState // (Final|Native|Public) // @ game+0x359be20
	void Rep_SkillLogicState3P(int32_t SkillEntityIndex, struct FSkillEntityState3P& State); // Function GPGameplay.GPAbilityDataSystem.Rep_SkillLogicState3P // (Final|Native|Public|HasOutParms) // @ game+0x359bbe0
	void Rep_SkillLogicState(int32_t SkillEntityIndex, struct FSkillEntityState& State); // Function GPGameplay.GPAbilityDataSystem.Rep_SkillLogicState // (Final|Native|Public|HasOutParms) // @ game+0x359bd00
	void RemoveRelativeWeapon(int32_t SkillEntityIndex, struct FSkillDataRow& DataRow); // Function GPGameplay.GPAbilityDataSystem.RemoveRelativeWeapon // (Final|Native|Public|HasOutParms) // @ game+0x359bad0
	void RemoveRelativeBuff(struct AGPCharacter* CHARACTER, struct FSkillDataRow& DataRow); // Function GPGameplay.GPAbilityDataSystem.RemoveRelativeBuff // (Final|Native|Public|HasOutParms) // @ game+0x359b9c0
	void RemoveGamePlayFeature(int32_t SkillEntityIndex, struct FSkillDataRow& DataRow); // Function GPGameplay.GPAbilityDataSystem.RemoveGamePlayFeature // (Native|Public|HasOutParms) // @ game+0x359b8b0
	void ReAddRelativeWeapon(int32_t SkillEntityIndex, struct FSkillDataRow& DataRow); // Function GPGameplay.GPAbilityDataSystem.ReAddRelativeWeapon // (Final|Native|Public|HasOutParms) // @ game+0x359b7a0
	void PreSetAbilityMask(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityDataSystem.PreSetAbilityMask // (Final|Native|Public) // @ game+0x359b720
	void PreSetAbilityFireMask(int32_t SkillEntityIndex, enum class EGPWeaponInnerEvent WeaponEvent); // Function GPGameplay.GPAbilityDataSystem.PreSetAbilityFireMask // (Final|Native|Public) // @ game+0x359b660
	void OnSkillRTTTimeOut(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityDataSystem.OnSkillRTTTimeOut // (Final|Native|Public) // @ game+0x359b560
	void OnSkillFireRTTTimeOut(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityDataSystem.OnSkillFireRTTTimeOut // (Final|Native|Public) // @ game+0x359b4e0
	void OnSkillEntityInstnaceClassLoaded(/*struct FSoftObjectPath& SoftObjectPath, struct TSoftClassPtr<UObject> SkillEntityInstanceeClass, int32_t SkillId, int32_t SkillEntityIndex, int32_t SkillEntityID*/); // Function GPGameplay.GPAbilityDataSystem.OnSkillEntityInstnaceClassLoaded // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x359b220
	void OnIconLoaded(struct FSoftObjectPath& Path, int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityDataSystem.OnIconLoaded // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x359b100
	void OnExcuteCount(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityDataSystem.OnExcuteCount // (Final|Native|Public) // @ game+0x359af80
	void OnAbilityGameStateInit(); // Function GPGameplay.GPAbilityDataSystem.OnAbilityGameStateInit // (Final|Native|Public) // @ game+0x359af60
	void OnAbilityEntityTemplateLoad(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityDataSystem.OnAbilityEntityTemplateLoad // (Final|Native|Public) // @ game+0x359aee0
	bool NeedUpdate(struct FSkillLogicStateBit& ClientSkillLogicStateBit, struct TArray<char>& NodeEnterBit); // Function GPGameplay.GPAbilityDataSystem.NeedUpdate // (Final|Native|Public|HasOutParms) // @ game+0x359ad80
	void InitSkillLockAbilitys(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityDataSystem.InitSkillLockAbilitys // (Final|Native|Public) // @ game+0x359ad00
	void InitAbilityTemplate(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityDataSystem.InitAbilityTemplate // (Final|Native|Public) // @ game+0x359ac80
	void InitAbilityData(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityDataSystem.InitAbilityData // (Native|Public) // @ game+0x359abf0
	void InitAbilityCD(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityDataSystem.InitAbilityCD // (Final|Native|Public) // @ game+0x359ab70
	void InitAbilityAudio(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityDataSystem.InitAbilityAudio // (Final|Native|Public) // @ game+0x359aaf0
	void GiveSameSkill(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityDataSystem.GiveSameSkill // (Native|Public) // @ game+0x359aa60
	enum class ESkillUIState GetSkillUIState(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityDataSystem.GetSkillUIState // (Final|Native|Public) // @ game+0x359a940
	bool GetSkillButtonVisible(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityDataSystem.GetSkillButtonVisible // (Final|Native|Public) // @ game+0x359a720
	struct FSoftObjectPath GetPathByState(int32_t SkillId, enum class ESkillButtonState State); // Function GPGameplay.GPAbilityDataSystem.GetPathByState // (Final|Native|Public|HasDefaults) // @ game+0x359a5b0
	struct UGPAbilityGameStateComponent* GetGSComponent(); // Function GPGameplay.GPAbilityDataSystem.GetGSComponent // (Final|Native|Public) // @ game+0x359a560
	void EndSkillReplaceFireImage(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityDataSystem.EndSkillReplaceFireImage // (Final|Native|Public) // @ game+0x359a350
	void EndSkillReplaceFire(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityDataSystem.EndSkillReplaceFire // (Final|Native|Public) // @ game+0x359a2d0
	void CreateAbilityTemplate(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityDataSystem.CreateAbilityTemplate // (Final|Native|Public) // @ game+0x359a250
	void CreateAbilityInstance(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityDataSystem.CreateAbilityInstance // (Final|Native|Public) // @ game+0x359a1d0
	void AddRelativeWeapon(int32_t SkillEntityIndex, struct FSkillDataRow& DataRow); // Function GPGameplay.GPAbilityDataSystem.AddRelativeWeapon // (Final|Native|Public|HasOutParms) // @ game+0x359a0c0
	void AddRelativeBuff(struct AGPCharacter* CHARACTER, struct FSkillDataRow& DataRow); // Function GPGameplay.GPAbilityDataSystem.AddRelativeBuff // (Final|Native|Public|HasOutParms) // @ game+0x3599fb0
	void AddGamePlayFeature(int32_t SkillEntityIndex, struct FSkillDataRow& DataRow); // Function GPGameplay.GPAbilityDataSystem.AddGamePlayFeature // (Native|Public|HasOutParms) // @ game+0x3599ea0
	void AddClientExcuteCount(int32_t SkillEntityIndex, int32_t LogicID); // Function GPGameplay.GPAbilityDataSystem.AddClientExcuteCount // (Final|Native|Public) // @ game+0x3599de0
	void AbilityDataRemoveFromParent(int32_t SkillEntityIndex); // Function GPGameplay.GPAbilityDataSystem.AbilityDataRemoveFromParent // (Native|Public) // @ game+0x3599d50
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPMovementActorChannel
// Size: 0x318 (Inherited: 0x2b8)
class UGPMovementActorChannel : public UGPActorChannel {
public:

	char pad_2B8[0x60]; // 0x2b8(0x60)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAIAnimInstance_Locomotion
// Size: 0xeb0 (Inherited: 0x290)
class UGPAIAnimInstance_Locomotion : public UGPAnimInstance_LocomotionBase {
public:

	struct FGPAIAnimInstanceProxy_Locomotion AnimInstanceProxy; // 0x290(0x9d0)
	struct FGPAnimProxyConfiguration AnimProxyConfig; // 0xc60(0x28)
	bool NeedUpdateAnimationAsset; // 0xc88(0x01)
	bool NeedUpdateAIAnimationAsset; // 0xc89(0x01)
	char pad_C8A[0x6]; // 0xc8a(0x06)
	struct FAnimInstanceAttributeDict AttrDicts; // 0xc90(0x1e0)
	struct UAnimSequence* DefaultIdlePose; // 0xe70(0x08)
	struct UBlendSpaceBase* DefaultMoveBS; // 0xe78(0x08)
	struct UAnimSequence* DefaultMovingLoopAnim; // 0xe80(0x08)
	int32_t AnimLODLevel; // 0xe88(0x04)
	char pad_E8C[0x4]; // 0xe8c(0x04)
	struct UGPAnimProxyComponent* AnimProxyComponent; // 0xe90(0x08)
	char pad_E98[0x8]; // 0xe98(0x08)
	struct AGPCharacter* OwnerPawn; // 0xea0(0x08)
	char pad_EA8[0x8]; // 0xea8(0x08)

	void TriggerStop(int32_t Stage); // Function GPGameplay.GPAIAnimInstance_Locomotion.TriggerStop // (Final|Native|Public|BlueprintCallable) // @ game+0x35a3a90
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimInstance_Locomotion
// Size: 0x19c0 (Inherited: 0x290)
class UGPAnimInstance_Locomotion : public UGPAnimInstance_LocomotionBase {
public:

	struct FGPAnimInstanceProxy_Locomotion AnimInstanceProxy; // 0x290(0x1470)
	struct FGPAnimProxyConfiguration AnimProxyConfig; // 0x1700(0x28)
	bool NeedUpdateAnimationAsset; // 0x1728(0x01)
	bool NeedUpdateAIAnimationAsset; // 0x1729(0x01)
	char pad_172A[0x6]; // 0x172a(0x06)
	struct TArray<float> FirstStepDistances; // 0x1730(0x10)
	struct TArray<float> FirstStepTransitionDistances; // 0x1740(0x10)
	struct TArray<struct UAnimSequence*> AnimPivotSequences; // 0x1750(0x10)
	bool TPPNeed8DirStarting; // 0x1760(0x01)
	char pad_1761[0x7]; // 0x1761(0x07)
	struct FAnimInstanceAttributeDict AttrDicts; // 0x1768(0x1e0)
	struct UAnimSequence* DefaultIdlePose; // 0x1948(0x08)
	struct UBlendSpaceBase* DefaultMoveBS; // 0x1950(0x08)
	struct UBlendSpaceBase* DefaultLeisureMoveBS; // 0x1958(0x08)
	struct UBlendSpaceBase* DefaultJumpStartBS; // 0x1960(0x08)
	struct UBlendSpaceBase* DefaultJumpFallingBS; // 0x1968(0x08)
	struct UBlendSpaceBase* DefaultJumpLandBS; // 0x1970(0x08)
	struct UAnimSequence* DefaultJumpLandAnim; // 0x1978(0x08)
	bool CanProgramStop; // 0x1980(0x01)
	bool bIsKeepingPoseJump; // 0x1981(0x01)
	char pad_1982[0x2]; // 0x1982(0x02)
	int32_t AnimLODLevel; // 0x1984(0x04)
	struct UGPAnimProxyComponent* AnimProxyComponent; // 0x1988(0x08)
	bool bPoseModifiedDuringThrowable; // 0x1990(0x01)
	char pad_1991[0x3]; // 0x1991(0x03)
	float NormalizedSpeed; // 0x1994(0x04)
	char pad_1998[0x8]; // 0x1998(0x08)
	struct AGPCharacter* OwnerPawn; // 0x19a0(0x08)
	char pad_19A8[0x8]; // 0x19a8(0x08)
	struct UGPAnimDataComponent* AnimDataComponent; // 0x19b0(0x08)
	char pad_19B8[0x8]; // 0x19b8(0x08)

	void TriggerStop(int32_t Stage); // Function GPGameplay.GPAnimInstance_Locomotion.TriggerStop // (Final|Native|Public|BlueprintCallable) // @ game+0x35a9690
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAIBaseMarkerItem
// Size: 0x580 (Inherited: 0x438)
class UGPAIBaseMarkerItem : public UGPMarkerItemBase {
public:

	char pad_438[0x78]; // 0x438(0x78)
	float CharLocDistThreshold; // 0x4b0(0x04)
	struct FName SocketName; // 0x4b4(0x08)
	struct FVector SocketWorldLocationOffset; // 0x4bc(0x0c)
	struct FVector ActorLocWorldLocationOffset; // 0x4c8(0x0c)
	float DefaultLastTime; // 0x4d4(0x04)
	struct TMap<enum class EAICharacterTag, struct FAIBaseTypeConfig> AIBaseTypeConfigMap; // 0x4d8(0x50)
	struct TMap<enum class EDFMGamePlayMode, struct FAIBaseMarkerUpdateCampConfig> AIBaseMarkerRuleConfigMap; // 0x528(0x50)
	char pad_578[0x8]; // 0x578(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAIWarnMarkerItem
// Size: 0x570 (Inherited: 0x438)
class UGPAIWarnMarkerItem : public UGPMarkerItemBase {
public:

	char pad_438[0x68]; // 0x438(0x68)
	float DefaultLastTime; // 0x4a0(0x04)
	float CharLocDistThreshold; // 0x4a4(0x04)
	struct FName SocketName; // 0x4a8(0x08)
	struct FVector SocketWorldLocationOffset; // 0x4b0(0x0c)
	struct FVector ActorLocWorldLocationOffset; // 0x4bc(0x0c)
	struct TMap<enum class EAICharacterTag, struct FAIWarnTypeConfig> AIWarnTypeConfigMap; // 0x4c8(0x50)
	struct TMap<enum class EDFMGamePlayMode, struct FAIWarnMarkerUpdateCampConfig> AIWarnMarkerRuleConfigMap; // 0x518(0x50)
	char pad_568[0x8]; // 0x568(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCharacterMarkerItemBase
// Size: 0x550 (Inherited: 0x438)
class UGPCharacterMarkerItemBase : public UGPMarkerItemBase {
public:

	char pad_438[0x90]; // 0x438(0x90)
	struct AGPPlayerState* MarkedCharacterPlayerState; // 0x4c8(0x08)
	struct AGPCharacter* MarkedCharacter; // 0x4d0(0x08)
	char pad_4D8[0x4]; // 0x4d8(0x04)
	float CharLocDistThreshold; // 0x4dc(0x04)
	struct FName SocketName; // 0x4e0(0x08)
	struct FVector SocketWorldLocationOffset; // 0x4e8(0x0c)
	struct FVector ActorLocWorldLocationOffset; // 0x4f4(0x0c)
	struct TMap<enum class EDFMGamePlayMode, struct FCharacterMarkerUpdateCampConfig> CharacterMarkerRuleConfigMap; // 0x500(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPDeathMarkerItem
// Size: 0x5a0 (Inherited: 0x438)
class UGPDeathMarkerItem : public UGPMarkerItemBase {
public:

	char pad_438[0x8]; // 0x438(0x08)
	struct AGPCharacter* MarkerOwnerCharacter; // 0x440(0x08)
	struct AGPPlayerState* MarkerOwnerPlayerState; // 0x448(0x08)
	char pad_450[0x88]; // 0x450(0x88)
	float SOLShowDeathIconSeconds; // 0x4d8(0x04)
	float CharLocDistThreshold; // 0x4dc(0x04)
	struct FName SocketName; // 0x4e0(0x08)
	struct FVector SocketWorldLocationOffset; // 0x4e8(0x0c)
	struct FVector ActorLocWorldLocationOffset; // 0x4f4(0x0c)
	struct TMap<enum class EDFMGamePlayMode, struct FCharacterMarkerUpdateCampConfig> CharacterMarkerRuleConfigMap; // 0x500(0x50)
	struct TMap<enum class EDFMGamePlayMode, struct FCharacterMarkerUpdateCampConfig> CharacterMarkerRuleConfigMapMarking; // 0x550(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPDetectorMarkItem
// Size: 0x560 (Inherited: 0x438)
class UGPDetectorMarkItem : public UGPMarkerItemBase {
public:

	char pad_438[0x70]; // 0x438(0x70)
	struct FName SocketName; // 0x4a8(0x08)
	struct FVector SocketWorldLocationOffset; // 0x4b0(0x0c)
	char pad_4BC[0x4]; // 0x4bc(0x04)
	struct TMap<struct FString, struct FEnemyEffectTypeConfig> EnemyEffectTypeConfigMap; // 0x4c0(0x50)
	struct TMap<enum class EDFMGamePlayMode, struct FEnemyEffectMarkerUpdateCampConfig> EnemyEffectMarkerRuleConfigMap; // 0x510(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPEnemyEffectMarkerItem
// Size: 0x560 (Inherited: 0x438)
class UGPEnemyEffectMarkerItem : public UGPMarkerItemBase {
public:

	char pad_438[0x68]; // 0x438(0x68)
	struct FName SocketName; // 0x4a0(0x08)
	struct FVector SocketWorldLocationOffset; // 0x4a8(0x0c)
	char pad_4B4[0x4]; // 0x4b4(0x04)
	struct TMap<struct FString, struct FEnemyEffectTypeConfig> EnemyEffectTypeConfigMap; // 0x4b8(0x50)
	struct TMap<enum class EDFMGamePlayMode, struct FEnemyEffectMarkerUpdateCampConfig> EnemyEffectMarkerRuleConfigMap; // 0x508(0x50)
	char pad_558[0x8]; // 0x558(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPTacticalEquipmentMarkerItem
// Size: 0x5c0 (Inherited: 0x438)
class UGPTacticalEquipmentMarkerItem : public UGPMarkerItemBase {
public:

	char pad_438[0x10]; // 0x438(0x10)
	struct AGPCharacter* OwnerCharacter; // 0x448(0x08)
	char pad_450[0x74]; // 0x450(0x74)
	bool bShow; // 0x4c4(0x01)
	char pad_4C5[0x3]; // 0x4c5(0x03)
	struct TMap<enum class ETacticalEquipmentMarkerType, struct FTacticalEquipTypeConfig> TacticalEquipTypeConfigMap; // 0x4c8(0x50)
	struct TMap<enum class EDFMGamePlayMode, struct FTacticalEquipMarkerUpdateCampConfig> TacticalEquipMarkerRuleConfigMap; // 0x518(0x50)
	struct TMap<enum class EDFMGamePlayMode, struct FTacticalEquipMarkerUpdateCampConfig> TacticalEquipMarkerRuleConfigMapMarking; // 0x568(0x50)
	bool bUseTeamMemberColor; // 0x5b8(0x01)
	char pad_5B9[0x7]; // 0x5b9(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPFriendMarkerItem
// Size: 0x560 (Inherited: 0x438)
class UGPFriendMarkerItem : public UGPMarkerItemBase {
public:

	char pad_438[0x8]; // 0x438(0x08)
	struct AGPCharacter* MarkerOwnerCharacter; // 0x440(0x08)
	struct AGPPlayerState* MarkerOwnerPlayerState; // 0x448(0x08)
	char pad_450[0x88]; // 0x450(0x88)
	float CharLocDistThreshold; // 0x4d8(0x04)
	struct FName SocketName; // 0x4dc(0x08)
	struct FVector SocketWorldLocationOffset; // 0x4e4(0x0c)
	struct FVector ActorLocWorldLocationOffset; // 0x4f0(0x0c)
	char pad_4FC[0x4]; // 0x4fc(0x04)
	struct TMap<enum class EDFMGamePlayMode, struct FCharacterMarkerUpdateCampConfig> CharacterMarkerRuleConfigMap; // 0x500(0x50)
	char pad_550[0x10]; // 0x550(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPImpendingDeathMarkerItem
// Size: 0x5a0 (Inherited: 0x438)
class UGPImpendingDeathMarkerItem : public UGPMarkerItemBase {
public:

	char pad_438[0x8]; // 0x438(0x08)
	struct AGPCharacter* MarkerOwnerCharacter; // 0x440(0x08)
	struct AGPPlayerState* MarkerOwnerPlayerState; // 0x448(0x08)
	char pad_450[0x84]; // 0x450(0x84)
	float CharLocDistThreshold; // 0x4d4(0x04)
	struct FName SocketName; // 0x4d8(0x08)
	struct FVector SocketWorldLocationOffset; // 0x4e0(0x0c)
	struct FVector ActorLocWorldLocationOffset; // 0x4ec(0x0c)
	struct TMap<enum class EDFMGamePlayMode, struct FCharacterMarkerUpdateCampConfig> CharacterMarkerRuleConfigMap; // 0x4f8(0x50)
	struct TMap<enum class EDFMGamePlayMode, struct FCharacterMarkerUpdateCampConfig> CharacterMarkerRuleConfigMapMarking; // 0x548(0x50)
	char pad_598[0x8]; // 0x598(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPInterActorMarkerItem
// Size: 0x5c0 (Inherited: 0x438)
class UGPInterActorMarkerItem : public UGPMarkerItemBase {
public:

	char pad_438[0x10]; // 0x438(0x10)
	struct AGPCharacter* OwnerCharacter; // 0x448(0x08)
	char pad_450[0x74]; // 0x450(0x74)
	bool bShow; // 0x4c4(0x01)
	char pad_4C5[0x3]; // 0x4c5(0x03)
	struct TMap<enum class EInteractorMarkerType, struct FTacticalEquipTypeConfig> TacticalEquipTypeConfigMap; // 0x4c8(0x50)
	struct TMap<enum class EDFMGamePlayMode, struct FTacticalEquipMarkerUpdateCampConfig> TacticalEquipMarkerRuleConfigMap; // 0x518(0x50)
	struct TMap<enum class EDFMGamePlayMode, struct FTacticalEquipMarkerUpdateCampConfig> TacticalEquipMarkerRuleConfigMapMarking; // 0x568(0x50)
	char pad_5B8[0x8]; // 0x5b8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPLaserPointerMarkItem
// Size: 0x570 (Inherited: 0x438)
class UGPLaserPointerMarkItem : public UGPMarkerItemBase {
public:

	char pad_438[0x2]; // 0x438(0x02)
	bool bIsFPP; // 0x43a(0x01)
	enum class EStingerMissileLockingState LockingState; // 0x43b(0x01)
	enum class EStingerMissileLockingState AudioState; // 0x43c(0x01)
	bool bIsRec; // 0x43d(0x01)
	char pad_43E[0x2]; // 0x43e(0x02)
	struct FVector2D LSOffset; // 0x440(0x08)
	bool bVehicleVisiable; // 0x448(0x01)
	bool bUseStingerVerPosUpdate; // 0x449(0x01)
	char pad_44A[0x6e]; // 0x44a(0x6e)
	struct FName SocketName; // 0x4b8(0x08)
	struct FVector SocketWorldLocationOffset; // 0x4c0(0x0c)
	char pad_4CC[0x4]; // 0x4cc(0x04)
	struct TMap<struct FString, struct FEnemyEffectTypeConfig> EnemyEffectTypeConfigMap; // 0x4d0(0x50)
	struct TMap<enum class EDFMGamePlayMode, struct FEnemyEffectMarkerUpdateCampConfig> EnemyEffectMarkerRuleConfigMap; // 0x520(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPMapMarkerItem
// Size: 0x438 (Inherited: 0x438)
class UGPMapMarkerItem : public UGPMarkerItemBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPlayerMarkerItemBase
// Size: 0x570 (Inherited: 0x438)
class UGPPlayerMarkerItemBase : public UGPMarkerItemBase {
public:

	float OuterRadius; // 0x438(0x04)
	float InnerRadius; // 0x43c(0x04)
	float CenterRadius; // 0x440(0x04)
	float InMiddle_OuterIconVisibleRatio; // 0x444(0x04)
	float InMiddle_OuterIconMinOpacity; // 0x448(0x04)
	float InMiddle_OuterIconMinScale; // 0x44c(0x04)
	float InMiddle_InnerIconVisibleRatio; // 0x450(0x04)
	float InMiddle_InnerIconMinOpacity; // 0x454(0x04)
	struct TMap<enum class EDFMGamePlayMode, struct FPlayerMarkerUpdateCampConfig> PlayerMarkerRuleConfigMap; // 0x458(0x50)
	char pad_4A8[0x90]; // 0x4a8(0x90)
	struct AGPCharacter* OwnerCharacter; // 0x538(0x08)
	uint64_t OwnerPlayerUin; // 0x540(0x08)
	char pad_548[0xc]; // 0x548(0x0c)
	float MarkTime; // 0x554(0x04)
	char pad_558[0x18]; // 0x558(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPQuestMarkerItem
// Size: 0x440 (Inherited: 0x438)
class UGPQuestMarkerItem : public UGPMarkerItemBase {
public:

	struct AGPQuestMarkerBase* QuestMarkerActor; // 0x438(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSceneWeaponMarkerItem
// Size: 0x5c8 (Inherited: 0x438)
class UGPSceneWeaponMarkerItem : public UGPMarkerItemBase {
public:

	char pad_438[0x20]; // 0x438(0x20)
	struct AGPCharacter* OwnerCharacter; // 0x458(0x08)
	char pad_460[0x78]; // 0x460(0x78)
	struct TMap<enum class ESceneWeaponMarkerType, struct FTacticalEquipTypeConfig> SceneWeaponTypeConfigMap; // 0x4d8(0x50)
	struct TMap<enum class EDFMGamePlayMode, struct FTacticalEquipMarkerUpdateCampConfig> TacticalEquipMarkerRuleConfigMap; // 0x528(0x50)
	struct TMap<enum class EDFMGamePlayMode, struct FTacticalEquipMarkerUpdateCampConfig> TacticalEquipMarkerRuleConfigMapMarking; // 0x578(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSectorAnchorMarkerItem
// Size: 0x440 (Inherited: 0x438)
class UGPSectorAnchorMarkerItem : public UGPMarkerItemBase {
public:

	char pad_438[0x8]; // 0x438(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPStingerMisslMarkItem
// Size: 0x560 (Inherited: 0x438)
class UGPStingerMisslMarkItem : public UGPMarkerItemBase {
public:

	char pad_438[0x70]; // 0x438(0x70)
	struct FName SocketName; // 0x4a8(0x08)
	struct FVector SocketWorldLocationOffset; // 0x4b0(0x0c)
	char pad_4BC[0x4]; // 0x4bc(0x04)
	struct TMap<struct FString, struct FEnemyEffectTypeConfig> EnemyEffectTypeConfigMap; // 0x4c0(0x50)
	struct TMap<enum class EDFMGamePlayMode, struct FEnemyEffectMarkerUpdateCampConfig> EnemyEffectMarkerRuleConfigMap; // 0x510(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSupportPackMarkerItem
// Size: 0x560 (Inherited: 0x438)
class UGPSupportPackMarkerItem : public UGPMarkerItemBase {
public:

	char pad_438[0x70]; // 0x438(0x70)
	struct FName SocketName; // 0x4a8(0x08)
	struct FVector SocketWorldLocationOffset; // 0x4b0(0x0c)
	char pad_4BC[0x4]; // 0x4bc(0x04)
	struct TMap<struct FString, struct FEnemyEffectTypeConfig> EnemyEffectTypeConfigMap; // 0x4c0(0x50)
	struct TMap<enum class EDFMGamePlayMode, struct FEnemyEffectMarkerUpdateCampConfig> EnemyEffectMarkerRuleConfigMap; // 0x510(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSupportWeaponMarkerItem
// Size: 0x560 (Inherited: 0x438)
class UGPSupportWeaponMarkerItem : public UGPMarkerItemBase {
public:

	char pad_438[0x70]; // 0x438(0x70)
	struct FName SocketName; // 0x4a8(0x08)
	struct FVector SocketWorldLocationOffset; // 0x4b0(0x0c)
	char pad_4BC[0x4]; // 0x4bc(0x04)
	struct TMap<struct FString, struct FEnemyEffectTypeConfig> EnemyEffectTypeConfigMap; // 0x4c0(0x50)
	struct TMap<enum class EDFMGamePlayMode, struct FEnemyEffectMarkerUpdateCampConfig> EnemyEffectMarkerRuleConfigMap; // 0x510(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSuppressionMineMarkerItem
// Size: 0x560 (Inherited: 0x438)
class UGPSuppressionMineMarkerItem : public UGPMarkerItemBase {
public:

	char pad_438[0x70]; // 0x438(0x70)
	struct FName SocketName; // 0x4a8(0x08)
	struct FVector SocketWorldLocationOffset; // 0x4b0(0x0c)
	char pad_4BC[0x4]; // 0x4bc(0x04)
	struct TMap<struct FString, struct FEnemyEffectTypeConfig> EnemyEffectTypeConfigMap; // 0x4c0(0x50)
	struct TMap<enum class EDFMGamePlayMode, struct FEnemyEffectMarkerUpdateCampConfig> EnemyEffectMarkerRuleConfigMap; // 0x510(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPTransferMarkerItem
// Size: 0x440 (Inherited: 0x438)
class UGPTransferMarkerItem : public UGPMarkerItemBase {
public:

	char pad_438[0x8]; // 0x438(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPVehicleMarkerItem
// Size: 0x6b0 (Inherited: 0x438)
class UGPVehicleMarkerItem : public UGPMarkerItemBase {
public:

	char pad_438[0xd0]; // 0x438(0xd0)
	struct TMap<enum class EAnimVehicleType, struct FVehicleTypeConfig> VehicleTypeConfigMap; // 0x508(0x50)
	float FindEnemyTankPassiveDistThreshold; // 0x558(0x04)
	char pad_55C[0x4]; // 0x55c(0x04)
	struct TMap<enum class EDFMGamePlayMode, struct FVehicleMarkerUpdateCampConfig> VehicleMarkerRuleConfigMap; // 0x560(0x50)
	struct TMap<enum class EDFMGamePlayMode, struct FVehicleMarkerUpdateCampConfig> VehicleMarkerRuleConfigMapMarking; // 0x5b0(0x50)
	struct TMap<enum class EDFMGamePlayMode, struct FVehicleMarkingCharacterVoiceConfig> VehicleMarkerRuleConfigMapMarkingConfig; // 0x600(0x50)
	char pad_650[0x50]; // 0x650(0x50)
	struct AGPVehicleBase* VehicleBase; // 0x6a0(0x08)
	char pad_6A8[0x8]; // 0x6a8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimDataComponent
// Size: 0x8b0 (Inherited: 0x108)
class UGPAnimDataComponent : public UGPNetworkActorComponent {
public:

	struct TMap<enum class EAnimHitPart, struct FName> HitAnims; // 0x108(0x50)
	struct TArray<int32_t> RecordLocalAnimsArray; // 0x158(0x10)
	struct TArray<struct UObject*> RecordCommonAnimObjArray; // 0x168(0x10)
	char pad_178[0x20]; // 0x178(0x20)
	struct FAnimDataManager AnimDataManager; // 0x198(0x50)
	struct UDataTable* AnimDataTablePtr; // 0x1e8(0x08)
	struct FAnimDataTableRow AnimDataTableRow; // 0x1f0(0x430)
	char pad_620[0x4]; // 0x620(0x04)
	struct FName AnimRowName; // 0x624(0x08)
	int32_t AnimLoadNumPerFrame; // 0x62c(0x04)
	bool bNeedLoadAnim; // 0x630(0x01)
	char pad_631[0x7]; // 0x631(0x07)
	struct UCharacterAnimDataObjectSingleton* CharacterAnimDataSin; // 0x638(0x08)
	struct TMap<int32_t, struct FOverrideAnimAssetArray> OverrideAnimDataMap; // 0x640(0x50)
	char pad_690[0x108]; // 0x690(0x108)
	struct TMap<struct FName, struct FRecordLocalAnimation> RecordWeaponAnimation; // 0x798(0x50)
	char pad_7E8[0xc8]; // 0x7e8(0xc8)

	void SwapThreadSafeWeaponAnimDataMap(); // Function GPGameplay.GPAnimDataComponent.SwapThreadSafeWeaponAnimDataMap // (Final|Native|Public) // @ game+0x35a3a70
	void OnWeaponEnableCheckUpdate(struct FName AnimId, bool IsFPP); // Function GPGameplay.GPAnimDataComponent.OnWeaponEnableCheckUpdate // (Final|Native|Public) // @ game+0x35a3920
	void OnCharacterAvatarChange(); // Function GPGameplay.GPAnimDataComponent.OnCharacterAvatarChange // (Native|Public) // @ game+0x35a3800
	struct UAnimationAsset* GetTacticalActionAnim(struct FName AnimName, bool bIsFPP, enum class EAnimTacticalActionType TacticalActionType); // Function GPGameplay.GPAnimDataComponent.GetTacticalActionAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35a36d0
	struct UAnimationAsset* GetRaiseWatchAnim(struct FName AnimName, bool bIsFPP, enum class EAnimRaiseWatchType RaiseWatchType); // Function GPGameplay.GPAnimDataComponent.GetRaiseWatchAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35a35c0
	struct UAnimationAsset* GetParachuteAnim(struct FName AnimName, bool bIsFPP, enum class EAnimParachuteType ParachuteType); // Function GPGameplay.GPAnimDataComponent.GetParachuteAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35a34b0
	struct UAnimationAsset* GetMarkingAnim(struct FName AnimName, bool bIsFPP, enum class EAnimMarkingType MarkingType); // Function GPGameplay.GPAnimDataComponent.GetMarkingAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35a33a0
	struct UAnimationAsset* GetFirefightingAnim(struct FName AnimName, bool bIsFPP, enum class EAnimFirefightingType FirefightingType); // Function GPGameplay.GPAnimDataComponent.GetFirefightingAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35a3290
	struct UAnimationAsset* GetCustomAnim(struct FName AnimName, bool bIsFPP); // Function GPGameplay.GPAnimDataComponent.GetCustomAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35a30f0
	struct UAnimationAsset* GetClimbLadderAnim(struct FName AnimName, bool bIsFPP, enum class EAnimClimbLadderType ClimbLadderType); // Function GPGameplay.GPAnimDataComponent.GetClimbLadderAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35a2fe0
	struct UAnimationAsset* GetCarryBodyAnim(struct FName AnimName, bool bIsFPP, enum class EAnimCarryBodyType CarryBodyAnimType); // Function GPGameplay.GPAnimDataComponent.GetCarryBodyAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35a2ed0
	struct UAnimationAsset* GetBunkerAnim(struct FName AnimName, bool bIsFPP, enum class EAnimBunkerType BunkerTyep); // Function GPGameplay.GPAnimDataComponent.GetBunkerAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35a2dc0
	struct UAnimationAsset* GetApplySprayAnim(struct FName AnimName, bool bIsFPP, enum class EAnimApplySprayType ApplySprayType); // Function GPGameplay.GPAnimDataComponent.GetApplySprayAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35a2cb0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimProxyBaseComponent
// Size: 0x480 (Inherited: 0x108)
class UGPAnimProxyBaseComponent : public UGPNetworkActorComponent {
public:

	char pad_108[0x8]; // 0x108(0x08)
	float HeadHitDuration; // 0x110(0x04)
	float UpperBodyHitDuration; // 0x114(0x04)
	float LegHitDuration; // 0x118(0x04)
	float FractionCanInterruptHitAnim; // 0x11c(0x04)
	char pad_120[0x14]; // 0x120(0x14)
	struct FRepTurningInfo TurningInfo; // 0x134(0x0c)
	bool bIsTurning; // 0x140(0x01)
	char pad_141[0x3]; // 0x141(0x03)
	struct FRotator TargetRotation; // 0x144(0x0c)
	struct FRotator StartPawnRotation; // 0x150(0x0c)
	float startTurningTime; // 0x15c(0x04)
	float startTurningTimeRep; // 0x160(0x04)
	struct FVector2D ViewAngleRange; // 0x164(0x08)
	struct FVector2D TurningInterSpeedScale; // 0x16c(0x08)
	float MaxTurningAngle; // 0x174(0x04)
	float CurrentTurningSpeedScale; // 0x178(0x04)
	char pad_17C[0x4]; // 0x17c(0x04)
	struct FName TurningAnimCurveName; // 0x180(0x08)
	struct FRotator LastTargetRotation; // 0x188(0x0c)
	char pad_194[0x10]; // 0x194(0x10)
	float TriggerTurnAngle; // 0x1a4(0x04)
	struct UCurveFloat* NormalizedTurnSpeedCurve; // 0x1a8(0x08)
	float TurnInterpToSpeed; // 0x1b0(0x04)
	float TurnSppedInterpToSpeed; // 0x1b4(0x04)
	float MaxTurnSpeedRatio; // 0x1b8(0x04)
	float TurnInterpMaxConstantSpeedAcc; // 0x1bc(0x04)
	float TurnInterpMaxConstantSpeed; // 0x1c0(0x04)
	char TurnInfoValue; // 0x1c4(0x01)
	char pad_1C5[0x3]; // 0x1c5(0x03)
	float TurnInterpSpeed; // 0x1c8(0x04)
	char pad_1CC[0x4]; // 0x1cc(0x04)
	struct UAnimSequence* TurnLeftAnimationTPP; // 0x1d0(0x08)
	struct UAnimSequence* TurnRightAnimationTPP; // 0x1d8(0x08)
	struct FName Socket_EyesName; // 0x1e0(0x08)
	struct FName Socket_BipName; // 0x1e8(0x08)
	struct FName Socket_HipsName; // 0x1f0(0x08)
	float SpineLookAtClamp; // 0x1f8(0x04)
	float HeadLookAtClamp; // 0x1fc(0x04)
	float SpineAlpha; // 0x200(0x04)
	float Spine1Alpha; // 0x204(0x04)
	float Spine2Alpha; // 0x208(0x04)
	float NeckAlpha; // 0x20c(0x04)
	float HeadAlpha; // 0x210(0x04)
	float LookAtAnimInterpolationTime; // 0x214(0x04)
	struct FName UpperBodyIKCurveName; // 0x218(0x08)
	struct FName LeftHandIKCurveName; // 0x220(0x08)
	struct FName RightHandIKCurveName; // 0x228(0x08)
	struct FName HandIKCurveName; // 0x230(0x08)
	bool bDrawDebugFootIK; // 0x238(0x01)
	char pad_239[0x3]; // 0x239(0x03)
	struct FName FootIKCurveName; // 0x23c(0x08)
	struct FVector MinFootOffsetLimit; // 0x244(0x0c)
	struct FVector MaxFootOffsetLimit; // 0x250(0x0c)
	struct FName LeftFootSocket; // 0x25c(0x08)
	struct FName RightFootSocket; // 0x264(0x08)
	float FootTraceLengthAbove; // 0x26c(0x04)
	float FootTraceLengthBelow; // 0x270(0x04)
	float FootZOffsetInterpSpeed; // 0x274(0x04)
	float FootRotOffsetInterpSpeed; // 0x278(0x04)
	bool bIsKnockOff; // 0x27c(0x01)
	bool bEnableKnockOffSnapShot; // 0x27d(0x01)
	bool bIsResetCachePose; // 0x27e(0x01)
	char pad_27F[0x1]; // 0x27f(0x01)
	struct FTransform LeftHandIKAimTm; // 0x280(0x30)
	float LeftHandIKBlendTime; // 0x2b0(0x04)
	float LeftHandIKEndTimeStamp; // 0x2b4(0x04)
	struct FVector MeshComponentLocationDefault; // 0x2b8(0x0c)
	struct FRotator MeshComponentRotationDefault; // 0x2c4(0x0c)
	bool bShowDebugMessage; // 0x2d0(0x01)
	char pad_2D1[0x7]; // 0x2d1(0x07)
	struct UAnimSequenceBase* CurrentPlayingAnimation; // 0x2d8(0x08)
	char pad_2E0[0x8]; // 0x2e0(0x08)
	bool bUseLeftHand; // 0x2e8(0x01)
	bool bRightHandWeapon; // 0x2e9(0x01)
	char pad_2EA[0x2]; // 0x2ea(0x02)
	struct FVector InputVector; // 0x2ec(0x0c)
	char pad_2F8[0x18]; // 0x2f8(0x18)
	struct USkeletalMeshComponent* AnimSkeletalMeshComp; // 0x310(0x08)
	struct USkeletalMeshComponent* AnimSkeletalMeshCompFPP; // 0x318(0x08)
	struct TArray<struct USkeletalMeshComponent*> AllMesh; // 0x320(0x10)
	struct TMap<struct FName, struct FAnimMontageBlending> AnimMontageBlendingList; // 0x330(0x50)
	struct AGPCharacterBase* GPOwner; // 0x380(0x08)
	char pad_388[0x4]; // 0x388(0x04)
	struct FGameplayTag CurrentMoveStanceTag; // 0x38c(0x08)
	char pad_394[0x4]; // 0x394(0x04)
	struct FRepAnimInfo RepAnimInfo; // 0x398(0x28)
	struct FRepAnimInfo RepAnimInfoExceptOwner; // 0x3c0(0x28)
	char pad_3E8[0x38]; // 0x3e8(0x38)
	struct TArray<struct FAIPhysBlendInfo> PhysBlendInfoList; // 0x420(0x10)
	char pad_430[0x2c]; // 0x430(0x2c)
	float BlendDeathPhysicsTime; // 0x45c(0x04)
	char pad_460[0x8]; // 0x460(0x08)
	struct FVector HipsLocation; // 0x468(0x0c)
	struct FRotator HipsRotation; // 0x474(0x0c)

	void UpdateRotateMode(float DeltaTime); // Function GPGameplay.GPAnimProxyBaseComponent.UpdateRotateMode // (Native|Public|BlueprintCallable) // @ game+0x227de30
	void TurnOnPhysics(struct FName StartBoneName, struct FName PhysAnimProfileName, float InitBlendAlpha); // Function GPGameplay.GPAnimProxyBaseComponent.TurnOnPhysics // (Final|Native|Public) // @ game+0x35af720
	void TurnOffPhysics(); // Function GPGameplay.GPAnimProxyBaseComponent.TurnOffPhysics // (Final|Native|Public) // @ game+0x35af700
	void TakeDeathSnapShot(bool InUseAnimationPose); // Function GPGameplay.GPAnimProxyBaseComponent.TakeDeathSnapShot // (Native|Public|BlueprintCallable) // @ game+0x21b3610
	void StopSlotAnim(enum class EAnimationPlayType PlayType, float blendOut); // Function GPGameplay.GPAnimProxyBaseComponent.StopSlotAnim // (Native|Public|BlueprintCallable) // @ game+0x35af640
	void StartDying(); // Function GPGameplay.GPAnimProxyBaseComponent.StartDying // (Final|Native|Public) // @ game+0x35af620
	void SetMoveStance(struct FGameplayTag NewMoveStanceTag); // Function GPGameplay.GPAnimProxyBaseComponent.SetMoveStance // (Final|Native|Public|BlueprintCallable) // @ game+0x35af5a0
	void SetMontageWarpTargetSpeedLimit(struct FName WarpPointName, float InVelLimitation); // Function GPGameplay.GPAnimProxyBaseComponent.SetMontageWarpTargetSpeedLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x35af4e0
	void SetMontageWarpTargetScale(struct FName WarpPointName, struct FVector TargetScale); // Function GPGameplay.GPAnimProxyBaseComponent.SetMontageWarpTargetScale // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x35af410
	void SetMontageWarpTarget(struct FName WarpPointName, struct FVector WarpTarget); // Function GPGameplay.GPAnimProxyBaseComponent.SetMontageWarpTarget // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x35af340
	void SetFppSprintAnimPlayingRate(float Speed); // Function GPGameplay.GPAnimProxyBaseComponent.SetFppSprintAnimPlayingRate // (Final|Native|Public|BlueprintCallable) // @ game+0x35af2c0
	void ServerStopMontage(struct UAnimMontage* InAnimMontage, bool bIncludeOwner); // Function GPGameplay.GPAnimProxyBaseComponent.ServerStopMontage // (Native|Public|BlueprintCallable) // @ game+0x35af1f0
	float ServerPlayAnimaiton(struct UAnimSequenceBase* AnimSequence, enum class EAnimationPlayType AnimPlayType, struct FName StartSection, float PlayRate, bool bStopAllMontage, bool bIncludeOwner); // Function GPGameplay.GPAnimProxyBaseComponent.ServerPlayAnimaiton // (Native|Public|BlueprintCallable) // @ game+0x35af030
	float ServerMontageJumpToSection(struct UAnimMontage* InAnimMontage, struct FName& NewSectionName, bool bIncludeOwner); // Function GPGameplay.GPAnimProxyBaseComponent.ServerMontageJumpToSection // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x35aef10
	void ServerInputVector(struct FVector InInputVector); // Function GPGameplay.GPAnimProxyBaseComponent.ServerInputVector // (Net|Native|Event|Protected|NetServer|HasDefaults|NetValidate) // @ game+0x35aee60
	void Rep_TurningInfo(); // Function GPGameplay.GPAnimProxyBaseComponent.Rep_TurningInfo // (Final|Native|Protected) // @ game+0x35aee40
	void Rep_StartTurningTimeRep(); // Function GPGameplay.GPAnimProxyBaseComponent.Rep_StartTurningTimeRep // (Final|Native|Protected) // @ game+0x35aee20
	void PreActive(int64_t InActiveWeaponId, bool IsFppWeapon); // Function GPGameplay.GPAnimProxyBaseComponent.PreActive // (Native|Public) // @ game+0x35aed50
	void PlayHitReactPhysix(struct FName hitBone, struct FVector hitDir, struct FVector HitLocation, bool bWithHitLocation); // Function GPGameplay.GPAnimProxyBaseComponent.PlayHitReactPhysix // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x35aebd0
	void PlayEndEquip(int64_t WeaponID, bool IsFppWeapon, float TimeToStartAnimAt, struct UAnimSequenceBase* InactiveSeq, float PlayRate, bool NeedInActiveAnim, float InBlendInTime, float InBlendOutTime); // Function GPGameplay.GPAnimProxyBaseComponent.PlayEndEquip // (Native|Public) // @ game+0x35ae980
	bool PlayDeathPhysix(struct FName SimulateRootBoneName, struct FName HipBoneName, float SimulateTime, float FrameDeltaTime, bool bEnableRootBodyGravity, bool hasBlend); // Function GPGameplay.GPAnimProxyBaseComponent.PlayDeathPhysix // (Native|Public|BlueprintCallable) // @ game+0x35ae7c0
	struct UAnimMontage* PlayCharacterThreeAnimSequenceInner(struct UAnimSequenceBase* AnimStart, struct UAnimSequenceBase* AnimLoop, struct UAnimSequenceBase* AnimEnd, struct UAnimInstance* LocalAnimInstance, float LoopTime, enum class EAnimationPlayType AnimPlayType, float RateOverride, float BlendInOverride, float BlendOutOverride); // Function GPGameplay.GPAnimProxyBaseComponent.PlayCharacterThreeAnimSequenceInner // (Native|Public|BlueprintCallable) // @ game+0x35ae540
	struct UAnimInstance* PlayCharacterMontage(struct UAnimMontage* MontageToPlay, bool IsFPP, struct FName StartSectionName, float InPlayRate); // Function GPGameplay.GPAnimProxyBaseComponent.PlayCharacterMontage // (Native|Public|BlueprintCallable) // @ game+0x35ae3f0
	struct UAnimMontage* PlayCharacterLoopAtEndAnimSequenceInner(struct UAnimSequenceBase* AnimStart, struct UAnimInstance* LocalAnimInstance, float LoopTime, float LastStartTime, enum class EAnimationPlayType AnimPlayType, float RateOverride, float BlendInOverride, float BlendOutOverride); // Function GPGameplay.GPAnimProxyBaseComponent.PlayCharacterLoopAtEndAnimSequenceInner // (Native|Public|BlueprintCallable) // @ game+0x35ae1b0
	struct UAnimMontage* PlayCharacterLoopAnimSequenceInner(struct TArray<struct UAnimSequenceBase*> AnimToPlayList, struct UAnimInstance* LocalAnimInstance, enum class EAnimationPlayType AnimPlayType, float RateOverride, float BlendInOverride, float BlendOutOverride, int32_t LoopCount, float TimeToStartAnimAt, int32_t AnimId, float DestAnimLength, int32_t LoopSectionIndex); // Function GPGameplay.GPAnimProxyBaseComponent.PlayCharacterLoopAnimSequenceInner // (Native|Public|BlueprintCallable) // @ game+0x35ade10
	struct UAnimMontage* PlayCharacterAnimSequenceWithRetInner(struct UAnimSequenceBase* AnimToPlay, struct UAnimInstance* LocalAnimInstance, enum class EAnimationPlayType AnimPlayType, float RateOverride, float BlendInOverride, float BlendOutOverride, int32_t LoopCount, float TimeToStartAnimAt, int32_t AnimId, bool bStopAllMontage, struct FName SectionName, float DestAnimLength, bool bEnableAutoBlendOut, bool AddEndSection); // Function GPGameplay.GPAnimProxyBaseComponent.PlayCharacterAnimSequenceWithRetInner // (Native|Public|BlueprintCallable) // @ game+0x35ada40
	struct UAnimMontage* PlayCharacterAnimSequenceByXPP(bool IsFPP, struct UAnimSequenceBase* AnimToPlay, enum class EAnimationPlayType AnimPlayType, float RateOverride, float BlendInOverride, float BlendOutOverride, int32_t LoopCount, float TimeToStartAnimAt, int32_t AnimId, bool bStopAllMontage, struct FName SectionName, float DestAnimLength, bool AddEndSection); // Function GPGameplay.GPAnimProxyBaseComponent.PlayCharacterAnimSequenceByXPP // (Final|Native|Public|BlueprintCallable) // @ game+0x35ad6b0
	struct UAnimMontage* PlayCharacterAnimSequence(struct UAnimSequenceBase* AnimToPlay, enum class EAnimationPlayType AnimPlayType, float RateOverride, float BlendInOverride, float BlendOutOverride, int32_t LoopCount, float TimeToStartAnimAt, int32_t AnimId, bool bStopAllMontage, struct FName SectionName, float DestAnimLength); // Function GPGameplay.GPAnimProxyBaseComponent.PlayCharacterAnimSequence // (Final|Native|Public|BlueprintCallable) // @ game+0x35ad3a0
	void OnWeaponDetach(int64_t WeaponID, bool IsFppWeapon); // Function GPGameplay.GPAnimProxyBaseComponent.OnWeaponDetach // (Native|Public) // @ game+0x35ad2d0
	void OnWeaponAttach(int64_t WeaponID, bool IsFppWeapon); // Function GPGameplay.GPAnimProxyBaseComponent.OnWeaponAttach // (Native|Public) // @ game+0x35ad200
	void OnSkeletalMeshComponentHit(struct FName& MyBoneName); // Function GPGameplay.GPAnimProxyBaseComponent.OnSkeletalMeshComponentHit // (Final|Native|Public|HasOutParms) // @ game+0x35ad170
	void OnRep_ReplicatedAnimInfoExceptOwner(); // Function GPGameplay.GPAnimProxyBaseComponent.OnRep_ReplicatedAnimInfoExceptOwner // (Native|Public) // @ game+0x35ad150
	void OnRep_ReplicatedAnimInfo(); // Function GPGameplay.GPAnimProxyBaseComponent.OnRep_ReplicatedAnimInfo // (Native|Public) // @ game+0x22b8910
	void NotifyPhysicsSkeletalMeshHit(struct FName& MyBoneName); // Function GPGameplay.GPAnimProxyBaseComponent.NotifyPhysicsSkeletalMeshHit // (Final|Native|Public|HasOutParms) // @ game+0x35ad0c0
	bool IsVaulting(); // Function GPGameplay.GPAnimProxyBaseComponent.IsVaulting // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35ad090
	void InnerSnapShotPhysDying(); // Function GPGameplay.GPAnimProxyBaseComponent.InnerSnapShotPhysDying // (Final|Native|Protected) // @ game+0x35ad050
	void InnerSnapshotDyingPose(); // Function GPGameplay.GPAnimProxyBaseComponent.InnerSnapshotDyingPose // (Final|Native|Protected) // @ game+0x35ad070
	struct FGameplayTag GetMoveStance(); // Function GPGameplay.GPAnimProxyBaseComponent.GetMoveStance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35ad010
	void GetFootOffset(bool bLeftFoot, struct FVector& FootOffset); // Function GPGameplay.GPAnimProxyBaseComponent.GetFootOffset // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x35acf30
	void EndDying(); // Function GPGameplay.GPAnimProxyBaseComponent.EndDying // (Final|Native|Public) // @ game+0x35acf10
	bool CheckPlayInactive(int64_t WeaponID, bool IsFppWeapon, struct UAnimSequenceBase* InactiveSeq); // Function GPGameplay.GPAnimProxyBaseComponent.CheckPlayInactive // (Native|Public) // @ game+0x35ace00
	void CachePhysixBonesTransformMap(); // Function GPGameplay.GPAnimProxyBaseComponent.CachePhysixBonesTransformMap // (Native|Public|BlueprintCallable) // @ game+0x21b1c40
	void AddPhysBlendInfo(struct FName InBoneName, float InBlendTime, float InitBlendValue, float InBlendOutStartTime); // Function GPGameplay.GPAnimProxyBaseComponent.AddPhysBlendInfo // (Final|Native|Public) // @ game+0x35accb0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPNetworkComponent
// Size: 0x120 (Inherited: 0x108)
class UGPNetworkComponent : public UGPNetworkActorComponent {
public:

	bool bDataboardIsInited; // 0x108(0x01)
	bool IsStandalone; // 0x109(0x01)
	bool IsServer; // 0x10a(0x01)
	bool isAutonomous; // 0x10b(0x01)
	bool isSimulated; // 0x10c(0x01)
	bool isLocalFocus; // 0x10d(0x01)
	bool isLocalPlayerPawn; // 0x10e(0x01)
	bool isAutonomousOrServer; // 0x10f(0x01)
	bool IsClient; // 0x110(0x01)
	bool IsReplayPlaying; // 0x111(0x01)
	char pad_112[0x6]; // 0x112(0x06)
	struct AActor* GPActor; // 0x118(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCameraModeComponent
// Size: 0x240 (Inherited: 0x108)
class UGPCameraModeComponent : public UGPNetworkActorComponent {
public:

	enum class EGPCharacterCameraModeType DefaultCameraMode; // 0x108(0x01)
	char pad_109[0x17]; // 0x109(0x17)
	bool IsSimulatedUnderFPP; // 0x120(0x01)
	bool bUnderFPPMode; // 0x121(0x01)
	bool LocalIsUnderFPPMode; // 0x122(0x01)
	bool bAfterLanding; // 0x123(0x01)
	bool bLerpXPPChange; // 0x124(0x01)
	char pad_125[0x3]; // 0x125(0x03)
	float ToTPPDuration; // 0x128(0x04)
	char pad_12C[0x4]; // 0x12c(0x04)
	struct UCurveFloat* ToTPPCurve; // 0x130(0x08)
	float ToFPPDuration; // 0x138(0x04)
	char pad_13C[0x4]; // 0x13c(0x04)
	struct UCurveFloat* ToFPPCurve; // 0x140(0x08)
	bool bWantToFPPMode; // 0x148(0x01)
	char pad_149[0x7]; // 0x149(0x07)
	struct UGPSpringArmComponent* TPPSpringArmComponent; // 0x150(0x08)
	struct AGPCharacter* GPCharacter; // 0x158(0x08)
	struct UCameraComponent* CharacterCameraComponent; // 0x160(0x08)
	struct UClass* SpringArmComponentClass; // 0x168(0x08)
	struct TArray<struct FCalcPlayerViewInfo> ServerCachePlayerViewInfos; // 0x170(0x10)
	char pad_180[0x18]; // 0x180(0x18)
	uint32_t PlayerViewInfo; // 0x198(0x04)
	uint32_t SceneWeaponViewInfo; // 0x19c(0x04)
	char pad_1A0[0x30]; // 0x1a0(0x30)
	float PlayerViewPitch; // 0x1d0(0x04)
	float PlayerViewYaw; // 0x1d4(0x04)
	char pad_1D8[0xc]; // 0x1d8(0x0c)
	float RotationSpeed; // 0x1e4(0x04)
	bool bIsFPPBaseLocationFromBone; // 0x1e8(0x01)
	bool bIsFPPBaseRotationFromBone; // 0x1e9(0x01)
	bool bNeedAddFPPOffsetConfigByWeapon; // 0x1ea(0x01)
	char pad_1EB[0x1]; // 0x1eb(0x01)
	struct FVector BaseFPPOffset; // 0x1ec(0x0c)
	bool bCurrentIsUnderFreeLookaroundMode; // 0x1f8(0x01)
	char pad_1F9[0x1b]; // 0x1f9(0x1b)
	float ResetFollowVehicleLerpTime; // 0x214(0x04)
	char pad_218[0xc]; // 0x218(0x0c)
	struct FVector DefaultCameraLocation; // 0x224(0x0c)
	struct FRotator DefaultCameraRotation; // 0x230(0x0c)
	char pad_23C[0x4]; // 0x23c(0x04)

	void SyncClientWeaponDiscViewInfo(uint32_t CurViewInfo); // Function GPGameplay.GPCameraModeComponent.SyncClientWeaponDiscViewInfo // (Net|Native|Event|Public|NetServer) // @ game+0x35c9d20
	void SetUserSettingFPPMode(bool bNewFPP, bool bSnap); // Function GPGameplay.GPCameraModeComponent.SetUserSettingFPPMode // (Final|Native|Public|BlueprintCallable) // @ game+0x35c9570
	void SetSimulatedUnderFPP(enum class EGPCharacterCameraModeReason CameraModeReason, enum class EGPCharacterCameraModeType CameraModeType); // Function GPGameplay.GPCameraModeComponent.SetSimulatedUnderFPP // (Final|Native|Public) // @ game+0x35c9a20
	void SetRotationSpeed(float Speed); // Function GPGameplay.GPCameraModeComponent.SetRotationSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x35c99a0
	void SetGPCameraMode(enum class EGPCharacterCameraModeReason CameraModeReason, enum class EGPCharacterCameraModeType CameraModeType, bool bCleanUserSetting); // Function GPGameplay.GPCameraModeComponent.SetGPCameraMode // (Final|Native|Public|BlueprintCallable) // @ game+0x35c9610
	void SetFPPMode(bool bNewFPP, bool bSnap); // Function GPGameplay.GPCameraModeComponent.SetFPPMode // (Final|Native|Public|BlueprintCallable) // @ game+0x35c9570
	void ServerSetFreeLookaroundModeState(bool bEnable); // Function GPGameplay.GPCameraModeComponent.ServerSetFreeLookaroundModeState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35c8e40
	void ServerSetFPPMode(bool bNewFPP); // Function GPGameplay.GPCameraModeComponent.ServerSetFPPMode // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x35c8db0
	void ResetGPCameraMode(); // Function GPGameplay.GPCameraModeComponent.ResetGPCameraMode // (Final|Native|Public|BlueprintCallable) // @ game+0x35c8960
	void RefreshDefaultCameraMode(); // Function GPGameplay.GPCameraModeComponent.RefreshDefaultCameraMode // (Final|Native|Protected) // @ game+0x35c7970
	void RefreshCameraMode(bool bForceUpdate); // Function GPGameplay.GPCameraModeComponent.RefreshCameraMode // (Final|Native|Public|BlueprintCallable) // @ game+0x35c78e0
	void OnSetCameraMode(bool bNewFPP, bool bForceUpdate); // Function GPGameplay.GPCameraModeComponent.OnSetCameraMode // (Final|Native|Private|BlueprintCallable) // @ game+0x35c7090
	void OnRep_SceneWeaponViewInfo(); // Function GPGameplay.GPCameraModeComponent.OnRep_SceneWeaponViewInfo // (Final|Native|Public) // @ game+0x35c7070
	void OnRep_PlayerViewInfo(); // Function GPGameplay.GPCameraModeComponent.OnRep_PlayerViewInfo // (Final|Native|Public) // @ game+0x35c7050
	void OnRep_PlayerSpectatingViewInfo(); // Function GPGameplay.GPCameraModeComponent.OnRep_PlayerSpectatingViewInfo // (Final|Native|Public) // @ game+0x35c7030
	bool GetSimulatedUnderFPP(); // Function GPGameplay.GPCameraModeComponent.GetSimulatedUnderFPP // (Final|Native|Public) // @ game+0x35c5c10
	enum class EGPCharacterCameraModeType GetGPCurCameraMode(enum class EGPCharacterCameraModeReason CameraModeReason); // Function GPGameplay.GPCameraModeComponent.GetGPCurCameraMode // (Final|Native|Public) // @ game+0x35c5640
	bool GetbUnderFPPMode(bool bUseLocal); // Function GPGameplay.GPCameraModeComponent.GetbUnderFPPMode // (Final|Native|Public|BlueprintCallable) // @ game+0x35c61e0
	void ExitFreeLookaroundMode(bool bForceExit); // Function GPGameplay.GPCameraModeComponent.ExitFreeLookaroundMode // (Final|Native|Public|BlueprintCallable) // @ game+0x35c4f70
	void EnterFreeLookaroundMode(); // Function GPGameplay.GPCameraModeComponent.EnterFreeLookaroundMode // (Final|Native|Public|BlueprintCallable) // @ game+0x35c4f50
	void ClearGPCameraMode(); // Function GPGameplay.GPCameraModeComponent.ClearGPCameraMode // (Final|Native|Public|BlueprintCallable) // @ game+0x35c4940
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPMarkingComponent
// Size: 0x2a0 (Inherited: 0x108)
class UGPMarkingComponent : public UGPNetworkActorComponent {
public:

	char pad_108[0x8]; // 0x108(0x08)
	struct TMap<struct AActor*, struct FMarkCharacterInfo> MarkedCharMap; // 0x110(0x50)
	struct AGPPlayerController* PlayerController; // 0x160(0x08)
	float MaxMarkbleDistance; // 0x168(0x04)
	float MarkingTimeNeeded; // 0x16c(0x04)
	float CancelDistanceInViewportBehindCover; // 0x170(0x04)
	float CancelTimeInViewportBehindCover; // 0x174(0x04)
	float CancelDistanceInViewportNoCover; // 0x178(0x04)
	float CancelTimeInViewportNoCover; // 0x17c(0x04)
	float CancelDistanceOutViewportBehindCover; // 0x180(0x04)
	float CancelTimeOutViewportBehindCover; // 0x184(0x04)
	float CancelDistanceOutViewportNoCover; // 0x188(0x04)
	float CancelTimeOutViewportNoCover; // 0x18c(0x04)
	struct TArray<float> WeaponScopeMarkCancelDistArray; // 0x190(0x10)
	struct TArray<float> WeaponScopeMarkCancelTimeArray; // 0x1a0(0x10)
	float TelescopeMarkViewRadius; // 0x1b0(0x04)
	float HorizontalLeftOffset; // 0x1b4(0x04)
	float HorizontalRightOffset; // 0x1b8(0x04)
	float VerticalTopOffset; // 0x1bc(0x04)
	float VerticalBottomOffset; // 0x1c0(0x04)
	float DetailInfoSquareSize; // 0x1c4(0x04)
	struct TArray<struct FName> NameOfSocketsToProject; // 0x1c8(0x10)
	int32_t MinExposedSocketNumber; // 0x1d8(0x04)
	struct FName HeadSockName; // 0x1dc(0x08)
	bool bEnableTelescopeMarking; // 0x1e4(0x01)
	bool bEnableWeaponScopeMarking; // 0x1e5(0x01)
	bool bEnableSniperMarking; // 0x1e6(0x01)
	char pad_1E7[0x1]; // 0x1e7(0x01)
	struct FVector2D SniperMarkingRange; // 0x1e8(0x08)
	float WeaponScopeOffset; // 0x1f0(0x04)
	char pad_1F4[0x4]; // 0x1f4(0x04)
	struct AGPCharacter* CharacterToShowDetailInfo; // 0x1f8(0x08)
	struct FString DetailCharName; // 0x200(0x10)
	struct FString DetailCharWeaponName; // 0x210(0x10)
	struct FVector AILocation; // 0x220(0x0c)
	struct FVector CharacterCameraLocationDebug; // 0x22c(0x0c)
	bool bBehindCoverDebug; // 0x238(0x01)
	char pad_239[0x3]; // 0x239(0x03)
	float DistanceDebug; // 0x23c(0x04)
	float ScopeRadiusDebug; // 0x240(0x04)
	struct FVector2D ScopeCenterDebug; // 0x244(0x08)
	bool bEnableOutline; // 0x24c(0x01)
	char pad_24D[0x3]; // 0x24d(0x03)
	float UpdateInterval; // 0x250(0x04)
	char pad_254[0x14]; // 0x254(0x14)
	struct AGPCharacter* GPOwner; // 0x268(0x08)
	char pad_270[0x30]; // 0x270(0x30)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPNetworkTransfromComponent
// Size: 0x1c0 (Inherited: 0x108)
class UGPNetworkTransfromComponent : public UGPNetworkActorComponent {
public:

	char pad_108[0x8]; // 0x108(0x08)
	struct AActor* Owner; // 0x110(0x08)
	float SendInterval; // 0x118(0x04)
	int32_t PositionSleepCount; // 0x11c(0x04)
	float FInterpToSpeed; // 0x120(0x04)
	bool bDebug; // 0x124(0x01)
	char pad_125[0x53]; // 0x125(0x53)
	int32_t MaxCacheMessageCount; // 0x178(0x04)
	float MaxCheckDistance; // 0x17c(0x04)
	struct TArray<struct FActorMoveMessage> CachedMovePackage; // 0x180(0x10)
	struct FActorMoveMessage LatestMovePackage; // 0x190(0x2c)
	char pad_1BC[0x4]; // 0x1bc(0x04)

	void ServerReceivePackage(struct FActorMoveMessage Msg); // Function GPGameplay.GPNetworkTransfromComponent.ServerReceivePackage // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36390a0
	void Rep_OnReceiveNewMovePackage(); // Function GPGameplay.GPNetworkTransfromComponent.Rep_OnReceiveNewMovePackage // (Final|Native|Public) // @ game+0x88f4d0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPTacticalActionComponent
// Size: 0x130 (Inherited: 0x108)
class UGPTacticalActionComponent : public UGPNetworkActorComponent {
public:

	char pad_108[0x10]; // 0x108(0x10)
	struct AGPCharacter* GPChar; // 0x118(0x08)
	struct UAnimMontage* TargetMontageFPP; // 0x120(0x08)
	struct UAnimMontage* TargetMontageTPP; // 0x128(0x08)

	void StopTacticalAction(); // Function GPGameplay.GPTacticalActionComponent.StopTacticalAction // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x35a3800
	void StartMove(float Value); // Function GPGameplay.GPTacticalActionComponent.StartMove // (Final|Native|Public) // @ game+0x3677f20
	void ServerStopTacticalAction(bool bSwitchToLastGun); // Function GPGameplay.GPTacticalActionComponent.ServerStopTacticalAction // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3677c20
	void ServerPlayTacticalAction(enum class ETacticalActionType TacticalActionType); // Function GPGameplay.GPTacticalActionComponent.ServerPlayTacticalAction // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36778b0
	void PlayTacticalAction(struct UAnimMontage* AnimMontageTPP, struct UAnimMontage* AnimMontageFPP, float WaitTime); // Function GPGameplay.GPTacticalActionComponent.PlayTacticalAction // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x3677370
	void ActionsNotNeedSwitchWeapon(enum class ECharacterFSMEventDefine FSMEvent, float Value, struct UObject* EventObject); // Function GPGameplay.GPTacticalActionComponent.ActionsNotNeedSwitchWeapon // (Final|Native|Public) // @ game+0x3676110
	void ActionsNeedSwitchWeapon(enum class ECharacterFSMEventDefine FSMEvent, float Value, struct UObject* EventObject); // Function GPGameplay.GPTacticalActionComponent.ActionsNeedSwitchWeapon // (Final|Native|Public) // @ game+0x3676000
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimReloadNotifyChamberBegin
// Size: 0x40 (Inherited: 0x40)
class UGPAnimReloadNotifyChamberBegin : public UGPAnimReloadNotifyBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimReloadNotifyChamberEnd
// Size: 0x40 (Inherited: 0x40)
class UGPAnimReloadNotifyChamberEnd : public UGPAnimReloadNotifyBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimChamberSuccess
// Size: 0x40 (Inherited: 0x40)
class UGPAnimChamberSuccess : public UGPAnimReloadNotifyBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimReloadNotifyLoadMagazineBegin
// Size: 0x40 (Inherited: 0x40)
class UGPAnimReloadNotifyLoadMagazineBegin : public UGPAnimReloadNotifyBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimReloadNotifyLoadMagazineEnd
// Size: 0x40 (Inherited: 0x40)
class UGPAnimReloadNotifyLoadMagazineEnd : public UGPAnimReloadNotifyBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimReloadNotifyChamberMax
// Size: 0x40 (Inherited: 0x40)
class UGPAnimReloadNotifyChamberMax : public UGPAnimReloadNotifyBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimShellDropNotify
// Size: 0x40 (Inherited: 0x40)
class UGPAnimShellDropNotify : public UGPAnimReloadNotifyBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimNotifyShowBulletChain
// Size: 0x40 (Inherited: 0x40)
class UGPAnimNotifyShowBulletChain : public UGPAnimReloadNotifyBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSpringWithTransformTest
// Size: 0x70 (Inherited: 0x48)
class UGPSpringWithTransformTest : public UGPBaseSpring {
public:

	struct FVector GunTranslation; // 0x48(0x0c)
	struct FRotator GunRotation; // 0x54(0x0c)
	struct FVector GunRotationCenterOffset; // 0x60(0x0c)
	char pad_6C[0x4]; // 0x6c(0x04)

	struct FTransform GetTransform(float ADSPercent); // Function GPGameplay.GPSpringWithTransformTest.GetTransform // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x35b1980
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPHealthDataComponent
// Size: 0x608 (Inherited: 0x108)
class UGPHealthDataComponent : public UGPAttributeBaseComponent {
public:

	/*struct FMulticastInlineDelegate*/char OnHealthEmpty[0x10]; // 0x108(0x10)
	enum class EGPHealthShowMode ShowHealthMode; // 0x118(0x01)
	char pad_119[0x3]; // 0x119(0x03)
	struct FVector OffsetFromOwner; // 0x11c(0x0c)
	struct FName BoneName; // 0x128(0x08)
	struct FVector2D HudOffset; // 0x130(0x08)
	/*struct FMulticastInlineDelegate*/char OwnerHealthChanged[0x10]; // 0x138(0x10)
	/*struct FMulticastInlineDelegate*/char OwnerArmorChanged[0x10]; // 0x148(0x10)
	/*struct FMulticastInlineDelegate*/char OwnerHelmetArmorChanged[0x10]; // 0x158(0x10)
	/*struct FMulticastInlineDelegate*/char OwnerShieldChanged[0x10]; // 0x168(0x10)
	/*struct FMulticastInlineDelegate*/char OwnerImpendingDeathChanged[0x10]; // 0x178(0x10)
	char pad_188[0x80]; // 0x188(0x80)
	/*struct FMulticastInlineDelegate*/char OnHealthDamaged_Bp[0x10]; // 0x208(0x10)
	float HealthMAX; // 0x218(0x04)
	char pad_21C[0x4]; // 0x21c(0x04)
	/*struct FMulticastInlineDelegate*/char OnHealthChanged[0x10]; // 0x220(0x10)
	/*struct FMulticastInlineDelegate*/char OnServerRebornMe[0x10]; // 0x230(0x10)
	struct UGPAttributeSetHealth* HealthSet; // 0x240(0x08)
	char pad_248[0x4]; // 0x248(0x04)
	struct FGameplayTag HurtMySelfTag; // 0x24c(0x08)
	char pad_254[0x4]; // 0x254(0x04)
	struct FKillInfo LastKnockDownInfo; // 0x258(0x148)
	struct FKillInfo LastKillInfo; // 0x3a0(0x148)
	bool EnableImpendingDeathFeature; // 0x4e8(0x01)
	bool ImpendingDeathHasCheckTeamNumer; // 0x4e9(0x01)
	bool InCarEnableImpendingDeathInCar; // 0x4ea(0x01)
	bool InGiantTowerEnableImpendingDeath; // 0x4eb(0x01)
	bool ForceEnableImpendingDeathFeature; // 0x4ec(0x01)
	bool EmemyCanRescue; // 0x4ed(0x01)
	char pad_4EE[0x2]; // 0x4ee(0x02)
	float RescueTime; // 0x4f0(0x04)
	float CancelRescueTime; // 0x4f4(0x04)
	float RescueMyselfTime; // 0x4f8(0x04)
	float RescueCheckDistance; // 0x4fc(0x04)
	char pad_500[0x8]; // 0x500(0x08)
	struct AGPCharacterBase* CurrentPrepareRescueTarget; // 0x508(0x08)
	struct APawn* KnockDownMaker; // 0x510(0x08)
	struct UGPModularWeaponDesc* WeaponDesc; // 0x518(0x08)
	float KnockDownLastHit; // 0x520(0x04)
	float LastEnermyHitTime; // 0x524(0x04)
	struct AGPCharacterBase* CurrentRescuingTarget; // 0x528(0x08)
	bool bCurrentRescueLeft; // 0x530(0x01)
	char pad_531[0x7]; // 0x531(0x07)
	struct FRescueInfo RescueInfo; // 0x538(0x38)
	struct AGPCharacterBase* CurrentRescuingHelper; // 0x570(0x08)
	bool TriggerRescueAnimation; // 0x578(0x01)
	char pad_579[0x3]; // 0x579(0x03)
	float ClientCancelRescueMySelfTimeElaspe; // 0x57c(0x04)
	bool ClientIsCancelRescueMyself; // 0x580(0x01)
	char pad_581[0x3]; // 0x581(0x03)
	float ClientRescueTimeElaspe; // 0x584(0x04)
	bool FSMCurrentIsRescuingSomeone; // 0x588(0x01)
	char pad_589[0x3]; // 0x589(0x03)
	float ServerRescueStartTime; // 0x58c(0x04)
	float CurrentRescuingProcessEndTimestamp; // 0x590(0x04)
	bool FSMCanBeRescue; // 0x594(0x01)
	char pad_595[0x3]; // 0x595(0x03)
	struct AGPCharacterBase* CurrentRescueMeBuddy; // 0x598(0x08)
	bool FSMCurrentIsBeingRescuingByMySelf; // 0x5a0(0x01)
	bool FSMCurrentIsBeingRescuingBySomeone; // 0x5a1(0x01)
	char pad_5A2[0x2]; // 0x5a2(0x02)
	float FakeRescueTime; // 0x5a4(0x04)
	bool CurrentIsFakingRescuingBySomeone; // 0x5a8(0x01)
	char pad_5A9[0x7]; // 0x5a9(0x07)
	/*struct FMulticastInlineDelegate*/char OnSucceedRescue[0x10]; // 0x5b0(0x10)
	/*struct FMulticastInlineDelegate*/char OnSucceedBeingRescue[0x10]; // 0x5c0(0x10)
	/*struct FMulticastInlineDelegate*/char OnLiveStatusChange[0x10]; // 0x5d0(0x10)
	bool FSMCurrentIsCarrySelfBySomeOne; // 0x5e0(0x01)
	char pad_5E1[0x7]; // 0x5e1(0x07)
	struct AGPCharacterBase* CurrentCarrySelfBuddy; // 0x5e8(0x08)
	float RescueTimeIncrement; // 0x5f0(0x04)
	float RescueDeathTimeIncrement; // 0x5f4(0x04)
	char pad_5F8[0xc]; // 0x5f8(0x0c)
	float ClientRescuePreStateRTTTime; // 0x604(0x04)

	void TestTakeHit(float DamageAmount, struct AActor* HitCauser, bool randomLoc); // Function GPGameplay.GPHealthDataComponent.TestTakeHit // (Final|Native|Public|BlueprintCallable) // @ game+0x360cea0
	void Suicide(int32_t AttackerValueId); // Function GPGameplay.GPHealthDataComponent.Suicide // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x360ce10
	void SingleRecoverFromImpendingDeath(); // Function GPGameplay.GPHealthDataComponent.SingleRecoverFromImpendingDeath // (Final|Native|Public) // @ game+0x360cdf0
	void SetSheildHealthMax(float Value); // Function GPGameplay.GPHealthDataComponent.SetSheildHealthMax // (Final|Native|Public) // @ game+0x360cbd0
	void SetSheildHealth(float Value); // Function GPGameplay.GPHealthDataComponent.SetSheildHealth // (Final|Native|Public) // @ game+0x360cb50
	void SetRescueTimeIncrement(uint64_t WeaponID, uint64_t AmmoId); // Function GPGameplay.GPHealthDataComponent.SetRescueTimeIncrement // (Final|Native|Public) // @ game+0x360ca90
	void ServerTrySpeedUpCancelRescueMyself(); // Function GPGameplay.GPHealthDataComponent.ServerTrySpeedUpCancelRescueMyself // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x360c9c0
	void ServerTryCancelSppedUpCancelRescueMyself(); // Function GPGameplay.GPHealthDataComponent.ServerTryCancelSppedUpCancelRescueMyself // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x360c9a0
	void ServerTryCancelRescueMyselfImmediately(); // Function GPGameplay.GPHealthDataComponent.ServerTryCancelRescueMyselfImmediately // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x22b8690
	void ServerTryCancelCancelRescueMyselfImmediately(); // Function GPGameplay.GPHealthDataComponent.ServerTryCancelCancelRescueMyselfImmediately // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x3578a00
	void ServerTriggerRescueAnimation(bool Enable); // Function GPGameplay.GPHealthDataComponent.ServerTriggerRescueAnimation // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x17501f0
	void ServerRebornMeFromImpendingDeath(bool stayInBeingRescueState, bool FastRescue); // Function GPGameplay.GPHealthDataComponent.ServerRebornMeFromImpendingDeath // (Final|Native|Public) // @ game+0x360c8d0
	void ServerConfirmRescueSomeone(struct AGPCharacterBase* Target); // Function GPGameplay.GPHealthDataComponent.ServerConfirmRescueSomeone // (Final|Native|Public) // @ game+0x360c850
	void ServerConfirmCancelRescueSomeone(struct AGPCharacterBase* Target); // Function GPGameplay.GPHealthDataComponent.ServerConfirmCancelRescueSomeone // (Final|Native|Public) // @ game+0x360c7d0
	void ServerConfirmBeingRescueBySomeone(struct AGPCharacterBase* Target); // Function GPGameplay.GPHealthDataComponent.ServerConfirmBeingRescueBySomeone // (Final|Native|Public) // @ game+0x360c750
	void ServerAttampRescueSomeone(struct AGPCharacterBase* Target); // Function GPGameplay.GPHealthDataComponent.ServerAttampRescueSomeone // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x360c6c0
	void ServerAttampCancelRescueSomeone(struct AGPCharacterBase* Target); // Function GPGameplay.GPHealthDataComponent.ServerAttampCancelRescueSomeone // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x360c630
	void ResetHealth(float NewMaxHealth, float NewHealthRate); // Function GPGameplay.GPHealthDataComponent.ResetHealth // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x360c570
	void ResetCurrentHelmetArmorHealthToMax(); // Function GPGameplay.GPHealthDataComponent.ResetCurrentHelmetArmorHealthToMax // (Final|Native|Public|BlueprintCallable) // @ game+0x360c550
	void ResetCurrentHealthToMax(); // Function GPGameplay.GPHealthDataComponent.ResetCurrentHealthToMax // (Final|Native|Public|BlueprintCallable) // @ game+0x360c530
	void ResetCurrentArmorHealthToMax(); // Function GPGameplay.GPHealthDataComponent.ResetCurrentArmorHealthToMax // (Final|Native|Public|BlueprintCallable) // @ game+0x360c510
	void Rep_TriggerRescueAnimation(); // Function GPGameplay.GPHealthDataComponent.Rep_TriggerRescueAnimation // (Final|Native|Public) // @ game+0x360c4f0
	void Rep_FSMCurrentIsBeingRescuingBySomeone(); // Function GPGameplay.GPHealthDataComponent.Rep_FSMCurrentIsBeingRescuingBySomeone // (Final|Native|Public) // @ game+0x360c4d0
	void OnRep_RescueInfo(); // Function GPGameplay.GPHealthDataComponent.OnRep_RescueInfo // (Final|Native|Public) // @ game+0x360c4b0
	bool IsImpendingDeath(); // Function GPGameplay.GPHealthDataComponent.IsImpendingDeath // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x360c3c0
	bool IsFull(); // Function GPGameplay.GPHealthDataComponent.IsFull // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x360c390
	bool IsEmpty(); // Function GPGameplay.GPHealthDataComponent.IsEmpty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x360c360
	void GPHealthCompEvent_ServerRebornMe__DelegateSignature(); // DelegateFunction GPGameplay.GPHealthDataComponent.GPHealthCompEvent_ServerRebornMe__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x7ed88c0
	void GPHealthCompEvent_HealthChanged__DelegateSignature(int32_t DeltaHealth); // DelegateFunction GPGameplay.GPHealthDataComponent.GPHealthCompEvent_HealthChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x7ed88c0
	int32_t GetThoraxHealth(); // Function GPGameplay.GPHealthDataComponent.GetThoraxHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x360c330
	float GetSheildHealthMax(); // Function GPGameplay.GPHealthDataComponent.GetSheildHealthMax // (Final|Native|Public|Const) // @ game+0x360c300
	float GetSheildHealth(); // Function GPGameplay.GPHealthDataComponent.GetSheildHealth // (Final|Native|Public|Const) // @ game+0x360c2d0
	int32_t GetRightLegHealth(); // Function GPGameplay.GPHealthDataComponent.GetRightLegHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x360c2a0
	int32_t GetRightArmHealth(); // Function GPGameplay.GPHealthDataComponent.GetRightArmHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x360c270
	float GetRescueTime(); // Function GPGameplay.GPHealthDataComponent.GetRescueTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x360c240
	int32_t GetNeedShowRescueNum(); // Function GPGameplay.GPHealthDataComponent.GetNeedShowRescueNum // (Native|Public|Const) // @ game+0x360c210
	int32_t GetMaxImpendingDeathHealth(); // Function GPGameplay.GPHealthDataComponent.GetMaxImpendingDeathHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x360c1e0
	struct AActor* GetLootingBox(); // Function GPGameplay.GPHealthDataComponent.GetLootingBox // (Native|Public) // @ game+0x360c1b0
	int32_t GetLeftLegHealth(); // Function GPGameplay.GPHealthDataComponent.GetLeftLegHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x360c180
	int32_t GetLeftArmHealth(); // Function GPGameplay.GPHealthDataComponent.GetLeftArmHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x360c150
	int32_t GetImpendingDeathHealth(); // Function GPGameplay.GPHealthDataComponent.GetImpendingDeathHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x360c120
	float GetHelmetArmorHealthMAX(); // Function GPGameplay.GPHealthDataComponent.GetHelmetArmorHealthMAX // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x360c0f0
	float GetHelmetArmorHealth(); // Function GPGameplay.GPHealthDataComponent.GetHelmetArmorHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x360c0c0
	float GetHealthPercentage(); // Function GPGameplay.GPHealthDataComponent.GetHealthPercentage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x360c090
	float GetHealthPercent(); // Function GPGameplay.GPHealthDataComponent.GetHealthPercent // (Final|Native|Public|BlueprintCallable) // @ game+0x360c060
	float GetHealthMax(); // Function GPGameplay.GPHealthDataComponent.GetHealthMax // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x360c030
	float GetHealth(); // Function GPGameplay.GPHealthDataComponent.GetHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x360c000
	int32_t GetHeadHealth(); // Function GPGameplay.GPHealthDataComponent.GetHeadHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x360bfd0
	int32_t GetCharacterLiveStatus(); // Function GPGameplay.GPHealthDataComponent.GetCharacterLiveStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x360bfa0
	float GetBaseHealthMax(); // Function GPGameplay.GPHealthDataComponent.GetBaseHealthMax // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x360bf70
	float GetArmPercent(); // Function GPGameplay.GPHealthDataComponent.GetArmPercent // (Final|Native|Public|BlueprintCallable) // @ game+0x360bee0
	float GetArmorHealthMAX(); // Function GPGameplay.GPHealthDataComponent.GetArmorHealthMAX // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x360bf40
	float GetArmorHealth(); // Function GPGameplay.GPHealthDataComponent.GetArmorHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x360bf10
	int32_t GetAllHealthMax(); // Function GPGameplay.GPHealthDataComponent.GetAllHealthMax // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x360beb0
	int32_t GetAllHealth(); // Function GPGameplay.GPHealthDataComponent.GetAllHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x360be80
	void ClientSpectNotifyHealthTakeHit(float Damage, float ArmorDamage, struct FTakeHitInfo TakeHitInfo); // Function GPGameplay.GPHealthDataComponent.ClientSpectNotifyHealthTakeHit // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x360bbf0
	void ClientOnSucceedRescue(struct AGPCharacterBase* TargetCharacter); // Function GPGameplay.GPHealthDataComponent.ClientOnSucceedRescue // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x360bb60
	void ClientOnSucceedBeingRescue(struct AGPCharacterBase* TargetCharacter); // Function GPGameplay.GPHealthDataComponent.ClientOnSucceedBeingRescue // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x360bad0
	void ClientNotifyHealthTakeHit(float Damage, float ArmorDamage, struct FTakeHitInfo TakeHitInfo); // Function GPGameplay.GPHealthDataComponent.ClientNotifyHealthTakeHit // (Net|Native|Event|Public|NetClient) // @ game+0x360b920
	void ClientConfirmRescueSomeone(struct AGPCharacterBase* Target); // Function GPGameplay.GPHealthDataComponent.ClientConfirmRescueSomeone // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x227b650
	void ClientConfirmRescueHelper(struct AGPCharacterBase* Helper); // Function GPGameplay.GPHealthDataComponent.ClientConfirmRescueHelper // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x360b890
	void ClientConfirmCancelRescueSomeone(struct AGPCharacterBase* Target); // Function GPGameplay.GPHealthDataComponent.ClientConfirmCancelRescueSomeone // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x360b800
	void ClientConfirmBeingRescueBySomeone(struct AGPCharacterBase* Target); // Function GPGameplay.GPHealthDataComponent.ClientConfirmBeingRescueBySomeone // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x360b770
	void ClientAttampRescueSomeone(struct AGPCharacterBase* Target); // Function GPGameplay.GPHealthDataComponent.ClientAttampRescueSomeone // (Final|Native|Public) // @ game+0x360b6f0
	void ClientAttampCancelRescueSomeone(struct AGPCharacterBase* Target); // Function GPGameplay.GPHealthDataComponent.ClientAttampCancelRescueSomeone // (Final|Native|Public) // @ game+0x360b670
	void ClientAttampCancelRescueMyselfImmediately(); // Function GPGameplay.GPHealthDataComponent.ClientAttampCancelRescueMyselfImmediately // (Final|Native|Public|BlueprintCallable) // @ game+0x360b650
	void ClientAttampCancelRescueMyself(); // Function GPGameplay.GPHealthDataComponent.ClientAttampCancelRescueMyself // (Final|Native|Public|BlueprintCallable) // @ game+0x360b630
	void ClientAttampCancelCancelRescueMyselfImmediately(); // Function GPGameplay.GPHealthDataComponent.ClientAttampCancelCancelRescueMyselfImmediately // (Final|Native|Public|BlueprintCallable) // @ game+0x360b610
	void ClientAttampCancelCancelRescueMyself(); // Function GPGameplay.GPHealthDataComponent.ClientAttampCancelCancelRescueMyself // (Final|Native|Public|BlueprintCallable) // @ game+0x360b5f0
	void AddHelth(float HealthAmountAdd); // Function GPGameplay.GPHealthDataComponent.AddHelth // (Final|Native|Public|BlueprintCallable) // @ game+0x360b380
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSpeedScaleDataComponent
// Size: 0x128 (Inherited: 0x108)
class UGPSpeedScaleDataComponent : public UGPAttributeBaseComponent {
public:

	struct UGPAttributeSetSpeed* SpeedSet; // 0x108(0x08)
	float SprintSpeedScale; // 0x110(0x04)
	float CrouchSpeedScale; // 0x114(0x04)
	float SwimmingSpeedScale; // 0x118(0x04)
	float ChasingSpeedScale; // 0x11c(0x04)
	float WanderSpeedScale; // 0x120(0x04)
	char pad_124[0x4]; // 0x124(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAttributeSetHealth
// Size: 0x3d0 (Inherited: 0x38)
class UGPAttributeSetHealth : public UGPAttributeSet {
public:

	char pad_38[0x18]; // 0x38(0x18)
	struct FGPGameplayAttributeData Health; // 0x50(0x18)
	struct FGPGameplayAttributeData MaxHealth; // 0x68(0x18)
	struct FGPGameplayAttributeData MinHealth; // 0x80(0x18)
	struct FGPGameplayAttributeData ArmorHealth; // 0x98(0x18)
	struct FGPGameplayAttributeData MaxArmorHealth; // 0xb0(0x18)
	struct FGPGameplayAttributeData HelmetArmorHealth; // 0xc8(0x18)
	struct FGPGameplayAttributeData MaxHelmetArmorHealth; // 0xe0(0x18)
	struct FGPGameplayAttributeData ShieldHealth; // 0xf8(0x18)
	struct FGPGameplayAttributeData MaxShieldHealth; // 0x110(0x18)
	struct FGPGameplayAttributeData ImpendingDeathHealth; // 0x128(0x18)
	struct FGPGameplayAttributeData MaxImpendingDeathHealth; // 0x140(0x18)
	struct FGPGameplayAttributeData IsAlive; // 0x158(0x18)
	struct FGPGameplayAttributeData ImpendingDeathNum; // 0x170(0x18)
	struct FGPGameplayAttributeData HeadHealth; // 0x188(0x18)
	struct FGPGameplayAttributeData MaxHeadHealth; // 0x1a0(0x18)
	struct FGPGameplayAttributeData ThoraxHealth; // 0x1b8(0x18)
	struct FGPGameplayAttributeData MaxThoraxHealth; // 0x1d0(0x18)
	struct FGPGameplayAttributeData AbdomenHealth; // 0x1e8(0x18)
	struct FGPGameplayAttributeData MaxAbdomenHealth; // 0x200(0x18)
	struct FGPGameplayAttributeData RightArmHealth; // 0x218(0x18)
	struct FGPGameplayAttributeData MaxRightArmHealth; // 0x230(0x18)
	struct FGPGameplayAttributeData LeftArmHealth; // 0x248(0x18)
	struct FGPGameplayAttributeData MaxLeftArmHealth; // 0x260(0x18)
	struct FGPGameplayAttributeData RightLegHealth; // 0x278(0x18)
	struct FGPGameplayAttributeData MaxRightLegHealth; // 0x290(0x18)
	struct FGPGameplayAttributeData LeftLegHealth; // 0x2a8(0x18)
	struct FGPGameplayAttributeData MaxLeftLegHealth; // 0x2c0(0x18)
	struct FGPGameplayAttributeData OutOfFightTime; // 0x2d8(0x18)
	struct FGPGameplayAttributeData RecoverHealthFrequnce; // 0x2f0(0x18)
	struct FGPGameplayAttributeData Heal; // 0x308(0x18)
	struct FGPGameplayAttributeData Heal2; // 0x320(0x18)
	struct FGPGameplayAttributeData WoundResistRate; // 0x338(0x18)
	struct FGPGameplayAttributeData DizzyResistRate; // 0x350(0x18)
	char pad_368[0x68]; // 0x368(0x68)

	void TestServer_HeadTakeDamamge(struct APawn* TargetPawn, struct FGameplayTagContainer Tags, struct APawn* SourcePawn, enum class EDamageType DamageType); // Function GPGameplay.GPAttributeSetHealth.TestServer_HeadTakeDamamge // (Net|NetReliableNative|Event|Protected|NetServer|BlueprintCallable) // @ game+0x35b7040
	float RemainHealHP(); // Function GPGameplay.GPAttributeSetHealth.RemainHealHP // (Final|Native|Public) // @ game+0x35b7010
	void OnRep_WoundResistRate(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_WoundResistRate // (Final|Native|Public|HasOutParms) // @ game+0x35b6e00
	void OnRep_ThoraxHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_ThoraxHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b6b70
	void OnRep_ShieldHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_ShieldHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b6780
	void OnRep_RightLegHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_RightLegHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b66d0
	void OnRep_RightArmHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_RightArmHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b6620
	void OnRep_MinHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_MinHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b6570
	void OnRep_MaxThoraxHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_MaxThoraxHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b64c0
	void OnRep_MaxShieldHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_MaxShieldHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b6410
	void OnRep_MaxRightLegHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_MaxRightLegHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b6360
	void OnRep_MaxRightArmHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_MaxRightArmHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b62b0
	void OnRep_MaxLeftLegHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_MaxLeftLegHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b6200
	void OnRep_MaxLeftArmHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_MaxLeftArmHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b6150
	void OnRep_MaxImpendingDeathHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_MaxImpendingDeathHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b60a0
	void OnRep_MaxHelmetArmorHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_MaxHelmetArmorHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b5ff0
	void OnRep_MaxHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_MaxHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b5f40
	void OnRep_MaxHeadHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_MaxHeadHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b5e90
	void OnRep_MaxArmorHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_MaxArmorHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b5de0
	void OnRep_MaxAbdomenHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_MaxAbdomenHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b5d30
	void OnRep_LeftLegHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_LeftLegHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b5c80
	void OnRep_LeftArmHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_LeftArmHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b5bd0
	void OnRep_IsAlive(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_IsAlive // (Final|Native|Public|HasOutParms) // @ game+0x35b5b20
	void OnRep_ImpendingDeathNum(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_ImpendingDeathNum // (Final|Native|Public|HasOutParms) // @ game+0x35b5a70
	void OnRep_ImpendingDeathHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_ImpendingDeathHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b59c0
	void OnRep_HelmetArmorHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_HelmetArmorHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b5910
	void OnRep_Health(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_Health // (Final|Native|Public|HasOutParms) // @ game+0x35b5860
	void OnRep_HeadHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_HeadHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b57b0
	void OnRep_DizzyResistRate(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_DizzyResistRate // (Final|Native|Public|HasOutParms) // @ game+0x35b5660
	void OnRep_ArmorHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_ArmorHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b53d0
	void OnRep_AbdomenHealth(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetHealth.OnRep_AbdomenHealth // (Final|Native|Public|HasOutParms) // @ game+0x35b5320
	bool IsFullHP(); // Function GPGameplay.GPAttributeSetHealth.IsFullHP // (Final|Native|Public) // @ game+0x35b5180
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAttributeSetOther
// Size: 0x2a8 (Inherited: 0x38)
class UGPAttributeSetOther : public UGPAttributeSet {
public:

	struct FGPGameplayAttributeData ListenRangeRate; // 0x38(0x18)
	struct FGPGameplayAttributeData UsingFoodSpeedRate; // 0x50(0x18)
	struct FGPGameplayAttributeData UsingMedicineSpeedRate; // 0x68(0x18)
	struct FGPGameplayAttributeData SearchItemSpeedRate; // 0x80(0x18)
	struct FGPGameplayAttributeData UsingKeySpeedRate; // 0x98(0x18)
	struct FGPGameplayAttributeData UsingToolsSpeedRate; // 0xb0(0x18)
	struct FGPGameplayAttributeData FireSpeedRate; // 0xc8(0x18)
	struct FGPGameplayAttributeData AimingTimeFactor; // 0xe0(0x18)
	struct FGPGameplayAttributeData ChangeClipTimeFactor; // 0xf8(0x18)
	struct FGPGameplayAttributeData LootingTimeFactor; // 0x110(0x18)
	struct FGPGameplayAttributeData SoundVisualizationFactor; // 0x128(0x18)
	struct FGPGameplayAttributeData RescueSpeedRate; // 0x140(0x18)
	struct FGPGameplayAttributeData UseItemArmorExtraValue; // 0x158(0x18)
	struct FGPGameplayAttributeData CurrentRoleLoadValue; // 0x170(0x18)
	struct FGPGameplayAttributeData OverLoadThreshold; // 0x188(0x18)
	struct FGPGameplayAttributeData SuperOverLoadThreshold; // 0x1a0(0x18)
	struct FGPGameplayAttributeData UsingLoadItem; // 0x1b8(0x18)
	struct FGPGameplayAttributeData SkillCooldownReduction; // 0x1d0(0x18)
	struct FGPGameplayAttributeData CharacterWeaponMain3; // 0x1e8(0x18)
	struct FGPGameplayAttributeData CharacterWeaponMain5; // 0x200(0x18)
	struct FGPGameplayAttributeData SlowDownResistance; // 0x218(0x18)
	struct FGPGameplayAttributeData SlowDownDurationResistance; // 0x230(0x18)
	struct FGPGameplayAttributeData BeHitEffectScale; // 0x248(0x18)
	struct FGPGameplayAttributeData DamageReductionRate; // 0x260(0x18)
	char pad_278[0x18]; // 0x278(0x18)
	struct FGPGameplayAttributeData RespirationDurationScale; // 0x290(0x18)

	void OnReq_FireSpeedRate(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetOther.OnReq_FireSpeedRate // (Final|Native|Public|HasOutParms) // @ game+0x35bbb90
	void OnRep_UsingToolsSpeedRate(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetOther.OnRep_UsingToolsSpeedRate // (Final|Native|Public|HasOutParms) // @ game+0x35bbae0
	void OnRep_UsingMedicineSpeedRate(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetOther.OnRep_UsingMedicineSpeedRate // (Final|Native|Public|HasOutParms) // @ game+0x35bba30
	void OnRep_UsingLoadItem(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetOther.OnRep_UsingLoadItem // (Final|Native|Public|HasOutParms) // @ game+0x35bb980
	void OnRep_UsingKeySpeedRate(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetOther.OnRep_UsingKeySpeedRate // (Final|Native|Public|HasOutParms) // @ game+0x35bb8d0
	void OnRep_UsingFoodSpeedRate(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetOther.OnRep_UsingFoodSpeedRate // (Final|Native|Public|HasOutParms) // @ game+0x35bb820
	void OnRep_UseItemArmorExtraValue(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetOther.OnRep_UseItemArmorExtraValue // (Final|Native|Public|HasOutParms) // @ game+0x35bb770
	void OnRep_SuperOverLoadThreshold(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetOther.OnRep_SuperOverLoadThreshold // (Final|Native|Public|HasOutParms) // @ game+0x35bb610
	void OnRep_SoundVisualizationFactor(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetOther.OnRep_SoundVisualizationFactor // (Final|Native|Public|HasOutParms) // @ game+0x35badd0
	void OnRep_SkillCooldownReduction(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetOther.OnRep_SkillCooldownReduction // (Final|Native|Public|HasOutParms) // @ game+0x35bad20
	void OnRep_SearchItemSpeedRate(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetOther.OnRep_SearchItemSpeedRate // (Final|Native|Public|HasOutParms) // @ game+0x35bac70
	void OnRep_RespirationDurationScale(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetOther.OnRep_RespirationDurationScale // (Final|Native|Public|HasOutParms) // @ game+0x35bab10
	void OnRep_RescueSpeedRate(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetOther.OnRep_RescueSpeedRate // (Final|Native|Public|HasOutParms) // @ game+0x35baa60
	void OnRep_OverLoadThreshold(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetOther.OnRep_OverLoadThreshold // (Final|Native|Public|HasOutParms) // @ game+0x35ba850
	void OnRep_LootingTimeFactor(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetOther.OnRep_LootingTimeFactor // (Final|Native|Public|HasOutParms) // @ game+0x35ba640
	void OnRep_ListenRangeRate(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetOther.OnRep_ListenRangeRate // (Final|Native|Public|HasOutParms) // @ game+0x35ba4e0
	void OnRep_DamageReductionRate(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetOther.OnRep_DamageReductionRate // (Final|Native|Public|HasOutParms) // @ game+0x35b9f60
	void OnRep_CurrentRoleLoadValue(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetOther.OnRep_CurrentRoleLoadValue // (Final|Native|Public|HasOutParms) // @ game+0x35b9eb0
	void OnRep_CharacterWeaponMainRecoil(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetOther.OnRep_CharacterWeaponMainRecoil // (Final|Native|Public|HasOutParms) // @ game+0x35b9ca0
	void OnRep_CharacterWeaponMainControl(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetOther.OnRep_CharacterWeaponMainControl // (Final|Native|Public|HasOutParms) // @ game+0x35b9bf0
	void OnRep_ChangeClipTimeFactor(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetOther.OnRep_ChangeClipTimeFactor // (Final|Native|Public|HasOutParms) // @ game+0x35b9b40
	void OnRep_BeHitEffectScale(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetOther.OnRep_BeHitEffectScale // (Final|Native|Public|HasOutParms) // @ game+0x35b9a90
	void OnRep_AimingTimeFactor(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetOther.OnRep_AimingTimeFactor // (Final|Native|Public|HasOutParms) // @ game+0x35b9930
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAttributeSetSpeed
// Size: 0x300 (Inherited: 0x38)
class UGPAttributeSetSpeed : public UGPAttributeSet {
public:

	struct FGPGameplayAttributeData Speed; // 0x38(0x18)
	float MaxSpeed; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
	struct FGPGameplayAttributeData RuntimeMaxSpeed; // 0x58(0x18)
	struct FGPGameplayAttributeData StandBasicSpeed; // 0x70(0x18)
	struct FGPGameplayAttributeData SprintBasicSpeed; // 0x88(0x18)
	struct FGPGameplayAttributeData StandSilentWalkSpeed; // 0xa0(0x18)
	struct FGPGameplayAttributeData CrouchBasicSpeed; // 0xb8(0x18)
	struct FGPGameplayAttributeData CrouchSilentWalkSpeed; // 0xd0(0x18)
	struct FGPGameplayAttributeData ProneBasicSpeed; // 0xe8(0x18)
	struct FGPGameplayAttributeData ImpendingDeathBasicSpeed; // 0x100(0x18)
	struct FGPGameplayAttributeData SuperSprintBasicSpeed; // 0x118(0x18)
	struct FGPGameplayAttributeData Moveable; // 0x130(0x18)
	struct FGPGameplayAttributeData LockSprint; // 0x148(0x18)
	struct FGPGameplayAttributeData AnimSpeedScale; // 0x160(0x18)
	struct FGPGameplayAttributeData JumpZVelocity; // 0x178(0x18)
	struct FGPGameplayAttributeData Stamina; // 0x190(0x18)
	struct FGPGameplayAttributeData MaxStamina; // 0x1a8(0x18)
	struct FGPGameplayAttributeData StaminaRegenRate; // 0x1c0(0x18)
	struct FGPGameplayAttributeData StaminaSprintChangeRate; // 0x1d8(0x18)
	struct FGPGameplayAttributeData StaminaIndependentNegativeChangeRate; // 0x1f0(0x18)
	struct FGPGameplayAttributeData StaminaIndependentPositiveChangeRate; // 0x208(0x18)
	struct FGPGameplayAttributeData StaminaStandRunChangeValue; // 0x220(0x18)
	struct FGPGameplayAttributeData StaminaCostRate; // 0x238(0x18)
	struct FGPGameplayAttributeData MinFOVRate; // 0x250(0x18)
	struct FGPGameplayAttributeData FovRate; // 0x268(0x18)
	struct FGPGameplayAttributeData ReadyWeaponRate; // 0x280(0x18)
	struct FGPGameplayAttributeData EnableSprint; // 0x298(0x18)
	struct FGPGameplayAttributeData EnableSlide; // 0x2b0(0x18)
	struct FGPGameplayAttributeData IsLeftLegFracture; // 0x2c8(0x18)
	struct FGPGameplayAttributeData IsRightLegFracture; // 0x2e0(0x18)
	char pad_2F8[0x8]; // 0x2f8(0x08)

	void OnRep_SuperSprintBasicSpeed(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_SuperSprintBasicSpeed // (Final|Native|Protected|HasOutParms) // @ game+0x35bb6c0
	void OnRep_StandSilentWalkSpeed(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_StandSilentWalkSpeed // (Final|Native|Protected|HasOutParms) // @ game+0x35bb560
	void OnRep_StandBasicSpeed(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_StandBasicSpeed // (Final|Native|Protected|HasOutParms) // @ game+0x35bb4b0
	void OnRep_StaminaStandRunChangeValue(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_StaminaStandRunChangeValue // (Final|Native|Protected|HasOutParms) // @ game+0x35bb400
	void OnRep_StaminaSprintChangeRate(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_StaminaSprintChangeRate // (Final|Native|Protected|HasOutParms) // @ game+0x35bb350
	void OnRep_StaminaRegenRate(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_StaminaRegenRate // (Final|Native|Protected|HasOutParms) // @ game+0x35bb2a0
	void OnRep_StaminaIndependentPositiveChangeRate(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_StaminaIndependentPositiveChangeRate // (Final|Native|Protected|HasOutParms) // @ game+0x35bb1f0
	void OnRep_StaminaIndependentNegativeChangeRate(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_StaminaIndependentNegativeChangeRate // (Final|Native|Protected|HasOutParms) // @ game+0x35bb140
	void OnRep_StaminaCostRate(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_StaminaCostRate // (Final|Native|Protected|HasOutParms) // @ game+0x35bb090
	void OnRep_Stamina(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_Stamina // (Final|Native|Protected|HasOutParms) // @ game+0x35bafe0
	void OnRep_SprintBasicSpeed(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_SprintBasicSpeed // (Final|Native|Protected|HasOutParms) // @ game+0x35baf30
	void OnRep_Speed(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_Speed // (Final|Native|Protected|HasOutParms) // @ game+0x35bae80
	void OnRep_RuntimeMaxSpeed(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_RuntimeMaxSpeed // (Final|Native|Protected|HasOutParms) // @ game+0x35babc0
	void OnRep_ReadyWeaponRate(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_ReadyWeaponRate // (Final|Native|Protected|HasOutParms) // @ game+0x35ba9b0
	void OnRep_ProneBasicSpeed(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_ProneBasicSpeed // (Final|Native|Protected|HasOutParms) // @ game+0x35ba900
	void OnRep_Moveable(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_Moveable // (Native|Protected|HasOutParms) // @ game+0x35ba7a0
	void OnRep_MaxStamina(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_MaxStamina // (Final|Native|Protected|HasOutParms) // @ game+0x35ba6f0
	void OnRep_LockSprint(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_LockSprint // (Final|Native|Protected|HasOutParms) // @ game+0x35ba590
	void OnRep_JumpZVelocity(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_JumpZVelocity // (Final|Native|Protected|HasOutParms) // @ game+0x35ba430
	void OnRep_IsRightLegFracture(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_IsRightLegFracture // (Final|Native|Protected|HasOutParms) // @ game+0x35ba380
	void OnRep_IsLeftLegFracture(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_IsLeftLegFracture // (Final|Native|Protected|HasOutParms) // @ game+0x35ba2d0
	void OnRep_ImpendingDeathBasicSpeed(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_ImpendingDeathBasicSpeed // (Final|Native|Protected|HasOutParms) // @ game+0x35ba220
	void OnRep_FOVRate(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_FOVRate // (Final|Native|Protected|HasOutParms) // @ game+0x35ba170
	void OnRep_EnableSprint(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_EnableSprint // (Final|Native|Protected|HasOutParms) // @ game+0x35ba0c0
	void OnRep_EnableSlide(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_EnableSlide // (Final|Native|Protected|HasOutParms) // @ game+0x35ba010
	void OnRep_CrouchSilentWalkSpeed(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_CrouchSilentWalkSpeed // (Final|Native|Protected|HasOutParms) // @ game+0x35b9e00
	void OnRep_CrouchBasicSpeed(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_CrouchBasicSpeed // (Final|Native|Protected|HasOutParms) // @ game+0x35b9d50
	void OnRep_AnimSpeedScale(struct FGPGameplayAttributeData& OldData); // Function GPGameplay.GPAttributeSetSpeed.OnRep_AnimSpeedScale // (Native|Protected|HasOutParms) // @ game+0x35b99e0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCameraModifier_FPPAnimCurve
// Size: 0x98 (Inherited: 0x50)
class UGPCameraModifier_FPPAnimCurve : public UGPCameraModifier {
public:

	struct FName XCurveName; // 0x50(0x08)
	struct FName YCurveName; // 0x58(0x08)
	struct FName ZCurveName; // 0x60(0x08)
	struct FName PitchCurveName; // 0x68(0x08)
	struct FName YawCurveName; // 0x70(0x08)
	struct FName RollCurveName; // 0x78(0x08)
	struct FVector CameraLocationOffset; // 0x80(0x0c)
	struct FRotator CameraRotationOffset; // 0x8c(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCameraModifier_AfterFPPPlayerLanding
// Size: 0xb8 (Inherited: 0x50)
class UGPCameraModifier_AfterFPPPlayerLanding : public UGPCameraModifier {
public:

	float StartFallingTime; // 0x50(0x04)
	char pad_54[0x1]; // 0x54(0x01)
	bool bUseAnimCurve; // 0x55(0x01)
	bool bOverrideCameraLocation; // 0x56(0x01)
	bool bUseTPPMesh; // 0x57(0x01)
	struct FName FocusBone; // 0x58(0x08)
	struct FVector CameraOffset; // 0x60(0x0c)
	struct FVector CameraOffsetOnRoot; // 0x6c(0x0c)
	struct FVector FocusOffset; // 0x78(0x0c)
	char pad_84[0x4]; // 0x84(0x04)
	struct UCurveFloat* CameraOffsetScaleCurve_Falling_Low; // 0x88(0x08)
	struct UCurveFloat* CameraOffsetScaleCurve_Falling_High; // 0x90(0x08)
	struct FName CameraOffsetXCurveName; // 0x98(0x08)
	struct FName CameraOffsetYCurveName; // 0xa0(0x08)
	struct FName CameraOffsetZCurveName; // 0xa8(0x08)
	struct UCurveFloat* CameraOffsetScaleCurve; // 0xb0(0x08)

	void OnViewTargetLanding(struct ACHARACTER* Ch, float HeightIGP, float MaxSpeedIGP); // Function GPGameplay.GPCameraModifier_AfterFPPPlayerLanding.OnViewTargetLanding // (Final|Native|Public) // @ game+0x35c74e0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCameraModifier_AfterDied
// Size: 0x98 (Inherited: 0x50)
class UGPCameraModifier_AfterDied : public UGPCameraModifier {
public:

	float StartPlayTime; // 0x50(0x04)
	bool bOverrideCameraLocation; // 0x54(0x01)
	bool bUseTPPMesh; // 0x55(0x01)
	char pad_56[0x2]; // 0x56(0x02)
	struct FName FocusBone; // 0x58(0x08)
	struct FVector CameraOffset; // 0x60(0x0c)
	struct FVector CameraOffsetOnRoot; // 0x6c(0x0c)
	struct FVector FocusOffset; // 0x78(0x0c)
	char pad_84[0x4]; // 0x84(0x04)
	struct UCurveVector* CameraOffsetCurve; // 0x88(0x08)
	char pad_90[0x8]; // 0x90(0x08)

	void OnViewTargetChanged(struct AGPPlayerController* GPPc, struct AActor* NewViewTarget, struct AActor* OldViewTarget); // Function GPGameplay.GPCameraModifier_AfterDied.OnViewTargetChanged // (Final|Native|Public) // @ game+0x35c7160
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCameraModifier_DOFAfterDied
// Size: 0x78 (Inherited: 0x50)
class UGPCameraModifier_DOFAfterDied : public UGPCameraModifier {
public:

	enum class EDepthOfFieldMethod DepthOfFieldMethod; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	float DepthOfFieldFstop; // 0x54(0x04)
	float StartPlayTime; // 0x58(0x04)
	struct FVector CameraFocusOffset; // 0x5c(0x0c)
	struct UCurveFloat* CameraFocusOffsetCurve; // 0x68(0x08)
	char pad_70[0x8]; // 0x70(0x08)

	void OnViewTargetChanged(struct AGPPlayerController* GPPc, struct AActor* NewViewTarget, struct AActor* OldViewTarget); // Function GPGameplay.GPCameraModifier_DOFAfterDied.OnViewTargetChanged // (Final|Native|Public) // @ game+0x35c7260
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCameraModifier_LagCameraWhenRush
// Size: 0xe8 (Inherited: 0x50)
class UGPCameraModifier_LagCameraWhenRush : public UGPCameraModifier {
public:

	bool bReturn; // 0x50(0x01)
	bool bUseTPPMesh; // 0x51(0x01)
	char pad_52[0x2]; // 0x52(0x02)
	struct FName FocusBoneName; // 0x54(0x08)
	char pad_5C[0x4]; // 0x5c(0x04)
	struct TMap<struct FName, struct UCurveVector*> Curves; // 0x60(0x50)
	struct UCurveVector* CurCurve; // 0xb0(0x08)
	struct FName EndCurveName; // 0xb8(0x08)
	float EndElapseTime; // 0xc0(0x04)
	bool bAutoEnd; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
	float Duration; // 0xc8(0x04)
	char pad_CC[0x1c]; // 0xcc(0x1c)

	void OnViewTargetDied(struct AGPCharacterBase* CHARACTER); // Function GPGameplay.GPCameraModifier_LagCameraWhenRush.OnViewTargetDied // (Final|Native|Public) // @ game+0x35c7460
	void OnViewTargetChanged(struct AGPPlayerController* GPPc, struct AActor* NewViewTarget, struct AActor* OldViewTarget); // Function GPGameplay.GPCameraModifier_LagCameraWhenRush.OnViewTargetChanged // (Final|Native|Public) // @ game+0x35c7360
	void EnableRushLagCamera(bool bInEnabled, struct FName& CurveName); // Function GPGameplay.GPCameraModifier_LagCameraWhenRush.EnableRushLagCamera // (Native|Public|HasOutParms) // @ game+0x35c4e70
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCharacterMovementComponentBase
// Size: 0x7d8 (Inherited: 0x7c8)
class UGPCharacterMovementComponentBase : public UIntCharacterMovementComponent {
public:

	struct FGameplayTag MovementDisableTag; // 0x7c8(0x08)
	bool bEnablePhysics; // 0x7d0(0x01)
	char pad_7D1[0x7]; // 0x7d1(0x07)

	float GetMovingProjectionOnAccel(); // Function GPGameplay.GPCharacterMovementComponentBase.GetMovingProjectionOnAccel // (Native|Public|Const) // @ game+0x35e3f70
	float GetMovingDirAngle(); // Function GPGameplay.GPCharacterMovementComponentBase.GetMovingDirAngle // (Native|Public|BlueprintCallable) // @ game+0x35e3f30
	struct FVector GetCurrFloorNormal(); // Function GPGameplay.GPCharacterMovementComponentBase.GetCurrFloorNormal // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x35e3ef0
	struct FVector GetCurrFloorForward(); // Function GPGameplay.GPCharacterMovementComponentBase.GetCurrFloorForward // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x35e3eb0
	float GetCurrFloorAngle(); // Function GPGameplay.GPCharacterMovementComponentBase.GetCurrFloorAngle // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35e3e70
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPDialogAction_AddDialogOption
// Size: 0x60 (Inherited: 0x38)
class UGPDialogAction_AddDialogOption : public UGPDialogAsyncActionBase {
public:

	struct FText DialogOptionTitle; // 0x38(0x18)
	/*struct FMulticastInlineDelegate*/char OnClickedOption[0x10]; // 0x50(0x10)

	struct UGPDialogAction_AddDialogOption* STATIC_GPDialogAction_AddDialogOption(struct AGPDialogSubsystem* DialogSubsys, struct FText OptionTitle); // Function GPGameplay.GPDialogAction_AddDialogOption.GPDialogAction_AddDialogOption // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35f6a10
	void FireReturn(); // Function GPGameplay.GPDialogAction_AddDialogOption.FireReturn // (Final|Native|Public|BlueprintCallable) // @ game+0x35f69f0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPDialogAction_PlaySubtitleSequence
// Size: 0x58 (Inherited: 0x38)
class UGPDialogAction_PlaySubtitleSequence : public UGPDialogAsyncActionBase {
public:

	char pad_38[0x10]; // 0x38(0x10)
	/*struct FMulticastInlineDelegate*/char OnSubtitleSequenceEnd[0x10]; // 0x48(0x10)

	void SubtitleSequenceEnd(struct FSubtitleSequenceInfo& SubtitleSeqInfo); // Function GPGameplay.GPDialogAction_PlaySubtitleSequence.SubtitleSequenceEnd // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x35f78f0
	struct UGPDialogAction_PlaySubtitleSequence* STATIC_GPDialogAction_PlaySubtitleSequence(struct AGPDialogSubsystem* DialogSubsys, struct FName SubtitleSequenceId, enum class ESubtitleSequenceType SubtitleSequenceType); // Function GPGameplay.GPDialogAction_PlaySubtitleSequence.GPDialogAction_PlaySubtitleSequence // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35f6ca0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPDialogAction_OpenUI
// Size: 0x48 (Inherited: 0x38)
class UGPDialogAction_OpenUI : public UGPDialogAsyncActionBase {
public:

	struct FString UIName; // 0x38(0x10)

	struct UGPDialogAction_OpenUI* STATIC_GPDialogAction_OpenUI(struct AGPDialogSubsystem* DialogSubsys, struct FString UIName); // Function GPGameplay.GPDialogAction_OpenUI.GPDialogAction_OpenUI // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x35f6b40
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPFSMInstanceNetworkBase
// Size: 0x6a0 (Inherited: 0x640)
class UGPFSMInstanceNetworkBase : public UGPFSMInstanceBase {
public:

	char pad_640[0x1]; // 0x640(0x01)
	bool bHasDelayActiveStateChange; // 0x641(0x01)
	bool bHasDelayStateTickNumberChange; // 0x642(0x01)
	bool bHasDelayClientFSMStateInit; // 0x643(0x01)
	char pad_644[0x4]; // 0x644(0x04)
	struct AGPCharacter* GPCharacter; // 0x648(0x08)
	struct UGPFSMStateMachineComponent* GPFSMComponent; // 0x650(0x08)
	bool bFSMIsInited; // 0x658(0x01)
	char pad_659[0x7]; // 0x659(0x07)
	struct TArray<struct FGuid> R_ActiveStates_Client; // 0x660(0x10)
	int32_t ClientStateTickNumber; // 0x670(0x04)
	int32_t ServerStateTickNumber; // 0x674(0x04)
	char pad_678[0x28]; // 0x678(0x28)

	bool ShouldWorkByNetworkConfiguration(enum class EGPFSMNetworkIdentityType Type); // Function GPGameplay.GPFSMInstanceNetworkBase.ShouldWorkByNetworkConfiguration // (Final|Native|Public|BlueprintCallable) // @ game+0x35fa240
	void SendFSMGlobalEvent(struct FGameplayTag EventTag); // Function GPGameplay.GPFSMInstanceNetworkBase.SendFSMGlobalEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x35fa1a0
	struct FString PrintAllState(struct TArray<struct FGuid>& StateArray); // Function GPGameplay.GPFSMInstanceNetworkBase.PrintAllState // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x35f9f20
	void PostTickDispatch(float DeltaTime); // Function GPGameplay.GPFSMInstanceNetworkBase.PostTickDispatch // (Final|Native|Public) // @ game+0x35f9ea0
	void OnRep_ForceStateResetTickNumber(); // Function GPGameplay.GPFSMInstanceNetworkBase.OnRep_ForceStateResetTickNumber // (Final|Native|Public) // @ game+0x35f9e80
	void OnClientSeamlessTravelEnd(bool bReconnect); // Function GPGameplay.GPFSMInstanceNetworkBase.OnClientSeamlessTravelEnd // (Final|Native|Public) // @ game+0x35f9df0
	void DelayOnRep_ForceStateResetTickNumber(); // Function GPGameplay.GPFSMInstanceNetworkBase.DelayOnRep_ForceStateResetTickNumber // (Final|Native|Public) // @ game+0x35f9cb0
	void DelayOnRep_ClientInitFSMActiveStates(); // Function GPGameplay.GPFSMInstanceNetworkBase.DelayOnRep_ClientInitFSMActiveStates // (Final|Native|Public) // @ game+0x35f9c90
	void DelayOnRep_ActiveStateChanges(); // Function GPGameplay.GPFSMInstanceNetworkBase.DelayOnRep_ActiveStateChanges // (Final|Native|Public) // @ game+0x35f9c70
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPFSMSkillEntityComponentBase
// Size: 0x2a8 (Inherited: 0x1f0)
class UGPFSMSkillEntityComponentBase : public UGPFSMStateMachineComponent {
public:

	char pad_1F0[0x8]; // 0x1f0(0x08)
	int32_t SkillId; // 0x1f8(0x04)
	struct FName SkillName; // 0x1fc(0x08)
	char pad_204[0x14]; // 0x204(0x14)
	/*struct TMap<enum class ECharacterFSMEventDefine, struct FMulticastInlineDelegate>*/char OnSkillFSMEventMap[0x50]; // 0x218(0x50)
	char pad_268[0x4]; // 0x268(0x04)
	float SkillDurationEndTimestamp; // 0x26c(0x04)
	char pad_270[0x4]; // 0x270(0x04)
	float CooldownEndTimestamp; // 0x274(0x04)
	char pad_278[0xc]; // 0x278(0x0c)
	int32_t RestoreCurrentCount; // 0x284(0x04)
	float RestoreRemainTimeEndTimestamp; // 0x288(0x04)
	char pad_28C[0x1c]; // 0x28c(0x1c)

	bool SendFSMEvent(enum class ECharacterFSMEventDefine Event, float Value, struct UObject* EventObject); // Function GPGameplay.GPFSMSkillEntityComponentBase.SendFSMEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x35fa090
	void Rep_SkillName(); // Function GPGameplay.GPFSMSkillEntityComponentBase.Rep_SkillName // (Final|Native|Public) // @ game+0x35fa070
	void Rep_SkillID(); // Function GPGameplay.GPFSMSkillEntityComponentBase.Rep_SkillID // (Final|Native|Public) // @ game+0x35fa050
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPFSMStateTimeoutInstance
// Size: 0x680 (Inherited: 0x660)
class UGPFSMStateTimeoutInstance : public UGPFSMStateInstance {
public:

	float Timeout; // 0x660(0x04)
	bool TriggerEvent; // 0x664(0x01)
	char pad_665[0x3]; // 0x665(0x03)
	float ElapsedTime; // 0x668(0x04)
	float CurrentRemainTime; // 0x66c(0x04)
	enum class EGPFSMTransitionEvent TriggerEventEnum; // 0x670(0x01)
	bool OnlyServerTriggerEvent; // 0x671(0x01)
	bool TriggerGlobalEvent; // 0x672(0x01)
	char pad_673[0x1]; // 0x673(0x01)
	struct FGameplayTag GlobalEventTag; // 0x674(0x08)
	bool bNeedForceSyncToClient; // 0x67c(0x01)
	char pad_67D[0x3]; // 0x67d(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPFSMStateWeaponInteractiveInstance
// Size: 0x688 (Inherited: 0x660)
class UGPFSMStateWeaponInteractiveInstance : public UGPFSMStateInstance {
public:

	bool isBeginInteractive; // 0x660(0x01)
	bool NeedInteractive; // 0x661(0x01)
	char pad_662[0x2]; // 0x662(0x02)
	float ServerUnequipTimeScale; // 0x664(0x04)
	enum class EGPFSMTransitionEvent TriggerEventEnum; // 0x668(0x01)
	bool UseParentInstanceSendEvent; // 0x669(0x01)
	char pad_66A[0x2]; // 0x66a(0x02)
	int32_t ParentNNum; // 0x66c(0x04)
	float FixPutWeaponAnimTime; // 0x670(0x04)
	float AutonomousGetWeaponTimeOut; // 0x674(0x04)
	float EquipBlendIn; // 0x678(0x04)
	char pad_67C[0xc]; // 0x67c(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPInputAimLogic
// Size: 0x178 (Inherited: 0x38)
class UGPInputAimLogic : public UGPInputLogicImpl {
public:

	char pad_38[0x128]; // 0x38(0x128)
	float LongTouchDur; // 0x160(0x04)
	char pad_164[0x14]; // 0x164(0x14)

	void OnPlayerToggleEvent(bool Force); // Function GPGameplay.GPInputAimLogic.OnPlayerToggleEvent // (Final|Native|Protected) // @ game+0x3615810
	void OnCancelAimByProne(int32_t FunFlag); // Function GPGameplay.GPInputAimLogic.OnCancelAimByProne // (Final|Native|Protected) // @ game+0x3615670
	void OnAimingControlModeChanged(); // Function GPGameplay.GPInputAimLogic.OnAimingControlModeChanged // (Final|Native|Protected) // @ game+0x3615650
	void OnActiveWeaponChanged(); // Function GPGameplay.GPInputAimLogic.OnActiveWeaponChanged // (Final|Native|Protected) // @ game+0x3615630
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPInputChangeScopeLogic
// Size: 0x98 (Inherited: 0x38)
class UGPInputChangeScopeLogic : public UGPInputLogicImpl {
public:

	char pad_38[0x20]; // 0x38(0x20)
	struct UMobilePlayerInput* MobilePlayerInput; // 0x58(0x08)
	char pad_60[0x30]; // 0x60(0x30)
	struct UWeaponHudController* WeaponHudController; // 0x90(0x08)

	void SetCallRouletteThreshold(float CallThreshold); // Function GPGameplay.GPInputChangeScopeLogic.SetCallRouletteThreshold // (Final|Native|Public) // @ game+0x361da80
	void ProcessChangeScopeBtnUp(); // Function GPGameplay.GPInputChangeScopeLogic.ProcessChangeScopeBtnUp // (Final|Native|Public) // @ game+0x361d860
	void ProcessChangeScopeBtnDown(); // Function GPGameplay.GPInputChangeScopeLogic.ProcessChangeScopeBtnDown // (Final|Native|Public) // @ game+0x361d840
	void ProcessButtonClick(bool bInDoubleClick); // Function GPGameplay.GPInputChangeScopeLogic.ProcessButtonClick // (Final|Native|Public) // @ game+0x361d7b0
	void OnScopeRouletteShow(struct FString FunctionName, struct UBaseUIView* View); // Function GPGameplay.GPInputChangeScopeLogic.OnScopeRouletteShow // (Final|Native|Public) // @ game+0x361d560
	void LoadGunSightRoulettePanel(); // Function GPGameplay.GPInputChangeScopeLogic.LoadGunSightRoulettePanel // (Final|Native|Public) // @ game+0x361b1a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPInputFireLogic
// Size: 0xe8 (Inherited: 0x38)
class UGPInputFireLogic : public UGPInputLogicImpl {
public:

	char pad_38[0x78]; // 0x38(0x78)
	struct AWeaponBase* CurActiveWeapon; // 0xb0(0x08)
	enum class EFireMode PlayerFireModeSetting; // 0xb8(0x01)
	bool bOpenSightOnFireSetting; // 0xb9(0x01)
	bool bInstantFireSightSetting; // 0xba(0x01)
	char pad_BB[0x2d]; // 0xbb(0x2d)

	void OnWeaponZoomStateChange(bool bZoom); // Function GPGameplay.GPInputFireLogic.OnWeaponZoomStateChange // (Final|Native|Protected) // @ game+0x361d720
	void CheckReplaceSKillNextFrame(); // Function GPGameplay.GPInputFireLogic.CheckReplaceSKillNextFrame // (Final|Native|Public) // @ game+0x361ae00
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPInputInteractLogic
// Size: 0x38 (Inherited: 0x38)
class UGPInputInteractLogic : public UGPInputLogicImpl {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPInputLeftFireLogic
// Size: 0x78 (Inherited: 0x38)
class UGPInputLeftFireLogic : public UGPInputLogicImpl {
public:

	char pad_38[0x40]; // 0x38(0x40)

	void StopFire(); // Function GPGameplay.GPInputLeftFireLogic.StopFire // (Native|Public|BlueprintCallable) // @ game+0x895960
	void StartFire(); // Function GPGameplay.GPInputLeftFireLogic.StartFire // (Native|Public|BlueprintCallable) // @ game+0xaa2210
	void CheckReplaceSKillNextFrame(); // Function GPGameplay.GPInputLeftFireLogic.CheckReplaceSKillNextFrame // (Final|Native|Public) // @ game+0x361ae20
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPInputMarkingLogic
// Size: 0x80 (Inherited: 0x38)
class UGPInputMarkingLogic : public UGPInputLogicImpl {
public:

	struct AGPMarkerManager* MarkerManager; // 0x38(0x08)
	struct UMobilePlayerInput* MobilePlayerInput; // 0x40(0x08)
	char pad_48[0x38]; // 0x48(0x38)

	void ProcessMarkingBtnUp(); // Function GPGameplay.GPInputMarkingLogic.ProcessMarkingBtnUp // (Final|Native|Public) // @ game+0x3624e60
	void ProcessMarkingBtnDown(); // Function GPGameplay.GPInputMarkingLogic.ProcessMarkingBtnDown // (Final|Native|Public) // @ game+0x3624e40
	void ProcessButtonClick(bool bInDoubleClick); // Function GPGameplay.GPInputMarkingLogic.ProcessButtonClick // (Final|Native|Public) // @ game+0x3624d20
	void OnMarkingRouletteLoadedAndShow(struct FString FunctionName, struct UBaseUIView* View); // Function GPGameplay.GPInputMarkingLogic.OnMarkingRouletteLoadedAndShow // (Final|Native|Public) // @ game+0x3624940
	int32_t MobileGetAimingOperateType(); // Function GPGameplay.GPInputMarkingLogic.MobileGetAimingOperateType // (Final|Native|Public) // @ game+0x3624810
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPInputMovementLogic
// Size: 0x70 (Inherited: 0x38)
class UGPInputMovementLogic : public UGPInputLogicImpl {
public:

	enum class EJoystickMode JoystickMode; // 0x38(0x01)
	char pad_39[0x37]; // 0x39(0x37)

	void OnJoystickModeChanged(enum class EJoystickMode InJoystickMode); // Function GPGameplay.GPInputMovementLogic.OnJoystickModeChanged // (Final|Native|Public) // @ game+0x3624880
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPInputReloadLogic
// Size: 0x98 (Inherited: 0x38)
class UGPInputReloadLogic : public UGPInputLogicImpl {
public:

	char pad_38[0x28]; // 0x38(0x28)
	struct UMobilePlayerInput* MobilePlayerInput; // 0x60(0x08)
	char pad_68[0x30]; // 0x68(0x30)

	void SetLongPressTime(float LongPressTime); // Function GPGameplay.GPInputReloadLogic.SetLongPressTime // (Final|Native|Public) // @ game+0x3626350
	void ProcessReloadBtnUp(); // Function GPGameplay.GPInputReloadLogic.ProcessReloadBtnUp // (Final|Native|Public) // @ game+0x3624ea0
	void ProcessReloadBtnDown(); // Function GPGameplay.GPInputReloadLogic.ProcessReloadBtnDown // (Final|Native|Public) // @ game+0x3624e80
	void ProcessButtonClick(bool bInDoubleClick); // Function GPGameplay.GPInputReloadLogic.ProcessButtonClick // (Final|Native|Public) // @ game+0x3624db0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPWeaponInputLogic
// Size: 0x70 (Inherited: 0x38)
class UGPWeaponInputLogic : public UGPInputLogicImpl {
public:

	char pad_38[0x8]; // 0x38(0x08)
	struct TArray<struct UClass*> InputClass; // 0x40(0x10)
	struct TArray<struct UWeaponInputBaseLogic*> InputInterface; // 0x50(0x10)
	struct UWeaponInputBaseLogic* CurrentInput; // 0x60(0x08)
	char pad_68[0x8]; // 0x68(0x08)

	void OnReload(); // Function GPGameplay.GPWeaponInputLogic.OnReload // (Final|Native|Public) // @ game+0x36849f0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPModularWeaponDesc
// Size: 0x828 (Inherited: 0x180)
class UGPModularWeaponDesc : public UModularWeaponDesc {
public:

	struct FModularWeaponDynamicAttrbuites DynamicAttributes; // 0x180(0x50)
	struct FWeaponPerk Perk; // 0x1d0(0x20)
	struct FWeaponDataAttribute AttributeCache; // 0x1f0(0x638)

	void ToGunDescInfo(struct FGPWeaponDescInfo& GunDescInfo, uint64_t PlayerId); // Function GPGameplay.GPModularWeaponDesc.ToGunDescInfo // (Final|Native|Public|HasOutParms) // @ game+0x3633f40
	void SetAmmoCount(uint64_t AmmoCount); // Function GPGameplay.GPModularWeaponDesc.SetAmmoCount // (Final|Native|Public) // @ game+0x36339d0
	void STATIC_RecycleNextFrame(struct UGPModularWeaponDesc* InGPModularWeaponDesc); // Function GPGameplay.GPModularWeaponDesc.RecycleNextFrame // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3633960
	void STATIC_Recycle(struct UGPModularWeaponDesc* InGPModularWeaponDesc); // Function GPGameplay.GPModularWeaponDesc.Recycle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36338f0
	void OnCreateItem(enum class EDFMGamePlayMode GamePlayMode); // Function GPGameplay.GPModularWeaponDesc.OnCreateItem // (Final|Native|Public) // @ game+0x36337a0
	char GetPowerFlashCount(); // Function GPGameplay.GPModularWeaponDesc.GetPowerFlashCount // (Final|Native|Public) // @ game+0x36336f0
	float GetPartAttrValue(uint64_t PartGid, struct FName AttrName); // Function GPGameplay.GPModularWeaponDesc.GetPartAttrValue // (Final|Native|Public) // @ game+0x3633630
	struct FModularWeaponDynamicAttrbuites GetDynamicAttributes(); // Function GPGameplay.GPModularWeaponDesc.GetDynamicAttributes // (Final|Native|Public) // @ game+0x36334d0
	uint64_t GetCurrentAmmoItemId(); // Function GPGameplay.GPModularWeaponDesc.GetCurrentAmmoItemId // (Final|Native|Public) // @ game+0x36334a0
	uint16_t GetCarriedAmmoCount(); // Function GPGameplay.GPModularWeaponDesc.GetCarriedAmmoCount // (Final|Native|Public) // @ game+0x3633470
	int32_t GetBitMaskPropertyValues(); // Function GPGameplay.GPModularWeaponDesc.GetBitMaskPropertyValues // (Final|Native|Public) // @ game+0x3633440
	struct TArray<struct FAmmoDataItem> GetAmmoDataItems(); // Function GPGameplay.GPModularWeaponDesc.GetAmmoDataItems // (Final|Native|Public) // @ game+0x3633400
	uint16_t GetAmmoCountInClip(); // Function GPGameplay.GPModularWeaponDesc.GetAmmoCountInClip // (Final|Native|Public) // @ game+0x36333d0
	void FromGunDescInfo(struct FGPWeaponDescInfo& GunDescInfo, bool bAttrOnly); // Function GPGameplay.GPModularWeaponDesc.FromGunDescInfo // (Final|Native|Public|HasOutParms) // @ game+0x3633270
	void AddAmmoDataItem(uint64_t ItemID, uint64_t ItemGid, uint64_t ItemNum, uint64_t ItemBindPlayerID); // Function GPGameplay.GPModularWeaponDesc.AddAmmoDataItem // (Final|Native|Public) // @ game+0x3633120
	struct UGPModularWeaponDesc* STATIC_Acquire(struct UObject* WorldContextObject, bool bAutoRecycleNextFrame); // Function GPGameplay.GPModularWeaponDesc.Acquire // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3633060
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPlayerSafePathListener
// Size: 0x3c0 (Inherited: 0x380)
class AGPPlayerSafePathListener : public AGPPathFollower {
public:

	/*struct FMulticastInlineDelegate*/char OnEnterSafePath[0x10]; // 0x380(0x10)
	/*struct FMulticastInlineDelegate*/char OnLeaveSafePath[0x10]; // 0x390(0x10)
	float SafeRadius; // 0x3a0(0x04)
	float SafeCheckInterval; // 0x3a4(0x04)
	float LastSafeCheckTime; // 0x3a8(0x04)
	char pad_3AC[0x4]; // 0x3ac(0x04)
	struct TArray<struct ACHARACTER*> SafeCharacters; // 0x3b0(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPreviewLineActor
// Size: 0x3f0 (Inherited: 0x3c0)
class AGPPreviewLineActor : public AGPPreviewLineActorBase {
public:

	struct FVector BaseScale; // 0x3c0(0x0c)
	int32_t PathIndex; // 0x3cc(0x04)
	struct UInstancedStaticMeshComponent* PreviewMesh; // 0x3d0(0x08)
	struct USceneComponent* StartPointComp; // 0x3d8(0x08)
	struct TArray<struct FTransform> LastLineTransforms; // 0x3e0(0x10)

	void UpdatePreview_Source(struct FVector Source, struct TArray<struct FVector>& TargetPos); // Function GPGameplay.GPPreviewLineActor.UpdatePreview_Source // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x3653ae0
	void SetStartPoint(struct FVector Loc); // Function GPGameplay.GPPreviewLineActor.SetStartPoint // (Final|Native|Public|HasDefaults) // @ game+0x3653900
	void CopyPathData(struct TArray<struct FVector>& NewPathPoints, int32_t StartIndex, struct FVector ExtendStartPoint); // Function GPGameplay.GPPreviewLineActor.CopyPathData // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x3652c50
	struct FTransform CalculateTransform(struct FVector PreLoc, struct FVector Loc); // Function GPGameplay.GPPreviewLineActor.CalculateTransform // (Final|Native|Public|HasDefaults) // @ game+0x3652930
	void BP_SetPathLineColor(int32_t LineState); // Function GPGameplay.GPPreviewLineActor.BP_SetPathLineColor // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x7ed88c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPreviewLineRendererActor
// Size: 0x400 (Inherited: 0x3c0)
class AGPPreviewLineRendererActor : public AGPPreviewLineActorBase {
public:

	int32_t MaxPointNum; // 0x3c0(0x04)
	float LineWidth; // 0x3c4(0x04)
	bool CaclForwardWithGapPoint; // 0x3c8(0x01)
	char pad_3C9[0x7]; // 0x3c9(0x07)
	struct UGPLineRendererComponent* LineRendererComponent; // 0x3d0(0x08)
	struct TArray<struct FVector> LocalPoints; // 0x3d8(0x10)
	struct TArray<struct FVector> LocalNormals; // 0x3e8(0x10)
	char pad_3F8[0x8]; // 0x3f8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPRagDollPhysicsComponentKinematicHip
// Size: 0xa80 (Inherited: 0x9b0)
class UGPRagDollPhysicsComponentKinematicHip : public UGPRagDollPhysicsComponent {
public:

	char pad_9B0[0xc]; // 0x9b0(0x0c)
	bool bDeferredRagDoll; // 0x9bc(0x01)
	char pad_9BD[0x3b]; // 0x9bd(0x3b)
	struct UGPAIDeathAnimConfigDataAsset* DeathAnimConfig; // 0x9f8(0x08)
	struct UPrimitiveComponent* UpdatedPrimitive; // 0xa00(0x08)
	struct FVector HipOffset; // 0xa08(0x0c)
	float HipRadius; // 0xa14(0x04)
	bool bKinematicHipConfigEnabled; // 0xa18(0x01)
	char pad_A19[0x3]; // 0xa19(0x03)
	float GravityZ; // 0xa1c(0x04)
	struct FKinematicHipRepInfo HipRepInfo; // 0xa20(0x18)
	float OverridePhysicsBlendTime; // 0xa38(0x04)
	float OverallStrengthRatio; // 0xa3c(0x04)
	bool bUseOverrideDeathAnims; // 0xa40(0x01)
	char pad_A41[0x7]; // 0xa41(0x07)
	struct TArray<struct FDeathAnimConfigWithDirRange> OverrideDeathAnims; // 0xa48(0x10)
	char pad_A58[0x28]; // 0xa58(0x28)

	struct FName GetDeathAnimByPart(enum class ECharacterPart HitPart, float TargetYaw, enum class EWeaponDeathType WeaponType, enum class EChracterPoseType Pose); // Function GPGameplay.GPRagDollPhysicsComponentKinematicHip.GetDeathAnimByPart // (Final|Native|Private|BlueprintCallable) // @ game+0x36560b0
	void EnableKinematicRagDoll(); // Function GPGameplay.GPRagDollPhysicsComponentKinematicHip.EnableKinematicRagDoll // (Final|Native|Public|BlueprintCallable) // @ game+0x3656090
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponBase
// Size: 0x1010 (Inherited: 0x390)
class AWeaponBase : public AGPWeaponBase {
public:

	char pad_390[0x4d8]; // 0x390(0x4d8)
	bool bAllow1pWeaponMeshTick; // 0x868(0x01)
	char pad_869[0x7]; // 0x869(0x07)
	uint64_t WeaponID; // 0x870(0x08)
	uint64_t WeaponGuid; // 0x878(0x08)
	uint32_t WeaponEquipPosition; // 0x880(0x04)
	char WeaponSlot; // 0x884(0x01)
	char pad_885[0x3]; // 0x885(0x03)
	int32_t SkillId; // 0x888(0x04)
	char ChargingSlotID; // 0x88c(0x01)
	char pad_88D[0x3]; // 0x88d(0x03)
	int32_t ChargingCDID; // 0x890(0x04)
	char pad_894[0x4]; // 0x894(0x04)
	struct FModularWeaponDynamicAttrbuites ModularWeaponDynamicAttrs; // 0x898(0x50)
	struct FWeaponPerk Perk; // 0x8e8(0x20)
	uint64_t PoorItemId; // 0x908(0x08)
	bool bHoldToFire; // 0x910(0x01)
	char pad_911[0x7]; // 0x911(0x07)
	struct FReplicateModularWeaponInfo ModularReplicateInfo; // 0x918(0xa0)
	struct FName ServerActorName; // 0x9b8(0x08)
	struct FWeaponIdentity ServerWeaponIdentity; // 0x9c0(0x04)
	char pad_9C4[0x74]; // 0x9c4(0x74)
	struct AGPCharacterBase* CharacterOwner; // 0xa38(0x08)
	char pad_A40[0x10]; // 0xa40(0x10)
	struct UWeaponBlackboard* WeaponBlackboard; // 0xa50(0x08)
	struct UClass* WeaponBlackBoardClass; // 0xa58(0x08)
	bool bIsSupportWeapon; // 0xa60(0x01)
	bool bSkillEndCanSwtichToSkillWeapon; // 0xa61(0x01)
	bool bSkillEndCanBeSwtichToSkillWeapon; // 0xa62(0x01)
	char pad_A63[0x8]; // 0xa63(0x08)
	bool bBeingDetachInventory; // 0xa6b(0x01)
	bool bInitWeaponInner; // 0xa6c(0x01)
	enum class EGPWeaponMode WeaponMode; // 0xa6d(0x01)
	char pad_A6E[0x2]; // 0xa6e(0x02)
	struct UGPModularWeaponDesc* CurrentModularWeaponDesc; // 0xa70(0x08)
	struct UGPModularWeaponDesc* TempModularWeaponDesc; // 0xa78(0x08)
	struct UGPASC* ASC; // 0xa80(0x08)
	enum class EWeaponAmmoLogicType WeaponAmmoLogic; // 0xa88(0x01)
	char pad_A89[0x7]; // 0xa89(0x07)
	struct TArray<struct TWeakObjectPtr<struct UGPWeaponDataComponentBase>> GPWeaponDataComponentList; // 0xa90(0x10)
	/*struct TArray<struct TScriptInterface<IGPWeaponTickInterface>>*/char WeaponTickComponents[0x10]; // 0xaa0(0x10)
	struct TMap<struct FName, struct TWeakObjectPtr<struct UGPWeaponDataComponentBase>> GPWeaponDataComponentMap; // 0xab0(0x50)
	struct UGPWeaponDataComponentBase* WeaponDataComponentZoomCache; // 0xb00(0x08)
	struct UGPWeaponDataComponentBase* WeaponDataComponentAdapterCache; // 0xb08(0x08)
	struct UGPWeaponDataComponentBase* GPWeaponDataComponentCoreCache; // 0xb10(0x08)
	struct UGPWeaponDataComponentBase* WeaponDataComponentCoreCache; // 0xb18(0x08)
	struct UGPWeaponDataComponentBase* WeaponDataComponentAmmoCache; // 0xb20(0x08)
	struct UGPWeaponDataComponentBase* GPWeaponDataComponentAdapterCache; // 0xb28(0x08)
	struct TArray<struct TWeakObjectPtr<struct UGPWeaponFuncComponentBase>> GPWeaponFuncComponentList; // 0xb30(0x10)
	struct TMap<struct FName, struct TWeakObjectPtr<struct UGPWeaponFuncComponentBase>> GPWeaponFuncComponentMap; // 0xb40(0x50)
	struct UGPWeaponFuncComponentBase* WeaponFuncComponentOffsetCache; // 0xb90(0x08)
	struct UGPWeaponFuncComponentBase* WeaponFuncComponentFireShakeCache; // 0xb98(0x08)
	struct UGPWeaponFuncComponentBase* WeaponFuncComponentZoomCache; // 0xba0(0x08)
	struct UGPWeaponFuncComponentBase* WeaponFuncComponentGunSwayCache; // 0xba8(0x08)
	struct TArray<struct TWeakObjectPtr<struct UGPWeaponViewComponentBase>> GPWeaponViewComponentList; // 0xbb0(0x10)
	struct UGPWeaponViewComponentBase* GPWeaponDataComponentAnimCache; // 0xbc0(0x08)
	struct UGPWeaponViewComponentBase* GPWeaponDataComponentAppearanceCache; // 0xbc8(0x08)
	struct UGPWeaponViewComponentBase* GPWeaponFuncComponentAppearanceCache; // 0xbd0(0x08)
	struct TMap<struct FName, struct TWeakObjectPtr<struct UGPWeaponViewComponentBase>> GPWeaponViewComponentMap; // 0xbd8(0x50)
	/*struct TSet<struct UClass*>*/char GPWeaponViewComponentClassSet[0x50]; // 0xc28(0x50)
	/*struct TSet<struct UClass*>*/char GPWeaponDynamicComponentClassSet[0x50]; // 0xc78(0x50)
	struct UGPWeaponViewComponentBase* SocketOverrideDataComponentAppearanceCache; // 0xcc8(0x08)
	struct UWeaponReplicateComponent* WeaponReplicateComponent; // 0xcd0(0x08)
	struct TWeakObjectPtr<struct AWeaponBase> ThirdPersonWeaponActor; // 0xcd8(0x08)
	/*struct TScriptInterface<IGPWeaponInterface>*/char ThisGPWeapon[0x10]; // 0xce0(0x10)
	/*struct TScriptInterface<IGPWeaponInterface>*/char FirstPersonGPWeapon[0x10]; // 0xcf0(0x10)
	/*struct TScriptInterface<IGPWeaponInterface>*/char ThirdPersonGPWeapon[0x10]; // 0xd00(0x10)
	/*struct TScriptInterface<IGPWeaponInterface>*/char FppObGPWeapon[0x10]; // 0xd10(0x10)
	/*struct TScriptInterface<IWeaponInterface>*/char ThisWeapon[0x10]; // 0xd20(0x10)
	/*struct TScriptInterface<IWeaponInterface>*/char FirstPersonWeapon[0x10]; // 0xd30(0x10)
	/*struct TScriptInterface<IWeaponInterface>*/char ThirdPersonWeapon[0x10]; // 0xd40(0x10)
	/*struct TScriptInterface<IWeaponInterface>*/char FppObWeapon[0x10]; // 0xd50(0x10)
	char pad_D60[0x19]; // 0xd60(0x19)
	bool bKeepUsedWeapon; // 0xd79(0x01)
	char pad_D7A[0x1e]; // 0xd7a(0x1e)
	/*struct FMulticastInlineDelegate*/char OnStartFireFailed[0x10]; // 0xd98(0x10)
	/*struct FMulticastInlineDelegate*/char OnStateStartFire[0x10]; // 0xda8(0x10)
	/*struct FMulticastInlineDelegate*/char OnStateStartFireForAI[0x10]; // 0xdb8(0x10)
	char pad_DC8[0x1d8]; // 0xdc8(0x1d8)
	struct UGPWeaponAttributeSetEquip* CachedAttributeSetEquip; // 0xfa0(0x08)
	struct UGPWeaponAttributeSetFireMode* CachedAttributeSetFireMode; // 0xfa8(0x08)
	struct UGPWeaponAttributeSetWeaponAmmo* CachedAttributeSetWeaponAmmo; // 0xfb0(0x08)
	struct UGPWeaponAttributeSetWeaponChangeClip* CachedAttributeSetChangeClip; // 0xfb8(0x08)
	struct UGPWeaponAttributeSetWeaponDamage* CachedAttributeSetWeaponDamage; // 0xfc0(0x08)
	struct UGPWeaponAttributeSetWeaponPerk* CachedAttributeSetWeaponPerk; // 0xfc8(0x08)
	char pad_FD0[0x40]; // 0xfd0(0x40)

	bool WeaponTraceForAI(struct TArray<struct AActor*>& IgnoreActors, struct TArray<struct UPrimitiveComponent*>& IgnoreComponents, struct FVector& Start, struct FVector& End, bool IgnoreHidden, struct FHitResult& OutHitResult); // Function GPGameplay.WeaponBase.WeaponTraceForAI // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x36ca6f0
	void WeaponRequestPointHitAction(struct FGPWeaponHitInfo& HitInfo, enum class EDamageValidateType DamageValidateType); // Function GPGameplay.WeaponBase.WeaponRequestPointHitAction // (Native|Public|HasOutParms) // @ game+0x36ca550
	void WeaponReload(); // Function GPGameplay.WeaponBase.WeaponReload // (Native|Public) // @ game+0x36ca530
	void WeaponInspcet(); // Function GPGameplay.WeaponBase.WeaponInspcet // (Native|Public) // @ game+0x1befa30
	void WeaponCancelReloadSingle(); // Function GPGameplay.WeaponBase.WeaponCancelReloadSingle // (Native|Public) // @ game+0x36ca510
	void WeaponCancelReload(); // Function GPGameplay.WeaponBase.WeaponCancelReload // (Native|Public) // @ game+0x36ca4f0
	void WeaponCancelChamber(); // Function GPGameplay.WeaponBase.WeaponCancelChamber // (Native|Public) // @ game+0x36ca4d0
	bool VerifyWeaponEvent(enum class EGPWeaponInnerEvent EventType); // Function GPGameplay.WeaponBase.VerifyWeaponEvent // (Native|Protected) // @ game+0x36ca440
	void UpdateAmmoInfo(); // Function GPGameplay.WeaponBase.UpdateAmmoInfo // (Native|Public) // @ game+0x36ca410
	void UpdateAmmoCount(); // Function GPGameplay.WeaponBase.UpdateAmmoCount // (Native|Public) // @ game+0x36ca3e0
	void UnEquipAmmo(int32_t Num); // Function GPGameplay.WeaponBase.UnEquipAmmo // (Native|Public) // @ game+0x36ca350
	void TryHoldToFireCancelCurrentState(enum class EWeaponCancelCurrentStateReason CancelReason); // Function GPGameplay.WeaponBase.TryHoldToFireCancelCurrentState // (Final|Native|Public) // @ game+0x36ca2d0
	bool SwitchWhenAbilityItemAmmoEmpty(); // Function GPGameplay.WeaponBase.SwitchWhenAbilityItemAmmoEmpty // (Native|Public) // @ game+0x36ca2a0
	void SimulatedCameraModeChanged(bool IsSimulatedUnderFPP); // Function GPGameplay.WeaponBase.SimulatedCameraModeChanged // (Final|Native|Public) // @ game+0x36ca210
	bool STATIC_ShouldGPWeaponInnerEventCanIgnoreByDiffXPP(enum class EGPWeaponInnerEvent& EventType); // Function GPGameplay.WeaponBase.ShouldGPWeaponInnerEventCanIgnoreByDiffXPP // (Final|Native|Static|Public|HasOutParms) // @ game+0x36ca180
	void SetWeaponUsed(bool InUsed, bool bEndEquip); // Function GPGameplay.WeaponBase.SetWeaponUsed // (Native|Public) // @ game+0x36ca0b0
	void SetWeaponTickEnabled(bool bInTickable); // Function GPGameplay.WeaponBase.SetWeaponTickEnabled // (Final|Native|Protected) // @ game+0x36ca020
	void SetWeaponSwitchToNext(bool bQuiet, bool bSkillEnd); // Function GPGameplay.WeaponBase.SetWeaponSwitchToNext // (Native|Public) // @ game+0x36c9f50
	void SetWeaponReUse(); // Function GPGameplay.WeaponBase.SetWeaponReUse // (Native|Public) // @ game+0x36c9f20
	void SetWeaponMode(enum class EGPWeaponMode InWeaponMode); // Function GPGameplay.WeaponBase.SetWeaponMode // (Native|Public) // @ game+0x36c9ea0
	void SetWeaponMeshTickEnabled(bool bInTickable); // Function GPGameplay.WeaponBase.SetWeaponMeshTickEnabled // (Final|Native|Protected) // @ game+0x36c9e10
	void SetWeaponIdentity(struct FWeaponIdentity& InWeaponIdentity); // Function GPGameplay.WeaponBase.SetWeaponIdentity // (Native|Public|HasOutParms) // @ game+0x36c9d70
	void SetWeaponId(uint64_t InWeaponRecId); // Function GPGameplay.WeaponBase.SetWeaponId // (Native|Public) // @ game+0x36c9ce0
	void SetWeaponGuid(uint64_t InWeaponGuid); // Function GPGameplay.WeaponBase.SetWeaponGuid // (Native|Public) // @ game+0x36c9c50
	void SetWeaponEquipPosition(uint32_t InWeaponEquipPosition); // Function GPGameplay.WeaponBase.SetWeaponEquipPosition // (Native|Public) // @ game+0x36c9bc0
	void SetWeaponActive(bool bInActive); // Function GPGameplay.WeaponBase.SetWeaponActive // (Native|Public) // @ game+0x36c9b30
	void SetThirdPersonWeaponOwner(struct ACHARACTER* InOwner); // Function GPGameplay.WeaponBase.SetThirdPersonWeaponOwner // (Native|Public) // @ game+0x36c9aa0
	void SetServerBurstNum(char BurstNum); // Function GPGameplay.WeaponBase.SetServerBurstNum // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d210a0
	void SetKeepUsedWeapon(bool KeepUsed); // Function GPGameplay.WeaponBase.SetKeepUsedWeapon // (Native|Public) // @ game+0x36c9a10
	void SetInfinityCarriedAmmo(); // Function GPGameplay.WeaponBase.SetInfinityCarriedAmmo // (Native|Public) // @ game+0x36c99f0
	void SetFullAmmo(); // Function GPGameplay.WeaponBase.SetFullAmmo // (Native|Public) // @ game+0x36c99c0
	void SetAmmoConumeType(enum class EWeaponConsumeAmmoType ConsumeType); // Function GPGameplay.WeaponBase.SetAmmoConumeType // (Native|Public) // @ game+0x36c9940
	void ServerUpdateAmmoDynamicAttr(struct FModularWeaponDynamicAttrbuites& DynamicAttrbuites); // Function GPGameplay.WeaponBase.ServerUpdateAmmoDynamicAttr // (Native|Public|HasOutParms) // @ game+0x36c9720
	void ServerProcessWeaponReplicatedData(struct TArray<struct FGPWeaponDataOperationInfo> WeaponDataOperationArray); // Function GPGameplay.WeaponBase.ServerProcessWeaponReplicatedData // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x36c9610
	void ServerProcessWeaponEventDataForHit(struct FBulletHitInfo BulletHitInfo); // Function GPGameplay.WeaponBase.ServerProcessWeaponEventDataForHit // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x36c9500
	void ServerProcessWeaponEventDataForFire(char EventType, struct FWeaponFireRepInfo FireInfo, struct FString LightFeatureStr, float Timestamp); // Function GPGameplay.WeaponBase.ServerProcessWeaponEventDataForFire // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x36c9180
	void ServerProcessWeaponEventData(char EventType, float Timestamp); // Function GPGameplay.WeaponBase.ServerProcessWeaponEventData // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x36c9090
	void ServerHoldToFireCancelCurrentState(enum class EWeaponCancelCurrentStateReason CancelReason); // Function GPGameplay.WeaponBase.ServerHoldToFireCancelCurrentState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36c9010
	void SendReportClientHit(uint64_t Guid, struct FProjectileTrajectoryItem LatestTrajectoryItem, struct FHitResult BlockingHit, struct FVector RelativeLoc, struct FVector RelativeLocToBone); // Function GPGameplay.WeaponBase.SendReportClientHit // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x36c8d90
	void RPC_RequestServerHitAction(struct FRequestPointHitActionParam DamageResult); // Function GPGameplay.WeaponBase.RPC_RequestServerHitAction // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36c8980
	void RPC_ClientNotifyHitActionFaild(struct FPointHitActionResult DamageResult); // Function GPGameplay.WeaponBase.RPC_ClientNotifyHitActionFaild // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x36c8900
	void RPC_ClientApplyHitAction(struct FRequestPointHitActionParam DamageResult); // Function GPGameplay.WeaponBase.RPC_ClientApplyHitAction // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x36c87c0
	void ResWeaponSwitchType(); // Function GPGameplay.WeaponBase.ResWeaponSwitchType // (Native|Public) // @ game+0x36c8d30
	void ResetActivateBefore(); // Function GPGameplay.WeaponBase.ResetActivateBefore // (Native|Public|BlueprintCallable) // @ game+0x36c8d60
	void ReplicateModularWeaponDescToClients(struct AGPCharacterBase* NewOwner); // Function GPGameplay.WeaponBase.ReplicateModularWeaponDescToClients // (Final|Native|Public) // @ game+0x36c8cb0
	void RefreshWeaponReplicatedExtraData(struct FWeaponReplicateExtraData& WeaponRepExtendData); // Function GPGameplay.WeaponBase.RefreshWeaponReplicatedExtraData // (Native|Public|HasOutParms) // @ game+0x36c8c00
	void RefreshDynamicComponents(bool bOb); // Function GPGameplay.WeaponBase.RefreshDynamicComponents // (Final|Native|Public) // @ game+0x36c8b70
	void RefreshConfigs(bool bForceRefresh); // Function GPGameplay.WeaponBase.RefreshConfigs // (Native|Public) // @ game+0x36c8ae0
	void RefreshAllComponents(); // Function GPGameplay.WeaponBase.RefreshAllComponents // (Final|Native|Public) // @ game+0x36c8ac0
	void ProcessWeaponEvent(enum class EGPWeaponInnerEvent RepInfo); // Function GPGameplay.WeaponBase.ProcessWeaponEvent // (Final|Native|Public) // @ game+0x36c8740
	float PlayFirstEquipAnim(float blendIn, float blendOut); // Function GPGameplay.WeaponBase.PlayFirstEquipAnim // (Native|Public) // @ game+0x36c8660
	float PlayFastUnEquipAnimNoBlend(struct FString ContextString, float blendIn, float blendOut); // Function GPGameplay.WeaponBase.PlayFastUnEquipAnimNoBlend // (Native|Public) // @ game+0x36c84c0
	float PlayFastUnEquipAnim(struct FString ContextString, float blendIn, float blendOut); // Function GPGameplay.WeaponBase.PlayFastUnEquipAnim // (Native|Public) // @ game+0x36c8320
	float PlayFastEquipAnim(struct FString ContextString, float blendIn, float blendOut); // Function GPGameplay.WeaponBase.PlayFastEquipAnim // (Native|Public) // @ game+0x36c8180
	void OnWeaponSwitchFinish(struct AWeaponBase* Weapon); // Function GPGameplay.WeaponBase.OnWeaponSwitchFinish // (Final|Native|Protected) // @ game+0x36c8100
	void OnUpdateHasSecondaryWeapon(); // Function GPGameplay.WeaponBase.OnUpdateHasSecondaryWeapon // (Final|Native|Protected) // @ game+0x36c80e0
	void OnRepWeaponId(); // Function GPGameplay.WeaponBase.OnRepWeaponId // (Final|Native|Public) // @ game+0x36c80c0
	void OnRepWeaponEquipPosition(); // Function GPGameplay.WeaponBase.OnRepWeaponEquipPosition // (Final|Native|Public) // @ game+0x36c80a0
	void OnRepPoorItemId(); // Function GPGameplay.WeaponBase.OnRepPoorItemId // (Final|Native|Public) // @ game+0x36c8080
	void OnRepPerk(); // Function GPGameplay.WeaponBase.OnRepPerk // (Final|Native|Public) // @ game+0x36c8060
	void OnRepDynamicAttr(); // Function GPGameplay.WeaponBase.OnRepDynamicAttr // (Final|Native|Public) // @ game+0x36c8040
	void OnRepCharacterOwner(); // Function GPGameplay.WeaponBase.OnRepCharacterOwner // (Native|Public) // @ game+0xbcc900
	void OnRepBuildModularDesc(); // Function GPGameplay.WeaponBase.OnRepBuildModularDesc // (Final|Native|Public) // @ game+0x36c8020
	void OnRep_ServerWeaponIdentity(); // Function GPGameplay.WeaponBase.OnRep_ServerWeaponIdentity // (Native|Public) // @ game+0xbcc8c0
	void OnPostFire(uint64_t FireId); // Function GPGameplay.WeaponBase.OnPostFire // (Native|Public) // @ game+0x36c7f90
	void OnCharacterOwnerReborn_Test(); // Function GPGameplay.WeaponBase.OnCharacterOwnerReborn_Test // (Final|Native|Public|BlueprintCallable) // @ game+0x36c7f70
	void OnCharacterOwnerReborn(); // Function GPGameplay.WeaponBase.OnCharacterOwnerReborn // (Final|Native|Public) // @ game+0x36c7f50
	void OnCharacterOwnerDied(); // Function GPGameplay.WeaponBase.OnCharacterOwnerDied // (Native|Public) // @ game+0x36c7f30
	void NotifyKnockBackAction(bool bInAction); // Function GPGameplay.WeaponBase.NotifyKnockBackAction // (Native|Public) // @ game+0x3579740
	bool IsWeaponUsed(); // Function GPGameplay.WeaponBase.IsWeaponUsed // (Native|Public) // @ game+0x36c7ef0
	bool IsWeaponUnderCurrentXPP(); // Function GPGameplay.WeaponBase.IsWeaponUnderCurrentXPP // (Native|Public) // @ game+0x36c7eb0
	bool IsWeaponIgnoreTeammateBlock(struct APawn* InPawn); // Function GPGameplay.WeaponBase.IsWeaponIgnoreTeammateBlock // (Native|Public) // @ game+0x36c7e10
	bool IsWeaponDamage(); // Function GPGameplay.WeaponBase.IsWeaponDamage // (Native|Public|BlueprintCallable) // @ game+0x36c7de0
	bool IsWeaponActive(); // Function GPGameplay.WeaponBase.IsWeaponActive // (Native|Public) // @ game+0x36c7da0
	bool IsVisible(); // Function GPGameplay.WeaponBase.IsVisible // (Native|Public) // @ game+0x36c7d60
	bool IsVehicleWeapon(); // Function GPGameplay.WeaponBase.IsVehicleWeapon // (Native|Public) // @ game+0x36c7d20
	bool IsThrowableWeapon(); // Function GPGameplay.WeaponBase.IsThrowableWeapon // (Native|Public) // @ game+0x36c7ce0
	bool IsThrowableEnableInputCancel(); // Function GPGameplay.WeaponBase.IsThrowableEnableInputCancel // (Native|Public) // @ game+0x36c7cb0
	bool IsSubmachineWeapon(); // Function GPGameplay.WeaponBase.IsSubmachineWeapon // (Native|Public) // @ game+0x36c7c70
	bool IsSecondaryWeapon(); // Function GPGameplay.WeaponBase.IsSecondaryWeapon // (Native|Public) // @ game+0x36c7c30
	bool IsRunningLogical(); // Function GPGameplay.WeaponBase.IsRunningLogical // (Native|Public) // @ game+0x36c7bf0
	bool IsRequireAmmo(); // Function GPGameplay.WeaponBase.IsRequireAmmo // (Native|Public) // @ game+0x36c7bb0
	bool IsPVEWeapon(); // Function GPGameplay.WeaponBase.IsPVEWeapon // (Native|Public) // @ game+0x36c7a90
	bool IsPistolWeapon(); // Function GPGameplay.WeaponBase.IsPistolWeapon // (Native|Public) // @ game+0x36c7b70
	bool IsPawnIgnoreWeaponTrace(struct APawn* InPawn); // Function GPGameplay.WeaponBase.IsPawnIgnoreWeaponTrace // (Native|Public) // @ game+0x36c7ad0
	bool IsOverHeat(); // Function GPGameplay.WeaponBase.IsOverHeat // (Native|Public) // @ game+0x36c7a50
	bool IsModularWeapon(); // Function GPGameplay.WeaponBase.IsModularWeapon // (Native|Public) // @ game+0x36c7a10
	bool IsMeleeWeapon(); // Function GPGameplay.WeaponBase.IsMeleeWeapon // (Native|Public) // @ game+0x36c79d0
	bool IsMainWeapon(); // Function GPGameplay.WeaponBase.IsMainWeapon // (Native|Public) // @ game+0x36c7990
	bool IsLocalControl(); // Function GPGameplay.WeaponBase.IsLocalControl // (Final|Native|Public) // @ game+0x36c7950
	bool IsKeepUsedWeapon(); // Function GPGameplay.WeaponBase.IsKeepUsedWeapon // (Final|Native|Protected) // @ game+0x36c7920
	bool IsInPending(); // Function GPGameplay.WeaponBase.IsInPending // (Native|Public) // @ game+0x36c78e0
	bool IsHideAllWeapon_RetIsContainExactTag(bool& bContainExactTag); // Function GPGameplay.WeaponBase.IsHideAllWeapon_RetIsContainExactTag // (Native|Public|HasOutParms) // @ game+0x36c7830
	bool IsHideAllWeapon(); // Function GPGameplay.WeaponBase.IsHideAllWeapon // (Native|Public) // @ game+0x36c77f0
	bool IsHeavyWeapon(); // Function GPGameplay.WeaponBase.IsHeavyWeapon // (Native|Public) // @ game+0x36c77b0
	bool IsEnableThirdPersonMeshTick(); // Function GPGameplay.WeaponBase.IsEnableThirdPersonMeshTick // (Native|Protected) // @ game+0x35791a0
	bool IsEmptyHand(); // Function GPGameplay.WeaponBase.IsEmptyHand // (Native|Public) // @ game+0x36c7770
	bool IsDoubleHandsWeapon(); // Function GPGameplay.WeaponBase.IsDoubleHandsWeapon // (Native|Public) // @ game+0x36c7730
	bool IsConfigEffective(); // Function GPGameplay.WeaponBase.IsConfigEffective // (Native|Public) // @ game+0x36c76f0
	bool IsClipFull(); // Function GPGameplay.WeaponBase.IsClipFull // (Native|Public) // @ game+0x36c76b0
	bool IsClipAndCarryAmmoEmpty(); // Function GPGameplay.WeaponBase.IsClipAndCarryAmmoEmpty // (Native|Public) // @ game+0x36c7670
	bool IsCharacterTeammate(struct ACHARACTER* CHARACTER); // Function GPGameplay.WeaponBase.IsCharacterTeammate // (Native|Public) // @ game+0x36c75d0
	bool IsCharacterOwnerPlayerAI(); // Function GPGameplay.WeaponBase.IsCharacterOwnerPlayerAI // (Native|Public|Const) // @ game+0x36c7590
	bool IsCharacterOwnerOnFPPMode(); // Function GPGameplay.WeaponBase.IsCharacterOwnerOnFPPMode // (Native|Public) // @ game+0x36c7550
	bool IsCharacterOwnerOnDefaultFPPMode(); // Function GPGameplay.WeaponBase.IsCharacterOwnerOnDefaultFPPMode // (Native|Public) // @ game+0x36c7510
	bool IsCharacterOwnerInWeakStatus(); // Function GPGameplay.WeaponBase.IsCharacterOwnerInWeakStatus // (Native|Public) // @ game+0x36c74d0
	bool IsCharacterOwnerAILab(); // Function GPGameplay.WeaponBase.IsCharacterOwnerAILab // (Native|Public|Const) // @ game+0x36c7490
	bool IsCharacterOwnerAI(); // Function GPGameplay.WeaponBase.IsCharacterOwnerAI // (Native|Public|Const) // @ game+0x36c7450
	bool IsCharacterDied(); // Function GPGameplay.WeaponBase.IsCharacterDied // (Native|Public) // @ game+0x36c7410
	bool IsBowWeapon(); // Function GPGameplay.WeaponBase.IsBowWeapon // (Native|Public) // @ game+0x36c73d0
	bool IsAmmoFinally(); // Function GPGameplay.WeaponBase.IsAmmoFinally // (Native|Public) // @ game+0x36c7390
	bool IsAbilityItem(); // Function GPGameplay.WeaponBase.IsAbilityItem // (Native|Public) // @ game+0x36c7360
	bool IgnoreLeftArmAnim(); // Function GPGameplay.WeaponBase.IgnoreLeftArmAnim // (Native|Public) // @ game+0x36c7320
	void HoldToFireCancelCurrentState(enum class EWeaponCancelCurrentStateReason CancelReason); // Function GPGameplay.WeaponBase.HoldToFireCancelCurrentState // (Final|Native|Public) // @ game+0x36c72a0
	bool HasActivateBefore(); // Function GPGameplay.WeaponBase.HasActivateBefore // (Native|Public) // @ game+0x36c7260
	char GetWeaponTypeValue(); // Function GPGameplay.WeaponBase.GetWeaponTypeValue // (Native|Public) // @ game+0x36c7220
	enum class EWeaponItemType GetWeaponType(); // Function GPGameplay.WeaponBase.GetWeaponType // (Native|Public) // @ game+0x36c71e0
	char GetWeaponSlot(); // Function GPGameplay.WeaponBase.GetWeaponSlot // (Native|Public) // @ game+0x36c71a0
	struct USkeletalMeshComponent* GetWeaponSecondaryMesh(); // Function GPGameplay.WeaponBase.GetWeaponSecondaryMesh // (Native|Public) // @ game+0x36c7160
	struct UMeshComponent* GetWeaponSecondaryBaseMesh(); // Function GPGameplay.WeaponBase.GetWeaponSecondaryBaseMesh // (Native|Public) // @ game+0x36c7120
	struct UWeaponReplicateComponent* GetWeaponReplicateComponent(); // Function GPGameplay.WeaponBase.GetWeaponReplicateComponent // (Final|Native|Public) // @ game+0x36c70f0
	enum class EGPWeaponMode GetWeaponMode(); // Function GPGameplay.WeaponBase.GetWeaponMode // (Native|Public) // @ game+0x36c70b0
	struct UWeaponManagerComponent* GetWeaponManager(); // Function GPGameplay.WeaponBase.GetWeaponManager // (Final|Native|Public) // @ game+0x36c7080
	struct USkeletalMeshComponent* GetWeaponMainMesh(); // Function GPGameplay.WeaponBase.GetWeaponMainMesh // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x36c7040
	uint64_t GetWeaponId(); // Function GPGameplay.WeaponBase.GetWeaponId // (Native|Public) // @ game+0x36c7000
	struct UMeshComponent* GetWeaponBaseMesh(); // Function GPGameplay.WeaponBase.GetWeaponBaseMesh // (Native|Public) // @ game+0x36c6fc0
	enum class EGPWeaponAppearanceAttachType GetWeaponAttachType(); // Function GPGameplay.WeaponBase.GetWeaponAttachType // (Native|Public) // @ game+0x36c6f80
	enum class EWeaponAmmoLogicType GetWeaponAmmoLogicType(); // Function GPGameplay.WeaponBase.GetWeaponAmmoLogicType // (Native|Public) // @ game+0x36c6f50
	struct AActor* GetWeaponActor(); // Function GPGameplay.WeaponBase.GetWeaponActor // (Native|Public) // @ game+0x36c6f10
	enum class EWeaponThrowableEffectType GetThrowableWeaponType(); // Function GPGameplay.WeaponBase.GetThrowableWeaponType // (Native|Public) // @ game+0x36c6ee0
	void GetThisWeapon(); // Function GPGameplay.WeaponBase.GetThisWeapon // (Native|Public) // @ game+0x36c6e90
	void GetThisGPWeapon(); // Function GPGameplay.WeaponBase.GetThisGPWeapon // (Native|Public) // @ game+0x36c6e40
	void GetThirdPersonWeapon(); // Function GPGameplay.WeaponBase.GetThirdPersonWeapon // (Native|Public) // @ game+0x36c6df0
	void GetThirdPersonGPWeapon(); // Function GPGameplay.WeaponBase.GetThirdPersonGPWeapon // (Native|Public) // @ game+0x36c6da0
	struct USkeletalMeshComponent* GetThirdPersonCharacterMesh(); // Function GPGameplay.WeaponBase.GetThirdPersonCharacterMesh // (Native|Public) // @ game+0x36c6d60
	struct FWeaponIdentity GetServerWeaponIdentity(); // Function GPGameplay.WeaponBase.GetServerWeaponIdentity // (Native|Public) // @ game+0x36c6d20
	struct FName GetServerActorName(); // Function GPGameplay.WeaponBase.GetServerActorName // (Native|Public) // @ game+0x36c6ce0
	struct FSoftObjectPath GetPartSkeletalMesh3P(uint64_t ItemID); // Function GPGameplay.WeaponBase.GetPartSkeletalMesh3P // (Native|Public|HasDefaults) // @ game+0x36c6c30
	struct FSoftObjectPath GetPartSkeletalMesh1P(uint64_t ItemID); // Function GPGameplay.WeaponBase.GetPartSkeletalMesh1P // (Native|Public|HasDefaults) // @ game+0x36c6b80
	struct USkeletalMeshComponent* GetPartMeshComponent(uint64_t Guid, bool& bOutMergeModel); // Function GPGameplay.WeaponBase.GetPartMeshComponent // (Native|Protected|HasOutParms) // @ game+0x36c6aa0
	uint64_t GetOverrideAnimId(); // Function GPGameplay.WeaponBase.GetOverrideAnimId // (Native|Public) // @ game+0x36c6a60
	void GetOrCreateThirdPersonWeapon(); // Function GPGameplay.WeaponBase.GetOrCreateThirdPersonWeapon // (Native|Public) // @ game+0x36c6a10
	void GetOrCreateThirdPersonGPWeapon(); // Function GPGameplay.WeaponBase.GetOrCreateThirdPersonGPWeapon // (Native|Public) // @ game+0x36c69c0
	struct UGPModularWeaponDesc* GetModularWeaponDesc(bool bRefreshDynamicAttr); // Function GPGameplay.WeaponBase.GetModularWeaponDesc // (Final|Native|Public) // @ game+0x36c6920
	struct UModularWeaponDesc* GetModularDesc(); // Function GPGameplay.WeaponBase.GetModularDesc // (Native|Protected) // @ game+0x36c68e0
	struct FItemID GetItemId(); // Function GPGameplay.WeaponBase.GetItemId // (Native|Public) // @ game+0x36c6890
	bool GetIsFirstWeaponEquip(); // Function GPGameplay.WeaponBase.GetIsFirstWeaponEquip // (Native|Public) // @ game+0x36c6850
	bool GetIsFirstEmptyInspect(); // Function GPGameplay.WeaponBase.GetIsFirstEmptyInspect // (Native|Public) // @ game+0x36c6810
	void GetFppObGPWeapon(); // Function GPGameplay.WeaponBase.GetFppObGPWeapon // (Native|Public) // @ game+0x36c67c0
	uint32_t GetFixedWeaponId(); // Function GPGameplay.WeaponBase.GetFixedWeaponId // (Native|Public) // @ game+0x36c6780
	void GetFirstPersonWeapon(); // Function GPGameplay.WeaponBase.GetFirstPersonWeapon // (Native|Public) // @ game+0x36c6730
	void GetFirstPersonGPWeapon(); // Function GPGameplay.WeaponBase.GetFirstPersonGPWeapon // (Native|Public) // @ game+0x36c66e0
	struct USkeletalMeshComponent* GetFirstPersonCharacterMesh(); // Function GPGameplay.WeaponBase.GetFirstPersonCharacterMesh // (Native|Public) // @ game+0x36c66a0
	void GetFireTraceStartLocation(struct FVector& OutStartLoc, struct FRotator& OutStartRot); // Function GPGameplay.WeaponBase.GetFireTraceStartLocation // (Native|Public|HasOutParms|HasDefaults) // @ game+0x36c65b0
	enum class EEquipmentPartDamageType GetEquipmentPartDamageType(); // Function GPGameplay.WeaponBase.GetEquipmentPartDamageType // (Native|Public) // @ game+0x36c6570
	void GetCurrentActiveWeapon(); // Function GPGameplay.WeaponBase.GetCurrentActiveWeapon // (Native|Public) // @ game+0x36c6520
	struct FName GetCrrentAnimId(); // Function GPGameplay.WeaponBase.GetCrrentAnimId // (Native|Public) // @ game+0x36c64e0
	enum class EWeaponConsumeAmmoType GetConsumeAmmoType(); // Function GPGameplay.WeaponBase.GetConsumeAmmoType // (Native|Public) // @ game+0x3579140
	struct USkeletalMeshComponent* GetCharacterSkeletalMeshComponent(); // Function GPGameplay.WeaponBase.GetCharacterSkeletalMeshComponent // (Native|Public) // @ game+0x36c64a0
	struct ACHARACTER* GetCharacterOwner(); // Function GPGameplay.WeaponBase.GetCharacterOwner // (Native|Public) // @ game+0x36c6460
	struct FName GetCharacterName(); // Function GPGameplay.WeaponBase.GetCharacterName // (Native|Public) // @ game+0x36c6420
	struct USkeletalMeshComponent* GetCharacterBagSkeletalMeshComponent(bool bUseFPP); // Function GPGameplay.WeaponBase.GetCharacterBagSkeletalMeshComponent // (Native|Public) // @ game+0x36c6380
	float GetAORotationSpeed(); // Function GPGameplay.WeaponBase.GetAORotationSpeed // (Native|Public) // @ game+0x36c6300
	char GetAmmoType(); // Function GPGameplay.WeaponBase.GetAmmoType // (Native|Public) // @ game+0x36c6340
	bool EnableLastActive(); // Function GPGameplay.WeaponBase.EnableLastActive // (Native|Public) // @ game+0x36c62c0
	void CollectAmmoCount(uint16_t Count); // Function GPGameplay.WeaponBase.CollectAmmoCount // (Native|Public) // @ game+0x36c6230
	void ClientRemoveWeapon(); // Function GPGameplay.WeaponBase.ClientRemoveWeapon // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0x36c61e0
	void ClientFixDataSpread(struct FWeaponDataSpread InWeaponDataSpread, struct FWeaponDataSpread InWeaponDataSpreadAim); // Function GPGameplay.WeaponBase.ClientFixDataSpread // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x36c60f0
	void ClientDetachInventory(bool bHangToBack, enum class EWeaponSwitchType SwitchType); // Function GPGameplay.WeaponBase.ClientDetachInventory // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0x36c5ff0
	void ClientChangeState(enum class EGPWeaponStateType OldState, enum class EGPWeaponStateType NewState); // Function GPGameplay.WeaponBase.ClientChangeState // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0x36c5f00
	void ClientActivateInventory(bool bLastWeaponReserved, enum class EWeaponSwitchType SwitchType); // Function GPGameplay.WeaponBase.ClientActivateInventory // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0x36c5e00
	void Client2ServerApplyDynamicAttribute(bool Apply, uint64_t PartfunId); // Function GPGameplay.WeaponBase.Client2ServerApplyDynamicAttribute // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36c5d30
	bool CanZoom(); // Function GPGameplay.WeaponBase.CanZoom // (Native|Public) // @ game+0x36c5c70
	bool CanTakeDamageToTeammate(); // Function GPGameplay.WeaponBase.CanTakeDamageToTeammate // (Native|Public) // @ game+0x36c5c30
	bool CanFire(bool bCheckChamber); // Function GPGameplay.WeaponBase.CanFire // (Native|Public) // @ game+0x36c5b90
	bool CanEntryState(enum class EGPWeaponStateType NewState); // Function GPGameplay.WeaponBase.CanEntryState // (Native|Public) // @ game+0x36c5b00
	bool CanCheckWeaponBipodDeploy(); // Function GPGameplay.WeaponBase.CanCheckWeaponBipodDeploy // (Native|Public) // @ game+0x36c5ac0
	void CancelCurrentState(enum class EWeaponCancelCurrentStateReason CancelReason); // Function GPGameplay.WeaponBase.CancelCurrentState // (Final|Native|Public) // @ game+0x36c5cb0
	bool CanAutoSwitchSkillWeapon(); // Function GPGameplay.WeaponBase.CanAutoSwitchSkillWeapon // (Final|Native|Public) // @ game+0x36c5a90
	bool CanAimOn(); // Function GPGameplay.WeaponBase.CanAimOn // (Native|Public) // @ game+0x36c5a50
	bool CanAddAmmoByLooting(); // Function GPGameplay.WeaponBase.CanAddAmmoByLooting // (Native|Public) // @ game+0x35790e0
	void BP_AimOutlineEvent(bool aim); // Function GPGameplay.WeaponBase.BP_AimOutlineEvent // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x7ed88c0
	void ApplyDynamicAttribute(bool Apply, uint64_t PartfunId); // Function GPGameplay.WeaponBase.ApplyDynamicAttribute // (Final|Native|Public) // @ game+0x36c5990
	void AddGPWeaponViewComponent(struct UGPWeaponViewComponentBase* Comp, bool bInitializeComponent); // Function GPGameplay.WeaponBase.AddGPWeaponViewComponent // (Final|Native|Public) // @ game+0x36c58c0
	void AddGPWeaponFuncComponent(struct UGPWeaponFuncComponentBase* Comp, bool bInitializeComponent); // Function GPGameplay.WeaponBase.AddGPWeaponFuncComponent // (Final|Native|Public) // @ game+0x36c57f0
	void AddGPWeaponDataComponent(struct UGPWeaponDataComponentBase* Comp, bool bInitializeComponent); // Function GPGameplay.WeaponBase.AddGPWeaponDataComponent // (Final|Native|Public) // @ game+0x36c5720
	void ActivateInventory_Internal(bool bLastWeaponReserved, enum class EWeaponSwitchType SwitchType); // Function GPGameplay.WeaponBase.ActivateInventory_Internal // (Final|Native|Public) // @ game+0x36c5660
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponInputDefaultLogic
// Size: 0x40 (Inherited: 0x30)
class UWeaponInputDefaultLogic : public UWeaponInputBaseLogic {
public:

	char pad_30[0x10]; // 0x30(0x10)

	void OnWeaponStartFireFailed(char ret); // Function GPGameplay.WeaponInputDefaultLogic.OnWeaponStartFireFailed // (Native|Public) // @ game+0x3684a50
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPWeaponPartBulletChainAnimInstance
// Size: 0x14b0 (Inherited: 0xa30)
class UGPWeaponPartBulletChainAnimInstance : public UGPWeaponPartAnimInstance {
public:

	struct FGPWeaponPartBulletChainAnimInstanceProxy LocalProxyBulletChain; // 0xa30(0xa70)
	int32_t bEnablePhysicsBulletChainNumber; // 0x14a0(0x04)
	char pad_14A4[0xc]; // 0x14a4(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentAnim
// Size: 0x9f0 (Inherited: 0x858)
class UWeaponDataComponentAnim : public UWeaponDataComponentAnimBase {
public:

	char pad_858[0x8]; // 0x858(0x08)
	struct UWeaponDataComponentFiring* DCFiring; // 0x860(0x08)
	struct FVector TPPGripIKOffset; // 0x868(0x0c)
	struct FVector TPPGripIKRotation; // 0x874(0x0c)
	char pad_880[0x60]; // 0x880(0x60)
	float InvaidCacheEquipEventTime; // 0x8e0(0x04)
	char pad_8E4[0x104]; // 0x8e4(0x104)
	struct UAnimMontage* AimSingleReloadMontage; // 0x9e8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ModularWeaponFuncComponentAnim
// Size: 0x160 (Inherited: 0x160)
class UModularWeaponFuncComponentAnim : public UWeaponFuncComponentAnim {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.MultiWeaponManagerComponent
// Size: 0x4a0 (Inherited: 0x440)
class UMultiWeaponManagerComponent : public UWeaponManagerComponent {
public:

	char pad_440[0x8]; // 0x440(0x08)
	struct UClass* DefaultWeaponManagerClass; // 0x448(0x08)
	struct FWeaponManagerSlots WeaponManagerSlots; // 0x450(0x20)
	/*struct TArray<struct TScriptInterface<IWeaponInterface>>*/char WeaponsInAllSlots[0x10]; // 0x470(0x10)
	/*struct TArray<struct TScriptInterface<IWeaponInterface>>*/char EmptyHandWeaponsInAllSlots[0x10]; // 0x480(0x10)
	/*struct TArray<struct TScriptInterface<IWeaponManagerInterface>>*/char AllWeaponManagers[0x10]; // 0x490(0x10)

	void OnRep_WeaponManagerSlots(); // Function GPGameplay.MultiWeaponManagerComponent.OnRep_WeaponManagerSlots // (Final|Native|Protected) // @ game+0x36a2ee0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponRangeScopeViewProxy
// Size: 0x560 (Inherited: 0x550)
class UWeaponRangeScopeViewProxy : public URangeScopeLensProxy {
public:

	struct UWeaponAdapterItemRangeScope* RangeScope; // 0x550(0x08)
	char pad_558[0x8]; // 0x558(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ReconnectionSystemDFM
// Size: 0x90 (Inherited: 0x40)
class UReconnectionSystemDFM : public UReconnectionSystemBase {
public:

	struct TMap<uint64_t, struct APlayerController*> PlayerControllerPool; // 0x40(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ScreenMeshEffect
// Size: 0x2b0 (Inherited: 0x2a8)
class UScreenMeshEffect : public UScreenEffectBase {
public:

	struct UMaterialInstanceDynamic* CurrentMaterialInstanceDynamic; // 0x2a8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ScreenParticleEffect
// Size: 0x2b0 (Inherited: 0x2a8)
class UScreenParticleEffect : public UScreenEffectBase {
public:

	struct TWeakObjectPtr<struct AEmitterCameraLensEffectBase> CurrentPartticle; // 0x2a8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ScreenPostProcessEffect
// Size: 0x2e0 (Inherited: 0x2a8)
class UScreenPostProcessEffect : public UScreenEffectBase {
public:

	struct UMaterialInstanceDynamic* CurrentMaterialInstanceDynamic; // 0x2a8(0x08)
	struct UMaterialInstanceDynamic* LastMaterialInstanceDynamic; // 0x2b0(0x08)
	/*struct TSoftObjectPtr<UMaterialInstance>*/char CurrentMaterialMaterialInstance[0x28]; // 0x2b8(0x28)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ScreenEffecTimerController
// Size: 0x150 (Inherited: 0x148)
class UScreenEffecTimerController : public UScreenEffectControllerBase {
public:

	char pad_148[0x8]; // 0x148(0x08)

	void DeactiveEffect(); // Function GPGameplay.ScreenEffecTimerController.DeactiveEffect // (Final|Native|Public) // @ game+0x36ac810
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ScreenEffectTimeCurveController
// Size: 0x338 (Inherited: 0x148)
class UScreenEffectTimeCurveController : public UScreenEffectControllerBase {
public:

	char pad_148[0x18]; // 0x148(0x18)
	struct FScreenEffectResource CurrentEffectInfo; // 0x160(0x178)
	char pad_2D8[0x60]; // 0x2d8(0x60)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.EReplicationGraphNode_ActorList
// Size: 0xd8 (Inherited: 0x58)
class UEReplicationGraphNode_ActorList : public UEReplicationGraphNode {
public:

	char pad_58[0x80]; // 0x58(0x80)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.EReplicationGraphNode_ActorListFrequencyBuckets
// Size: 0x110 (Inherited: 0x58)
class UEReplicationGraphNode_ActorListFrequencyBuckets : public UEReplicationGraphNode {
public:

	char pad_58[0xb8]; // 0x58(0xb8)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.EReplicationGraphNode_GridSpatialization2D
// Size: 0x238 (Inherited: 0x58)
class UEReplicationGraphNode_GridSpatialization2D : public UEReplicationGraphNode {
public:

	char pad_58[0x1e0]; // 0x58(0x1e0)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.EReplicationGraphNode_TearOff_ForConnection
// Size: 0x78 (Inherited: 0x58)
class UEReplicationGraphNode_TearOff_ForConnection : public UEReplicationGraphNode {
public:

	struct TArray<struct FTearOffActorInfo> TearOffActors; // 0x58(0x10)
	char pad_68[0x10]; // 0x68(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponExtraModelBase
// Size: 0x260 (Inherited: 0x258)
class UWeaponExtraModelBase : public UWeaponAdapterItemBase {
public:

	char pad_258[0x8]; // 0x258(0x08)

	void OnMeshLoaded(); // Function GPGameplay.WeaponExtraModelBase.OnMeshLoaded // (Native|Public) // @ game+0x1750020
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemAmmo
// Size: 0x258 (Inherited: 0x258)
class UWeaponAdapterItemAmmo : public UWeaponAdapterItemBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemIKTarget
// Size: 0x358 (Inherited: 0x258)
class UWeaponAdapterItemIKTarget : public UWeaponAdapterItemBase {
public:

	/*struct TSet<enum class EWeaponAdapterHandIKPoseType>*/char AsyncLoadingTask[0x50]; // 0x258(0x50)
	struct TMap<enum class EWeaponAdapterHandIKPoseType, struct UAnimSequence*> IKHandPose; // 0x2a8(0x50)
	char pad_2F8[0x48]; // 0x2f8(0x48)
	struct TWeakObjectPtr<struct USkeletalMeshComponent> ParentSkeletalMeshComponent; // 0x340(0x08)
	/*struct TScriptInterface<IGPWeaponInterface>*/char WeaponOwner[0x10]; // 0x348(0x10)

	void OnMeshLoaded(uint64_t Guid); // Function GPGameplay.WeaponAdapterItemIKTarget.OnMeshLoaded // (Native|Public) // @ game+0x36b9420
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemBipod
// Size: 0x3a8 (Inherited: 0x258)
class UWeaponAdapterItemBipod : public UWeaponAdapterItemBase {
public:

	/*struct TScriptInterface<IGPWeaponInterface>*/char WeaponOwner[0x10]; // 0x258(0x10)
	struct UCompositedBipod* BipodItem; // 0x268(0x08)
	char pad_270[0x138]; // 0x270(0x138)

	void OnMeshLoaded(uint64_t Guid); // Function GPGameplay.WeaponAdapterItemBipod.OnMeshLoaded // (Final|Native|Protected) // @ game+0x36b93a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemBurnningPot
// Size: 0x2d0 (Inherited: 0x258)
class UWeaponAdapterItemBurnningPot : public UWeaponAdapterItemBase {
public:

	struct FName IdleFxName; // 0x258(0x08)
	struct FName FiringFxName; // 0x260(0x08)
	struct FName CuttingFxName; // 0x268(0x08)
	struct FString ConsumeTips; // 0x270(0x10)
	struct FString ConsumeEmptyTips; // 0x280(0x10)
	float TipsShowDuration; // 0x290(0x04)
	int32_t UseCnt; // 0x294(0x04)
	char pad_298[0x8]; // 0x298(0x08)
	struct UFXResourceContainerComponent* PSC; // 0x2a0(0x08)
	char pad_2A8[0x5]; // 0x2a8(0x05)
	bool bPotActive; // 0x2ad(0x01)
	char pad_2AE[0x2]; // 0x2ae(0x02)
	struct FName CurrentFxName; // 0x2b0(0x08)
	struct FFireSocketInfo FireSocketInfo; // 0x2b8(0x10)
	char pad_2C8[0x8]; // 0x2c8(0x08)

	void OnRep_UseCnt(); // Function GPGameplay.WeaponAdapterItemBurnningPot.OnRep_UseCnt // (Final|Native|Protected) // @ game+0x36b9530
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemLaser
// Size: 0x368 (Inherited: 0x258)
class UWeaponAdapterItemLaser : public UWeaponAdapterItemBase {
public:

	/*struct TScriptInterface<IGPWeaponInterface>*/char WeaponOwner[0x10]; // 0x258(0x10)
	struct UCompositedLaser* LaserItem; // 0x268(0x08)
	char pad_270[0xf8]; // 0x270(0xf8)

	void OnMeshLoaded(uint64_t Guid); // Function GPGameplay.WeaponAdapterItemLaser.OnMeshLoaded // (Final|Native|Protected) // @ game+0x36b94b0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemMachineSight
// Size: 0x258 (Inherited: 0x258)
class UWeaponAdapterItemMachineSight : public UWeaponAdapterItemBase {
public:


	void SetCameraFOV(bool ZoomIn, bool IsDelayCall); // Function GPGameplay.WeaponAdapterItemMachineSight.SetCameraFOV // (Native|Public) // @ game+0x36b9600
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemMagazine
// Size: 0x270 (Inherited: 0x258)
class UWeaponAdapterItemMagazine : public UWeaponAdapterItemBase {
public:

	char pad_258[0x8]; // 0x258(0x08)
	struct USkeletalMeshComponent* BindMeshComponent; // 0x260(0x08)
	struct UModularWeaponDynamicSkeletalMeshComponent* CLMagBassSkeletalMeshComponent; // 0x268(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemRangeScope
// Size: 0x8c0 (Inherited: 0x258)
class UWeaponAdapterItemRangeScope : public UWeaponAdapterItemBase {
public:

	char pad_258[0x40]; // 0x258(0x40)
	struct FScoFunctionRow ScoConfig; // 0x298(0x288)
	struct TArray<struct FZoomRateItem> SupportedZoomRates; // 0x520(0x10)
	struct FScoWeaponPairParameterRow ScoWeaponPairParameter; // 0x530(0x2a0)
	struct USkeletalMeshComponent* MeshComp; // 0x7d0(0x08)
	struct USkeletalMeshComponent* WeaponMainMeshComp; // 0x7d8(0x08)
	char pad_7E0[0x60]; // 0x7e0(0x60)
	struct UWeaponRangeScopeViewProxy* ViewProxy; // 0x840(0x08)
	struct UCombatRangeFinderProxy* RangeFinderProxy; // 0x848(0x08)
	char pad_850[0x28]; // 0x850(0x28)
	struct UWeaponAdapterRangeScopeManager* ScopeManager; // 0x878(0x08)
	struct URangeScopeSceneCaptureComponent* SceneCaptureComponent; // 0x880(0x08)
	struct UMaterialParameterCollectionInstance* ParamCollec; // 0x888(0x08)
	char pad_890[0x18]; // 0x890(0x18)
	struct UGPWeaponPartRangeScopeAnimInstance* AnimInstance; // 0x8a8(0x08)
	struct FRangeScopeAnimParam RangeScopeAnimParam; // 0x8b0(0x10)

	void SetStencilEnable(bool bEnable); // Function GPGameplay.WeaponAdapterItemRangeScope.SetStencilEnable // (Final|Native|Protected) // @ game+0x36b96d0
	void PrepareScopeCapture(bool bEnable); // Function GPGameplay.WeaponAdapterItemRangeScope.PrepareScopeCapture // (Final|Native|Protected) // @ game+0x36b9570
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterScopeFor3P
// Size: 0x550 (Inherited: 0x258)
class UWeaponAdapterScopeFor3P : public UWeaponAdapterItemBase {
public:

	struct USkeletalMeshComponent* MeshComp; // 0x258(0x08)
	struct UFXResourceContainerComponent* PSC; // 0x260(0x08)
	struct AGPPlayerCameraManager* PlayerCameraManager; // 0x268(0x08)
	char pad_270[0x2c0]; // 0x270(0x2c0)
	struct TArray<struct FZoomRateItem> SupportedZoomRates; // 0x530(0x10)
	char pad_540[0x10]; // 0x540(0x10)

	void GPWeaponMutableBoolPropertyOnRepCallback(struct FString BoolPropertyName, bool OldPropertyValue, bool NewPropertyValue); // Function GPGameplay.WeaponAdapterScopeFor3P.GPWeaponMutableBoolPropertyOnRepCallback // (Final|Native|Protected) // @ game+0x36b8b80
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponBulletExplosion
// Size: 0x728 (Inherited: 0x6f8)
class AWeaponBulletExplosion : public AWeaponBulletPhysicsSimulate {
public:

	char pad_6F8[0x8]; // 0x6f8(0x08)
	struct FRPGExplosionInfo ExplosionInfo; // 0x700(0x20)
	float PreviewExplosionThreshold; // 0x720(0x04)
	char pad_724[0x4]; // 0x724(0x04)

	void MulticastExplosionInfo(struct FRPGExplosionInfo RepExplosionInfo); // Function GPGameplay.WeaponBulletExplosion.MulticastExplosionInfo // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x36ce8a0
	struct UPrimitiveComponent* GetPrimitiveComponent(); // Function GPGameplay.WeaponBulletExplosion.GetPrimitiveComponent // (Event|Protected|BlueprintEvent) // @ game+0x7ed88c0
	void BP_OnStopExplosionEffect(); // Function GPGameplay.WeaponBulletExplosion.BP_OnStopExplosionEffect // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x7ed88c0
	void BP_OnPlayExplosionEffect(); // Function GPGameplay.WeaponBulletExplosion.BP_OnPlayExplosionEffect // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x7ed88c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponBulletFireArrow
// Size: 0x750 (Inherited: 0x6f8)
class AWeaponBulletFireArrow : public AWeaponBulletPhysicsSimulate {
public:

	char pad_6F8[0x18]; // 0x6f8(0x18)
	struct FFireAreaParam FireAreaParam; // 0x710(0x28)
	float FireSpawnDelay; // 0x738(0x04)
	char pad_73C[0x4]; // 0x73c(0x04)
	uint64_t AttackerValueId; // 0x740(0x08)
	struct UClass* FireAreaClass; // 0x748(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponBulletHitscan
// Size: 0x790 (Inherited: 0x6f8)
class AWeaponBulletHitscan : public AWeaponBulletPhysicsSimulate {
public:

	char pad_6F8[0x98]; // 0x6f8(0x98)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponBulletHowitzer
// Size: 0x700 (Inherited: 0x6f8)
class AWeaponBulletHowitzer : public AWeaponBulletPhysicsSimulate {
public:

	char pad_6F8[0x8]; // 0x6f8(0x08)

	void BrocastExplosionToClient(enum class EPhysicalSurface ProjectileHitSurface, bool bHitLandscape, struct FVector ExplosionLoc, struct FVector ExplosionPlane, struct FGPWeaponBulletOnHitParams OnHitParams); // Function GPGameplay.WeaponBulletHowitzer.BrocastExplosionToClient // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x36cdf90
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponBulletRandomMovement
// Size: 0x700 (Inherited: 0x6f8)
class AWeaponBulletRandomMovement : public AWeaponBulletPhysicsSimulate {
public:

	char pad_6F8[0x8]; // 0x6f8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponBulletSpawnActor
// Size: 0x730 (Inherited: 0x6f8)
class AWeaponBulletSpawnActor : public AWeaponBulletPhysicsSimulate {
public:

	/*struct TSoftClassPtr<UObject>*/char CreatedActorClass[0x28]; // 0x6f8(0x28)
	bool bHitGround; // 0x720(0x01)
	char pad_721[0xf]; // 0x721(0x0f)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDataComponentAmmo_Common
// Size: 0x770 (Inherited: 0x770)
class UWeaponDataComponentAmmo_Common : public UWeaponDataComponentAmmo {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowUASDataComponentState
// Size: 0x840 (Inherited: 0x820)
class UWeaponThrowUASDataComponentState : public UWeaponDataComponentState {
public:

	struct FName TargetSocketName; // 0x820(0x08)
	float RayDistance; // 0x828(0x04)
	float TraceRadius; // 0x82c(0x04)
	float TraceHeight; // 0x830(0x04)
	char pad_834[0xc]; // 0x834(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowableDataComponentZoom
// Size: 0x710 (Inherited: 0x710)
class UWeaponThrowableDataComponentZoom : public UWeaponDataComponentZoom {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponDecalComponent
// Size: 0x880 (Inherited: 0x810)
class UWeaponDecalComponent : public UWeaponDecalDetectionComponent {
public:

	char pad_810[0x10]; // 0x810(0x10)
	float Duration; // 0x820(0x04)
	bool bEnableFadeOut; // 0x824(0x01)
	char pad_825[0x3]; // 0x825(0x03)
	float FadeOutDuration; // 0x828(0x04)
	struct FName FadeOutMaterialParamName; // 0x82c(0x08)
	bool bRandomRotate; // 0x834(0x01)
	bool bRandomScale; // 0x835(0x01)
	char pad_836[0x2]; // 0x836(0x02)
	struct FVector2D RandomScaleMinMax; // 0x838(0x08)
	char bDestroyOwnerAfterFade : 1; // 0x840(0x01)
	char pad_840_1 : 7; // 0x840(0x01)
	char pad_841[0x27]; // 0x841(0x27)
	struct UMaterialInstanceDynamic* MaterialInstanceDynamic; // 0x868(0x08)
	char pad_870[0x10]; // 0x870(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireModeMelee
// Size: 0x178 (Inherited: 0x168)
class UWeaponFireModeMelee : public UWeaponFireModeInstantHit {
public:

	char pad_168[0x10]; // 0x168(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireModeRPGSimulate
// Size: 0x4e8 (Inherited: 0x4e8)
class UWeaponFireModeRPGSimulate : public UWeaponFireModePhysicSimulate {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireModeParamsPlacement
// Size: 0x400 (Inherited: 0x258)
class UWeaponFireModeParamsPlacement : public UWeaponFireModeParamsThrowable {
public:

	struct ACHARACTER* ActorOwner; // 0x258(0x08)
	struct UClass* PlacementPreviewActorClass; // 0x260(0x08)
	/*struct TSoftClassPtr<UObject>*/char PlacementPreviewActorClassPath[0x28]; // 0x268(0x28)
	float DestroyPreviewActorDelay; // 0x290(0x04)
	char pad_294[0x4]; // 0x294(0x04)
	struct FSoftObjectPath MeshPath; // 0x298(0x18)
	struct FVector Rotator; // 0x2b0(0x0c)
	float PreviewDistance; // 0x2bc(0x04)
	float MaxDeltaHeight; // 0x2c0(0x04)
	float MaxPlacementAngle; // 0x2c4(0x04)
	bool bDirectThrow; // 0x2c8(0x01)
	bool bFallingCanThrow; // 0x2c9(0x01)
	bool bAttachToSurface; // 0x2ca(0x01)
	bool bUseActorControlRot; // 0x2cb(0x01)
	bool bMeshAttachToWeapon; // 0x2cc(0x01)
	bool IgnoreCharacter; // 0x2cd(0x01)
	char pad_2CE[0x2]; // 0x2ce(0x02)
	float PreviewLocInterpSpeed; // 0x2d0(0x04)
	float PreviewRotSlerpSpeed; // 0x2d4(0x04)
	struct TArray<struct UClass*> UnLocateObjectClass; // 0x2d8(0x10)
	struct TArray<enum class ECollisionChannel> MustLocateObjectChannel; // 0x2e8(0x10)
	struct TArray<enum class ECollisionChannel> BlockObjectTypes; // 0x2f8(0x10)
	float StepbackDistance; // 0x308(0x04)
	bool bProjAttachTo; // 0x30c(0x01)
	bool bProjMoveable; // 0x30d(0x01)
	bool bProjStartFromWeapon; // 0x30e(0x01)
	bool bProjRotate; // 0x30f(0x01)
	struct FHitResult CurrHitResult; // 0x310(0x88)
	bool bEnableAdjust; // 0x398(0x01)
	char pad_399[0x3]; // 0x399(0x03)
	float AdjustRaduis; // 0x39c(0x04)
	float AdjustStepSize; // 0x3a0(0x04)
	float TraversalCircleStepSize; // 0x3a4(0x04)
	float TraversalToGroundDistance; // 0x3a8(0x04)
	float TraversalToGroundStepSize; // 0x3ac(0x04)
	float TraversalToGroundExtraTraceDistance; // 0x3b0(0x04)
	float ValidDistToPreTarget; // 0x3b4(0x04)
	struct FBoxSphereBounds SourceBound; // 0x3b8(0x1c)
	float ValidAngle; // 0x3d4(0x04)
	bool bEnableRebornFlagCheck; // 0x3d8(0x01)
	char pad_3D9[0x3]; // 0x3d9(0x03)
	struct FVector2D bRebornFlagCheckSize; // 0x3dc(0x08)
	bool bCheckInsideWalkableSplines; // 0x3e4(0x01)
	bool bCheckFalling; // 0x3e5(0x01)
	char pad_3E6[0x2]; // 0x3e6(0x02)
	struct UClass* DirectSpawnActorClass; // 0x3e8(0x08)
	bool bDirectSpawn; // 0x3f0(0x01)
	char pad_3F1[0x3]; // 0x3f1(0x03)
	float ProjStartFromWeaponDeltaZ; // 0x3f4(0x04)
	float ProjStartFromWeaponDeltaDis; // 0x3f8(0x04)
	char pad_3FC[0x4]; // 0x3fc(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireModeParamsThrowableSpawnActor
// Size: 0x268 (Inherited: 0x258)
class UWeaponFireModeParamsThrowableSpawnActor : public UWeaponFireModeParamsThrowable {
public:

	struct UClass* ActorClass; // 0x258(0x08)
	struct FName TargetSocketName; // 0x260(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireModePlacement
// Size: 0x308 (Inherited: 0x208)
class UWeaponFireModePlacement : public UWeaponFireModeThrowable {
public:

	struct UWeaponFireModeParamsPlacement* PreviewParam; // 0x208(0x08)
	struct UPrimitiveComponent* PrimComp; // 0x210(0x08)
	struct USkeletalMeshComponent* CacheSkeMeshComp; // 0x218(0x08)
	struct UStaticMeshComponent* CacheStaticMeshComp; // 0x220(0x08)
	char pad_228[0x8]; // 0x228(0x08)
	struct FTimerHandle DestroyPlacementPreviewActorTimerHandle; // 0x230(0x08)
	char pad_238[0x72]; // 0x238(0x72)
	bool bISPlacementPreviewActorHidden; // 0x2aa(0x01)
	char pad_2AB[0x1]; // 0x2ab(0x01)
	struct FVector PlacementPreviewActorCacheNewLoc; // 0x2ac(0x0c)
	struct FRotator PlacementPreviewActorCacheRot; // 0x2b8(0x0c)
	char pad_2C4[0x4]; // 0x2c4(0x04)
	struct APlacementPreviewActorBase* PlacementPreviewActor; // 0x2c8(0x08)
	struct AGPCharacter* CharacterOwner; // 0x2d0(0x08)
	struct UGPCharacterMovementComponent* CharMoveComp; // 0x2d8(0x08)
	struct AWeaponBase* WeaponBase; // 0x2e0(0x08)
	int32_t MaxSpwanTargetCount; // 0x2e8(0x04)
	bool EnableCutProjectile; // 0x2ec(0x01)
	bool bDestroyProjectile; // 0x2ed(0x01)
	char pad_2EE[0x2]; // 0x2ee(0x02)
	struct FVector LastCheckInsideWalkableSplinesPos; // 0x2f0(0x0c)
	bool bLastCheckInsideWalkableSplines; // 0x2fc(0x01)
	char pad_2FD[0x3]; // 0x2fd(0x03)
	struct TWeakObjectPtr<struct AActor> PreviewHitActor; // 0x300(0x08)

	void TryStartDestroyPlacementPreviewActorTimer(); // Function GPGameplay.WeaponFireModePlacement.TryStartDestroyPlacementPreviewActorTimer // (Final|Native|Public) // @ game+0x36f0c90
	void StopDestroyPlacementPreviewActorTimer(); // Function GPGameplay.WeaponFireModePlacement.StopDestroyPlacementPreviewActorTimer // (Final|Native|Public) // @ game+0x36f0c70
	void SetPrimComp(struct UPrimitiveComponent* InPrimComp); // Function GPGameplay.WeaponFireModePlacement.SetPrimComp // (Final|Native|Public) // @ game+0x36f0bf0
	void SetPreviewPlacementLocAndRot(struct FVector NewLoc, struct FRotator NewRot); // Function GPGameplay.WeaponFireModePlacement.SetPreviewPlacementLocAndRot // (Final|Native|Public|HasDefaults) // @ game+0x36f0b10
	void SetPreviewHiddenInGame(bool bHidden); // Function GPGameplay.WeaponFireModePlacement.SetPreviewHiddenInGame // (Final|Native|Public|BlueprintCallable) // @ game+0x36f0a80
	void OnThrowPlayWantVoice(); // Function GPGameplay.WeaponFireModePlacement.OnThrowPlayWantVoice // (Final|Native|Protected) // @ game+0x36f0a60
	void OnPreviewActorLoaded(struct FSoftObjectPath& Path); // Function GPGameplay.WeaponFireModePlacement.OnPreviewActorLoaded // (Native|Public|HasOutParms|HasDefaults) // @ game+0x36f0980
	void LocationValidChange(bool Valid); // Function GPGameplay.WeaponFireModePlacement.LocationValidChange // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x7ed88c0
	void LoadPreviewActor(); // Function GPGameplay.WeaponFireModePlacement.LoadPreviewActor // (Native|Public) // @ game+0x1e36270
	struct UMeshComponent* GetPreviewMeshComponent(); // Function GPGameplay.WeaponFireModePlacement.GetPreviewMeshComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x36f06a0
	void DoDestroyPlacementPreviewActor(); // Function GPGameplay.WeaponFireModePlacement.DoDestroyPlacementPreviewActor // (Final|Native|Public) // @ game+0x36f0680
	void ClearLoadPreviewActor(); // Function GPGameplay.WeaponFireModePlacement.ClearLoadPreviewActor // (Native|Public) // @ game+0x1e377d0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireModeThrowableSpawnActor
// Size: 0x210 (Inherited: 0x208)
class UWeaponFireModeThrowableSpawnActor : public UWeaponFireModeThrowable {
public:

	struct UWeaponFireModeParamsThrowableSpawnActor* WeaponFireModeParamsThrowableSpawnActor; // 0x208(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowableLeftFireMode
// Size: 0x208 (Inherited: 0x208)
class UWeaponThrowableLeftFireMode : public UWeaponFireModeThrowable {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireRecoilPolynomial
// Size: 0x27b0 (Inherited: 0x2760)
class UWeaponFireRecoilPolynomial : public UWeaponFireRecoilDFM {
public:

	char pad_2760[0x50]; // 0x2760(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireRecoilVelocityModel
// Size: 0x2798 (Inherited: 0x2760)
class UWeaponFireRecoilVelocityModel : public UWeaponFireRecoilDFM {
public:

	char pad_2760[0x38]; // 0x2760(0x38)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFuncComponentAmmo_Common
// Size: 0x1a8 (Inherited: 0x1a8)
class UWeaponFuncComponentAmmo_Common : public UWeaponFuncComponentAmmo {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeldingGunFuncComponentCrosshair
// Size: 0x268 (Inherited: 0x260)
class UWeldingGunFuncComponentCrosshair : public UWeaponFuncComponentCrosshair {
public:

	char pad_260[0x8]; // 0x260(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponOverHeatEffectComponent
// Size: 0x488 (Inherited: 0x438)
class UWeaponOverHeatEffectComponent : public UWeaponFuncComponentEffect {
public:

	char pad_438[0x10]; // 0x438(0x10)
	int32_t MeshInstIndex; // 0x448(0x04)
	char pad_44C[0x4]; // 0x44c(0x04)
	struct UMaterialInstanceDynamic* MeshInst; // 0x450(0x08)
	char pad_458[0x10]; // 0x458(0x10)
	struct TArray<struct FWeaponEffectRes> CacheOverHeatEffectRes; // 0x468(0x10)
	/*struct TScriptInterface<IGPWeaponDataComponentOverHeatInterface>*/char DCOverHeat[0x10]; // 0x478(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponVehicleFuncComponentGunSway
// Size: 0x12a0 (Inherited: 0x11c0)
class UWeaponVehicleFuncComponentGunSway : public UWeaponFuncComponentGunSway {
public:

	char pad_11C0[0xe0]; // 0x11c0(0xe0)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowableFuncComponentZoom
// Size: 0x550 (Inherited: 0x550)
class UWeaponThrowableFuncComponentZoom : public UWeaponFuncComponentZoom {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponHomingBulletProjectile
// Size: 0xe90 (Inherited: 0xe38)
class AWeaponHomingBulletProjectile : public AWeaponThrowableBulletProjectile {
public:

	bool bNeedHoming; // 0xe38(0x01)
	char pad_E39[0x3]; // 0xe39(0x03)
	float StartSearchTime; // 0xe3c(0x04)
	float HomingAccelerationMagnitude; // 0xe40(0x04)
	char pad_E44[0x4]; // 0xe44(0x04)
	struct UClass* HomingTargetClass; // 0xe48(0x08)
	float SearchRange; // 0xe50(0x04)
	bool bNeedAttachToTarget; // 0xe54(0x01)
	char pad_E55[0x3]; // 0xe55(0x03)
	float IntervalExplosionTime; // 0xe58(0x04)
	int32_t IntervalExplosionCount; // 0xe5c(0x04)
	int64_t AttackId; // 0xe60(0x08)
	struct FProjMovementHomingInfo HomingInfo; // 0xe68(0x08)
	char pad_E70[0x8]; // 0xe70(0x08)
	struct TWeakObjectPtr<struct AActor> HomingTarget; // 0xe78(0x08)
	char pad_E80[0x10]; // 0xe80(0x10)

	void OnRep_HomingInfo(); // Function GPGameplay.WeaponHomingBulletProjectile.OnRep_HomingInfo // (Final|Native|Protected) // @ game+0x36fdb60
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponSkinLogic_Camouflage
// Size: 0x130 (Inherited: 0xa8)
class UWeaponSkinLogic_Camouflage : public UWeaponSkinLogicComponent {
public:

	char pad_A8[0x10]; // 0xa8(0x10)
	float SimulateStep; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
	struct TArray<struct FWeaponMaterialReplaceParam> MaterialReplaceParams; // 0xc0(0x10)
	struct UMaterialInterface* WriteDepthMaterial; // 0xd0(0x08)
	struct UMaterialSequencer* FadeInAnim; // 0xd8(0x08)
	struct UMaterialSequencer* FadeOutAnim; // 0xe0(0x08)
	bool bUseDataFloatControl; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
	struct TArray<struct UGPMaterialProxy*> ModifyMaterials; // 0xf0(0x10)
	struct TArray<struct FSrcReplaceWeaponMaterial> SrcReplaceWeaponMaterials; // 0x100(0x10)
	char pad_110[0x20]; // 0x110(0x20)

	void SetEnable(bool bEnable); // Function GPGameplay.WeaponSkinLogic_Camouflage.SetEnable // (Final|Native|Public|BlueprintCallable) // @ game+0x3713ca0
	void PlayMaterialAnim(struct UMaterialSequencer* Anim); // Function GPGameplay.WeaponSkinLogic_Camouflage.PlayMaterialAnim // (Final|Native|Protected|BlueprintCallable) // @ game+0x3713a20
	void PlayFadeOutAnim(); // Function GPGameplay.WeaponSkinLogic_Camouflage.PlayFadeOutAnim // (Final|Native|Public) // @ game+0x3713a00
	void PlayFadeInAnim(); // Function GPGameplay.WeaponSkinLogic_Camouflage.PlayFadeInAnim // (Final|Native|Public) // @ game+0x37139e0
	void OnUpdate(float Time); // Function GPGameplay.WeaponSkinLogic_Camouflage.OnUpdate // (Final|Native|Public) // @ game+0x3713960
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponSkinModifier_Dye
// Size: 0x30 (Inherited: 0x30)
class UWeaponSkinModifier_Dye : public UWeaponSkinModifier {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponSkinModifier_Empty
// Size: 0x30 (Inherited: 0x30)
class UWeaponSkinModifier_Empty : public UWeaponSkinModifier {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowableLeftDataComponentFiring
// Size: 0x7f8 (Inherited: 0x7f8)
class UWeaponThrowableLeftDataComponentFiring : public UWeaponThrowableDataComponentFiring {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowUASDataComponentFiring
// Size: 0x7f8 (Inherited: 0x7f8)
class UWeaponThrowUASDataComponentFiring : public UWeaponThrowableDataComponentFiring {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPlayerController
// Size: 0xa50 (Inherited: 0x7b0)
class AGPPlayerController : public AGPNetworkPlayerController {
public:

	char pad_7B0[0x1c]; // 0x7b0(0x1c)
	float LastPingUpdateTime; // 0x7cc(0x04)
	struct UGPProjectileReplicateComponent* ProjectileReplicateComponent; // 0x7d0(0x08)
	struct UGPTRPCComponent* GPTPRC_General; // 0x7d8(0x08)
	struct UGPTRPCQuestComponent* GPTPRC_Quest; // 0x7e0(0x08)
	struct UGPPlayerInput* GPPlayerInput; // 0x7e8(0x08)
	struct UClientGameSetting* ClientGameData; // 0x7f0(0x08)
	struct AGPPlayerState* GPPlayerState; // 0x7f8(0x08)
	struct TMap<struct FName, bool> CheckPlayerLoadLevelCompletedMap; // 0x800(0x50)
	struct AGPCharacter* GPCharacter; // 0x850(0x08)
	struct UGPCharacterMovementComponent* GPCharacterMovementComponent; // 0x858(0x08)
	float SprintFiringInterval; // 0x860(0x04)
	char pad_864[0x4]; // 0x864(0x04)
	struct AActor* AimedActorCache; // 0x868(0x08)
	char pad_870[0x4]; // 0x870(0x04)
	float RTT; // 0x874(0x04)
	float SRTT; // 0x878(0x04)
	float CurrentTimeGap; // 0x87c(0x04)
	char pad_880[0x60]; // 0x880(0x60)
	struct AGPWeaponBulletSystem* BulletSystem; // 0x8e0(0x08)
	char pad_8E8[0x18]; // 0x8e8(0x18)
	bool bIsInObserverMode; // 0x900(0x01)
	char pad_901[0x3]; // 0x901(0x03)
	int32_t ReLoginCount; // 0x904(0x04)
	char pad_908[0x8]; // 0x908(0x08)
	struct ABaseHUD* MyBaseHUD; // 0x910(0x08)
	struct UClass* DeferredSpawnHUDClass; // 0x918(0x08)
	struct UGPInputManager* GPInputManager; // 0x920(0x08)
	struct UGPMarkerControllerComponent* GPMarkerController; // 0x928(0x08)
	struct UGPControllerAudioComponent* PlayerControllerAudioComp; // 0x930(0x08)
	char pad_938[0x8]; // 0x938(0x08)
	struct UClass* PlayerInputClass; // 0x940(0x08)
	struct UClass* PlayerInputClassHD; // 0x948(0x08)
	struct UClass* InputComponentClass; // 0x950(0x08)
	bool bServerEnableProcessPlayerInput; // 0x958(0x01)
	char pad_959[0x7]; // 0x959(0x07)
	struct TArray<struct FString> ClientDisableProcessPlayerInputReasons; // 0x960(0x10)
	struct TArray<struct UGPPlayerVirtualInput*> VirtualInputs; // 0x970(0x10)
	char pad_980[0x5d]; // 0x980(0x5d)
	bool bUseDefaultInputTouch; // 0x9dd(0x01)
	char pad_9DE[0x24]; // 0x9de(0x24)
	bool bDebugTick; // 0xa02(0x01)
	char pad_A03[0x1]; // 0xa03(0x01)
	bool bShowRecordPanel; // 0xa04(0x01)
	char pad_A05[0x1b]; // 0xa05(0x1b)
	struct UClass* ObserverPawnClass; // 0xa20(0x08)
	struct AGPObserverPawn* GPObserverPawn; // 0xa28(0x08)
	struct AGPCharacter* ObserverLastGPCharacter; // 0xa30(0x08)
	bool bOBCameraPanelShow; // 0xa38(0x01)
	char pad_A39[0x17]; // 0xa39(0x17)

	void UpdateControlButtonRotateInfo(enum class EMobileControlButtonType ControlButtonType, bool bAllowRotate); // Function GPGameplay.GPPlayerController.UpdateControlButtonRotateInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x364ada0
	void ToggleXPP(); // Function GPGameplay.GPPlayerController.ToggleXPP // (Final|Native|Public|BlueprintCallable) // @ game+0x364ad80
	void ToggleRecordPanel(); // Function GPGameplay.GPPlayerController.ToggleRecordPanel // (Final|Native|Public|BlueprintCallable) // @ game+0x364ad60
	void ToggleRecordMode(); // Function GPGameplay.GPPlayerController.ToggleRecordMode // (Final|Native|Public|BlueprintCallable) // @ game+0x364ad40
	void ToggleOperateUI(bool bOperateUI); // Function GPGameplay.GPPlayerController.ToggleOperateUI // (Final|Native|Public|BlueprintCallable) // @ game+0x364acb0
	void ToggleObserverModeInReplay(); // Function GPGameplay.GPPlayerController.ToggleObserverModeInReplay // (Final|Native|Public|BlueprintCallable) // @ game+0x364ac90
	void ToggleObserverModeImp(); // Function GPGameplay.GPPlayerController.ToggleObserverModeImp // (Final|Native|Public|BlueprintCallable) // @ game+0x364ac70
	void ToggleObserverMode(); // Function GPGameplay.GPPlayerController.ToggleObserverMode // (Native|Public|BlueprintCallable) // @ game+0x364ac50
	void ToggleAiming(); // Function GPGameplay.GPPlayerController.ToggleAiming // (Native|Public|BlueprintCallable) // @ game+0x364ac30
	void TickPlayerMoveAndRotInput(); // Function GPGameplay.GPPlayerController.TickPlayerMoveAndRotInput // (Final|Native|Public) // @ game+0x364ac10
	void ShowWeaponPanel(char DebugType); // Function GPGameplay.GPPlayerController.ShowWeaponPanel // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x364ab70
	void ShowGMPanel(); // Function GPGameplay.GPPlayerController.ShowGMPanel // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x364ab50
	void ShowAnimPanel(char DebugType); // Function GPGameplay.GPPlayerController.ShowAnimPanel // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x364aad0
	void SetUseMouseForTouch(bool Enable); // Function GPGameplay.GPPlayerController.SetUseMouseForTouch // (Final|Native|Public|BlueprintCallable) // @ game+0x364aa40
	void SetServerEnableProcessPlayerInput(bool bEnable); // Function GPGameplay.GPPlayerController.SetServerEnableProcessPlayerInput // (Final|Native|Public|BlueprintCallable) // @ game+0x364a9b0
	void SetProcessInputComp(enum class EProcessInputCompReason reason, bool bEnable); // Function GPGameplay.GPPlayerController.SetProcessInputComp // (Final|Native|Public|BlueprintCallable) // @ game+0x364a8e0
	void SetClientEnableProcessPlayerInput(bool bEnable); // Function GPGameplay.GPPlayerController.SetClientEnableProcessPlayerInput // (Final|Native|Public|BlueprintCallable) // @ game+0x364a850
	void SetClientDisableProcessPlayerInput(bool bDisable, struct FString reason); // Function GPGameplay.GPPlayerController.SetClientDisableProcessPlayerInput // (Final|Native|Public|BlueprintCallable) // @ game+0x364a6e0
	void ServerUpdateWeaponRepCompInfo(struct AActor* InCharacter, struct FWeaponReplicateComponentInfo WeaponReplicateComponentInfo); // Function GPGameplay.GPPlayerController.ServerUpdateWeaponRepCompInfo // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x364a490
	void ServerUpdatePing(float ExactPing); // Function GPGameplay.GPPlayerController.ServerUpdatePing // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x364a3e0
	void ServerToggleSpeaker(bool bIsSpeakerOpen); // Function GPGameplay.GPPlayerController.ServerToggleSpeaker // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x364a350
	void ServerToggleObserverMode(); // Function GPGameplay.GPPlayerController.ServerToggleObserverMode // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x364a330
	void ServerToggleMic(bool bIsMicOpen); // Function GPGameplay.GPPlayerController.ServerToggleMic // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x364a2a0
	void Serverslomo(bool bAdd); // Function GPGameplay.GPPlayerController.Serverslomo // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x364a620
	void ServerRequestWeaponContexts(); // Function GPGameplay.GPPlayerController.ServerRequestWeaponContexts // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x364a280
	void ServerQueryQuitMatch(); // Function GPGameplay.GPPlayerController.ServerQueryQuitMatch // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x364a230
	void ServerQueryEndMatch(enum class EPlayerEndMatchReason reason); // Function GPGameplay.GPPlayerController.ServerQueryEndMatch // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x364a180
	void ServerProcessSpectFashionStart(); // Function GPGameplay.GPPlayerController.ServerProcessSpectFashionStart // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35c49f0
	void ServerProcessSpectFashionMesh(struct FName AllMesh); // Function GPGameplay.GPPlayerController.ServerProcessSpectFashionMesh // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x364a0f0
	void ServerEndGame(); // Function GPGameplay.GPPlayerController.ServerEndGame // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x364a0a0
	void ServerCheat(struct FString Cmd); // Function GPGameplay.GPPlayerController.ServerCheat // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x3649fb0
	void ServerBouncePing(float ClientTimeStamp); // Function GPGameplay.GPPlayerController.ServerBouncePing // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x3649f00
	void Server_RcvACWorldTime(float InACWorldTime); // Function GPGameplay.GPPlayerController.Server_RcvACWorldTime // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x364a5a0
	void RouteAxisInputToOtherPlayerInServer(int32_t PlayerIndex, struct FName VKeyName, float VKeyArg); // Function GPGameplay.GPPlayerController.RouteAxisInputToOtherPlayerInServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3649e00
	void RouteActionInputToOtherPlayerInServer(int32_t PlayerIndex, struct FName VKeyName); // Function GPGameplay.GPPlayerController.RouteActionInputToOtherPlayerInServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3649d30
	void RequestWholeScreenRotationArea(bool bRequest, struct FString reason); // Function GPGameplay.GPPlayerController.RequestWholeScreenRotationArea // (Final|Native|Public) // @ game+0x3649bc0
	void RequestSnapshot(struct AActor* Actor, float ClientTime); // Function GPGameplay.GPPlayerController.RequestSnapshot // (Net|Native|Event|Public|NetServer) // @ game+0x3649af0
	void QueryEndMatch(enum class EPlayerEndMatchReason reason); // Function GPGameplay.GPPlayerController.QueryEndMatch // (Native|Public) // @ game+0x3649910
	void QueryClientLoadingStatus(); // Function GPGameplay.GPPlayerController.QueryClientLoadingStatus // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x36498f0
	void PlayExplosionEffect(enum class EExplosionType ExplosionType, struct FVector ExplosionLocation); // Function GPGameplay.GPPlayerController.PlayExplosionEffect // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient|BlueprintCallable) // @ game+0x36496e0
	void PlayExplosionBeHitCamera(enum class EExplosionType ExplosionType, struct FVector ExplosionLocation); // Function GPGameplay.GPPlayerController.PlayExplosionBeHitCamera // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient|BlueprintCallable) // @ game+0x3649610
	void PlayerStopRequest(); // Function GPGameplay.GPPlayerController.PlayerStopRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x36498d0
	void OnRep_ServerEnableProcessPlayerInput(bool OldValue); // Function GPGameplay.GPPlayerController.OnRep_ServerEnableProcessPlayerInput // (Final|Native|Public) // @ game+0x3649580
	void OnRep_ObserverModeChange(); // Function GPGameplay.GPPlayerController.OnRep_ObserverModeChange // (Native|Public) // @ game+0x3649560
	void OnRep_GPObserverPawn(); // Function GPGameplay.GPPlayerController.OnRep_GPObserverPawn // (Native|Public) // @ game+0x36494e0
	void OnNotifyServerLoadLevelCompleted(struct FName CheckLoadLevelReason); // Function GPGameplay.GPPlayerController.OnNotifyServerLoadLevelCompleted // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3649450
	void OnInputWheelieStop(); // Function GPGameplay.GPPlayerController.OnInputWheelieStop // (Final|Native|Public) // @ game+0x3649430
	void OnInputWheelieStart(); // Function GPGameplay.GPPlayerController.OnInputWheelieStart // (Final|Native|Public) // @ game+0x3649410
	void OnInputUnJump(); // Function GPGameplay.GPPlayerController.OnInputUnJump // (Final|Native|Public) // @ game+0x36493f0
	void OnInputSubTimeDilation(); // Function GPGameplay.GPPlayerController.OnInputSubTimeDilation // (Final|Native|Public) // @ game+0x36493d0
	void OnInputStoppieStop(); // Function GPGameplay.GPPlayerController.OnInputStoppieStop // (Final|Native|Public) // @ game+0x36493b0
	void OnInputStoppieStart(); // Function GPGameplay.GPPlayerController.OnInputStoppieStart // (Final|Native|Public) // @ game+0x3649390
	void OnInputStandUp(); // Function GPGameplay.GPPlayerController.OnInputStandUp // (Final|Native|Public) // @ game+0x3649370
	void OnInputJump(); // Function GPGameplay.GPPlayerController.OnInputJump // (Final|Native|Public) // @ game+0x3649350
	void OnInputInteract2(); // Function GPGameplay.GPPlayerController.OnInputInteract2 // (Final|Native|Public) // @ game+0x3649330
	void OnInputInteract1(); // Function GPGameplay.GPPlayerController.OnInputInteract1 // (Final|Native|Public) // @ game+0x3649310
	void OnInputCancelFire(); // Function GPGameplay.GPPlayerController.OnInputCancelFire // (Final|Native|Public) // @ game+0x36492f0
	void OnInputAddTimeDilation(); // Function GPGameplay.GPPlayerController.OnInputAddTimeDilation // (Final|Native|Public) // @ game+0x36492d0
	void OnGMSubClientTimeDilation(); // Function GPGameplay.GPPlayerController.OnGMSubClientTimeDilation // (Final|Native|Public) // @ game+0x36492b0
	void OnGMSnapshot(); // Function GPGameplay.GPPlayerController.OnGMSnapshot // (Final|Native|Public) // @ game+0x3649290
	void OnGMRecoverClientTimeDilation(); // Function GPGameplay.GPPlayerController.OnGMRecoverClientTimeDilation // (Final|Native|Public) // @ game+0x3649270
	void OnGMAddClientTimeDilation(); // Function GPGameplay.GPPlayerController.OnGMAddClientTimeDilation // (Final|Native|Public) // @ game+0x3649250
	void NtfServerClientLoadingStatus(bool bIsFinished); // Function GPGameplay.GPPlayerController.NtfServerClientLoadingStatus // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x3649190
	void NotifySnapshot(struct FGPSnapshotInfo Info); // Function GPGameplay.GPPlayerController.NotifySnapshot // (Net|Native|Event|Public|NetClient) // @ game+0x3648fe0
	void NotifySeamlessLoginReady(bool bSeamlessEnter); // Function GPGameplay.GPPlayerController.NotifySeamlessLoginReady // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3648f50
	void NotifyClientFakeWeaponEvent(struct FGPClippedWeaponFakeEventNeededInfo FakeEventInfo); // Function GPGameplay.GPPlayerController.NotifyClientFakeWeaponEvent // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3648e50
	void MobilePersistMoveRequest(bool bInPersistMoveInput); // Function GPGameplay.GPPlayerController.MobilePersistMoveRequest // (Final|Native|Public) // @ game+0x3648dc0
	void LoadLobbyMap(); // Function GPGameplay.GPPlayerController.LoadLobbyMap // (Native|Public) // @ game+0x3648da0
	void KickMeOut(); // Function GPGameplay.GPPlayerController.KickMeOut // (Final|Exec|Native|Public) // @ game+0x3648d80
	bool IsObserver(); // Function GPGameplay.GPPlayerController.IsObserver // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3648d50
	bool IsDead(); // Function GPGameplay.GPPlayerController.IsDead // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3648d20
	void Input_EnableGyroInput(enum class EGyroscopeInputForbidReason InReason, bool bEnable); // Function GPGameplay.GPPlayerController.Input_EnableGyroInput // (Final|Native|Public|BlueprintCallable) // @ game+0x3648c50
	void HandleAxisVirtualInputInClient(int32_t PlayerIndex, struct FName VKeyName, float VKeyArg); // Function GPGameplay.GPPlayerController.HandleAxisVirtualInputInClient // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3648b50
	void HandleActionVirtualInputInClient(int32_t PlayerIndex, struct FName VKeyName); // Function GPGameplay.GPPlayerController.HandleActionVirtualInputInClient // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3648a80
	struct FString GetUinStr(); // Function GPGameplay.GPPlayerController.GetUinStr // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3648a00
	int32_t GetReLoginCount(); // Function GPGameplay.GPPlayerController.GetReLoginCount // (Final|Native|Public|BlueprintCallable) // @ game+0x36489e0
	struct FRotator GetPlayerBaseRotation(); // Function GPGameplay.GPPlayerController.GetPlayerBaseRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x36489a0
	float GetLastInputRealTime(); // Function GPGameplay.GPPlayerController.GetLastInputRealTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36487c0
	struct FVector2D GetInputRotation(); // Function GPGameplay.GPPlayerController.GetInputRotation // (Final|Native|Public|HasDefaults|Const) // @ game+0x3648780
	struct UGPInputManager* GetInputManager(); // Function GPGameplay.GPPlayerController.GetInputManager // (Final|Native|Public|BlueprintCallable) // @ game+0x3648750
	struct UClass* GetInputComponentClass(); // Function GPGameplay.GPPlayerController.GetInputComponentClass // (Native|Public|BlueprintCallable) // @ game+0x3648720
	struct UGPPlayerInput* GetGPPlayerInput(); // Function GPGameplay.GPPlayerController.GetGPPlayerInput // (Native|Public|BlueprintCallable) // @ game+0x36486f0
	struct UGPMarkerControllerComponent* GetGPMarkerController(); // Function GPGameplay.GPPlayerController.GetGPMarkerController // (Final|Native|Public|BlueprintCallable) // @ game+0x3648690
	struct UGPLocalPlayer* GetGPLocalPlayer(); // Function GPGameplay.GPPlayerController.GetGPLocalPlayer // (Native|Public|BlueprintCallable) // @ game+0x3648660
	struct AGPCharacter* GetGPCharacter(); // Function GPGameplay.GPPlayerController.GetGPCharacter // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3648630
	bool GetEnableProcessPlayerInput(); // Function GPGameplay.GPPlayerController.GetEnableProcessPlayerInput // (Final|Native|Public|BlueprintCallable) // @ game+0x3648550
	struct UClass* GetDefaultPawnClassForController(); // Function GPGameplay.GPPlayerController.GetDefaultPawnClassForController // (Final|Native|Public|BlueprintCallable) // @ game+0x3648510
	struct UGPControllerAudioComponent* GetControllerAudioComp(); // Function GPGameplay.GPPlayerController.GetControllerAudioComp // (Final|Native|Public) // @ game+0x36484e0
	bool GetControlButtonAllowRotate(enum class EMobileControlButtonType ControlButtonType); // Function GPGameplay.GPPlayerController.GetControlButtonAllowRotate // (Final|Native|Public|BlueprintCallable) // @ game+0x3648450
	struct AActor* GetAimedActor(float Dist, bool bSkipDoorRegion); // Function GPGameplay.GPPlayerController.GetAimedActor // (Native|Public|BlueprintCallable) // @ game+0x3648380
	void EndGame(); // Function GPGameplay.GPPlayerController.EndGame // (Final|Exec|Native|Public) // @ game+0x36481e0
	void DumpCurrentWeapon(); // Function GPGameplay.GPPlayerController.DumpCurrentWeapon // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x36481c0
	void CreateHUDDeferred(); // Function GPGameplay.GPPlayerController.CreateHUDDeferred // (Final|Native|Public) // @ game+0x36481a0
	void CloseGMPanel(); // Function GPGameplay.GPPlayerController.CloseGMPanel // (Final|Native|Public|BlueprintCallable) // @ game+0x3648180
	void ClientSetLocationWithRebasing(struct FVector NewLocation, struct FRotator NewRotation); // Function GPGameplay.GPPlayerController.ClientSetLocationWithRebasing // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x36480a0
	void ClientReturnPing(float ServerReturnedClientTimeStamp, float InServerTimeStamp); // Function GPGameplay.GPPlayerController.ClientReturnPing // (Net|Native|Event|Public|NetClient) // @ game+0x3647fd0
	void ClientRestartOnReLogin(struct APawn* InPawn); // Function GPGameplay.GPPlayerController.ClientRestartOnReLogin // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x35c4960
	void ClientQuitMatch(enum class EPlayerQuitMatchReason KickReason); // Function GPGameplay.GPPlayerController.ClientQuitMatch // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3647f50
	void ClientNotifyWeaponContexts(struct TArray<struct FWeaponDataContext> WeaponContexts); // Function GPGameplay.GPPlayerController.ClientNotifyWeaponContexts // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3647d60
	void ClientNotifyRestart(); // Function GPGameplay.GPPlayerController.ClientNotifyRestart // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0x3647d10
	void ClientNotifyDied(); // Function GPGameplay.GPPlayerController.ClientNotifyDied // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0x3647cc0
	void CheckSendPing(); // Function GPGameplay.GPPlayerController.CheckSendPing // (Final|Native|Public) // @ game+0x3647ca0
	void ChangeTouchControlMode(bool bControlCharacter); // Function GPGameplay.GPPlayerController.ChangeTouchControlMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3647c10
	void BP_GetPlayerViewPoint(struct FVector& out_Location, struct FRotator& out_Rotation); // Function GPGameplay.GPPlayerController.BP_GetPlayerViewPoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3647b20
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.BowDataComponentAppearance
// Size: 0xba0 (Inherited: 0xb90)
class UBowDataComponentAppearance : public UModularWeaponDataComponentAppearance {
public:

	struct FName AttachSocketName; // 0xb90(0x08)
	char pad_B98[0x8]; // 0xb98(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.SocketOverrideDataComponentAppearance
// Size: 0xb20 (Inherited: 0xaf0)
class USocketOverrideDataComponentAppearance : public UThrowWeaponDataAppearanceComp {
public:

	struct FName AttachSocketName; // 0xaf0(0x08)
	struct FName AttachSocketName3P; // 0xaf8(0x08)
	struct FName PreFireAttachSocketName; // 0xb00(0x08)
	struct FName PreFireAttachSocketName3P; // 0xb08(0x08)
	enum class EGPWeaponInnerEvent PreFireState; // 0xb10(0x01)
	bool IsPreFireState; // 0xb11(0x01)
	char pad_B12[0xe]; // 0xb12(0x0e)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ThrowableLeftWeaponDataAppearanceComp
// Size: 0xb00 (Inherited: 0xaf0)
class UThrowableLeftWeaponDataAppearanceComp : public UThrowWeaponDataAppearanceComp {
public:

	struct FName LeftWeaponSocket; // 0xaf0(0x08)
	char pad_AF8[0x8]; // 0xaf8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.BowFuncComponentAppearance
// Size: 0x420 (Inherited: 0x410)
class UBowFuncComponentAppearance : public UModularWeaponFuncComponentAppearance {
public:

	struct FName AttachSocketName; // 0x410(0x08)
	struct FName AttachSocketName3P; // 0x418(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCharacterBase
// Size: 0x1450 (Inherited: 0xa78)
class AGPCharacterBase : public ACharacterBase {
public:

	char pad_A78[0x100]; // 0xa78(0x100)
	struct TArray<struct AActor*> AllFocusedActor; // 0xb78(0x10)
	struct TArray<struct AActor*> EmptyCachedFocusedActor; // 0xb88(0x10)
	char bEnableKillZFunction : 1; // 0xb98(0x01)
	char bResetLastWalkPosFellOutWorld : 1; // 0xb98(0x01)
	char pad_B98_2 : 6; // 0xb98(0x01)
	char pad_B99[0x7]; // 0xb99(0x07)
	struct FCharMarkerData CharMarkerData; // 0xba0(0x18)
	struct FCharOutLineEffectData CharOutLineEffectData; // 0xbb8(0x14)
	char pad_BCC[0x8]; // 0xbcc(0x08)
	float CacheLastIsAliveForTakeDamage; // 0xbd4(0x04)
	struct FDeadInfo DeadInfo; // 0xbd8(0x68)
	bool bDeadCanOPtimise; // 0xc40(0x01)
	bool LastIsDead; // 0xc41(0x01)
	char pad_C42[0x2]; // 0xc42(0x02)
	uint32_t MyGUIDValue; // 0xc44(0x04)
	float DeathWatchingBattleDelayTime; // 0xc48(0x04)
	bool bEnableDeathBeRescue; // 0xc4c(0x01)
	char pad_C4D[0x3]; // 0xc4d(0x03)
	int32_t DeathBeRescueNum; // 0xc50(0x04)
	float DeathWaitRescueTimeForConfig; // 0xc54(0x04)
	float DeathBeRescueResetHPRate; // 0xc58(0x04)
	float RebornTimeStamp; // 0xc5c(0x04)
	float BeRescuedTimeStamp; // 0xc60(0x04)
	bool bPalsy; // 0xc64(0x01)
	char pad_C65[0x1]; // 0xc65(0x01)
	bool bIsAILab; // 0xc66(0x01)
	bool bIsPlayerAI; // 0xc67(0x01)
	bool bIsPlayerAI_SOL; // 0xc68(0x01)
	bool bIsOfflinePlayer; // 0xc69(0x01)
	bool bOverrideVisibleDistanceFactorThesholds; // 0xc6a(0x01)
	char pad_C6B[0x1]; // 0xc6b(0x01)
	float CapsuleRadius; // 0xc6c(0x04)
	float CapsuleHalfHeight; // 0xc70(0x04)
	bool bUpdateRotationSmoothly; // 0xc74(0x01)
	char pad_C75[0x3]; // 0xc75(0x03)
	float RotateAngleSpeed; // 0xc78(0x04)
	char pad_C7C[0x4]; // 0xc7c(0x04)
	uint64_t HiddenInGameBitValue; // 0xc80(0x08)
	char pad_C88[0x8]; // 0xc88(0x08)
	/*struct FMulticastInlineDelegate*/char OnDied[0x10]; // 0xc90(0x10)
	/*struct FMulticastInlineDelegate*/char OnReborn[0x10]; // 0xca0(0x10)
	/*struct FMulticastInlineDelegate*/char OnClientReborn[0x10]; // 0xcb0(0x10)
	/*struct FMulticastInlineDelegate*/char OnClientCharacterReborn[0x10]; // 0xcc0(0x10)
	/*struct FMulticastInlineDelegate*/char OnServerCharacterReborn[0x10]; // 0xcd0(0x10)
	/*struct FMulticastInlineDelegate*/char GPCharacterLiveStateChangeSignature[0x10]; // 0xce0(0x10)
	/*struct FMulticastInlineDelegate*/char GPCharacterLiveSpectateTargetChange[0x10]; // 0xcf0(0x10)
	/*struct FMulticastInlineDelegate*/char OnServerGPCharacterBeingRescue[0x10]; // 0xd00(0x10)
	/*struct FMulticastInlineDelegate*/char OnServerGPCharacterBeingCarry[0x10]; // 0xd10(0x10)
	/*struct FMulticastInlineDelegate*/char OnServerGPCharacterPreDropCarryBody[0x10]; // 0xd20(0x10)
	/*struct FMulticastInlineDelegate*/char OnGPCharacterIsAssassinate[0x10]; // 0xd30(0x10)
	/*struct FMulticastInlineDelegate*/char OnGPCharacterBeingAssassinate[0x10]; // 0xd40(0x10)
	/*struct FMulticastInlineDelegate*/char OnGPCharacterInterruptInteraction[0x10]; // 0xd50(0x10)
	char pad_D60[0x38]; // 0xd60(0x38)
	/*struct FMulticastInlineDelegate*/char OnCharacterOBStateChanged[0x10]; // 0xd98(0x10)
	/*struct FMulticastInlineDelegate*/char OnCharacterVOSubtitleSeqFinished[0x10]; // 0xda8(0x10)
	char pad_DB8[0x8]; // 0xdb8(0x08)
	struct UGPNetworkIdentityComponent* NetworkIdentity; // 0xdc0(0x08)
	struct UGPComBoardComponent* Comboard; // 0xdc8(0x08)
	struct UGPBlackboardComponent* BlackBoard; // 0xdd0(0x08)
	struct UGPAdvancedTickingComponent* AdvancedTickingComponent; // 0xdd8(0x08)
	struct UGPFSMStateMachineComponent* FSMComponent; // 0xde0(0x08)
	struct UGPFSMInstance* FSMInstance; // 0xde8(0x08)
	struct USceneComponent* CameraRealPoint; // 0xdf0(0x08)
	struct UGPASC* ASC; // 0xdf8(0x08)
	struct UGPAttributeCenterComponent* AttributesCenter; // 0xe00(0x08)
	float CountingTime; // 0xe08(0x04)
	float CountingEndTime; // 0xe0c(0x04)
	/*struct FMulticastInlineDelegate*/char OnClientNotifyCounting[0x10]; // 0xe10(0x10)
	/*struct FMulticastInlineDelegate*/char OnClientNotifyCountingEndTimeChanged[0x10]; // 0xe20(0x10)
	/*struct FMulticastInlineDelegate*/char OnCharacterExpertIdChanged[0x10]; // 0xe30(0x10)
	struct FVector ViewPointOffset; // 0xe40(0x0c)
	float ViewAngle; // 0xe4c(0x04)
	enum class ECharacterGender CharacterGender; // 0xe50(0x01)
	bool bCanAddForce; // 0xe51(0x01)
	bool bDebugMode; // 0xe52(0x01)
	char pad_E53[0x5]; // 0xe53(0x05)
	struct FString DebugStr; // 0xe58(0x10)
	struct UGPHealthDataComponent* HealthComp; // 0xe68(0x08)
	struct UGPTeamComponent* TeamComp; // 0xe70(0x08)
	struct UGPRagDollPhysicsComponent* RagdollComp; // 0xe78(0x08)
	struct UGPCameraModeComponent* CameraModeComp; // 0xe80(0x08)
	struct UWeaponAppearanceProxy* WeaponAppearanceProxy; // 0xe88(0x08)
	float MaxDeathLifeSpan; // 0xe90(0x04)
	float TimeOfDeath; // 0xe94(0x04)
	struct FCharacterSpeedFactor SpeedFactor; // 0xe98(0x34)
	struct FCharacterSpeedFactor SpeedFactorBase; // 0xecc(0x34)
	struct FCharacterSpeedFactor FactorGainCoefficient; // 0xf00(0x34)
	char pad_F34[0x44]; // 0xf34(0x44)
	struct UNZCoverPoint* OccupyingCoverPoint; // 0xf78(0x08)
	bool bCanBeMarkedByPlayerSOL; // 0xf80(0x01)
	bool bDeadBoxCanBeMarkedByPlayer; // 0xf81(0x01)
	bool bCanBeMarkedByPlayerMP; // 0xf82(0x01)
	char pad_F83[0x5]; // 0xf83(0x05)
	struct TArray<enum class EGPMarkerType> PlayerMarkingTypeArr; // 0xf88(0x10)
	struct FVector PendingDeathOffset; // 0xf98(0x0c)
	struct FVector DefaultBoxExtent; // 0xfa4(0x0c)
	struct FVector PendingDeathBoxExtent; // 0xfb0(0x0c)
	struct FVector CrouchOffset_Reveal; // 0xfbc(0x0c)
	struct FVector ProneOffset_Reveal; // 0xfc8(0x0c)
	struct FVector DefaultBoxExtent_Reveal; // 0xfd4(0x0c)
	struct FVector CrouchBoxExtent_Reveal; // 0xfe0(0x0c)
	struct FVector ProneBoxExtent_Reveal; // 0xfec(0x0c)
	struct TWeakObjectPtr<struct AWeaponBase> InteractivePutWeaponPtr; // 0xff8(0x08)
	/*struct TSet<struct FString>*/char InteractivePutWeaponReasonSet[0x50]; // 0x1000(0x50)
	char pad_1050[0x2]; // 0x1050(0x02)
	bool bEnableMotionGraph; // 0x1052(0x01)
	bool bEnablePhysicsDeath; // 0x1053(0x01)
	float PhysicsDeathDelay; // 0x1054(0x04)
	bool bEnableRotationTick; // 0x1058(0x01)
	bool bEnableCrouchRotationTick; // 0x1059(0x01)
	bool bEnableProneRotationTick; // 0x105a(0x01)
	char pad_105B[0x5]; // 0x105b(0x05)
	struct UGPFightStateComponent* FightStateComp; // 0x1060(0x08)
	/*struct TMap<enum class ECharacterFSMEventDefine, struct FMulticastInlineDelegate>*/char OnCharacterFSMEventMap[0x50]; // 0x1068(0x50)
	/*struct FMulticastInlineDelegate*/char OnFsmTransitionEvent[0x10]; // 0x10b8(0x10)
	/*struct FMulticastInlineDelegate*/char OnFSMGlobalEvent[0x10]; // 0x10c8(0x10)
	/*struct FMulticastInlineDelegate*/char OnCameraModeBeginChanged[0x10]; // 0x10d8(0x10)
	/*struct FMulticastInlineDelegate*/char OnCameraModeEndChanged[0x10]; // 0x10e8(0x10)
	char pad_10F8[0x44]; // 0x10f8(0x44)
	struct FName LeftArmAnimRowNameFSM; // 0x113c(0x08)
	struct FRotator TargetRotation; // 0x1144(0x0c)
	struct FRotator CharacterRotation; // 0x1150(0x0c)
	struct FRotator LookingRotation; // 0x115c(0x0c)
	char pad_1168[0x1c]; // 0x1168(0x1c)
	struct FName TurningInstanceLabel; // 0x1184(0x08)
	float TurningThreashold; // 0x118c(0x04)
	float TurningCrouchThreashold; // 0x1190(0x04)
	float TurningProneThreashold; // 0x1194(0x04)
	char pad_1198[0x2c]; // 0x1198(0x2c)
	bool bEnableMovementOptimize; // 0x11c4(0x01)
	char pad_11C5[0x63]; // 0x11c5(0x63)
	/*struct FMulticastInlineDelegate*/char OnAimingTriggered[0x10]; // 0x1228(0x10)
	char pad_1238[0x30]; // 0x1238(0x30)
	/*struct FMulticastInlineDelegate*/char OnUpdateWeaponList[0x10]; // 0x1268(0x10)
	/*struct FMulticastInlineDelegate*/char OnUpdateHasSecondaryWeapon[0x10]; // 0x1278(0x10)
	/*struct FMulticastInlineDelegate*/char OnUpdateWeaponIDList[0x10]; // 0x1288(0x10)
	/*struct FMulticastInlineDelegate*/char OnUpdateCurrentWeapon[0x10]; // 0x1298(0x10)
	/*struct FMulticastInlineDelegate*/char OnUpdateWeaponBarWeapon[0x10]; // 0x12a8(0x10)
	char pad_12B8[0x10]; // 0x12b8(0x10)
	/*struct FMulticastInlineDelegate*/char OnTakeDamageSimple[0x10]; // 0x12c8(0x10)
	char pad_12D8[0x60]; // 0x12d8(0x60)
	/*struct FMulticastInlineDelegate*/char OnMicStateChangeDelegate[0x10]; // 0x1338(0x10)
	char pad_1348[0x18]; // 0x1348(0x18)
	struct FRepOverrideMovementInfo CurrentOverrideMovementInfo; // 0x1360(0x02)
	char pad_1362[0x2]; // 0x1362(0x02)
	float CurrentRotationInputScale; // 0x1364(0x04)
	struct FActorMoveMessage LatestMovePackage; // 0x1368(0x2c)
	enum class ECollisionChannel GroupCollisionChannel; // 0x1394(0x01)
	char pad_1395[0x3]; // 0x1395(0x03)
	struct TArray<struct UObject*> UseLeftArmAnimAssets; // 0x1398(0x10)
	int32_t FaildFireHitCnt; // 0x13a8(0x04)
	char pad_13AC[0x4]; // 0x13ac(0x04)
	struct TArray<struct UClass*> StopTickComponentClasses; // 0x13b0(0x10)
	struct TArray<struct UActorComponent*> StopTickComponents; // 0x13c0(0x10)
	char pad_13D0[0xc]; // 0x13d0(0x0c)
	enum class EGPAudioFootSoundBodyType FootstepSoundBodyType; // 0x13dc(0x01)
	char pad_13DD[0x3]; // 0x13dd(0x03)
	int32_t ActorPoolDefaultlPreloadSize; // 0x13e0(0x04)
	int32_t ActorPoolMaxPoolSize; // 0x13e4(0x04)
	bool ActorPoolNetDriverSupport; // 0x13e8(0x01)
	struct FPerPlatformBool bCastThirdPersonShadow; // 0x13e9(0x01)
	struct FPerPlatformBool bCastThirdPersonHiddenShadow; // 0x13ea(0x01)
	struct FPerPlatformBool bCastFirstPersonShadow; // 0x13eb(0x01)
	char pad_13EC[0x9]; // 0x13ec(0x09)
	bool bCurrentWeaponDirty; // 0x13f5(0x01)
	char pad_13F6[0x2]; // 0x13f6(0x02)
	struct AWeaponBase* CacheCurWeapon; // 0x13f8(0x08)
	char pad_1400[0x4]; // 0x1400(0x04)
	bool bCharacterTPPCastShadowGamePlay; // 0x1404(0x01)
	char pad_1405[0x4b]; // 0x1405(0x4b)

	bool VerifySwitchWeapon(struct AWeaponBase* Weapon); // Function GPGameplay.GPCharacterBase.VerifySwitchWeapon // (Native|Public) // @ game+0x35d8330
	bool TryReborn(bool RefillArmor, float FillHealthHPRate); // Function GPGameplay.GPCharacterBase.TryReborn // (Native|Public|BlueprintCallable) // @ game+0x35d81e0
	void SwitchTurnInPlace(bool OnOff); // Function GPGameplay.GPCharacterBase.SwitchTurnInPlace // (Final|Native|Public|BlueprintCallable) // @ game+0x35d8150
	void SwitchToPreWeapon(enum class ESwitchWeaponContext SWContext, enum class EWeaponSwitchType SwitchType, bool bCanUseEmptyHand); // Function GPGameplay.GPCharacterBase.SwitchToPreWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0x35d8040
	void SwitchToNextWeapon(enum class ESwitchWeaponContext SWContext, enum class EWeaponSwitchType SwitchType, bool bCanUseEmptyHand); // Function GPGameplay.GPCharacterBase.SwitchToNextWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0x35d7f30
	void SwitchToMeleeWeapon(enum class ESwitchWeaponContext SWContext, enum class EWeaponSwitchType SwitchType, bool bCanUseEmptyHand); // Function GPGameplay.GPCharacterBase.SwitchToMeleeWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0x35d7e20
	void SwitchToMainWeapon(enum class ESwitchWeaponContext SWContext, enum class EWeaponSwitchType SwitchType); // Function GPGameplay.GPCharacterBase.SwitchToMainWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0x35d7d60
	void SwitchToLastUsedWeapon(enum class ESwitchWeaponContext SWContext, enum class EWeaponSwitchType SwitchType, bool bCanUseEmptyHand); // Function GPGameplay.GPCharacterBase.SwitchToLastUsedWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0x35d7c50
	void SwitchToEmptyHand(enum class ESwitchWeaponContext SWContext, enum class EWeaponSwitchType SwitchType); // Function GPGameplay.GPCharacterBase.SwitchToEmptyHand // (Final|Native|Public|BlueprintCallable) // @ game+0x35d7b90
	void SwitchToDest(enum class ESwitchWeaponContext SWContext, struct AWeaponBase* Inv, enum class EWeaponSwitchType SwitchType); // Function GPGameplay.GPCharacterBase.SwitchToDest // (Final|Native|Public|BlueprintCallable) // @ game+0x35d7a90
	void SwitchLeftWeaponToEmptyHand(); // Function GPGameplay.GPCharacterBase.SwitchLeftWeaponToEmptyHand // (Final|Native|Public) // @ game+0x35d7a70
	void StopNetworkSlotmAnim(enum class EAnimationPlayType AnimationPlayType); // Function GPGameplay.GPCharacterBase.StopNetworkSlotmAnim // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x35d79f0
	void StopNetworkImpendingDeathHelpMontage(); // Function GPGameplay.GPCharacterBase.StopNetworkImpendingDeathHelpMontage // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35d79d0
	void StopNetworkCustomAnim(); // Function GPGameplay.GPCharacterBase.StopNetworkCustomAnim // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x35d79b0
	void StopMultiImpendingDeathHelpMontage(); // Function GPGameplay.GPCharacterBase.StopMultiImpendingDeathHelpMontage // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x35d7990
	void StopMultiFire(int32_t FireIndex); // Function GPGameplay.GPCharacterBase.StopMultiFire // (Native|Public|BlueprintCallable) // @ game+0x35d7900
	void StopLeftArmAnim_FSM(); // Function GPGameplay.GPCharacterBase.StopLeftArmAnim_FSM // (Final|Native|Public) // @ game+0x35d78e0
	void StopLeftArmAnim(); // Function GPGameplay.GPCharacterBase.StopLeftArmAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35d78c0
	void StopInteractivePutWeaponAnim(); // Function GPGameplay.GPCharacterBase.StopInteractivePutWeaponAnim // (Native|Public|BlueprintCallable) // @ game+0x35d78a0
	void StopFire(int32_t FireIndex); // Function GPGameplay.GPCharacterBase.StopFire // (Native|Public|BlueprintCallable) // @ game+0x35d7810
	void StartMultiFire(int32_t FireIndex, int32_t FireModeIndex); // Function GPGameplay.GPCharacterBase.StartMultiFire // (Native|Public|BlueprintCallable) // @ game+0x35d7600
	void StartFireForAI(); // Function GPGameplay.GPCharacterBase.StartFireForAI // (Native|Public|BlueprintCallable) // @ game+0x35d75e0
	void StartFire(int32_t FireIndex); // Function GPGameplay.GPCharacterBase.StartFire // (Native|Public|BlueprintCallable) // @ game+0x35d7550
	void SkillForbitLeftHanldIK(bool forbit); // Function GPGameplay.GPCharacterBase.SkillForbitLeftHanldIK // (Final|Native|Public|BlueprintCallable) // @ game+0x35d74c0
	bool ShouldCreateDeadBody(); // Function GPGameplay.GPCharacterBase.ShouldCreateDeadBody // (Native|Event|Public|BlueprintEvent) // @ game+0x35d7490
	bool ShouldCreateCarryBody(); // Function GPGameplay.GPCharacterBase.ShouldCreateCarryBody // (Native|Event|Public|BlueprintEvent) // @ game+0x35d7460
	void SetWeaponHidden(bool bHiddenWeapon, enum class EWeaponHiddenTag HiddenTag); // Function GPGameplay.GPCharacterBase.SetWeaponHidden // (Final|Native|Public|BlueprintCallable) // @ game+0x35d73a0
	void SetWeaponBipodDeploy(bool bEnter); // Function GPGameplay.GPCharacterBase.SetWeaponBipodDeploy // (Native|Public) // @ game+0x35d7310
	void SetUsingInteractiveBasePose(bool bUse, struct FString Context); // Function GPGameplay.GPCharacterBase.SetUsingInteractiveBasePose // (Native|Public|BlueprintCallable) // @ game+0x35d71a0
	void SetTargetActor(struct AActor* InTargetActor); // Function GPGameplay.GPCharacterBase.SetTargetActor // (Native|Public|BlueprintCallable) // @ game+0x35d7110
	void SetSpeedFactorGain(struct FCharacterSpeedFactor NewFactorGainCoefficient, bool AddOrRemove); // Function GPGameplay.GPCharacterBase.SetSpeedFactorGain // (Final|Native|Public|BlueprintCallable) // @ game+0x35d7000
	void SetSpeedFactorBase(struct FCharacterSpeedFactor NewFactor); // Function GPGameplay.GPCharacterBase.SetSpeedFactorBase // (Final|Native|Public) // @ game+0x35d6f40
	void SetRotationMethod(); // Function GPGameplay.GPCharacterBase.SetRotationMethod // (Native|Public|BlueprintCallable) // @ game+0x35d6f20
	void SetRotationInputScale(float Ratio); // Function GPGameplay.GPCharacterBase.SetRotationInputScale // (Final|Native|Public|BlueprintCallable) // @ game+0x35d6ea0
	void SetOverrideSpeedAndPose(enum class EOverrideMovementType Pose); // Function GPGameplay.GPCharacterBase.SetOverrideSpeedAndPose // (Final|Native|Public|BlueprintCallable) // @ game+0x35d6e20
	void SetGPCharacterHiddenInGame(enum class EGPCharacterHiddenReason HiddenTag, bool bHide); // Function GPGameplay.GPCharacterBase.SetGPCharacterHiddenInGame // (Native|Public) // @ game+0x35d6ca0
	void SetFPPLowerMeshHidden(bool bFPPLowerMeshHidden, struct FString SetReasonStr); // Function GPGameplay.GPCharacterBase.SetFPPLowerMeshHidden // (Native|Public|BlueprintCallable) // @ game+0x35d6b30
	void SetDeadCanOPtimise(bool NewDeadCanOPtimise); // Function GPGameplay.GPCharacterBase.SetDeadCanOPtimise // (Final|Native|Public|BlueprintCallable) // @ game+0x35d6aa0
	bool SetCharacterOutLineEffect(bool Active, enum class EOutLineEffectType OutLineEffectType, int32_t OutLineValue); // Function GPGameplay.GPCharacterBase.SetCharacterOutLineEffect // (Final|Native|Public) // @ game+0x35d69a0
	void ServerSetOverrideSpeedAndPose(enum class EOverrideMovementType Pose); // Function GPGameplay.GPCharacterBase.ServerSetOverrideSpeedAndPose // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35d6430
	void ServerRemoveWeapon(struct AWeaponBase* Weapon); // Function GPGameplay.GPCharacterBase.ServerRemoveWeapon // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x35d6370
	void ServerReceiveFSMTransitionEvent(enum class EGPFSMTransitionEvent Event, bool bUpdateFSMImmediately); // Function GPGameplay.GPCharacterBase.ServerReceiveFSMTransitionEvent // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35d62a0
	void ServerReceiveFSMEvent(enum class ECharacterFSMEventDefine Event, float Value, struct UObject* EventObject); // Function GPGameplay.GPCharacterBase.ServerReceiveFSMEvent // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35d61a0
	void ServerEnableDamageValidation(bool bEnable, bool bDebug); // Function GPGameplay.GPCharacterBase.ServerEnableDamageValidation // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35d5fb0
	void ServerAddWeaponByRec(int64_t RecID, int32_t EquipPosition); // Function GPGameplay.GPCharacterBase.ServerAddWeaponByRec // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x35d5eb0
	void ServerAddWeapon(int64_t PresetId, int32_t EquipPosition); // Function GPGameplay.GPCharacterBase.ServerAddWeapon // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x35d5db0
	void Server_SetTurnInplaceData(bool isTurningPlace, bool isTurnRight, bool isTurningEnter, float rotationYaw); // Function GPGameplay.GPCharacterBase.Server_SetTurnInplaceData // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35d6830
	void Server_SetCharacterRotation(struct FRotator inTargetRotation, struct FRotator inCharacterRotation); // Function GPGameplay.GPCharacterBase.Server_SetCharacterRotation // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x35d6750
	void SendFSMTransitionEventAndClientPredictState(enum class EGPFSMTransitionEvent Event); // Function GPGameplay.GPCharacterBase.SendFSMTransitionEventAndClientPredictState // (Final|Native|Public) // @ game+0x35d5d30
	void SendFSMTransitionEventAndCheckClientPredictState(enum class EGPFSMTransitionEvent Event); // Function GPGameplay.GPCharacterBase.SendFSMTransitionEventAndCheckClientPredictState // (Final|Native|Public) // @ game+0x35d5cb0
	void SendFSMTransitionEvent(enum class EGPFSMTransitionEvent Event, bool WantToServerExcute, bool bUpdateFSMImmediately); // Function GPGameplay.GPCharacterBase.SendFSMTransitionEvent // (Final|Native|Public) // @ game+0x35d5ba0
	bool SendFSMGlobalEvent(struct FGameplayTag EventTag); // Function GPGameplay.GPCharacterBase.SendFSMGlobalEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x35d5b10
	bool SendFSMEvent(enum class ECharacterFSMEventDefine Event, float Value, struct UObject* EventObject, bool WantToSendMSGToServer); // Function GPGameplay.GPCharacterBase.SendFSMEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x35d59c0
	void RPC_SetCharacterMarkActive(bool Active, struct AGPCharacterBase* Source, struct AGPCharacterBase* Target); // Function GPGameplay.GPCharacterBase.RPC_SetCharacterMarkActive // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35d5440
	void RPC_ServerMakeDamage(struct FC2SBatchMakeDamage DamageResult); // Function GPGameplay.GPCharacterBase.RPC_ServerMakeDamage // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35d52e0
	void RPC_RequestServerHitAction(struct FRequestPointHitActionParam DamageResult); // Function GPGameplay.GPCharacterBase.RPC_RequestServerHitAction // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35d51a0
	void RPC_Reborn(uint64_t SelfUin); // Function GPGameplay.GPCharacterBase.RPC_Reborn // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x35d5110
	void RPC_Died(uint64_t SelfUin); // Function GPGameplay.GPCharacterBase.RPC_Died // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x35d5080
	void RPC_ClientNotifyHitActionFaild(struct FS2CRequestPointHitActionFaild DamageResult); // Function GPGameplay.GPCharacterBase.RPC_ClientNotifyHitActionFaild // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x35d4fe0
	void RPC_ClientApplyRadialDamage(struct FS2CDamageApply_Radial S2CDamageApply); // Function GPGameplay.GPCharacterBase.RPC_ClientApplyRadialDamage // (Net|Native|Event|Public|NetClient) // @ game+0x35d4f10
	void RPC_ClientApplyHitAction(struct FRequestPointHitActionParam DamageResult); // Function GPGameplay.GPCharacterBase.RPC_ClientApplyHitAction // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x35d4dd0
	void RPC_ClientApplyDamageMulticast(struct FS2CDamageApply S2CDamageApply); // Function GPGameplay.GPCharacterBase.RPC_ClientApplyDamageMulticast // (Net|Native|Event|NetMulticast|Public) // @ game+0x35d4c90
	void RPC_ClientApplyDamage(struct FS2CDamageApply S2CDamageApply); // Function GPGameplay.GPCharacterBase.RPC_ClientApplyDamage // (Net|Native|Event|Public|NetClient) // @ game+0x35d4b50
	void ReleaseCoverPoint(); // Function GPGameplay.GPCharacterBase.ReleaseCoverPoint // (Native|Public|BlueprintCallable|Const) // @ game+0x35d55c0
	void PreloadHeroResourceAudio(struct FName AudioName); // Function GPGameplay.GPCharacterBase.PreloadHeroResourceAudio // (Native|Public) // @ game+0x35d4ac0
	void PreloadHeroResourceAttachMesh(); // Function GPGameplay.GPCharacterBase.PreloadHeroResourceAttachMesh // (Native|Public) // @ game+0x35d4aa0
	void PlayTurningNetworkdedMontage(bool isLeft, float PlayRate, float turningAngle, float StartTime, bool stopAllMontages); // Function GPGameplay.GPCharacterBase.PlayTurningNetworkdedMontage // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35d4910
	bool PlaySeamlessShowAnim(float CameraLerpTime); // Function GPGameplay.GPCharacterBase.PlaySeamlessShowAnim // (Native|Public|BlueprintCallable) // @ game+0x35d4880
	void PlayNetworkImpendingDeathHelpMontage(); // Function GPGameplay.GPCharacterBase.PlayNetworkImpendingDeathHelpMontage // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35d4720
	void PlayNetworkdedMontage(struct UAnimMontage* MontageToPlay, float PlayRate, float StartTime, bool stopAllMontages); // Function GPGameplay.GPCharacterBase.PlayNetworkdedMontage // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35d4740
	void PlayNetworkCustom1And3PAnim(struct UAnimSequenceBase* montageToPlayFPP, struct UAnimSequenceBase* montageToPlayTPP, float RateOverride, int32_t LoopCount); // Function GPGameplay.GPCharacterBase.PlayNetworkCustom1And3PAnim // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x35d45e0
	void PlayMultiImpendingDeathHelpMontage(); // Function GPGameplay.GPCharacterBase.PlayMultiImpendingDeathHelpMontage // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x35d45c0
	void PlayMultiCastTurningNetworkdedMontage(bool isLeft, float PlayRate, float turningAngle, float StartTime, bool stopAllMontages); // Function GPGameplay.GPCharacterBase.PlayMultiCastTurningNetworkdedMontage // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x35d4430
	void PlayMultiCastNetworkdedMontage(struct UAnimMontage* MontageToPlay, float PlayRate, float StartTime, bool stopAllMontages); // Function GPGameplay.GPCharacterBase.PlayMultiCastNetworkdedMontage // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x35d42f0
	void PlayLeftArmAnimInner(struct FSoftObjectPath& AnimPath, bool bIsLeftArmAnim, float AnimDuration); // Function GPGameplay.GPCharacterBase.PlayLeftArmAnimInner // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x35d4100
	void PlayLeftArmAnim_FSM(struct FName& AnimRowName); // Function GPGameplay.GPCharacterBase.PlayLeftArmAnim_FSM // (Final|Native|Public|HasOutParms) // @ game+0x35d4260
	bool PlayLeftArmAnim(struct FName& AnimRowName, float& AnimDuration); // Function GPGameplay.GPCharacterBase.PlayLeftArmAnim // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x35d4000
	void PlayHeroResourceAudio(struct FName AudioName); // Function GPGameplay.GPCharacterBase.PlayHeroResourceAudio // (Native|Public) // @ game+0x35d3f70
	float PlayHelmetAnim(); // Function GPGameplay.GPCharacterBase.PlayHelmetAnim // (Native|Public|BlueprintCallable) // @ game+0x35d3f30
	float PlayFirstEquipAnim(float blendIn, float blendOut); // Function GPGameplay.GPCharacterBase.PlayFirstEquipAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35d3ce0
	float PlayFastUnEquipAnimNoBlend(struct FString ContextString, float blendIn, float blendOut); // Function GPGameplay.GPCharacterBase.PlayFastUnEquipAnimNoBlend // (Final|Native|Public|BlueprintCallable) // @ game+0x35d3b50
	float PlayFastUnEquipAnim(struct FString ContextString, float blendIn, float blendOut); // Function GPGameplay.GPCharacterBase.PlayFastUnEquipAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35d39c0
	float PlayFastEquipAnim(struct FString ContextString, float blendIn, float blendOut); // Function GPGameplay.GPCharacterBase.PlayFastEquipAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35d3830
	void PlayCustom1And3PAnimWithType(struct UAnimSequenceBase* montageToPlayFPP, struct UAnimSequenceBase* montageToPlayTPP, enum class EAnimationPlayType AnimationPlayType, float RateOverride, int32_t LoopCount); // Function GPGameplay.GPCharacterBase.PlayCustom1And3PAnimWithType // (Final|Native|Public) // @ game+0x35d35e0
	void PlayCustom1And3PAnim(struct UAnimSequenceBase* montageToPlayFPP, struct UAnimSequenceBase* montageToPlayTPP, float RateOverride, int32_t LoopCount); // Function GPGameplay.GPCharacterBase.PlayCustom1And3PAnim // (Final|Native|Public) // @ game+0x35d34a0
	void OnWeaponZoomingState(bool bIsZooming); // Function GPGameplay.GPCharacterBase.OnWeaponZoomingState // (Native|Public) // @ game+0x35d31e0
	void OnWeaponAllAmmoEmpty(uint64_t WeaponID); // Function GPGameplay.GPCharacterBase.OnWeaponAllAmmoEmpty // (Native|Public) // @ game+0x35d3150
	void OnWeaponAimingTriggered(bool bAimingOn); // Function GPGameplay.GPCharacterBase.OnWeaponAimingTriggered // (Native|Public) // @ game+0x35d30c0
	void OnWeaponActivate(); // Function GPGameplay.GPCharacterBase.OnWeaponActivate // (Native|Public) // @ game+0x35d3090
	void OnReq_FireHit(); // Function GPGameplay.GPCharacterBase.OnReq_FireHit // (Final|Native|Public) // @ game+0x88f4d0
	void OnRep_Palsy(); // Function GPGameplay.GPCharacterBase.OnRep_Palsy // (Native|Public) // @ game+0x35d3070
	void OnRep_MyGUIDInfo(); // Function GPGameplay.GPCharacterBase.OnRep_MyGUIDInfo // (Native|Public) // @ game+0x35d3050
	void OnRep_GPCharacterHiddenInGame(); // Function GPGameplay.GPCharacterBase.OnRep_GPCharacterHiddenInGame // (Native|Public) // @ game+0x35d3030
	void OnRep_DeadCanOptimise(); // Function GPGameplay.GPCharacterBase.OnRep_DeadCanOptimise // (Native|Public) // @ game+0x35d3010
	void OnRep_Dead(); // Function GPGameplay.GPCharacterBase.OnRep_Dead // (Native|Public) // @ game+0x35d2ff0
	void OnRep_CountingTime(); // Function GPGameplay.GPCharacterBase.OnRep_CountingTime // (Native|Public) // @ game+0x35d2fd0
	void OnRep_CountingEndTime(); // Function GPGameplay.GPCharacterBase.OnRep_CountingEndTime // (Native|Public) // @ game+0x35d2fb0
	void OnRep_CharacterMarkActive(); // Function GPGameplay.GPCharacterBase.OnRep_CharacterMarkActive // (Native|Public) // @ game+0x35d2f90
	void OnRefreshGPCharacterHiddenInGame(); // Function GPGameplay.GPCharacterBase.OnRefreshGPCharacterHiddenInGame // (Native|Public) // @ game+0x35d2f70
	void OnMeshComponentHitCallback(struct UPrimitiveComponent* HitComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function GPGameplay.GPCharacterBase.OnMeshComponentHitCallback // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x35d2da0
	void OnDeadCanOPtimiseChange(); // Function GPGameplay.GPCharacterBase.OnDeadCanOPtimiseChange // (Final|Native|Public) // @ game+0x35d2d80
	void OnClientShowCommonTips(int32_t Type, float Time); // Function GPGameplay.GPCharacterBase.OnClientShowCommonTips // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void OnCharacterTakeDamage(struct FHitResult& HitResult); // Function GPGameplay.GPCharacterBase.OnCharacterTakeDamage // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x7ed88c0
	void NotifyMicStateChange(int32_t ButtonType); // Function GPGameplay.GPCharacterBase.NotifyMicStateChange // (Final|Native|Public|BlueprintCallable) // @ game+0x35d2820
	void MulticastSetOutLineEffectData(int32_t OutLineBitArry, int32_t ProxSensorMark, int32_t PenetratingGunMark, int32_t BreakthroughDefenderMarkKey, int32_t OnlyMarkerMarkKey); // Function GPGameplay.GPCharacterBase.MulticastSetOutLineEffectData // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x35d2320
	void Multicast_StopCoverPointMontage(struct UAnimMontage* montageToStop); // Function GPGameplay.GPCharacterBase.Multicast_StopCoverPointMontage // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x35d2530
	void Multicast_PlayCoverPointMontage(struct UAnimMontage* MontageToPlay); // Function GPGameplay.GPCharacterBase.Multicast_PlayCoverPointMontage // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x35d24a0
	void ModifyAnimInstance(struct UClass* NewClass); // Function GPGameplay.GPCharacterBase.ModifyAnimInstance // (Native|Public) // @ game+0x35d2290
	bool IsUseLeftHandWeapon(); // Function GPGameplay.GPCharacterBase.IsUseLeftHandWeapon // (Native|Public) // @ game+0x35d2160
	bool IsRealStart(); // Function GPGameplay.GPCharacterBase.IsRealStart // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35d2130
	bool IsPlayingLeftArmAnim(char StopType); // Function GPGameplay.GPCharacterBase.IsPlayingLeftArmAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x35d20a0
	bool IsPlayerAI_SOL(); // Function GPGameplay.GPCharacterBase.IsPlayerAI_SOL // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35d2070
	bool IsPlayerAI(); // Function GPGameplay.GPCharacterBase.IsPlayerAI // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35d2040
	bool IsPlayer(); // Function GPGameplay.GPCharacterBase.IsPlayer // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35d2010
	bool IsPalsy(); // Function GPGameplay.GPCharacterBase.IsPalsy // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35d1fe0
	bool IsOffline(); // Function GPGameplay.GPCharacterBase.IsOffline // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35d1fb0
	bool isFemale(); // Function GPGameplay.GPCharacterBase.isFemale // (Native|Public|BlueprintCallable) // @ game+0x35d8670
	bool IsCanBeRescue(bool bCheckFSMState, bool bCheckDeathRescue, bool bCheckDeathWaitTime, bool bShowLog); // Function GPGameplay.GPCharacterBase.IsCanBeRescue // (Native|Public) // @ game+0x35d1e30
	bool IsBurden(); // Function GPGameplay.GPCharacterBase.IsBurden // (Native|Public|BlueprintCallable) // @ game+0x35d1e00
	bool IsAlive(); // Function GPGameplay.GPCharacterBase.IsAlive // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35d1dd0
	bool IsAILab(); // Function GPGameplay.GPCharacterBase.IsAILab // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35d1da0
	bool IsAI(); // Function GPGameplay.GPCharacterBase.IsAI // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35d1d60
	float InteractivePutWeapon(struct FString ContextString, enum class EInteractivePutWeaponType PutWeaponType, bool NeedInacvtiveAnim, float blendIn, float blendOut, bool bUseAnimTime, float InAnimTime); // Function GPGameplay.GPCharacterBase.InteractivePutWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0x35d1ab0
	float InteractiveGetWeapon(struct FString ContextString, enum class EInteractiveGetWeaponType GetWeaponType, float blendIn, float blendOut, bool bUseAnimTime, float InAnimTime); // Function GPGameplay.GPCharacterBase.InteractiveGetWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0x35d1860
	void IgnoreBoneHitResponceWhenDyingPhysics(bool bIgnore); // Function GPGameplay.GPCharacterBase.IgnoreBoneHitResponceWhenDyingPhysics // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x35d17d0
	bool HasSecondaryWeapon(bool bCheckSecondaryWeaponInHand); // Function GPGameplay.GPCharacterBase.HasSecondaryWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0x35d1740
	struct AWeaponBase* GetWeaponByServerWeaponIdentity(struct FWeaponIdentity& ServerWeaponIdentity); // Function GPGameplay.GPCharacterBase.GetWeaponByServerWeaponIdentity // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x35d1690
	struct AWeaponBase* GetWeaponByServerActorName(struct FName& ServerActorName); // Function GPGameplay.GPCharacterBase.GetWeaponByServerActorName // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x35d15e0
	struct AWeaponBase* GetWeaponByPosition(uint32_t EquipPosition); // Function GPGameplay.GPCharacterBase.GetWeaponByPosition // (Native|Public) // @ game+0x35d1540
	struct AWeaponBase* GetWeaponByGuid(uint64_t gid); // Function GPGameplay.GPCharacterBase.GetWeaponByGuid // (Native|Public) // @ game+0x35d14a0
	struct UGPTeamComponent* GetTeamComp(); // Function GPGameplay.GPCharacterBase.GetTeamComp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35d1450
	struct FCharacterSpeedFactor GetSpeedFactorBase(); // Function GPGameplay.GPCharacterBase.GetSpeedFactorBase // (Final|Native|Public) // @ game+0x35d1400
	struct FCharacterSpeedFactor GetSpeedFactor(); // Function GPGameplay.GPCharacterBase.GetSpeedFactor // (Final|Native|Public|BlueprintCallable) // @ game+0x35d13b0
	float GetSheildHealthMax(); // Function GPGameplay.GPCharacterBase.GetSheildHealthMax // (Final|Native|Public|Const) // @ game+0x35d1380
	float GetSheildHealth(); // Function GPGameplay.GPCharacterBase.GetSheildHealth // (Final|Native|Public|Const) // @ game+0x35d1350
	struct AWeaponBase* GetSecondaryWeapon(); // Function GPGameplay.GPCharacterBase.GetSecondaryWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0x35d1320
	int32_t GetRelevantPlayerIndex(); // Function GPGameplay.GPCharacterBase.GetRelevantPlayerIndex // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x35d12e0
	struct AWeaponBase* GetRealWeaponByIndex(int32_t WeaponIndex); // Function GPGameplay.GPCharacterBase.GetRealWeaponByIndex // (Native|Public|BlueprintCallable) // @ game+0x35d1240
	struct AWeaponBase* GetRealWeapon(); // Function GPGameplay.GPCharacterBase.GetRealWeapon // (Native|Public|BlueprintCallable) // @ game+0x35d1210
	struct AWeaponBase* GetMainWeapon(); // Function GPGameplay.GPCharacterBase.GetMainWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0x35d1150
	void GetInteractivePutWeaponReasonSet(); // Function GPGameplay.GPCharacterBase.GetInteractivePutWeaponReasonSet // (Final|Native|Public|BlueprintCallable) // @ game+0x35d0e40
	float GetHealthMax(); // Function GPGameplay.GPCharacterBase.GetHealthMax // (Final|Native|Public|Const) // @ game+0x35d0e10
	struct UGPHealthDataComponent* GetHealthComp(); // Function GPGameplay.GPCharacterBase.GetHealthComp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35d0df0
	float GetHealth(); // Function GPGameplay.GPCharacterBase.GetHealth // (Final|Native|Public|Const) // @ game+0x35d0dc0
	struct FVector GetFootLocation(); // Function GPGameplay.GPCharacterBase.GetFootLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x35d0d80
	struct AWeaponBase* GetFirstPersonWeapon(); // Function GPGameplay.GPCharacterBase.GetFirstPersonWeapon // (Native|Public|BlueprintCallable) // @ game+0x35d0d50
	bool GetEnableDeathBeRescue(); // Function GPGameplay.GPCharacterBase.GetEnableDeathBeRescue // (Native|Public) // @ game+0x35d0be0
	struct AWeaponBase* GetEmptyHandWeapon(); // Function GPGameplay.GPCharacterBase.GetEmptyHandWeapon // (Native|Public|BlueprintCallable) // @ game+0x35d0bb0
	struct AWeaponBase* GetCurrentLeftWeapon(); // Function GPGameplay.GPCharacterBase.GetCurrentLeftWeapon // (Native|Public|BlueprintCallable) // @ game+0x35d0b80
	float GetCapsuleRadius(); // Function GPGameplay.GPCharacterBase.GetCapsuleRadius // (Final|Native|Public|Const) // @ game+0x35d0a30
	float GetCapsuleHalfHeight(); // Function GPGameplay.GPCharacterBase.GetCapsuleHalfHeight // (Final|Native|Public|Const) // @ game+0x35d0a00
	struct AActor* GetBurdenActor(); // Function GPGameplay.GPCharacterBase.GetBurdenActor // (Native|Public) // @ game+0x35d09d0
	float GetBaseHealthMax(); // Function GPGameplay.GPCharacterBase.GetBaseHealthMax // (Final|Native|Public|Const) // @ game+0x35d09a0
	struct TArray<struct AWeaponBase*> GetAllRealWeapon(); // Function GPGameplay.GPCharacterBase.GetAllRealWeapon // (Native|Public|BlueprintCallable) // @ game+0x35d08c0
	void EndInteractive(); // Function GPGameplay.GPCharacterBase.EndInteractive // (Final|Native|Public|BlueprintCallable) // @ game+0x35d07e0
	void EnableDyingPhysicsAnimProfile(bool bEnable); // Function GPGameplay.GPCharacterBase.EnableDyingPhysicsAnimProfile // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x35d0750
	void EnableDyingPhysics(bool bEnable); // Function GPGameplay.GPCharacterBase.EnableDyingPhysics // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x35d06c0
	void DyingToBeDeadBox(); // Function GPGameplay.GPCharacterBase.DyingToBeDeadBox // (Native|Protected|BlueprintCallable) // @ game+0x35d06a0
	bool DoReborn(); // Function GPGameplay.GPCharacterBase.DoReborn // (Native|Protected|BlueprintCallable) // @ game+0x35d0670
	void DoKnockDown(struct FKillInfo KnockDownInfo); // Function GPGameplay.GPCharacterBase.DoKnockDown // (Native|Public|BlueprintCallable) // @ game+0x35d05c0
	bool DoDying(struct AController* KillerController, struct AController* EventInstigator, struct AActor* DamageCauser); // Function GPGameplay.GPCharacterBase.DoDying // (Native|Public|BlueprintCallable) // @ game+0x35d04b0
	void DeathCleanupTimer(); // Function GPGameplay.GPCharacterBase.DeathCleanupTimer // (Final|Native|Public) // @ game+0x35d0420
	void ClientShowCommonTipsStr(struct FText sMessage, float Time, bool bPositive, bool bShowInMobile, bool bShowInHD); // Function GPGameplay.GPCharacterBase.ClientShowCommonTipsStr // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x35d0220
	void ClientShowCommonTips(int32_t Type, float Time); // Function GPGameplay.GPCharacterBase.ClientShowCommonTips // (Net|Native|Event|Public|NetClient|BlueprintCallable) // @ game+0x35d0150
	void ClearSeamlessAnim(); // Function GPGameplay.GPCharacterBase.ClearSeamlessAnim // (Native|Public|BlueprintCallable) // @ game+0x35d0130
	void ClearOverrideSpeedAndPose(); // Function GPGameplay.GPCharacterBase.ClearOverrideSpeedAndPose // (Final|Native|Public|BlueprintCallable) // @ game+0x35d0110
	void ClearInteractivePutWeaponReasonSet(struct FString ContextString); // Function GPGameplay.GPCharacterBase.ClearInteractivePutWeaponReasonSet // (Final|Native|Public|BlueprintCallable) // @ game+0x35d0050
	void ClearGPCharacterHiddenInGame(); // Function GPGameplay.GPCharacterBase.ClearGPCharacterHiddenInGame // (Native|Public) // @ game+0x35d0030
	void ClearCharacterOutLineEffect(); // Function GPGameplay.GPCharacterBase.ClearCharacterOutLineEffect // (Final|Native|Public) // @ game+0x35d0010
	void CharacterPalsy(); // Function GPGameplay.GPCharacterBase.CharacterPalsy // (Final|Native|Public|BlueprintCallable) // @ game+0x35cfd40
	bool CanUseItem(); // Function GPGameplay.GPCharacterBase.CanUseItem // (Native|Public|BlueprintCallable) // @ game+0x35cfd10
	bool CanSwitchWeapon(/*struct TScriptInterface<IWeaponInterface>& WeaponInterface*/); // Function GPGameplay.GPCharacterBase.CanSwitchWeapon // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x35cfc60
	bool CanReload(); // Function GPGameplay.GPCharacterBase.CanReload // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35cfc30
	bool CanFire(bool ignoreOperating, bool bPrintLog, int32_t FireIndex); // Function GPGameplay.GPCharacterBase.CanFire // (Native|Public|BlueprintCallable) // @ game+0x35cfb10
	bool CanAimOn(); // Function GPGameplay.GPCharacterBase.CanAimOn // (Native|Public|BlueprintCallable) // @ game+0x35cfae0
	void CallAINextPressed(); // Function GPGameplay.GPCharacterBase.CallAINextPressed // (Native|Public) // @ game+0x35cfac0
	void BP_PrePlayDying(); // Function GPGameplay.GPCharacterBase.BP_PrePlayDying // (Native|Event|Protected|BlueprintEvent) // @ game+0x35cfa80
	bool BP_IsCharacterTeammate(struct APawn* CHARACTER); // Function GPGameplay.GPCharacterBase.BP_IsCharacterTeammate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35cf9f0
	void BlueprintStartUpdateOutline(int32_t Type); // Function GPGameplay.GPCharacterBase.BlueprintStartUpdateOutline // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void Blueprint_OnDamagedToOther(struct AActor* TargetActor, float DamageAmount, struct FHitResult& HitResult, struct FGameplayTagContainer& EffectTags, struct AActor* DamageCauser, struct APawn* SourcePawn); // Function GPGameplay.GPCharacterBase.Blueprint_OnDamagedToOther // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x7ed88c0
	void Blueprint_OnDamaged(struct AActor* TargetActor, float DamageAmount, struct FHitResult& HitResult, struct AActor* DamageCauser, struct APawn* SourcePawn); // Function GPGameplay.GPCharacterBase.Blueprint_OnDamaged // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x7ed88c0
	void BeginInteractive(); // Function GPGameplay.GPCharacterBase.BeginInteractive // (Final|Native|Public|BlueprintCallable) // @ game+0x35cfaa0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSafeHouseCharacterBase
// Size: 0xaa0 (Inherited: 0xa78)
class AGPSafeHouseCharacterBase : public ACharacterBase {
public:

	struct UGPSafeHouseCharacterMovementComponent* MovementComponent; // 0xa78(0x08)
	struct UGPSafeHouseBlackboardComponent* BlackBoard; // 0xa80(0x08)
	float CapsuleRadius; // 0xa88(0x04)
	float CapsuleHalfHeight; // 0xa8c(0x04)
	float BaseTurnRate; // 0xa90(0x04)
	float BaseLookUpRate; // 0xa94(0x04)
	char pad_A98[0x8]; // 0xa98(0x08)

	struct UGPSafeHouseCharacterMovementComponent* GetSafeHouseCharacterMovementComponent(); // Function GPGameplay.GPSafeHouseCharacterBase.GetSafeHouseCharacterMovementComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3656200
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.DFMFSMActionTemplate
// Size: 0x100 (Inherited: 0xf0)
class UDFMFSMActionTemplate : public UGPFSMAction {
public:

	float TestFloat; // 0xf0(0x04)
	int32_t TestInt; // 0xf4(0x04)
	bool TestBool; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.TestFSMAction
// Size: 0x100 (Inherited: 0xf0)
class UTestFSMAction : public UGPFSMAction {
public:

	float TestFloat; // 0xf0(0x04)
	int32_t TestInt; // 0xf4(0x04)
	bool TestBool; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSkeletalMeshComponentExtra
// Size: 0x1380 (Inherited: 0x1270)
class UGPSkeletalMeshComponentExtra : public UGPSkeletalMeshComponent {
public:

	char pad_1270[0x8]; // 0x1270(0x08)
	struct TArray<struct UMaterialInterface*> TemplateMaterials; // 0x1278(0x10)
	struct TArray<struct UMaterialInterface*> OriginMaterials; // 0x1288(0x10)
	char pad_1298[0x18]; // 0x1298(0x18)
	struct TMap<struct UMaterialInterface*, struct UGPMaterialProxy*> MaterialVariantProxys; // 0x12b0(0x50)
	struct TMap<int32_t, struct UGPMaterialProxy*> MaterialVarProxys; // 0x1300(0x50)
	bool bNeedInitMaterialProxy; // 0x1350(0x01)
	char pad_1351[0x7]; // 0x1351(0x07)
	/*struct TScriptInterface<IWeaponLogInterface>*/char WeaponLogInterface[0x10]; // 0x1358(0x10)
	char pad_1368[0x18]; // 0x1368(0x18)

	void SetTemplateMaterial(int32_t ElementIndex, struct UMaterialInterface* Material); // Function GPGameplay.GPSkeletalMeshComponentExtra.SetTemplateMaterial // (Native|Public) // @ game+0x3665c60
	void ResetTemplateMaterials(); // Function GPGameplay.GPSkeletalMeshComponentExtra.ResetTemplateMaterials // (Native|Public) // @ game+0x3664730
	struct UGPMaterialProxy* GetMaterialVariantProxy(int32_t MaterialIndex); // Function GPGameplay.GPSkeletalMeshComponentExtra.GetMaterialVariantProxy // (Native|Public) // @ game+0x36613d0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAbilityAnimInstance
// Size: 0x2a0 (Inherited: 0x290)
class UGPAbilityAnimInstance : public UGPAbilityBaseAnimInstance {
public:

	bool bIs1P; // 0x290(0x01)
	bool bIsMasterPose; // 0x291(0x01)
	char pad_292[0x6]; // 0x292(0x06)
	struct USkeletalMeshComponent* MeshToCopy; // 0x298(0x08)

	struct USkeletalMeshComponent* GetMeshToCopy(); // Function GPGameplay.GPAbilityAnimInstance.GetMeshToCopy // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x359a590
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAIAnimInstance_Locomotion_NoMP
// Size: 0xeb0 (Inherited: 0xeb0)
class UGPAIAnimInstance_Locomotion_NoMP : public UGPAIAnimInstance_Locomotion {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPEnemyPlayerMarkerItem
// Size: 0x550 (Inherited: 0x550)
class UGPEnemyPlayerMarkerItem : public UGPCharacterMarkerItemBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPRevealMarkerItem
// Size: 0x580 (Inherited: 0x550)
class UGPRevealMarkerItem : public UGPCharacterMarkerItemBase {
public:

	float FireRevealTime; // 0x550(0x04)
	float MarkingRevealTime; // 0x554(0x04)
	float FindEnemyPassiveDistThreshold; // 0x558(0x04)
	char pad_55C[0x24]; // 0x55c(0x24)

	void OnShowHealthBarTimeEnd(); // Function GPGameplay.GPRevealMarkerItem.OnShowHealthBarTimeEnd // (Final|Native|Public) // @ game+0x36564a0
	void OnCharacterTakeHit(struct AActor* DamageMaker, struct AActor* DamageTaker); // Function GPGameplay.GPRevealMarkerItem.OnCharacterTakeHit // (Final|Native|Public) // @ game+0x36563e0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPEngineerSonicTrapTriggerMarkItem
// Size: 0x7d0 (Inherited: 0x5c0)
class UGPEngineerSonicTrapTriggerMarkItem : public UGPTacticalEquipmentMarkerItem {
public:

	/*struct TMap<enum class EMarkingItemType, struct TSoftObjectPtr<UGPAudioEventAsset>>*/char ItemMarkerAudioMap[0x50]; // 0x5c0(0x50)
	/*struct TMap<enum class EMarkingItemType, struct TSoftObjectPtr<UGPAudioEventAsset>>*/char FriendItemMarkerAudioMap[0x50]; // 0x610(0x50)
	struct FString DeadBodyName; // 0x660(0x10)
	float IconActorOffset; // 0x670(0x04)
	char pad_674[0x15c]; // 0x674(0x15c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPGunnerRobotMarkerItem
// Size: 0x700 (Inherited: 0x5c0)
class UGPGunnerRobotMarkerItem : public UGPTacticalEquipmentMarkerItem {
public:

	char pad_5C0[0x70]; // 0x5c0(0x70)
	struct FName SocketName; // 0x630(0x08)
	struct FVector SocketWorldLocationOffset; // 0x638(0x0c)
	char pad_644[0x4]; // 0x644(0x04)
	struct TMap<struct FString, struct FEnemyEffectTypeConfig> EnemyEffectTypeConfigMap; // 0x648(0x50)
	struct TMap<enum class EDFMGamePlayMode, struct FEnemyEffectMarkerUpdateCampConfig> EnemyEffectMarkerRuleConfigMap; // 0x698(0x50)
	bool UseTrace; // 0x6e8(0x01)
	char pad_6E9[0x3]; // 0x6e9(0x03)
	float TraceOffset; // 0x6ec(0x04)
	bool VisibleCondition; // 0x6f0(0x01)
	char pad_6F1[0xf]; // 0x6f1(0x0f)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPlayerItemMarkerItem
// Size: 0x6e0 (Inherited: 0x570)
class UGPPlayerItemMarkerItem : public UGPPlayerMarkerItemBase {
public:

	char pad_570[0x170]; // 0x570(0x170)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPPlayerLocationMarkerItem
// Size: 0x5f0 (Inherited: 0x570)
class UGPPlayerLocationMarkerItem : public UGPPlayerMarkerItemBase {
public:

	char pad_570[0x80]; // 0x570(0x80)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPAnimProxyComponent
// Size: 0x1ab0 (Inherited: 0x480)
class UGPAnimProxyComponent : public UGPAnimProxyBaseComponent {
public:

	char pad_480[0x20]; // 0x480(0x20)
	struct UAnimMontage* CurrentAnimMontage; // 0x4a0(0x08)
	struct UAnimSequenceBase* PlayingAnimReq; // 0x4a8(0x08)
	char pad_4B0[0x24]; // 0x4b0(0x24)
	struct FVector SpineLocationOffset; // 0x4d4(0x0c)
	struct FVector VehicleProbeAimSpineLocOffset; // 0x4e0(0x0c)
	struct FVector FemaleFootZoffset; // 0x4ec(0x0c)
	bool HideOriginalMeshFPP; // 0x4f8(0x01)
	bool HideOriginalMeshTPP; // 0x4f9(0x01)
	char pad_4FA[0x1e]; // 0x4fa(0x1e)
	struct UGPCameraModeComponent* CameraModeComponent; // 0x518(0x08)
	char pad_520[0x8]; // 0x520(0x08)
	struct TArray<struct UPrimitiveComponent*> HeadRelatedAttachmentList; // 0x528(0x10)
	char pad_538[0x8]; // 0x538(0x08)
	struct TArray<struct FName> FPPHiddenBoneNameList; // 0x540(0x10)
	bool bHiddenFPPBones; // 0x550(0x01)
	char pad_551[0x3]; // 0x551(0x03)
	float PronePlaneRotInterpSpeed; // 0x554(0x04)
	float MinimumPlayRate; // 0x558(0x04)
	struct FAnimSpeedInfo CrouchSprintAnimSpeedInfo; // 0x55c(0x08)
	struct FAnimSpeedInfo CrouchZoomAnimSpeedInfo; // 0x564(0x08)
	struct FAnimSpeedInfo CrouchAnimSpeedInfo; // 0x56c(0x08)
	struct FAnimSpeedInfo SprintAnimSpeedInfo; // 0x574(0x08)
	struct FAnimSpeedInfo SuperSprintAnimSpeedInfo; // 0x57c(0x08)
	struct FAnimSpeedInfo ZoomAnimSpeedInfo; // 0x584(0x08)
	struct FAnimSpeedInfo AnimSpeedInfo; // 0x58c(0x08)
	struct FAnimSpeedInfo ProneSpeedInfo; // 0x594(0x08)
	struct FAnimSpeedInfo SingleFractureSpeedInfo; // 0x59c(0x08)
	struct FAnimSpeedInfo DoubleFractureSpeedInfo; // 0x5a4(0x08)
	struct FAnimSpeedInfo SilentWalkSpeedInfo; // 0x5ac(0x08)
	struct FAnimSpeedInfo CrouchSilentWalkSpeedInfo; // 0x5b4(0x08)
	struct FAnimSpeedInfo StandHalfSquatWalkSpeedInfo; // 0x5bc(0x08)
	struct FAnimSpeedInfo CrouchHalfSquatWalkSpeedInfo; // 0x5c4(0x08)
	struct FAnimSpeedInfo LeisureWalkSpeedInfo; // 0x5cc(0x08)
	struct FAnimSpeedInfo AlertWalkSpeedInfo; // 0x5d4(0x08)
	struct FAnimSpeedInfo AlertCrouchWalkSpeedInfo; // 0x5dc(0x08)
	struct FAnimSpeedInfo AlertTrottSpeedInfo; // 0x5e4(0x08)
	char pad_5EC[0x4]; // 0x5ec(0x04)
	struct FLocomotionMovePara SOLLocomotionMoveParaConfig; // 0x5f0(0x20)
	struct FLocomotionMovePara BTLocomotionMoveParaConfig; // 0x610(0x20)
	char pad_630[0x4c]; // 0x630(0x4c)
	float FlyUpToFlyIdleBlendTime1P; // 0x67c(0x04)
	float FlyUpToFlyIdleBlendTime3P; // 0x680(0x04)
	bool bIsInFlyStartFromGround; // 0x684(0x01)
	bool bIsInHeavyLandFromFly; // 0x685(0x01)
	char pad_686[0x2]; // 0x686(0x02)
	struct FRotator CameraRotChange; // 0x688(0x0c)
	float FPPCurrentSpineYOffset; // 0x694(0x04)
	char pad_698[0x1c]; // 0x698(0x1c)
	struct FVector ImpendingDeathSpineHeight; // 0x6b4(0x0c)
	struct FVector StandEyeHeight; // 0x6c0(0x0c)
	struct FVector CrouchEyeHeight; // 0x6cc(0x0c)
	struct FVector CrouchMoveEyeHeight; // 0x6d8(0x0c)
	struct FVector ProneEyeHeight; // 0x6e4(0x0c)
	struct FVector SpineAndEyeOffset; // 0x6f0(0x0c)
	float ToStandSpineSpeed; // 0x6fc(0x04)
	float ToCrouchSpineSpeed; // 0x700(0x04)
	float ToProneSpineSpeed; // 0x704(0x04)
	bool EnablePrelandPose; // 0x708(0x01)
	char pad_709[0x3]; // 0x709(0x03)
	float PreLandDetectRadius; // 0x70c(0x04)
	float PreLandDetectDistance; // 0x710(0x04)
	char pad_714[0x4]; // 0x714(0x04)
	float EnablePreLandVelocityZThreshold; // 0x718(0x04)
	float JumpLandAnimPlayRateWhenBecomeIdle; // 0x71c(0x04)
	float JumpLandAnimPlayRateNormal; // 0x720(0x04)
	char pad_724[0x4]; // 0x724(0x04)
	struct UCurveVector* PitchSpineOffsetCurve; // 0x728(0x08)
	char pad_730[0x14]; // 0x730(0x14)
	float HorMovingDirection; // 0x744(0x04)
	char pad_748[0x90]; // 0x748(0x90)
	struct AGPCharacter* GPCharacter; // 0x7d8(0x08)
	struct UGPSprintComponent* SprintComponent; // 0x7e0(0x08)
	struct UGPFightStateComponent* FightStateComponent; // 0x7e8(0x08)
	struct UGPCharacterMovementComponent* MovementComponent; // 0x7f0(0x08)
	struct UGPAnimDataComponent* AnimDataComponent; // 0x7f8(0x08)
	struct FLandProxy LandProxy; // 0x800(0xa0)
	float NormalizedSpeedWithLerpSpeed; // 0x8a0(0x04)
	struct FRotator LastControlRotation; // 0x8a4(0x0c)
	struct FRotator LastDeltaRotation; // 0x8b0(0x0c)
	char pad_8BC[0xc]; // 0x8bc(0x0c)
	struct TArray<float> InputValueArray; // 0x8c8(0x10)
	struct FVector2D MovementVectorInButtonArea; // 0x8d8(0x08)
	float MouseSwingSpeedThresRunToWalk; // 0x8e0(0x04)
	float MouseSwingSpeedThresWalkToRun; // 0x8e4(0x04)
	float MouseSwingRunToWalkColdTimeMax; // 0x8e8(0x04)
	char pad_8EC[0x14]; // 0x8ec(0x14)
	struct UAimOffsetBlendSpace* DefaultAimOffset; // 0x900(0x08)
	enum class EFPPCameraRotationCalcType FPPCameraRotationCalcType; // 0x908(0x01)
	bool CameraAnimationUseAddMethod; // 0x909(0x01)
	char pad_90A[0x2]; // 0x90a(0x02)
	float AnimFPPCameraAlpha; // 0x90c(0x04)
	struct UCurveFloat* ADSIdleStableFOVCurve; // 0x910(0x08)
	struct FVector ScopeOffsetFromWeaponRoot; // 0x918(0x0c)
	float AnimStandByColdTime; // 0x924(0x04)
	struct AWeaponBase* LastWeaponInvForZoom; // 0x928(0x08)
	char pad_930[0x40]; // 0x930(0x40)
	struct FGPGunSwingProxy GunSwingProxy; // 0x970(0xb10)
	struct FGPGunAOProxy GunAOProxy; // 0x1480(0x10)
	float FPPGunSwingFullADSPercent; // 0x1490(0x04)
	float FPPGunSwingInMovingFullADSPercent; // 0x1494(0x04)
	float FPPGunAOFullADSPercent; // 0x1498(0x04)
	char pad_149C[0x4]; // 0x149c(0x04)
	struct UCurveFloat* RTZoomRateMapCurve; // 0x14a0(0x08)
	struct UCurveFloat* RTZoomRateMapCurve_GunSway; // 0x14a8(0x08)
	struct UCurveFloat* RTZoomRateMapCurve_Jump; // 0x14b0(0x08)
	char pad_14B8[0x18]; // 0x14b8(0x18)
	struct FGPSpringBase CrouchLocationSpring; // 0x14d0(0x20)
	char pad_14F0[0x168]; // 0x14f0(0x168)
	struct FGPSpringBase JumpZOffsetSpring; // 0x1658(0x20)
	char pad_1678[0x13c]; // 0x1678(0x13c)
	float StopLength; // 0x17b4(0x04)
	struct FName ReloadClipAttachBoneName; // 0x17b8(0x08)
	struct UModularWeaponDataComponentAppearance* ModularWeaponDataComponent; // 0x17c0(0x08)
	char pad_17C8[0xa8]; // 0x17c8(0xa8)
	float DeathBlendLength; // 0x1870(0x04)
	char pad_1874[0x4]; // 0x1874(0x04)
	struct UCurveFloat* DeathWeightCurve; // 0x1878(0x08)
	float Anim2PhyVelocityScale; // 0x1880(0x04)
	float HitAddImpulseDelay; // 0x1884(0x04)
	float HitBreakTime; // 0x1888(0x04)
	float HitLength; // 0x188c(0x04)
	float HitStrength; // 0x1890(0x04)
	float DoubleHitStrengthScale; // 0x1894(0x04)
	float Spine1HitBlendScale; // 0x1898(0x04)
	float ShoulderHitBlendScale; // 0x189c(0x04)
	float HeadHitHitBlendScale; // 0x18a0(0x04)
	float ArmHitHitBlendScale; // 0x18a4(0x04)
	float HandHitBlendScale; // 0x18a8(0x04)
	float UpLegHitBlendScale; // 0x18ac(0x04)
	float LegHitBlendScale; // 0x18b0(0x04)
	char pad_18B4[0x4]; // 0x18b4(0x04)
	struct UCurveFloat* HitWeightCurve; // 0x18b8(0x08)
	struct UCurveFloat* LegHitWeightCurve; // 0x18c0(0x08)
	float CarryBodyPhysixArmWeight; // 0x18c8(0x04)
	float InVehicleCharacterPhysixWeight; // 0x18cc(0x04)
	char pad_18D0[0x20]; // 0x18d0(0x20)
	struct UAnimSequence* AssassinateSequence; // 0x18f0(0x08)
	char pad_18F8[0x18]; // 0x18f8(0x18)
	struct UAnimSequence* BeAssassinateSequence; // 0x1910(0x08)
	char pad_1918[0x4]; // 0x1918(0x04)
	float DeathPhysixLength; // 0x191c(0x04)
	char pad_1920[0x10]; // 0x1920(0x10)
	struct FSequenceAnimList NetSequenceAnimList; // 0x1930(0x18)
	char pad_1948[0x18]; // 0x1948(0x18)
	struct TMap<struct FString, struct UAnimMontage*> SequenceAnimMaps; // 0x1960(0x50)
	char pad_19B0[0x20]; // 0x19b0(0x20)
	float TPPLeanScale; // 0x19d0(0x04)
	float T3PLeanScale; // 0x19d4(0x04)
	float LeanLagSpeed; // 0x19d8(0x04)
	char pad_19DC[0x18]; // 0x19dc(0x18)
	int16_t AllowTrigger; // 0x19f4(0x02)
	int16_t CurrentTrigger; // 0x19f6(0x02)
	struct TArray<bool> CurFrameState; // 0x19f8(0x10)
	struct TArray<bool> LastFrameState; // 0x1a08(0x10)
	float CdTime; // 0x1a18(0x04)
	float CanTriggerTime; // 0x1a1c(0x04)
	bool IsInTriggerTime; // 0x1a20(0x01)
	char pad_1A21[0x3]; // 0x1a21(0x03)
	float TriggerChance; // 0x1a24(0x04)
	bool TriggerSmallAction; // 0x1a28(0x01)
	char pad_1A29[0x3]; // 0x1a29(0x03)
	struct FRuntimeSmallActionData RuntimeSmallActionData; // 0x1a2c(0x14)
	char pad_1A40[0x8]; // 0x1a40(0x08)
	struct UAnimMontage* FppInactiveMontage; // 0x1a48(0x08)
	struct UAnimMontage* TppInactiveMontage; // 0x1a50(0x08)
	char pad_1A58[0x58]; // 0x1a58(0x58)

	void UpdateInVehiclePhysics(float DeltaTime); // Function GPGameplay.GPAnimProxyComponent.UpdateInVehiclePhysics // (Final|Native|Public|BlueprintCallable) // @ game+0x35b2340
	void StopSequenceAnimList(); // Function GPGameplay.GPAnimProxyComponent.StopSequenceAnimList // (Final|Native|Public|BlueprintCallable) // @ game+0x35b2320
	void SetSimulateInVehiclePhysics(bool bEnable); // Function GPGameplay.GPAnimProxyComponent.SetSimulateInVehiclePhysics // (Final|Native|Public|BlueprintCallable) // @ game+0x35b2060
	void SetIsInHeavyLandFromFly(bool IsIn); // Function GPGameplay.GPAnimProxyComponent.SetIsInHeavyLandFromFly // (Final|Native|Public|BlueprintCallable) // @ game+0x35b1fe0
	void SetIsInFlyStartFromGround(bool IsIn); // Function GPGameplay.GPAnimProxyComponent.SetIsInFlyStartFromGround // (Final|Native|Public|BlueprintCallable) // @ game+0x35b1f60
	void SetHighLOD(bool HightLOD); // Function GPGameplay.GPAnimProxyComponent.SetHighLOD // (Final|Native|Public|BlueprintCallable) // @ game+0x35b1ee0
	void ProcessScopeChanged(); // Function GPGameplay.GPAnimProxyComponent.ProcessScopeChanged // (Final|Native|Public) // @ game+0x35b1ec0
	void PrePlaySequenceAnimList(struct TArray<struct FSequenceAnim>& AnimList); // Function GPGameplay.GPAnimProxyComponent.PrePlaySequenceAnimList // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x35b1da0
	void PlaySequenceAnimList(struct TArray<struct FSequenceAnim>& AnimList); // Function GPGameplay.GPAnimProxyComponent.PlaySequenceAnimList // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x35b1c80
	void OnRepSequenceAnimListRep(); // Function GPGameplay.GPAnimProxyComponent.OnRepSequenceAnimListRep // (Final|Native|Public) // @ game+0x35b1c40
	void OnRep_PlayingAnimReq(); // Function GPGameplay.GPAnimProxyComponent.OnRep_PlayingAnimReq // (Final|Native|Public) // @ game+0x35b1c60
	void OnBowChargeStateChange(bool bIsCharging); // Function GPGameplay.GPAnimProxyComponent.OnBowChargeStateChange // (Final|Native|Public) // @ game+0x35b1bb0
	void OnAnimLoadCompleted(struct FSoftObjectPath& AssetRef); // Function GPGameplay.GPAnimProxyComponent.OnAnimLoadCompleted // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x35b1ad0
	void NotifySprintStop(bool SprintStop); // Function GPGameplay.GPAnimProxyComponent.NotifySprintStop // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x35b1a40
	bool GetHighLOD(); // Function GPGameplay.GPAnimProxyComponent.GetHighLOD // (Final|Native|Public|BlueprintCallable) // @ game+0x35b1960
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPBlackboardComponent
// Size: 0xf18 (Inherited: 0x120)
class UGPBlackboardComponent : public UGPNetworkComponent {
public:

	struct AGPPlayerController* GPPlayer; // 0x120(0x08)
	struct UGPInputManager* GPPlayerInputManager; // 0x128(0x08)
	struct AGPCharacter* GPCharacter; // 0x130(0x08)
	struct UGPFSMStateMachineComponent* FSMComponent; // 0x138(0x08)
	struct UGPSkeletalMeshComponent* TPPMesh; // 0x140(0x08)
	struct UGPSkeletalMeshComponent* FPPMesh; // 0x148(0x08)
	struct UGPSkeletalMeshComponent* TPPMeshHair; // 0x150(0x08)
	struct UGPSkeletalMeshComponent* TPPMeshHead; // 0x158(0x08)
	struct UGPSkeletalMeshComponent* TPPMeshLower; // 0x160(0x08)
	struct UGPSkeletalMeshComponent* FPPMeshLowBody; // 0x168(0x08)
	struct UGPCharacterMovementComponent* CharacterMovement; // 0x170(0x08)
	struct UGPAnimProxyComponent* AnimProxy; // 0x178(0x08)
	struct UGPCameraModeComponent* CameraMode; // 0x180(0x08)
	struct UGPHealthDataComponent* HealthData; // 0x188(0x08)
	struct UGPHitEffectComponent* HitEffect; // 0x190(0x08)
	struct UGPSpeedScaleDataComponent* SpeedScaleData; // 0x198(0x08)
	struct UGPStaminaDataComponent* StaminaData; // 0x1a0(0x08)
	struct UGPVaultAndClimbComponent* VaultAndClimb; // 0x1a8(0x08)
	struct UGPParachuteComponent* ParachuteComponent; // 0x1b0(0x08)
	struct UGPSlidingTackleComponent* SlidingTackleComponent; // 0x1b8(0x08)
	struct UGPPushedComponent* PushedComponent; // 0x1c0(0x08)
	struct UGPBlackboardComponent* BlackBoard; // 0x1c8(0x08)
	struct UGPActionSequenceComponent* ActionSequence; // 0x1d0(0x08)
	struct UGPSprintComponent* SprintComponent; // 0x1d8(0x08)
	struct AGPPlayerCameraManager* PlayerCameraManager; // 0x1e0(0x08)
	struct UGPAdvancedTickingComponent* AdvancedTicking; // 0x1e8(0x08)
	struct UGPASC* GPASC; // 0x1f0(0x08)
	struct UGPAttributeCenterComponent* AttributesCenter; // 0x1f8(0x08)
	struct UGPVehicleDataComponent* VehicleDataComponent; // 0x200(0x08)
	struct UGPAnimDataComponent* AnimDataComponent; // 0x208(0x08)
	struct AGPPlayerState* GPPlayerState; // 0x210(0x08)
	struct AGPGameState* GPGameState; // 0x218(0x08)
	struct UGPSkillComponent* GPSkill; // 0x220(0x08)
	struct UWeaponManagerComponent* WeaponManager; // 0x228(0x08)
	struct UWeaponReplicateComponent* WeaponReplicateComponent; // 0x230(0x08)
	struct UGameAkComponent* GameAkComponent; // 0x238(0x08)
	struct UGPCharacterVoiceComponent* GPCharacterVoice; // 0x240(0x08)
	struct UGPSoundVisualizationComponent* SoundVisualizationComponent; // 0x248(0x08)
	struct UGPOutLineEffectComponent* OutLineEffectComponent; // 0x250(0x08)
	struct UGPSlotChargingComponent* SlotChargingComponent; // 0x258(0x08)
	struct UGPTransitionMoveComponent* TransitionMoveComponent; // 0x260(0x08)
	struct UGPRushMoveComponent* RushMoveComponent; // 0x268(0x08)
	struct UGPKnockbackMoveComponent* KnockbackMoveComponent; // 0x270(0x08)
	struct UGPCommercializationComponent* GPCommercialization; // 0x278(0x08)
	struct UGPPerkComponent* GPPerkComponent; // 0x280(0x08)
	struct UGPAbilitySharedEffectComponent* AbilitySharedEffectComponent; // 0x288(0x08)
	enum class ECharacterBaseState CharacterBaseState; // 0x290(0x01)
	bool IsAI; // 0x291(0x01)
	char pad_292[0x2]; // 0x292(0x02)
	float currentServertime; // 0x294(0x04)
	char pad_298[0xa]; // 0x298(0x0a)
	bool bEnableSuperSprint; // 0x2a2(0x01)
	enum class ECharacterLogicPoseType CurBasePose; // 0x2a3(0x01)
	enum class ECharacterLogicPoseType PreBasePose; // 0x2a4(0x01)
	enum class ECharacterLogicPoseType LastCharacterPoseAfterTrans; // 0x2a5(0x01)
	bool bIsCrouchAsNoramlState; // 0x2a6(0x01)
	bool bCanCarryBody; // 0x2a7(0x01)
	bool bIsUsingItems; // 0x2a8(0x01)
	bool bOverrideBasePos; // 0x2a9(0x01)
	bool bOverrideBasePosTPP; // 0x2aa(0x01)
	char pad_2AB[0x5]; // 0x2ab(0x05)
	uint64_t OverrideBasePosItemId; // 0x2b0(0x08)
	bool bIsUsingInteractiveBasePose; // 0x2b8(0x01)
	char pad_2B9[0x3]; // 0x2b9(0x03)
	float BeginKnockbackTime; // 0x2bc(0x04)
	float BeginCDBuffTime; // 0x2c0(0x04)
	float BeginRushTime; // 0x2c4(0x04)
	float AbilityWeaponSwitchTimeUntilFire; // 0x2c8(0x04)
	float CanUseItemCooldownEndTimestamp; // 0x2cc(0x04)
	bool IsFighting; // 0x2d0(0x01)
	char pad_2D1[0x3]; // 0x2d1(0x03)
	float BeginFightingTime; // 0x2d4(0x04)
	float FightingTimeConfig; // 0x2d8(0x04)
	bool bSeamLessShowActionFinish; // 0x2dc(0x01)
	char pad_2DD[0x3]; // 0x2dd(0x03)
	float CameraLerpTime; // 0x2e0(0x04)
	char pad_2E4[0x4]; // 0x2e4(0x04)
	struct FTimerHandle FightingHandler; // 0x2e8(0x08)
	enum class EOperateMovementType usingItemMovementType; // 0x2f0(0x01)
	bool bIsOperating; // 0x2f1(0x01)
	bool bIsRescuing; // 0x2f2(0x01)
	bool bIsBeingRescuing; // 0x2f3(0x01)
	bool bIsCarrying; // 0x2f4(0x01)
	bool bShouldIsCarryIdle; // 0x2f5(0x01)
	bool bIsCarryLoop; // 0x2f6(0x01)
	bool bIsCarryingBox; // 0x2f7(0x01)
	bool bIsMonitorWatching; // 0x2f8(0x01)
	bool bIsKnockback; // 0x2f9(0x01)
	char pad_2FA[0x2]; // 0x2fa(0x02)
	float SimpleOperateTimeout; // 0x2fc(0x04)
	float SimpleOperateWithUITimeout; // 0x300(0x04)
	float PreciseOperateTimeout; // 0x304(0x04)
	float PreciseOperateWithUITimeout; // 0x308(0x04)
	float DelayOperateTimeout; // 0x30c(0x04)
	float DelayOperateWithUITimeout; // 0x310(0x04)
	int32_t InDustbinBoxID; // 0x314(0x04)
	bool bCanEnterFreeLookaroundMode; // 0x318(0x01)
	bool bUndderFPP; // 0x319(0x01)
	bool bIsInADSState; // 0x31a(0x01)
	bool bIsInBasePoseState; // 0x31b(0x01)
	bool bIsInStandingState; // 0x31c(0x01)
	bool bIsRelaxIdleState; // 0x31d(0x01)
	bool bIsBeingCarryBySomeOne; // 0x31e(0x01)
	bool bIsDyingFocusEnemyCameraFPP; // 0x31f(0x01)
	bool bIsInCutScene; // 0x320(0x01)
	bool bIsKnockedDown; // 0x321(0x01)
	bool bIsFloating; // 0x322(0x01)
	bool bIsExplodeDown; // 0x323(0x01)
	bool bIsWeaponReload; // 0x324(0x01)
	bool bIsUsingDoubleHandsSkill; // 0x325(0x01)
	bool bIsUsingLeftHandSkill; // 0x326(0x01)
	bool bIsUsingRightHandSkill; // 0x327(0x01)
	bool bIsUsingLegsHandSkill; // 0x328(0x01)
	bool bIsUsingSpecialSkill; // 0x329(0x01)
	bool bIsUsingSkill; // 0x32a(0x01)
	bool bIsSuppressed; // 0x32b(0x01)
	bool bIsCheckingSkill; // 0x32c(0x01)
	bool bIsFallHigh; // 0x32d(0x01)
	char pad_32E[0x1]; // 0x32e(0x01)
	bool bLastSprintInput; // 0x32f(0x01)
	bool bLastSuperSprintInput; // 0x330(0x01)
	char pad_331[0x3]; // 0x331(0x03)
	float StartProneTime; // 0x334(0x04)
	bool bIsSuperSprinting; // 0x338(0x01)
	bool bUseCustomFallHeight; // 0x339(0x01)
	enum class ECharacterSkillType UsingSkillType; // 0x33a(0x01)
	enum class ECharacterLiveStatus CharacterLiveStatus; // 0x33b(0x01)
	char pad_33C[0x64]; // 0x33c(0x64)
	int32_t CurrentSkillID; // 0x3a0(0x04)
	int32_t CurrentDoubleHandsUsingSkillID; // 0x3a4(0x04)
	int32_t CurrentLeftHandUsingSkillID; // 0x3a8(0x04)
	int32_t CurrentRightHandUsingSkillID; // 0x3ac(0x04)
	int32_t CurrentLegsUsingSkillID; // 0x3b0(0x04)
	int32_t CurrentSpecialUsingSkillID; // 0x3b4(0x04)
	float AbilityRescueAddHelth; // 0x3b8(0x04)
	bool bIsAssassinate; // 0x3bc(0x01)
	bool bIsBeingAssassinate; // 0x3bd(0x01)
	char pad_3BE[0x1]; // 0x3be(0x01)
	bool bIsRaiseWatch; // 0x3bf(0x01)
	bool bIsBeingCrocodileBite; // 0x3c0(0x01)
	bool bIsPlayingCrocodileBite; // 0x3c1(0x01)
	char pad_3C2[0x2]; // 0x3c2(0x02)
	float LastPlayingCrocodileBiteTime; // 0x3c4(0x04)
	bool bIsAirDropVehicle; // 0x3c8(0x01)
	char pad_3C9[0x3]; // 0x3c9(0x03)
	struct FVector ClientAirDropSelectPos; // 0x3cc(0x0c)
	bool bClientAirDropSelectPosValid; // 0x3d8(0x01)
	char pad_3D9[0x7]; // 0x3d9(0x07)
	int64_t AirDropVehicleID; // 0x3e0(0x08)
	int32_t CurrentRankSkillID; // 0x3e8(0x04)
	bool bRankSkillOperateIsValidPos; // 0x3ec(0x01)
	char pad_3ED[0x3]; // 0x3ed(0x03)
	struct FTransform RankSkillOperateSelectPos; // 0x3f0(0x30)
	struct TArray<uint64_t> CDAwardsApplyUinList; // 0x420(0x10)
	bool bIsOnZipline; // 0x430(0x01)
	bool bIsUseMachineGun; // 0x431(0x01)
	bool bUseMachineGunMoveTurnNew; // 0x432(0x01)
	bool bMachineGunFollowParentYaw; // 0x433(0x01)
	bool bIsOnFlyBase; // 0x434(0x01)
	char pad_435[0x3]; // 0x435(0x03)
	int32_t RoleLoadType; // 0x438(0x04)
	float fModifyRateAbilitAssault; // 0x43c(0x04)
	float fModifyRateDamage; // 0x440(0x04)
	float fModifyRatePointDamage; // 0x444(0x04)
	float fModifyRateExplodeDamage; // 0x448(0x04)
	float fModifyRateRadialDamage; // 0x44c(0x04)
	float fModifyRatePhysicsDamage; // 0x450(0x04)
	bool bNoPitchMode; // 0x454(0x01)
	bool bSupportWeaponMarkerVisible; // 0x455(0x01)
	char pad_456[0x2]; // 0x456(0x02)
	struct AWeaponBase* CurrentWeapon; // 0x458(0x08)
	char pad_460[0x10]; // 0x460(0x10)
	/*struct TScriptInterface<IGPWeaponProxyInterface>*/char WeaponProxy[0x10]; // 0x470(0x10)
	/*struct TScriptInterface<IWeaponDataComponentAnimInterface>*/char WeaponAnimData[0x10]; // 0x480(0x10)
	char pad_490[0x22]; // 0x490(0x22)
	bool bIsInspecting; // 0x4b2(0x01)
	bool bIsHighValueItemInspecting; // 0x4b3(0x01)
	bool bIsWeaponBipodDeploy; // 0x4b4(0x01)
	char pad_4B5[0x3]; // 0x4b5(0x03)
	float BipUpTime; // 0x4b8(0x04)
	bool bAutoExitBip; // 0x4bc(0x01)
	bool bIsZooming; // 0x4bd(0x01)
	bool bIsFiring; // 0x4be(0x01)
	bool bIsLeftWeaponFiring; // 0x4bf(0x01)
	bool bIsSwitchingWeapon; // 0x4c0(0x01)
	bool bIsPrefiring; // 0x4c1(0x01)
	char pad_4C2[0x2]; // 0x4c2(0x02)
	float HoriVelocity; // 0x4c4(0x04)
	bool bIsInLegFracture; // 0x4c8(0x01)
	bool bIsInDoubleLegFracture; // 0x4c9(0x01)
	bool bIsInArmFracture; // 0x4ca(0x01)
	bool bIsClimbingLadder; // 0x4cb(0x01)
	bool bIsUsingTelescope; // 0x4cc(0x01)
	bool bWantToUseTelescope; // 0x4cd(0x01)
	bool bPressFireButton; // 0x4ce(0x01)
	bool bPressLeftFireButton; // 0x4cf(0x01)
	float LastFireTime; // 0x4d0(0x04)
	float LastAirHitTime; // 0x4d4(0x04)
	float LastEnemyAimTime; // 0x4d8(0x04)
	char pad_4DC[0x4]; // 0x4dc(0x04)
	struct AGPCharacterBase* ScoreReturnTarget; // 0x4e0(0x08)
	enum class EPlayerScoreReturnType LastScoreReturnType; // 0x4e8(0x01)
	char pad_4E9[0x3]; // 0x4e9(0x03)
	struct FName ScoreReturnExtraParam; // 0x4ec(0x08)
	float LastUpdateScoreReturnTargetTime; // 0x4f4(0x04)
	int32_t ScoreReturnToInvestor; // 0x4f8(0x04)
	enum class EPlayerLeanType CurLeanType; // 0x4fc(0x01)
	char pad_4FD[0xf]; // 0x4fd(0x0f)
	float CurrentTelescopeFOV; // 0x50c(0x04)
	bool bIsLayingOnTheGround; // 0x510(0x01)
	char pad_511[0x8]; // 0x511(0x08)
	bool bAutonomousOrServerIsMoving; // 0x519(0x01)
	bool bIsStandRun; // 0x51a(0x01)
	bool bSkillForbitLeftHanldIK; // 0x51b(0x01)
	bool bSkillForbitWeaponReciol; // 0x51c(0x01)
	enum class ESkillUIState SkillUIState; // 0x51d(0x01)
	enum class ESkillUIState SkillUIStateCustom1; // 0x51e(0x01)
	enum class ESkillUIState SkillUIStateCustom2; // 0x51f(0x01)
	enum class ESkillUIState SkillUIStateCustom3; // 0x520(0x01)
	enum class ESkillUIState SkillUIStateSelf; // 0x521(0x01)
	enum class EGPWeaponStateType CurrentWeaponState; // 0x522(0x01)
	char pad_523[0x5]; // 0x523(0x05)
	struct APawn* CurrentDrivingCar; // 0x528(0x08)
	bool IsDriving; // 0x530(0x01)
	bool isVehicleMachineGun; // 0x531(0x01)
	char pad_532[0x2]; // 0x532(0x02)
	struct FName WantToSwitchSeat; // 0x534(0x08)
	bool IsVehicleWeaponFPP; // 0x53c(0x01)
	bool bTeleportGetOnOff; // 0x53d(0x01)
	bool bOnceOnVehicle; // 0x53e(0x01)
	bool bIsFocusOnImpendingDeathBuddy; // 0x53f(0x01)
	bool bIsInWater; // 0x540(0x01)
	char pad_541[0x3]; // 0x541(0x03)
	float WaterHeight; // 0x544(0x04)
	float WaterDepth; // 0x548(0x04)
	bool bBreakBasePoseTransition; // 0x54c(0x01)
	bool bSkillSupperSprint; // 0x54d(0x01)
	char pad_54E[0x2]; // 0x54e(0x02)
	struct APawn* CurrentParentAttachment; // 0x550(0x08)
	char pad_558[0x8]; // 0x558(0x08)
	struct UAnimSequence* FPPIdleAnimation; // 0x560(0x08)
	struct UBlendSpaceBase* FPPStandMoveBS; // 0x568(0x08)
	bool bEnableOnlyLeftArmTpp; // 0x570(0x01)
	char pad_571[0x3]; // 0x571(0x03)
	float PerformActionDuration; // 0x574(0x04)
	bool bOverrideAimingCheck; // 0x578(0x01)
	char pad_579[0x7]; // 0x579(0x07)
	struct FHitDownInfo HitDownInfo; // 0x580(0x30)
	float LastDamageTime; // 0x5b0(0x04)
	bool bIsUsingC301Launcher; // 0x5b4(0x01)
	bool bIsShowPreviewLine; // 0x5b5(0x01)
	char pad_5B6[0x2]; // 0x5b6(0x02)
	float LastSwitchToBowTime; // 0x5b8(0x04)
	float LastSwitchToLauncherTime; // 0x5bc(0x04)
	float LastBeArrowMarkTime; // 0x5c0(0x04)
	char pad_5C4[0x4]; // 0x5c4(0x04)
	uint64_t ArrowMarkerUin; // 0x5c8(0x08)
	float LastBeCatMarkTime; // 0x5d0(0x04)
	char pad_5D4[0x4]; // 0x5d4(0x04)
	uint64_t CatMarkerUin; // 0x5d8(0x08)
	float LastBeFlashDroneFlashTime; // 0x5e0(0x04)
	char pad_5E4[0x4]; // 0x5e4(0x04)
	uint64_t LastBeFlashMarkerUin; // 0x5e8(0x08)
	float LastBeDataKnifeHitTime; // 0x5f0(0x04)
	char pad_5F4[0x4]; // 0x5f4(0x04)
	uint64_t LastBeDataKnifeMarkerUin; // 0x5f8(0x08)
	char pad_600[0x10]; // 0x600(0x10)
	float LastBeBlindTime; // 0x610(0x04)
	char pad_614[0x4]; // 0x614(0x04)
	uint64_t LastBeBlindMarkerUin; // 0x618(0x08)
	bool bHidePreviewLine; // 0x620(0x01)
	bool bIsInBipodDeploy; // 0x621(0x01)
	bool bIsCanCheckTraceBipodDeploy; // 0x622(0x01)
	char pad_623[0x5]; // 0x623(0x05)
	uint64_t CurrentAvatarId; // 0x628(0x08)
	struct FVector PreviewLineHitPos; // 0x630(0x0c)
	struct FVector PreviewLineStartPos; // 0x63c(0x0c)
	struct FVector PreviewLinePredictVelocity; // 0x648(0x0c)
	float ServerSearchItemTimeOut; // 0x654(0x04)
	struct TArray<struct TWeakObjectPtr<struct AActor>> StickyActorList; // 0x658(0x10)
	int32_t PullOutArrowSkillID; // 0x668(0x04)
	int32_t StickyFireArrowCnt; // 0x66c(0x04)
	bool bIsShowC202CatSnakeView; // 0x670(0x01)
	char pad_671[0x3]; // 0x671(0x03)
	int32_t C102AdrenalineLevel; // 0x674(0x04)
	char pad_678[0x20]; // 0x678(0x20)
	float SKillLastReleaseSmokeTime; // 0x698(0x04)
	enum class ESkillRecycleType SkillRecycleType; // 0x69c(0x01)
	char pad_69D[0x3]; // 0x69d(0x03)
	float LastEnterSuppressionMineTime; // 0x6a0(0x04)
	bool bIsElevatorAllowJump; // 0x6a4(0x01)
	bool bHasRequestRescue; // 0x6a5(0x01)
	bool bPlayRequestRescueAnim; // 0x6a6(0x01)
	bool bIsDeployFinished; // 0x6a7(0x01)
	enum class ERedeployStateFuture ServerCurRedeployState; // 0x6a8(0x04)
	char pad_6AC[0x4]; // 0x6ac(0x04)
	struct AGPCharacterBase* KillerCharacter; // 0x6b0(0x08)
	int32_t FlashDroneFlashLevel; // 0x6b8(0x04)
	float LeftArmAnimFSMTime; // 0x6bc(0x04)
	bool bIsForbiddenLeftHandAnim; // 0x6c0(0x01)
	char pad_6C1[0x3]; // 0x6c1(0x03)
	int32_t bIsBeBlinding; // 0x6c4(0x04)
	int32_t QTEStateLeft; // 0x6c8(0x04)
	int32_t QTEStateRight; // 0x6cc(0x04)
	bool bInSafeHouse; // 0x6d0(0x01)
	bool bInRange; // 0x6d1(0x01)
	char pad_6D2[0x836]; // 0x6d2(0x836)
	/*struct FMulticastInlineDelegate*/char OnEquipedArmorInfoChanged[0x10]; // 0xf08(0x10)

	void UpdateCustomReasonFsmStateMasks(enum class EFSMForbidReason CustomReason, uint64_t Masks, bool Value); // Function GPGameplay.GPBlackboardComponent.UpdateCustomReasonFsmStateMasks // (Final|Native|Public) // @ game+0x35bfd00
	void TryPullOutArrow(); // Function GPGameplay.GPBlackboardComponent.TryPullOutArrow // (Final|Native|Public) // @ game+0x35bfc60
	void SetScoreReturnTarget(enum class EPlayerScoreReturnType InReturnType, struct AGPCharacterBase* InCharacter, struct FName InScoreReturnExtraParam); // Function GPGameplay.GPBlackboardComponent.SetScoreReturnTarget // (Final|Native|Public) // @ game+0x35bf6d0
	void SetOutLineVectorParams(struct FName ParamKey, struct FVector ParamValue); // Function GPGameplay.GPBlackboardComponent.SetOutLineVectorParams // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x35bf600
	void SetOutLineScalarParams(struct FName ParamKey, float ParamValue); // Function GPGameplay.GPBlackboardComponent.SetOutLineScalarParams // (Final|Native|Public|BlueprintCallable) // @ game+0x35bf540
	void SetIsInSafeHouse(bool NewValue); // Function GPGameplay.GPBlackboardComponent.SetIsInSafeHouse // (Final|Native|Public) // @ game+0x35bf2f0
	void SetIsInRange(bool NewValue); // Function GPGameplay.GPBlackboardComponent.SetIsInRange // (Final|Native|Public) // @ game+0x35bf260
	void SetFightingEnd(); // Function GPGameplay.GPBlackboardComponent.SetFightingEnd // (Final|Native|Public) // @ game+0x35bf240
	void SetFighting(); // Function GPGameplay.GPBlackboardComponent.SetFighting // (Final|Native|Public) // @ game+0x35bf220
	void SetbCanAllWeaponActions(enum class EFSMForbidReason reason, bool Enable); // Function GPGameplay.GPBlackboardComponent.SetbCanAllWeaponActions // (Final|Native|Public) // @ game+0x35bf7d0
	struct FString PrintAllFSMBitwiseValue(); // Function GPGameplay.GPBlackboardComponent.PrintAllFSMBitwiseValue // (Final|Native|Public|BlueprintCallable) // @ game+0x35beca0
	void OnOwnerCharacterReborn(); // Function GPGameplay.GPBlackboardComponent.OnOwnerCharacterReborn // (Final|Native|Public) // @ game+0x35bec80
	void OnOwnerCharacterDied(struct AGPCharacterBase* CHARACTER, struct AController* Killer, struct UDamageType* DamageType); // Function GPGameplay.GPBlackboardComponent.OnOwnerCharacterDied // (Final|Native|Public) // @ game+0x35beb80
	bool IsSomeSkillCurrentUsing(); // Function GPGameplay.GPBlackboardComponent.IsSomeSkillCurrentUsing // (Final|Native|Public) // @ game+0x35be5f0
	bool IsArrowMarkerUinBeSet(); // Function GPGameplay.GPBlackboardComponent.IsArrowMarkerUinBeSet // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35be5c0
	bool GetIsInSafeHouse(bool bExcludeRange); // Function GPGameplay.GPBlackboardComponent.GetIsInSafeHouse // (Final|Native|Public|Const) // @ game+0x35be430
	bool GetIsInRange(); // Function GPGameplay.GPBlackboardComponent.GetIsInRange // (Final|Native|Public|Const) // @ game+0x35be410
	enum class EFSMForbidReason GetForbitReason(enum class ESkillStateType SkillState); // Function GPGameplay.GPBlackboardComponent.GetForbitReason // (Final|Native|Public) // @ game+0x35be380
	int32_t GetCurrentUsingSkillID(enum class ESkillStateType SkillState); // Function GPGameplay.GPBlackboardComponent.GetCurrentUsingSkillID // (Final|Native|Public) // @ game+0x35be2f0
	float GetCurrentServertime(); // Function GPGameplay.GPBlackboardComponent.GetCurrentServertime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x35be2c0
	enum class EChracterPoseType GetCharacterCurrentBasePose(); // Function GPGameplay.GPBlackboardComponent.GetCharacterCurrentBasePose // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x35be150
	int32_t GetAnyCurrentUsingSkillID(); // Function GPGameplay.GPBlackboardComponent.GetAnyCurrentUsingSkillID // (Final|Native|Public) // @ game+0x35be0a0
	void ConsoleDebugBitArray(struct FName BitName, bool Value); // Function GPGameplay.GPBlackboardComponent.ConsoleDebugBitArray // (Final|Native|Public) // @ game+0x35bdbd0
	void ClearScoreReturn(); // Function GPGameplay.GPBlackboardComponent.ClearScoreReturn // (Final|Native|Public) // @ game+0x35bd910
	bool CanBeKnockBackInZipLine(); // Function GPGameplay.GPBlackboardComponent.CanBeKnockBackInZipLine // (Native|Public) // @ game+0x35bd8e0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCameraModifier_FPPPlayerLanding
// Size: 0x98 (Inherited: 0x98)
class UGPCameraModifier_FPPPlayerLanding : public UGPCameraModifier_FPPAnimCurve {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCharacterMovementComponent
// Size: 0xf80 (Inherited: 0x7d8)
class UGPCharacterMovementComponent : public UGPCharacterMovementComponentBase {
public:

	float MAXPOSITIONERRORSQUARED; // 0x7d8(0x04)
	float LastClientAdjustmentTime; // 0x7dc(0x04)
	float LastGoodMoveAckTime; // 0x7e0(0x04)
	float PronePenetrationOffset; // 0x7e4(0x04)
	float ProneCheckRadius; // 0x7e8(0x04)
	bool bEnableReProneHurdle; // 0x7ec(0x01)
	bool bLargeCorrection; // 0x7ed(0x01)
	char pad_7EE[0x2]; // 0x7ee(0x02)
	float LargeCorrectionThreshold; // 0x7f0(0x04)
	float MinTimeBetweenClientAdjustments; // 0x7f4(0x04)
	struct FVector StartFallingPosition; // 0x7f8(0x0c)
	struct FVector StartFallingVelocity; // 0x804(0x0c)
	char pad_810[0x4]; // 0x810(0x04)
	float SprintingAngleLimitMobile; // 0x814(0x04)
	float SprintingAngleLimitPC; // 0x818(0x04)
	float MaxSprintAngleLimitMobile; // 0x81c(0x04)
	float MaxSprintAngleLimitPC; // 0x820(0x04)
	float MovementSensitivity; // 0x824(0x04)
	float MaxFallingAcceleration; // 0x828(0x04)
	float MaxSwimmingAcceleration; // 0x82c(0x04)
	float MaxProneToStandAcceleration; // 0x830(0x04)
	float MaxProneToCrouchAcceleration; // 0x834(0x04)
	float MaxCrouchToStandAcceleration; // 0x838(0x04)
	float MaxLateralAcceleration; // 0x83c(0x04)
	float MaxRelativeSwimmingAccelNumerator; // 0x840(0x04)
	float MaxRelativeSwimmingAccelDenominator; // 0x844(0x04)
	int32_t GPEnableKeepVelocityInLargeSlope; // 0x848(0x04)
	float GPKeepVelocityInLargeSlopeFactor; // 0x84c(0x04)
	float GPKeepVelocityInLargeResetFactor; // 0x850(0x04)
	float GPKeepVelocityInLargeFallingGravityFactor; // 0x854(0x04)
	float MaxSlidingTackleAcceleration; // 0x858(0x04)
	float DefaultBrakingDecelerationWalking; // 0x85c(0x04)
	float MaxSlidingTackleBrakingDeceleration; // 0x860(0x04)
	bool bShotSpawned; // 0x864(0x01)
	bool bIsEmoting; // 0x865(0x01)
	bool IsForce2DMovement; // 0x866(0x01)
	char pad_867[0x1]; // 0x867(0x01)
	float MaxSlidingTackleSpeed; // 0x868(0x04)
	float SlidingTackleFrictionGround; // 0x86c(0x04)
	float SlidingTackleFrictionAir; // 0x870(0x04)
	float GravityAlongSurfaceScaleAddition; // 0x874(0x04)
	float MaxRushMoveSpeed; // 0x878(0x04)
	float MaxRushMoveDistance; // 0x87c(0x04)
	char pad_880[0x1]; // 0x880(0x01)
	bool bWantsToLieDown; // 0x881(0x01)
	bool bWantsToSilentWalk; // 0x882(0x01)
	bool bWantsToAim; // 0x883(0x01)
	bool bWantsToPeeking; // 0x884(0x01)
	bool bWantsToLeisure; // 0x885(0x01)
	bool bWantsToAlert; // 0x886(0x01)
	bool bWantsToAlertTrott; // 0x887(0x01)
	float LieDownHalfHeight; // 0x888(0x04)
	float SwimHalfHeight; // 0x88c(0x04)
	float ResolvePenetrationSpeedWithPawn; // 0x890(0x04)
	bool bCapsuleChangedWhenJump; // 0x894(0x01)
	char pad_895[0x3]; // 0x895(0x03)
	char bLieDownMaintainsBaseLocation : 1; // 0x898(0x01)
	char pad_898_1 : 7; // 0x898(0x01)
	char pad_899[0x3]; // 0x899(0x03)
	float SprintAccel; // 0x89c(0x04)
	float SprintMaxWallNormal; // 0x8a0(0x04)
	bool bWantsToSprint; // 0x8a4(0x01)
	bool bWantsToHalfSquatWalk; // 0x8a5(0x01)
	char pad_8A6[0xa]; // 0x8a6(0x0a)
	struct UGPCharacterMovementSpeedBaselineDataAsset* DefaultSpeedConfig; // 0x8b0(0x08)
	struct UGPCharacterMovementLimitDataAsset* MovementLimitConfig; // 0x8b8(0x08)
	float StandCollisionRadius; // 0x8c0(0x04)
	float CrouchCollisionRadius; // 0x8c4(0x04)
	char pad_8C8[0x38]; // 0x8c8(0x38)
	struct UCapsuleComponent* ProneCollisionCapsuleComponent; // 0x900(0x08)
	bool HistoryTransformPronePenetrationEnable; // 0x908(0x01)
	char pad_909[0xf]; // 0x909(0x0f)
	float HistoryTransformOffsetThresholdSquared; // 0x918(0x04)
	char pad_91C[0x24]; // 0x91c(0x24)
	float ShallowWaterDepth; // 0x940(0x04)
	float SwimImmerseCheckOffset; // 0x944(0x04)
	float StopSwimupDepth; // 0x948(0x04)
	float CanSwimDownPitch; // 0x94c(0x04)
	float WaterFriction; // 0x950(0x04)
	char pad_954[0x10]; // 0x954(0x10)
	float UnderWaterDepth; // 0x964(0x04)
	char pad_968[0x4]; // 0x968(0x04)
	float ResolvePenetratingInCustomMoveCapsuleScale; // 0x96c(0x04)
	struct FVector KnockBackVelocity; // 0x970(0x0c)
	struct FVector KnockBackFallingStartPos; // 0x97c(0x0c)
	bool bIsProcessKnockBackLanded; // 0x988(0x01)
	char pad_989[0x53]; // 0x989(0x53)
	char lastGPMovementMode; // 0x9dc(0x01)
	char pad_9DD[0x3]; // 0x9dd(0x03)
	float ClassicTransfromReplicateSendInterval; // 0x9e0(0x04)
	int32_t ClassicTransfromReplicatePositionSleepCount; // 0x9e4(0x04)
	float ClassicTransfromReplicateFInterpToSpeed; // 0x9e8(0x04)
	int32_t ClassicTransfromReplicateMaxCacheMessageCount; // 0x9ec(0x04)
	float ClassicTransfromReplicateMaxCheckDistance; // 0x9f0(0x04)
	char pad_9F4[0x4]; // 0x9f4(0x04)
	struct TArray<struct FActorMoveMessage> ClassicTransfromReplicateCachedMovePackage; // 0x9f8(0x10)
	float MoveSlideFactor; // 0xa08(0x04)
	float MoveSlideMaxAddSpeed; // 0xa0c(0x04)
	float MoveslideThresholdAngle; // 0xa10(0x04)
	float MoveslideThresholdFactor; // 0xa14(0x04)
	bool EnablePivot; // 0xa18(0x01)
	char pad_A19[0x8f]; // 0xa19(0x8f)
	struct UGPAttributeSetSpeed* AttributeSetSpeed; // 0xaa8(0x08)
	float FallFiringGravity; // 0xab0(0x04)
	char pad_AB4[0x18]; // 0xab4(0x18)
	float ServerTickAvg; // 0xacc(0x04)
	char RecvTimeOffsetExp; // 0xad0(0x01)
	char pad_AD1[0x3]; // 0xad1(0x03)
	float RecvTimeOffsetFixAlpha; // 0xad4(0x04)
	char pad_AD8[0xaa]; // 0xad8(0xaa)
	bool bWantsToChangeCapsuleInFalling; // 0xb82(0x01)
	char pad_B83[0x1]; // 0xb83(0x01)
	float CrouchHalfHeightWhenJump; // 0xb84(0x04)
	float CrouchTimeWhenJump; // 0xb88(0x04)
	char pad_B8C[0xc]; // 0xb8c(0x0c)
	bool bWantsToVaultOrClimb; // 0xb98(0x01)
	bool bWantsToSlideTackle; // 0xb99(0x01)
	bool bWantsToPlayerParachute; // 0xb9a(0x01)
	bool bWantsToGlide; // 0xb9b(0x01)
	bool bWantsResolveStuckInGeometry; // 0xb9c(0x01)
	bool bWantsToRush; // 0xb9d(0x01)
	bool bWantsToRushProperty1; // 0xb9e(0x01)
	bool bWantsToRushProperty2; // 0xb9f(0x01)
	bool bWantsToKnockback; // 0xba0(0x01)
	bool bWantsVehiclePush; // 0xba1(0x01)
	bool bWantsToMove1P; // 0xba2(0x01)
	bool bWantsToMoveRight1P; // 0xba3(0x01)
	char pad_BA4[0x4]; // 0xba4(0x04)
	bool SplitInputAccelOnXYPlaneAndZAxis; // 0xba8(0x01)
	char pad_BA9[0xb]; // 0xba9(0x0b)
	float JumpControlAdjustingMaxDistance; // 0xbb4(0x04)
	float JumpControlAdjustingMaxTime; // 0xbb8(0x04)
	bool ShowClientJumpCurve; // 0xbbc(0x01)
	char pad_BBD[0x3]; // 0xbbd(0x03)
	float FallingDownAddSpeed; // 0xbc0(0x04)
	float StartFallingHorizantalSpeedScale; // 0xbc4(0x04)
	float EndFallingHorizantalSpeedScale; // 0xbc8(0x04)
	float AirControlMaxVelocity; // 0xbcc(0x04)
	float AirControlBraking; // 0xbd0(0x04)
	float JumpFallingAccelerationDelay; // 0xbd4(0x04)
	float LandedAccelerationScale; // 0xbd8(0x04)
	char pad_BDC[0x3c]; // 0xbdc(0x3c)
	float KeepSlideVecWalkableFloorZ; // 0xc18(0x04)
	float MaxStepHeight_Stand; // 0xc1c(0x04)
	float MaxStepHeight_Crouch; // 0xc20(0x04)
	float MaxStepHeight_Prone; // 0xc24(0x04)
	float AllownModeDiffTime; // 0xc28(0x04)
	float DelayScaleCompareBasePing; // 0xc2c(0x04)
	float DSNormalDeltaSeconds; // 0xc30(0x04)
	float MaxDifferenceScale; // 0xc34(0x04)
	float MovementBaseMaxMoveDistance; // 0xc38(0x04)
	float StandbyStateTickInterval; // 0xc3c(0x04)
	struct UGPAudioServerNotifier* AudioServerNotifier; // 0xc40(0x08)
	bool isSprintSlideAlongSurface; // 0xc48(0x01)
	char pad_C49[0x7]; // 0xc49(0x07)
	struct UClass* AudioServerNotifierClass; // 0xc50(0x08)
	char pad_C58[0x8]; // 0xc58(0x08)
	bool EnableSimulateMovementDebug; // 0xc60(0x01)
	char pad_C61[0x7]; // 0xc61(0x07)
	struct FCharacterMovementLogInfo CurrentFrameSimulateMovementDebugInfo; // 0xc68(0x138)
	char pad_DA0[0x8]; // 0xda0(0x08)
	float MaxCheckPositionDifference; // 0xda8(0x04)
	float PckLoseMaxCheckPositionDifference; // 0xdac(0x04)
	float ServerTrustClientMoveScore; // 0xdb0(0x04)
	float MPServerTrustClientMoveScore; // 0xdb4(0x04)
	float MaxServerTrustClientMoveScore; // 0xdb8(0x04)
	float CanAcceptMaxSpeedFactor; // 0xdbc(0x04)
	float CanAcceptMinSpeedFactor; // 0xdc0(0x04)
	float CanIgnoreZAxisMinSpeed; // 0xdc4(0x04)
	float CanAcceptMaxDistanceFactor; // 0xdc8(0x04)
	float CanAcceptMinDistanceFactor; // 0xdcc(0x04)
	float CanIgnoreZAxisMinDistance; // 0xdd0(0x04)
	float CanAccept2PkgXYAxisMaxDistance; // 0xdd4(0x04)
	float CanIgnore2PkgXYAxisMinDistance; // 0xdd8(0x04)
	float CanAccept2PkgZAxisMaxDistance; // 0xddc(0x04)
	float CanIgnore2PkgZAxisMinDistance; // 0xde0(0x04)
	char AppendMoveCount; // 0xde4(0x01)
	char pad_DE5[0x3]; // 0xde5(0x03)
	float CapsuleTickInterval; // 0xde8(0x04)
	bool bIsLowerTickRate; // 0xdec(0x01)
	bool bIsSmoothMeshZAxisOffsetAtWalking; // 0xded(0x01)
	char pad_DEE[0x2]; // 0xdee(0x02)
	float SmoothMeshZAxisOffsetSpeedAtWalking; // 0xdf0(0x04)
	char pad_DF4[0x4]; // 0xdf4(0x04)
	struct UCurveFloat* SteeringSpeedLossCurve; // 0xdf8(0x08)
	float MinSteeringSprintSpeed; // 0xe00(0x04)
	float SprintSteeringAngleSpeed; // 0xe04(0x04)
	struct UCurveFloat* WalkUpDownStairMapCurve; // 0xe08(0x08)
	struct UCurveFloat* RunUpDownStairMapCurve; // 0xe10(0x08)
	struct UCurveFloat* SprintUpDownStairMapCurve; // 0xe18(0x08)
	char LastClientMovementMode; // 0xe20(0x01)
	char pad_E21[0x3]; // 0xe21(0x03)
	struct FVector CurClientVelocity; // 0xe24(0x0c)
	int32_t CurServerMoveNum; // 0xe30(0x04)
	int32_t LastServerMoveNum; // 0xe34(0x04)
	int32_t CacheLastServerMoveNum; // 0xe38(0x04)
	int32_t ClientRequestMoveNumber; // 0xe3c(0x04)
	int32_t TriggerAdjustPosReqMoveNum; // 0xe40(0x04)
	int32_t TriggerAdjustPosServerMoveNum; // 0xe44(0x04)
	struct FVector LastClientAckedLocation; // 0xe48(0x0c)
	struct FVector TargetClientAckedLocation; // 0xe54(0x0c)
	struct FVector CurClientLocation; // 0xe60(0x0c)
	char pad_E6C[0x4]; // 0xe6c(0x04)
	struct FGPVerifyJumpInfo VerifyJumpInfo; // 0xe70(0x38)
	struct FGPMoveParams LastFrameMoveInfo; // 0xea8(0x50)
	float LastFrameSendTime; // 0xef8(0x04)
	char pad_EFC[0x4]; // 0xefc(0x04)
	struct FGPMoveParams LastSendMovePkg; // 0xf00(0x50)
	bool IsInconsistentLocation; // 0xf50(0x01)
	bool EnableCheckSafeVaultMove; // 0xf51(0x01)
	char pad_F52[0x2]; // 0xf52(0x02)
	float SafeVaultMoveRadius; // 0xf54(0x04)
	float SphereHeightOffset; // 0xf58(0x04)
	bool DebugEnableCheckSafeVaultMove; // 0xf5c(0x01)
	char pad_F5D[0x3]; // 0xf5d(0x03)
	float DebugDrawCheckSafeVaultMoveLife; // 0xf60(0x04)
	bool EnableVaultEndSpeedKeepWhenFall; // 0xf64(0x01)
	char pad_F65[0x3]; // 0xf65(0x03)
	float VaultEndSpeedKeepTimeDuration; // 0xf68(0x04)
	float VaultEndSpeedKeepTimeStamp; // 0xf6c(0x04)
	bool bEnableDFMServerCheckMove; // 0xf70(0x01)
	bool bEnableDFMCombineMoveData; // 0xf71(0x01)
	char pad_F72[0xe]; // 0xf72(0x0e)

	void UpdateSprintVelocity(float DeltaTime); // Function GPGameplay.GPCharacterMovementComponent.UpdateSprintVelocity // (Native|Public) // @ game+0x35dfe80
	void UnLieDown(bool bClientSimulation); // Function GPGameplay.GPCharacterMovementComponent.UnLieDown // (Native|Public|BlueprintCallable) // @ game+0x35dfdf0
	void ShowDebugServerPhysicCheckDraw(float radius, float Height, struct FVector StartLoc, struct FVector EndLoc, struct FVector ImpactPoint, float LifeTime); // Function GPGameplay.GPCharacterMovementComponent.ShowDebugServerPhysicCheckDraw // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x35dfb30
	void SetPitchSwimDown(bool bPitchPass); // Function GPGameplay.GPCharacterMovementComponent.SetPitchSwimDown // (Final|Native|Public|BlueprintCallable) // @ game+0x35dfaa0
	void SetNetworkSmoothingMode(enum class ENetworkSmoothingMode NewNetworkSmoothingMode); // Function GPGameplay.GPCharacterMovementComponent.SetNetworkSmoothingMode // (Final|Native|Public|BlueprintCallable) // @ game+0x35dfa20
	void SetMaxWalkSpeed(float InMaxWalkSpeed); // Function GPGameplay.GPCharacterMovementComponent.SetMaxWalkSpeed // (Native|Public|BlueprintCallable) // @ game+0x35df9a0
	void SetForceSwimUpDown(bool bInputForce); // Function GPGameplay.GPCharacterMovementComponent.SetForceSwimUpDown // (Final|Native|Public|BlueprintCallable) // @ game+0x35df910
	void SetDisablePlayerPerformMovement(bool bDisable, struct FString reason); // Function GPGameplay.GPCharacterMovementComponent.SetDisablePlayerPerformMovement // (Final|Native|Public|BlueprintCallable) // @ game+0x35df7a0
	void ServerSetForceSwimUpDown(bool bInputForce); // Function GPGameplay.GPCharacterMovementComponent.ServerSetForceSwimUpDown // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x35df5c0
	void ServerReceiveClassicTransfromReplicatePackage(struct FActorMoveMessage Msg); // Function GPGameplay.GPCharacterMovementComponent.ServerReceiveClassicTransfromReplicatePackage // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35df4c0
	void RevertCapsuleChangeTimer(); // Function GPGameplay.GPCharacterMovementComponent.RevertCapsuleChangeTimer // (Final|Native|Public) // @ game+0x35df4a0
	void ResetMaxWalkSpeed(); // Function GPGameplay.GPCharacterMovementComponent.ResetMaxWalkSpeed // (Native|Public|BlueprintCallable) // @ game+0x35df480
	void NewServerMoveOld(struct FMoveInputParams Params); // Function GPGameplay.GPCharacterMovementComponent.NewServerMoveOld // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x35df370
	void NewServerMoveNoBase(struct FMoveParamsNoBase Params); // Function GPGameplay.GPCharacterMovementComponent.NewServerMoveNoBase // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x35df270
	void NewServerMoveDualNoBase(struct FMoveInputParams Params0, struct FMoveParamsNoBase Params); // Function GPGameplay.GPCharacterMovementComponent.NewServerMoveDualNoBase // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x35df110
	void NewServerMoveDualHybridRootMotion(struct FMoveInputParams Params0, struct FGPMoveParams Params); // Function GPGameplay.GPCharacterMovementComponent.NewServerMoveDualHybridRootMotion // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x35defa0
	void NewServerMoveDual(struct FMoveInputParams Params0, struct FGPMoveParams Params); // Function GPGameplay.GPCharacterMovementComponent.NewServerMoveDual // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x35dee30
	void NewServerMove(struct FGPMoveParams Params); // Function GPGameplay.GPCharacterMovementComponent.NewServerMove // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x35ded20
	void LieDown(bool bClientSimulation); // Function GPGameplay.GPCharacterMovementComponent.LieDown // (Native|Public|BlueprintCallable) // @ game+0x35dec90
	bool IsTouchWaterVolume(); // Function GPGameplay.GPCharacterMovementComponent.IsTouchWaterVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35dec60
	bool IsServerOfflineUpdate(); // Function GPGameplay.GPCharacterMovementComponent.IsServerOfflineUpdate // (Final|Native|Public) // @ game+0x35dec30
	bool IsMovingSpeedMainlyForwardWithGivingAngle(float Angle); // Function GPGameplay.GPCharacterMovementComponent.IsMovingSpeedMainlyForwardWithGivingAngle // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35deba0
	bool IsMovingSpeedMainlyForward(); // Function GPGameplay.GPCharacterMovementComponent.IsMovingSpeedMainlyForward // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x35deb70
	bool IsMovingMainlyForward(); // Function GPGameplay.GPCharacterMovementComponent.IsMovingMainlyForward // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35deb40
	bool IsLieDowning(); // Function GPGameplay.GPCharacterMovementComponent.IsLieDowning // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35deb10
	bool IsKnockBackLanded(); // Function GPGameplay.GPCharacterMovementComponent.IsKnockBackLanded // (Final|Native|Public) // @ game+0x35deae0
	bool IsInShallowWater(); // Function GPGameplay.GPCharacterMovementComponent.IsInShallowWater // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35deab0
	bool IsControllerMovingMainlyForward(); // Function GPGameplay.GPCharacterMovementComponent.IsControllerMovingMainlyForward // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35dea80
	void InitSpeed(); // Function GPGameplay.GPCharacterMovementComponent.InitSpeed // (Native|Public|BlueprintCallable) // @ game+0x35dea60
	float GetDefaultMaxSpeedByMovementMode(enum class EGPMovementType CurrentMovementMode); // Function GPGameplay.GPCharacterMovementComponent.GetDefaultMaxSpeedByMovementMode // (Native|Public|BlueprintCallable) // @ game+0x35de9d0
	void ForceUpdateClientPosition(struct FVector NewLoc, struct FVector NewVel, struct UPrimitiveComponent* NewBase, struct FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode, bool bSetControllerRot, struct FRotator ControllerRot, struct FVector NewWorldLoc, enum class ESetCharacterPositionAndRep2ClientReason reason); // Function GPGameplay.GPCharacterMovementComponent.ForceUpdateClientPosition // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient|NetValidate) // @ game+0x35de5e0
	bool EnabbleMoveModeOfflineRunning(); // Function GPGameplay.GPCharacterMovementComponent.EnabbleMoveModeOfflineRunning // (Final|Native|Public) // @ game+0x35de5b0
	void ClientToServerLargeAdjustPosition(struct FVector ClientLoc, struct FVector OriginLocation, struct FVector CameraPoint); // Function GPGameplay.GPCharacterMovementComponent.ClientToServerLargeAdjustPosition // (Net|Native|Event|Public|NetServer|HasDefaults) // @ game+0x35de480
	void ClientShowServerPosition(float Timestamp, struct FVector ServerLoc, struct FVector ServerVelocity, char ServerMovementMode, struct FString TipStr); // Function GPGameplay.GPCharacterMovementComponent.ClientShowServerPosition // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x35de2a0
	void ClientNoBaseAdjustPosition(float Timestamp, struct FVector NewLoc, struct FVector NewVelocity, char ServerMovementMode); // Function GPGameplay.GPCharacterMovementComponent.ClientNoBaseAdjustPosition // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x35de090
	void AddImpulseOverride(struct FVector Impulse, bool bVelocityChange); // Function GPGameplay.GPCharacterMovementComponent.AddImpulseOverride // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x35ddfb0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPFSMInstance
// Size: 0x718 (Inherited: 0x6a0)
class UGPFSMInstance : public UGPFSMInstanceNetworkBase {
public:

	bool bIsEntryFSM; // 0x6a0(0x01)
	char pad_6A1[0x7]; // 0x6a1(0x07)
	struct TMap<enum class ECharacterFSMEventDefine, bool> ReceiveEventRet; // 0x6a8(0x50)
	bool ReceiveGlobalEventRet; // 0x6f8(0x01)
	char pad_6F9[0x3]; // 0x6f9(0x03)
	struct FGameplayTag StandingGlobalTag; // 0x6fc(0x08)
	struct FGameplayTag DrivingGlobalTag; // 0x704(0x08)
	struct FGameplayTag SOLEscapedGlobalTag; // 0x70c(0x08)
	char pad_714[0x4]; // 0x714(0x04)

	void TryCancelCurrentWeaponReload(bool StopAnimation, enum class EAnimationPlayType Slot); // Function GPGameplay.GPFSMInstance.TryCancelCurrentWeaponReload // (Final|Native|Public|BlueprintCallable) // @ game+0x35fa3f0
	void TryCancelAimingState(); // Function GPGameplay.GPFSMInstance.TryCancelAimingState // (Final|Native|Public|BlueprintCallable) // @ game+0x35fa3d0
	void SetSOLEscapedState(); // Function GPGameplay.GPFSMInstance.SetSOLEscapedState // (Final|Native|Public|BlueprintCallable) // @ game+0x35fa220
	void ForceGetOnVehicle(struct APawn* TargetCar, struct FName Seat); // Function GPGameplay.GPFSMInstance.ForceGetOnVehicle // (Final|Native|Public|BlueprintCallable) // @ game+0x35f9d30
	void ForceGetOffVehicle(); // Function GPGameplay.GPFSMInstance.ForceGetOffVehicle // (Final|Native|Public|BlueprintCallable) // @ game+0x35f9d10
	struct FVector FindBestPointForStand(); // Function GPGameplay.GPFSMInstance.FindBestPointForStand // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x35f9cd0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPFSMSkillEntityComponent
// Size: 0x2b8 (Inherited: 0x2a8)
class UGPFSMSkillEntityComponent : public UGPFSMSkillEntityComponentBase {
public:

	char pad_2A8[0x8]; // 0x2a8(0x08)
	struct UClass* FSMClassRef; // 0x2b0(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ModularWeaponDataComponentAnim
// Size: 0xab0 (Inherited: 0x9f0)
class UModularWeaponDataComponentAnim : public UWeaponDataComponentAnim {
public:

	struct TArray<struct UAnimSequenceBase*> WeapPlayAnimSeq; // 0x9f0(0x10)
	struct TArray<struct UAnimSequenceBase*> WeapAimPlayAnimSeq; // 0xa00(0x10)
	char pad_A10[0x18]; // 0xa10(0x18)
	struct UAnimSequenceBase* PlayingAnimSeq; // 0xa28(0x08)
	struct UAnimSequenceBase* AimPlayingAnimSeq; // 0xa30(0x08)
	char pad_A38[0x10]; // 0xa38(0x10)
	struct UAnimSequenceBase* FirstcachePlayingAnimSeq; // 0xa48(0x08)
	struct UAnimSequenceBase* FirstcacheAimPlayingAnimSeq; // 0xa50(0x08)
	struct UAnimSequenceBase* IdleAnimSeq; // 0xa58(0x08)
	char pad_A60[0x1]; // 0xa60(0x01)
	bool bIsEmptyAmmo; // 0xa61(0x01)
	bool bIsEmptyAmmoState; // 0xa62(0x01)
	bool bAnimShowEmptyAmmo; // 0xa63(0x01)
	bool bAnimForbidEmptyAmmo; // 0xa64(0x01)
	enum class EGPWeaponFiringMode FireMode; // 0xa65(0x01)
	enum class EGPWeaponFiringMode FireModeState; // 0xa66(0x01)
	enum class EGPWeaponFiringMode AnimShowFireMode; // 0xa67(0x01)
	bool bAnimForbidFireMode; // 0xa68(0x01)
	char pad_A69[0x17]; // 0xa69(0x17)
	struct UGPSprintComponent* SprintComponent; // 0xa80(0x08)
	char pad_A88[0x20]; // 0xa88(0x20)
	struct AWeaponBase* WeaponOwnerCache; // 0xaa8(0x08)

	void RefreshWeaponMeshBone(); // Function GPGameplay.ModularWeaponDataComponentAnim.RefreshWeaponMeshBone // (Final|Native|Public) // @ game+0x36922e0
	void OnFirstEquipAnimStop(struct UAnimMontage* Montage, bool bInterrupted); // Function GPGameplay.ModularWeaponDataComponentAnim.OnFirstEquipAnimStop // (Final|Native|Public) // @ game+0x36918f0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponHeavyMachineGunDataComponentAnim
// Size: 0xa28 (Inherited: 0x9f0)
class UWeaponHeavyMachineGunDataComponentAnim : public UWeaponDataComponentAnim {
public:

	struct FName LeftIKBoneName; // 0x9f0(0x08)
	struct FName RightIKBoneName; // 0x9f8(0x08)
	struct FName SpineBoneName; // 0xa00(0x08)
	struct FName PlayerPointBoneName; // 0xa08(0x08)
	bool IsNeedDoubleIk; // 0xa10(0x01)
	bool bEnableLeftRightFire; // 0xa11(0x01)
	char pad_A12[0x2]; // 0xa12(0x02)
	struct FName RightBone; // 0xa14(0x08)
	struct FName LeftBone; // 0xa1c(0x08)
	char pad_A24[0x4]; // 0xa24(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowableDataComponentAnim
// Size: 0xa00 (Inherited: 0x9f0)
class UWeaponThrowableDataComponentAnim : public UWeaponDataComponentAnim {
public:

	char pad_9F0[0x8]; // 0x9f0(0x08)
	bool bIsBeginEquip; // 0x9f8(0x01)
	bool bIsPreFired; // 0x9f9(0x01)
	bool bIsFired; // 0x9fa(0x01)
	bool bIsBeginEndEquip; // 0x9fb(0x01)
	char pad_9FC[0x4]; // 0x9fc(0x04)

	void UpdateWeaponAnimInstanceParams(enum class EGPWeaponInnerEvent EventType); // Function GPGameplay.WeaponThrowableDataComponentAnim.UpdateWeaponAnimInstanceParams // (Final|Native|Protected) // @ game+0x3716e70
	void InitWeaponAnimInstanceParams(); // Function GPGameplay.WeaponThrowableDataComponentAnim.InitWeaponAnimInstanceParams // (Final|Native|Protected) // @ game+0x3716bb0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.EReplicationGraphNode_DynamicSpatialFrequency
// Size: 0xf8 (Inherited: 0xd8)
class UEReplicationGraphNode_DynamicSpatialFrequency : public UEReplicationGraphNode_ActorList {
public:

	char pad_D8[0x20]; // 0xd8(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.EReplicationGraphNode_ConnectionDormancyNode
// Size: 0x150 (Inherited: 0xd8)
class UEReplicationGraphNode_ConnectionDormancyNode : public UEReplicationGraphNode_ActorList {
public:

	char pad_D8[0x78]; // 0xd8(0x78)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.EReplicationGraphNode_DormancyNode
// Size: 0x128 (Inherited: 0xd8)
class UEReplicationGraphNode_DormancyNode : public UEReplicationGraphNode_ActorList {
public:

	char pad_D8[0x50]; // 0xd8(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.EReplicationGraphNode_GridCell
// Size: 0x130 (Inherited: 0xd8)
class UEReplicationGraphNode_GridCell : public UEReplicationGraphNode_ActorList {
public:

	char pad_D8[0x48]; // 0xd8(0x48)
	struct UEReplicationGraphNode* DynamicNode; // 0x120(0x08)
	struct UEReplicationGraphNode_DormancyNode* DormancyNode; // 0x128(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemAimDownSights
// Size: 0x2d0 (Inherited: 0x260)
class UWeaponAdapterItemAimDownSights : public UWeaponExtraModelBase {
public:

	char pad_260[0x70]; // 0x260(0x70)

	void OnAnimSeqLoadComplete(struct FSoftObjectPath& AssetPath); // Function GPGameplay.WeaponAdapterItemAimDownSights.OnAnimSeqLoadComplete // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x36b8da0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemAPistolGrip
// Size: 0x358 (Inherited: 0x358)
class UWeaponAdapterItemAPistolGrip : public UWeaponAdapterItemIKTarget {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemFlashLight
// Size: 0x450 (Inherited: 0x358)
class UWeaponAdapterItemFlashLight : public UWeaponAdapterItemIKTarget {
public:

	char pad_358[0xf0]; // 0x358(0xf0)
	struct UCompositedFlashLight* FlashLightItem; // 0x448(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemForeGrip
// Size: 0x358 (Inherited: 0x358)
class UWeaponAdapterItemForeGrip : public UWeaponAdapterItemIKTarget {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemGunBarrel
// Size: 0x358 (Inherited: 0x358)
class UWeaponAdapterItemGunBarrel : public UWeaponAdapterItemIKTarget {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemHandguard
// Size: 0x358 (Inherited: 0x358)
class UWeaponAdapterItemHandguard : public UWeaponAdapterItemIKTarget {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemReceiver
// Size: 0x358 (Inherited: 0x358)
class UWeaponAdapterItemReceiver : public UWeaponAdapterItemIKTarget {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemStock
// Size: 0x358 (Inherited: 0x358)
class UWeaponAdapterItemStock : public UWeaponAdapterItemIKTarget {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemLaserWithFLight
// Size: 0x370 (Inherited: 0x368)
class UWeaponAdapterItemLaserWithFLight : public UWeaponAdapterItemLaser {
public:

	struct UCompositedFlashLight* FlashLightItem; // 0x368(0x08)

	void OnMeshAssetLoaded(uint64_t Guid); // Function GPGameplay.WeaponAdapterItemLaserWithFLight.OnMeshAssetLoaded // (Final|Native|Protected) // @ game+0x36b9220
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemLaserWithScope
// Size: 0x6b0 (Inherited: 0x368)
class UWeaponAdapterItemLaserWithScope : public UWeaponAdapterItemLaser {
public:

	char pad_368[0x2c8]; // 0x368(0x2c8)
	struct AGPPlayerCameraManager* GPPlayerCameraManager; // 0x630(0x08)
	char pad_638[0x18]; // 0x638(0x18)
	struct UWeaponAdapterRangeScopeManager* ScopeManager; // 0x650(0x08)
	struct UMeshComponent* WeaponMeshComponent; // 0x658(0x08)
	struct UModularWeaponDataComponentAppearance* DCAppearance; // 0x660(0x08)
	struct UWeaponFuncComponentAppearance* ViewAppearance; // 0x668(0x08)
	struct FTransform CacheCenterRelativeTrans; // 0x670(0x30)
	char pad_6A0[0x10]; // 0x6a0(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterTransparentMagazine
// Size: 0x2a0 (Inherited: 0x270)
class UWeaponAdapterTransparentMagazine : public UWeaponAdapterItemMagazine {
public:

	char pad_270[0x8]; // 0x270(0x08)
	struct TWeakObjectPtr<struct USkeletalMeshComponent> AdapterMeshCom; // 0x278(0x08)
	struct TWeakObjectPtr<struct AWeaponBase> WeaponBase; // 0x280(0x08)
	struct TArray<struct UMaterialInstanceDynamic*> MeshDycMaterialInstanceDynamics; // 0x288(0x10)
	char pad_298[0x8]; // 0x298(0x08)

	void UpdateAmmoNum(float ammo); // Function GPGameplay.WeaponAdapterTransparentMagazine.UpdateAmmoNum // (Final|Native|Public) // @ game+0x36b9760
	void PrepareAdapter(); // Function GPGameplay.WeaponAdapterTransparentMagazine.PrepareAdapter // (Final|Native|Public) // @ game+0x1750020
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemScopeWithLaser
// Size: 0x8e0 (Inherited: 0x8c0)
class UWeaponAdapterItemScopeWithLaser : public UWeaponAdapterItemRangeScope {
public:

	char pad_8C0[0x8]; // 0x8c0(0x08)
	/*struct TScriptInterface<IGPWeaponInterface>*/char WeaponOwner[0x10]; // 0x8c8(0x10)
	struct UCompositedLaser* LaserItem; // 0x8d8(0x08)

	void OnMeshAssetLoaded(uint64_t Guid); // Function GPGameplay.WeaponAdapterItemScopeWithLaser.OnMeshAssetLoaded // (Final|Native|Protected) // @ game+0x36b92a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterScopeLaserPointerFor3P
// Size: 0x560 (Inherited: 0x550)
class UWeaponAdapterScopeLaserPointerFor3P : public UWeaponAdapterScopeFor3P {
public:

	char pad_550[0x10]; // 0x550(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterScopeWithLaserFor3P
// Size: 0x570 (Inherited: 0x550)
class UWeaponAdapterScopeWithLaserFor3P : public UWeaponAdapterScopeFor3P {
public:

	/*struct TScriptInterface<IGPWeaponInterface>*/char WeaponOwner[0x10]; // 0x550(0x10)
	struct UCompositedLaser* LaserItem; // 0x560(0x08)
	char pad_568[0x8]; // 0x568(0x08)

	void OnMeshAssetLoaded(uint64_t Guid); // Function GPGameplay.WeaponAdapterScopeWithLaserFor3P.OnMeshAssetLoaded // (Final|Native|Protected) // @ game+0x36b9320
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponBulletRPGSimulate
// Size: 0x770 (Inherited: 0x728)
class AWeaponBulletRPGSimulate : public AWeaponBulletExplosion {
public:

	char pad_728[0x8]; // 0x728(0x08)
	int32_t ThreatId; // 0x730(0x04)
	float ExplosionDurationSeconds; // 0x734(0x04)
	char pad_738[0x10]; // 0x738(0x10)
	struct UFXResourceContainerComponent* ExplosionDelayEffectComp; // 0x748(0x08)
	char pad_750[0x4]; // 0x750(0x04)
	float ExplosionDelaySeconds; // 0x754(0x04)
	uint64_t HitFXId_Cover; // 0x758(0x08)
	enum class EExplosionType ExplosionType; // 0x760(0x01)
	char pad_761[0xf]; // 0x761(0x0f)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponBulletSmokeSimulate
// Size: 0x740 (Inherited: 0x728)
class AWeaponBulletSmokeSimulate : public AWeaponBulletExplosion {
public:

	float ExplosionDamageRadius; // 0x728(0x04)
	float ExplosionDurationSeconds; // 0x72c(0x04)
	int32_t FXId; // 0x730(0x04)
	int32_t AudioId; // 0x734(0x04)
	float AutoExplodingDelay; // 0x738(0x04)
	bool RotateFxByActorRotation; // 0x73c(0x01)
	char pad_73D[0x3]; // 0x73d(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponFireModeWeldingGun
// Size: 0x188 (Inherited: 0x178)
class UWeaponFireModeWeldingGun : public UWeaponFireModeMelee {
public:

	struct TWeakObjectPtr<struct UGPSharedRepairComponent> LastComp; // 0x178(0x08)
	struct UWeldingGunComponent* WeldingGunComponent; // 0x180(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPCharacter
// Size: 0x1ad0 (Inherited: 0x1450)
class AGPCharacter : public AGPCharacterBase {
public:

	char pad_1450[0x40]; // 0x1450(0x40)
	struct UGPCharacterDataAsset* CharacterDataConfig; // 0x1490(0x08)
	char pad_1498[0x30]; // 0x1498(0x30)
	/*struct FMulticastInlineDelegate*/char OnBeginKnockback[0x10]; // 0x14c8(0x10)
	/*struct FMulticastInlineDelegate*/char OnEndKnockback[0x10]; // 0x14d8(0x10)
	/*struct FMulticastInlineDelegate*/char OnPlayerAssistKill[0x10]; // 0x14e8(0x10)
	/*struct FMulticastInlineDelegate*/char OnPlayerKill[0x10]; // 0x14f8(0x10)
	/*struct FMulticastInlineDelegate*/char OnPlayerBeKilled[0x10]; // 0x1508(0x10)
	/*struct FMulticastInlineDelegate*/char OnPlayerBeKnockDown[0x10]; // 0x1518(0x10)
	/*struct FMulticastInlineDelegate*/char OnPlayerKnockDownSomeOne[0x10]; // 0x1528(0x10)
	/*struct FMulticastInlineDelegate*/char OnPlayerMakeDamageToVehicle[0x10]; // 0x1538(0x10)
	/*struct FMulticastInlineDelegate*/char OnServerPlayerMakeDamage[0x10]; // 0x1548(0x10)
	/*struct FMulticastInlineDelegate*/char OnClientPlayerMakeDamage[0x10]; // 0x1558(0x10)
	/*struct FMulticastInlineDelegate*/char OnPlayerAssist[0x10]; // 0x1568(0x10)
	/*struct FMulticastInlineDelegate*/char OnKnockDownPlayerAssist[0x10]; // 0x1578(0x10)
	/*struct FMulticastInlineDelegate*/char OnExpertIdChangedDelegate[0x10]; // 0x1588(0x10)
	/*struct FMulticastInlineDelegate*/char OnGPClientNotifyBuffEffectRefreshSignature[0x10]; // 0x1598(0x10)
	/*struct FMulticastInlineDelegate*/char On3PWeaponChangeClip[0x10]; // 0x15a8(0x10)
	/*struct FMulticastInlineDelegate*/char OnSwitchZoomRate[0x10]; // 0x15b8(0x10)
	char pad_15C8[0xa9]; // 0x15c8(0xa9)
	bool bProtectFromDying; // 0x1671(0x01)
	char pad_1672[0x2]; // 0x1672(0x02)
	float LastBeHitServerTime; // 0x1674(0x04)
	float LastNormalFireTime; // 0x1678(0x04)
	bool CanGetInBattling; // 0x167c(0x01)
	char pad_167D[0x3]; // 0x167d(0x03)
	float BattlingRange; // 0x1680(0x04)
	float LastInBattlingTime; // 0x1684(0x04)
	uint32_t FireCounts; // 0x1688(0x04)
	bool bIsWaitingStart; // 0x168c(0x01)
	char pad_168D[0x3]; // 0x168d(0x03)
	struct FPoseTransitionTime PoseTransitionTimeSettings; // 0x1690(0x18)
	bool IsUI; // 0x16a8(0x01)
	char pad_16A9[0x7]; // 0x16a9(0x07)
	uint64_t LastOwnerUin; // 0x16b0(0x08)
	bool DisableDynamicPostProcessEffect; // 0x16b8(0x01)
	bool bIsSafeHouseCharacter; // 0x16b9(0x01)
	bool bIsBeingRescueReplicate; // 0x16ba(0x01)
	char pad_16BB[0x5]; // 0x16bb(0x05)
	struct UGPCharacterMovementComponent* GPCharacterMovement; // 0x16c0(0x08)
	float MovementVelocityScaler; // 0x16c8(0x04)
	enum class ECharacterLogicPoseType CurrentLogicPose; // 0x16cc(0x01)
	char pad_16CD[0xb]; // 0x16cd(0x0b)
	bool bOnCharacterMeshLoadCompleteFPP; // 0x16d8(0x01)
	bool bOnCharacterMeshLoadCompleteTPP; // 0x16d9(0x01)
	bool bIsChangeCapsuleWhenJump; // 0x16da(0x01)
	char pad_16DB[0x5]; // 0x16db(0x05)
	/*struct TSet<struct AGPCharacterBase*>*/char ThreatenEnemies[0x50]; // 0x16e0(0x50)
	char pad_1730[0xc]; // 0x1730(0x0c)
	bool bPivotCameraMode; // 0x173c(0x01)
	char pad_173D[0xf]; // 0x173d(0x0f)
	bool EnableLocomotionTransitionAnimation; // 0x174c(0x01)
	char pad_174D[0x23]; // 0x174d(0x23)
	float FootStepMinInterval; // 0x1770(0x04)
	char pad_1774[0x4]; // 0x1774(0x04)
	float SprintIntervalAfterFire; // 0x1778(0x04)
	char pad_177C[0x4]; // 0x177c(0x04)
	float FireIntervalAfterSprint; // 0x1780(0x04)
	char pad_1784[0x8]; // 0x1784(0x08)
	float WeaponIndependentFOV; // 0x178c(0x04)
	float FOVReferenceAspect; // 0x1790(0x04)
	float ActualAppliedFov; // 0x1794(0x04)
	bool bForceHideFPPMesh; // 0x1798(0x01)
	char pad_1799[0x3]; // 0x1799(0x03)
	float LastCrouchStartTime; // 0x179c(0x04)
	float LastProneStartTime; // 0x17a0(0x04)
	float LastCrouchInDifferentLocationTime; // 0x17a4(0x04)
	float LastProneInDifferentLocationTime; // 0x17a8(0x04)
	struct FVector LastCrouchLocation; // 0x17ac(0x0c)
	struct FVector LastProneLocation; // 0x17b8(0x0c)
	char pad_17C4[0x4]; // 0x17c4(0x04)
	/*struct FMulticastInlineDelegate*/char OnCharacterReloadAmmo[0x10]; // 0x17c8(0x10)
	struct UGPVehicleDataComponent* VehicleDataComponent; // 0x17d8(0x08)
	struct UGPVaultAndClimbComponent* VaultAndClimbComponent; // 0x17e0(0x08)
	struct FName AttachParentSocketName; // 0x17e8(0x08)
	struct FTransform AttachParentSocketTransform; // 0x17f0(0x30)
	struct FTransform ThisActorLocalTransform; // 0x1820(0x30)
	float ImpendingDeathGodTime; // 0x1850(0x04)
	float ImpendingDeathStartTime; // 0x1854(0x04)
	float ContinuousJumpPunishTime; // 0x1858(0x04)
	char pad_185C[0x4]; // 0x185c(0x04)
	struct TArray<float> JumpZVelocityPunishScale; // 0x1860(0x10)
	float JumpLandedTime; // 0x1870(0x04)
	int32_t ContinuousJumpNumber; // 0x1874(0x04)
	struct FVector2D MovementInput; // 0x1878(0x08)
	struct FVector WorldVelocity; // 0x1880(0x0c)
	struct FVector LastFrameWorldPosition; // 0x188c(0x0c)
	int32_t CurLightBeamEffectNum; // 0x1898(0x04)
	char pad_189C[0x4]; // 0x189c(0x04)
	uint64_t CurOpenFlashLightGUID; // 0x18a0(0x08)
	int32_t CurOpenFlashLightNum; // 0x18a8(0x04)
	bool bUseConstMovementSpeed; // 0x18ac(0x01)
	char pad_18AD[0x7]; // 0x18ad(0x07)
	struct FName MeleeBoneName; // 0x18b4(0x08)
	char pad_18BC[0xc]; // 0x18bc(0x0c)
	struct TMap<uint64_t, float> BeMarkingByEnemyArray; // 0x18c8(0x50)
	struct TMap<uint64_t, float> BeMarkingEnemyGetScoreMap; // 0x1918(0x50)
	bool bNeedFootstepCompensation; // 0x1968(0x01)
	char pad_1969[0x3]; // 0x1969(0x03)
	float MeleeTraceRange_Override; // 0x196c(0x04)
	int64_t AttackerValueId_Override; // 0x1970(0x08)
	bool bStingerMissileCanLock; // 0x1978(0x01)
	bool bEMPEffect; // 0x1979(0x01)
	enum class EBreathState BreathState; // 0x197a(0x01)
	char pad_197B[0x5]; // 0x197b(0x05)
	struct UBreathInfo* BreathInfo; // 0x1980(0x08)
	struct UGPGameplayConfigComponent* GPGameplayConfigComponent; // 0x1988(0x08)
	struct UClass* DFMGameplayConfigClass; // 0x1990(0x08)
	char pad_1998[0x18]; // 0x1998(0x18)
	struct UGPNotifyTeammatesManager* NotifyTeammatesManager; // 0x19b0(0x08)
	struct UGPCharacterDetectEffectComponent* DetectEffectComponent2; // 0x19b8(0x08)
	struct UGPCharacterBubbleComponent* BubbleComponent2; // 0x19c0(0x08)
	struct UGPAbilitySharedEffectComponent* SharedEffectComponent; // 0x19c8(0x08)
	float WalkStepMaxSpeed; // 0x19d0(0x04)
	float RunStepMaxSpeed; // 0x19d4(0x04)
	float SprintStepMaxSpeed; // 0x19d8(0x04)
	struct FName BlockTheLight_BeingFlashed; // 0x19dc(0x08)
	int32_t AttackerValueId_FlashHitMark; // 0x19e4(0x04)
	struct AFlashLightCanvasActor* FlashLightCanvas; // 0x19e8(0x08)
	struct TMap<struct UNetConnection*, uint32_t> ForceVisibleConnectionMap; // 0x19f0(0x50)
	struct FGPCollisionManager CharacterCollisionManager; // 0x1a40(0x38)
	bool bIsRaiseWatch; // 0x1a78(0x01)
	char pad_1A79[0x3]; // 0x1a79(0x03)
	float MaxHealthCurrent; // 0x1a7c(0x04)
	float MaxHealthBase; // 0x1a80(0x04)
	char pad_1A84[0x1c]; // 0x1a84(0x1c)
	float ReplicatedBrakingAcceleration; // 0x1aa0(0x04)
	bool DebugFPPPOV; // 0x1aa4(0x01)
	char pad_1AA5[0xb]; // 0x1aa5(0x0b)
	bool Enable3PPreAppearance; // 0x1ab0(0x01)
	char pad_1AB1[0x1]; // 0x1ab1(0x01)
	bool bIsInspecting; // 0x1ab2(0x01)
	char pad_1AB3[0x5]; // 0x1ab3(0x05)
	struct FTimerHandle WeaponInspectTimerHandle; // 0x1ab8(0x08)
	int64_t PreWeaponPosition; // 0x1ac0(0x08)
	char pad_1AC8[0x8]; // 0x1ac8(0x08)

	void WeaponFOV(float NewFOV, float ReferenceAspect); // Function GPGameplay.GPCharacter.WeaponFOV // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x35c9f90
	void UpdateMeshLODInfo(struct UObject* sMesh, enum class EEquipmentType Type); // Function GPGameplay.GPCharacter.UpdateMeshLODInfo // (Final|Native|Public) // @ game+0x35c9ed0
	void UpdateJumpZVelocity(); // Function GPGameplay.GPCharacter.UpdateJumpZVelocity // (Final|Native|Public) // @ game+0x35c9eb0
	void UpdateAllMeshLODInfo(); // Function GPGameplay.GPCharacter.UpdateAllMeshLODInfo // (Final|Native|Public) // @ game+0x35c9e90
	void UnPlayerProne(); // Function GPGameplay.GPCharacter.UnPlayerProne // (Native|Public|BlueprintCallable) // @ game+0x35c9e70
	void UnPlayerCrouch(); // Function GPGameplay.GPCharacter.UnPlayerCrouch // (Native|Public|BlueprintCallable) // @ game+0x35c9e50
	void TickPlayerViewRotation(float DeltaTime); // Function GPGameplay.GPCharacter.TickPlayerViewRotation // (Final|Native|Public) // @ game+0x35c9dd0
	void TestAttachParentSocket(); // Function GPGameplay.GPCharacter.TestAttachParentSocket // (Final|Native|Public) // @ game+0x35c9db0
	void SyncAnyAngleStopState(bool StopState, struct FVector StopMaker); // Function GPGameplay.GPCharacter.SyncAnyAngleStopState // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x35c9c30
	void ShowDebugResetWalkingPosition(struct FVector ShowLastWalkingPosition, struct FColor ShowColor); // Function GPGameplay.GPCharacter.ShowDebugResetWalkingPosition // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x35c9b60
	void SetWeaponInspectDuration(float Duration); // Function GPGameplay.GPCharacter.SetWeaponInspectDuration // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35c9ae0
	void SetNormalFireTime(struct AGPCharacter* Self); // Function GPGameplay.GPCharacter.SetNormalFireTime // (Final|Native|Public) // @ game+0x35c9920
	void SetMovementVelocityScaler(float scaler); // Function GPGameplay.GPCharacter.SetMovementVelocityScaler // (Final|Native|Public|BlueprintCallable) // @ game+0x35c98a0
	void SetLogicPose(enum class ECharacterLogicPoseType InLogicPose); // Function GPGameplay.GPCharacter.SetLogicPose // (Final|Native|Public) // @ game+0x35c9820
	void SetItemInspectDuration(float Duration); // Function GPGameplay.GPCharacter.SetItemInspectDuration // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35c97a0
	void SetIndependentFOV(struct UPrimitiveComponent* TargetMesh); // Function GPGameplay.GPCharacter.SetIndependentFOV // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x35c9720
	void SetEnableRelaxIdleState(bool bEnable); // Function GPGameplay.GPCharacter.SetEnableRelaxIdleState // (Final|Native|Public|BlueprintCallable) // @ game+0x35c94e0
	void SetEnablePhysics(bool bEnable); // Function GPGameplay.GPCharacter.SetEnablePhysics // (Final|Native|Public|BlueprintCallable) // @ game+0x35c9450
	void SetCharacterHiddenAll(bool bHide); // Function GPGameplay.GPCharacter.SetCharacterHiddenAll // (Native|Public|BlueprintCallable) // @ game+0x35c93c0
	void SetBlackBoardDebugBitArray(struct FName BitName, bool Value); // Function GPGameplay.GPCharacter.SetBlackBoardDebugBitArray // (Final|Exec|Native|Public) // @ game+0x35c92f0
	void ServerWantsToMoveRight1P(bool Move); // Function GPGameplay.GPCharacter.ServerWantsToMoveRight1P // (Net|Native|Event|Public|NetServer) // @ game+0x35c9260
	void ServerWantsToMove1P(bool Move); // Function GPGameplay.GPCharacter.ServerWantsToMove1P // (Net|Native|Event|Public|NetServer) // @ game+0x35c91d0
	void ServerUseSupportPack(struct AActor* Actor, enum class ESupportType SupportType); // Function GPGameplay.GPCharacter.ServerUseSupportPack // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35c9100
	void ServerSwitchBreathState(enum class EBreathState CurState); // Function GPGameplay.GPCharacter.ServerSwitchBreathState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35c9080
	void ServerStartPerformAction(struct FName ResId); // Function GPGameplay.GPCharacter.ServerStartPerformAction // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35c8ff0
	void ServerSetPreWeaponPosition(int64_t pos); // Function GPGameplay.GPCharacter.ServerSetPreWeaponPosition // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35c8f60
	void ServerSetMoveMentActiveAnd2Clinet(bool bMovementActive); // Function GPGameplay.GPCharacter.ServerSetMoveMentActiveAnd2Clinet // (Final|Native|Public) // @ game+0x35c8ed0
	void ServerSetActionDuration(float Duration); // Function GPGameplay.GPCharacter.ServerSetActionDuration // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35c8c40
	void ServerForceResetIdleState(); // Function GPGameplay.GPCharacter.ServerForceResetIdleState // (Final|Native|Public|BlueprintCallable) // @ game+0x35c8c20
	void ServerEndPerformAction(); // Function GPGameplay.GPCharacter.ServerEndPerformAction // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35c8c00
	void Server2ClinetSetMoveMentActive(bool bMovementActive); // Function GPGameplay.GPCharacter.Server2ClinetSetMoveMentActive // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x35c8b70
	void SendClientKillZVolumeDebugInfo(struct FVector BoxSize, struct FVector BoxOrigin); // Function GPGameplay.GPCharacter.SendClientKillZVolumeDebugInfo // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x35c8a90
	void SceneFOV(float NewFOV); // Function GPGameplay.GPCharacter.SceneFOV // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x35c8a10
	void ResetToLastWalkingPosition(bool bResetCharacterFSM); // Function GPGameplay.GPCharacter.ResetToLastWalkingPosition // (Final|Exec|Native|Public) // @ game+0x35c8980
	void RequestStaminaChange(enum class EStaminaIndependentChangeType StaminaChangeType, float DeltaSeconds); // Function GPGameplay.GPCharacter.RequestStaminaChange // (Final|Native|Public|BlueprintCallable) // @ game+0x35c88a0
	void RemovePreStateForRTTCheck(); // Function GPGameplay.GPCharacter.RemovePreStateForRTTCheck // (Native|Public) // @ game+0x35c8880
	void ReliableClientVeryShortAdjustPosition(float Timestamp, struct FVector NewLoc, struct UPrimitiveComponent* NewBase, struct FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode, struct FVector NewWorldLoc); // Function GPGameplay.GPCharacter.ReliableClientVeryShortAdjustPosition // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x35c85d0
	void ReliableClientAdjustRootMotionSourcePosition(float Timestamp, struct FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, struct FVector ServerLoc, struct FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, struct UPrimitiveComponent* ServerBase, struct FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode, struct FVector NewWorldLoc); // Function GPGameplay.GPCharacter.ReliableClientAdjustRootMotionSourcePosition // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x35c80b0
	void ReliableClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, struct FVector ServerLoc, struct FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, struct UPrimitiveComponent* ServerBase, struct FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode, struct FVector NewWorldLoc); // Function GPGameplay.GPCharacter.ReliableClientAdjustRootMotionPosition // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x35c7cc0
	void ReliableClientAdjustPosition(float Timestamp, struct FVector NewLoc, struct FVector NewVel, struct UPrimitiveComponent* NewBase, struct FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode, struct FVector NewWorldLoc); // Function GPGameplay.GPCharacter.ReliableClientAdjustPosition // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x35c7990
	void RecvClientResetWalkingPosition(enum class EResetWalkingPositionType Type, float LeftCDTime); // Function GPGameplay.GPCharacter.RecvClientResetWalkingPosition // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x35c7820
	void PlayFPPFootStep(struct UPhysicalMaterial* PhysMat, enum class EGPAudioFootSoundType AudioType); // Function GPGameplay.GPCharacter.PlayFPPFootStep // (Native|Public|BlueprintCallable) // @ game+0x35c7710
	void PlayerProne(); // Function GPGameplay.GPCharacter.PlayerProne // (Native|Public|BlueprintCallable) // @ game+0x35c7800
	void PlayerCrouch(); // Function GPGameplay.GPCharacter.PlayerCrouch // (Native|Public|BlueprintCallable) // @ game+0x35c77e0
	void OnXPPChange(bool bNewFPP); // Function GPGameplay.GPCharacter.OnXPPChange // (Final|Native|Public) // @ game+0x35c7680
	void OnWeaponInspectEnd(); // Function GPGameplay.GPCharacter.OnWeaponInspectEnd // (Final|Native|Public) // @ game+0x35c7660
	void OnWeaponInspectBegin(float InspectDuration); // Function GPGameplay.GPCharacter.OnWeaponInspectBegin // (Final|Native|Public) // @ game+0x35c75e0
	void OnRep_LogicPoseChanged(); // Function GPGameplay.GPCharacter.OnRep_LogicPoseChanged // (Final|Native|Public) // @ game+0x35c7010
	void OnRep_IsChangeCapsuleWhenJump(); // Function GPGameplay.GPCharacter.OnRep_IsChangeCapsuleWhenJump // (Native|Public) // @ game+0x35c6ff0
	void OnRep_IsBeingRescueReplicate(); // Function GPGameplay.GPCharacter.OnRep_IsBeingRescueReplicate // (Native|Public) // @ game+0x35c6fd0
	void OnRep_CharacterCollisionManager(); // Function GPGameplay.GPCharacter.OnRep_CharacterCollisionManager // (Final|Native|Protected) // @ game+0x35c6fb0
	void OnRep_BreathState(); // Function GPGameplay.GPCharacter.OnRep_BreathState // (Final|Native|Public) // @ game+0x35c6f90
	void OnHeroIdChanged(uint64_t HeroID); // Function GPGameplay.GPCharacter.OnHeroIdChanged // (Native|Public) // @ game+0x35c6f00
	void OnEndVaultNotify(); // Function GPGameplay.GPCharacter.OnEndVaultNotify // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x35c6ee0
	void OnClientResetWalkingPosition(); // Function GPGameplay.GPCharacter.OnClientResetWalkingPosition // (Final|Native|Public) // @ game+0x35c6ec0
	bool OnCheckCharacterInStuck(struct FVector CharacterLocation); // Function GPGameplay.GPCharacter.OnCheckCharacterInStuck // (Final|Native|Public|HasDefaults) // @ game+0x35c6e20
	bool OnCheckCharacterCanResetWalkingPosition(struct FVector CharacterLocation); // Function GPGameplay.GPCharacter.OnCheckCharacterCanResetWalkingPosition // (Final|Native|Public|HasDefaults) // @ game+0x35c6d80
	void OnCharacterBeDrop(); // Function GPGameplay.GPCharacter.OnCharacterBeDrop // (Native|Public|BlueprintCallable) // @ game+0x35c6d60
	void OnCharacterBeCarry(); // Function GPGameplay.GPCharacter.OnCharacterBeCarry // (Native|Public|BlueprintCallable) // @ game+0x35c6d40
	void OnBreathStateChanged(enum class EBreathState PreState, enum class EBreathState CurState); // Function GPGameplay.GPCharacter.OnBreathStateChanged // (Native|Public) // @ game+0x35c6c80
	void OnBeginVaultNotify(char InVaultAnimType, char InObstacleHeightType); // Function GPGameplay.GPCharacter.OnBeginVaultNotify // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x35c6bc0
	void NotifyWantSpeak(struct FString str, struct FString Voice); // Function GPGameplay.GPCharacter.NotifyWantSpeak // (Final|Native|Public) // @ game+0x35c6a80
	void MoveRight(float Value); // Function GPGameplay.GPCharacter.MoveRight // (Native|Public|BlueprintCallable) // @ game+0x35c6a00
	void MoveForward(float Value); // Function GPGameplay.GPCharacter.MoveForward // (Native|Public|BlueprintCallable) // @ game+0x35c6980
	void JudgeInBattling(/*struct FHitResult& HitInfo, struct FVector& StartLocation, struct TScriptInterface<IWeaponInterface> WeaponOwner*/); // Function GPGameplay.GPCharacter.JudgeInBattling // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x35c6800
	bool IsWeaponMeshCompositeFinished(); // Function GPGameplay.GPCharacter.IsWeaponMeshCompositeFinished // (Native|Public) // @ game+0x35c67d0
	bool IsUsingTelescope(); // Function GPGameplay.GPCharacter.IsUsingTelescope // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35c67a0
	bool IsSequenceBinding(); // Function GPGameplay.GPCharacter.IsSequenceBinding // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35c66b0
	bool IsRaiseWatch(); // Function GPGameplay.GPCharacter.IsRaiseWatch // (Final|Native|Public|BlueprintCallable) // @ game+0x35c6680
	bool IsPawnInVehicleLeanOut(); // Function GPGameplay.GPCharacter.IsPawnInVehicleLeanOut // (Final|Native|Public|BlueprintCallable) // @ game+0x35c6650
	bool IsOperateAbilityVehicle(); // Function GPGameplay.GPCharacter.IsOperateAbilityVehicle // (Final|Native|Public|BlueprintCallable) // @ game+0x35c6620
	bool IsNeedFPPFootStep(); // Function GPGameplay.GPCharacter.IsNeedFPPFootStep // (Native|Public|BlueprintCallable) // @ game+0x35c6570
	bool IsInPain(); // Function GPGameplay.GPCharacter.IsInPain // (Native|Public|BlueprintCallable) // @ game+0x35c6540
	bool IsInLegFracture(); // Function GPGameplay.GPCharacter.IsInLegFracture // (Native|Public|BlueprintCallable) // @ game+0x35c6510
	bool IsInGiantTower(); // Function GPGameplay.GPCharacter.IsInGiantTower // (Native|Public|BlueprintCallable) // @ game+0x35c64e0
	bool IsInDoubleLegFractureFromBlackboard(); // Function GPGameplay.GPCharacter.IsInDoubleLegFractureFromBlackboard // (Native|Public|BlueprintCallable) // @ game+0x35c64b0
	bool IsInDoubleLegFracture(); // Function GPGameplay.GPCharacter.IsInDoubleLegFracture // (Native|Public|BlueprintCallable) // @ game+0x35c6480
	bool IsInDoubleArmFracture(); // Function GPGameplay.GPCharacter.IsInDoubleArmFracture // (Native|Public|BlueprintCallable) // @ game+0x35c6450
	bool IsInClimbLadder(); // Function GPGameplay.GPCharacter.IsInClimbLadder // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35c6420
	bool IsInBleeding(); // Function GPGameplay.GPCharacter.IsInBleeding // (Native|Public|BlueprintCallable) // @ game+0x35c63f0
	bool IsInArmFracture(); // Function GPGameplay.GPCharacter.IsInArmFracture // (Native|Public|BlueprintCallable) // @ game+0x35c63c0
	bool IsGoldC301(); // Function GPGameplay.GPCharacter.IsGoldC301 // (Native|Public|BlueprintCallable) // @ game+0x35c6390
	bool IsDriver(); // Function GPGameplay.GPCharacter.IsDriver // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35c6360
	bool IsCarryingBody(); // Function GPGameplay.GPCharacter.IsCarryingBody // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x35c6330
	bool IsCarringBox(); // Function GPGameplay.GPCharacter.IsCarringBox // (Native|Public|BlueprintCallable) // @ game+0x35c6300
	struct FVector GetWorldVelocity(); // Function GPGameplay.GPCharacter.GetWorldVelocity // (Final|Native|Public|HasDefaults) // @ game+0x35c61a0
	struct UModularWeaponDataComponentAppearance* GetWeaponModularWeaponDataComponentAppearance(); // Function GPGameplay.GPCharacter.GetWeaponModularWeaponDataComponentAppearance // (Native|Public) // @ game+0x35c6170
	struct FRotator GetViewRotOffset(); // Function GPGameplay.GPCharacter.GetViewRotOffset // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x35c6130
	struct APawn* GetVehicle(); // Function GPGameplay.GPCharacter.GetVehicle // (Final|Native|Public|BlueprintCallable) // @ game+0x35c6100
	uint64_t GetUin(); // Function GPGameplay.GPCharacter.GetUin // (Native|Public|Const) // @ game+0x35c60c0
	enum class ECharacterPart GetTargetBodyPartShootVisibility(struct ACHARACTER* otherCharacter, bool bDebug); // Function GPGameplay.GPCharacter.GetTargetBodyPartShootVisibility // (Native|Public|BlueprintCallable) // @ game+0x35c5c30
	struct FName GetSeatName(); // Function GPGameplay.GPCharacter.GetSeatName // (Final|Native|Public|BlueprintCallable) // @ game+0x35c5bd0
	int64_t GetPreWeaponPosition(); // Function GPGameplay.GPCharacter.GetPreWeaponPosition // (Final|Native|Public) // @ game+0x35c5ba0
	struct FRotator GetPlayerViewRotation(bool bUseLerped); // Function GPGameplay.GPCharacter.GetPlayerViewRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x35c5af0
	struct FText GetPlayerNameOverride(); // Function GPGameplay.GPCharacter.GetPlayerNameOverride // (Native|Public) // @ game+0x35c5a50
	struct FString GetPlayerName(); // Function GPGameplay.GPCharacter.GetPlayerName // (Native|Public) // @ game+0x35c59d0
	struct APawn* GetParentAttachment(); // Function GPGameplay.GPCharacter.GetParentAttachment // (Final|Native|Public|BlueprintCallable) // @ game+0x35c59a0
	void GetOutLineMeshes(struct TArray<struct UMeshComponent*>& OutLineMeshs); // Function GPGameplay.GPCharacter.GetOutLineMeshes // (Native|Public|HasOutParms) // @ game+0x35c58c0
	struct UBreathInfo* GetOrCreateBreathInfo(); // Function GPGameplay.GPCharacter.GetOrCreateBreathInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x35c5890
	struct APawn* GetOffVehicle(); // Function GPGameplay.GPCharacter.GetOffVehicle // (Final|Native|Public|BlueprintCallable) // @ game+0x35c5860
	struct AActor* GetOffControlledVehicle(); // Function GPGameplay.GPCharacter.GetOffControlledVehicle // (Final|Native|Public|BlueprintCallable) // @ game+0x35c5830
	void GetOffAbilityVehicle(); // Function GPGameplay.GPCharacter.GetOffAbilityVehicle // (Final|Native|Public|BlueprintCallable) // @ game+0x35c5800
	struct FString GetLogInfo(); // Function GPGameplay.GPCharacter.GetLogInfo // (Native|Public) // @ game+0x35c5780
	struct FName GetLastSeatName(); // Function GPGameplay.GPCharacter.GetLastSeatName // (Final|Native|Public|BlueprintCallable) // @ game+0x35c5740
	float GetLastEnermyHitTime(); // Function GPGameplay.GPCharacter.GetLastEnermyHitTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x35c5710
	float GetItemSearchSpeedRate(); // Function GPGameplay.GPCharacter.GetItemSearchSpeedRate // (Native|Public|BlueprintCallable) // @ game+0x35c56d0
	struct FVector GetFocusPoint(); // Function GPGameplay.GPCharacter.GetFocusPoint // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x35c5600
	struct APawn* GetDieOnVehicle(); // Function GPGameplay.GPCharacter.GetDieOnVehicle // (Final|Native|Public|BlueprintCallable) // @ game+0x35c55d0
	int32_t GetCurrentTeamID(); // Function GPGameplay.GPCharacter.GetCurrentTeamID // (Native|Public) // @ game+0x35c55a0
	float GetCurrentRoleLoadValue(); // Function GPGameplay.GPCharacter.GetCurrentRoleLoadValue // (Native|Public) // @ game+0x35c5560
	uint64_t GetCurrentClientCharacterAvatarID(); // Function GPGameplay.GPCharacter.GetCurrentClientCharacterAvatarID // (Native|Public) // @ game+0x35c5530
	uint64_t GetCurrentCharacterHeroID(); // Function GPGameplay.GPCharacter.GetCurrentCharacterHeroID // (Native|Public) // @ game+0x35c5500
	struct FVector GetBodyPartLocation(enum class ECharacterPart BodyPart); // Function GPGameplay.GPCharacter.GetBodyPartLocation // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x35c5240
	struct AActor* GetAbilityVehicle(); // Function GPGameplay.GPCharacter.GetAbilityVehicle // (Final|Native|Public|BlueprintCallable) // @ game+0x35c5210
	void ForbitAbility(int32_t AbilityId, float Time); // Function GPGameplay.GPCharacter.ForbitAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x35c5000
	void ClientWantsToMoveRight1P(bool Move); // Function GPGameplay.GPCharacter.ClientWantsToMoveRight1P // (Net|Native|Event|NetMulticast|Public) // @ game+0x35c4de0
	void ClientWantsToMove1P(bool Move); // Function GPGameplay.GPCharacter.ClientWantsToMove1P // (Net|Native|Event|NetMulticast|Public) // @ game+0x35c4d50
	void ClientResetWalkingPosition(bool bOnlyShowDebug); // Function GPGameplay.GPCharacter.ClientResetWalkingPosition // (Final|Exec|Native|Public) // @ game+0x35c4cc0
	void ClientNotifyKillPlayer(struct FKillInfo NewKillInfo); // Function GPGameplay.GPCharacter.ClientNotifyKillPlayer // (Net|Native|Event|Public|NetClient) // @ game+0x35c4c10
	void ClientForceResetIdleState(); // Function GPGameplay.GPCharacter.ClientForceResetIdleState // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x35c4bf0
	void ClientEndPerformAction(float Value); // Function GPGameplay.GPCharacter.ClientEndPerformAction // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x35c4b70
	void Client2ServerResetWalkingPosition(struct FVector ClientLocation, bool bOnlyCheckStuck, bool bOnlyShowDebug); // Function GPGameplay.GPCharacter.Client2ServerResetWalkingPosition // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x35c4a50
	void Client2ServerCheatWalk(); // Function GPGameplay.GPCharacter.Client2ServerCheatWalk // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35c4a30
	void Client2ServerCheatGhost(); // Function GPGameplay.GPCharacter.Client2ServerCheatGhost // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35c4a10
	void Client2ServerCheatFly(); // Function GPGameplay.GPCharacter.Client2ServerCheatFly // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35c49f0
	void Client2ServerCharacterBeingFlashed(struct AGPCharacter* CHARACTER); // Function GPGameplay.GPCharacter.Client2ServerCharacterBeingFlashed // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x35c4960
	void ClearFOV(); // Function GPGameplay.GPCharacter.ClearFOV // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x35c4920
	struct TArray<enum class ECharacterPart> CheckTargetBodyPartShootVisibility(struct ACHARACTER* otherCharacter, bool bDebug); // Function GPGameplay.GPCharacter.CheckTargetBodyPartShootVisibility // (Native|Public|BlueprintCallable) // @ game+0x35c47c0
	bool CanUseAbility(int32_t AbilityId); // Function GPGameplay.GPCharacter.CanUseAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x35c4730
	bool CanRotationInVihicle(); // Function GPGameplay.GPCharacter.CanRotationInVihicle // (Final|Native|Public|BlueprintCallable) // @ game+0x35c4700
	void CalcWorldVelocity(float DeltaTime); // Function GPGameplay.GPCharacter.CalcWorldVelocity // (Final|Native|Public) // @ game+0x35c4680
	void AddPreStateForRTTCheck(enum class EFSMCharacterState FSMState, float PreStateRTTTime); // Function GPGameplay.GPCharacter.AddPreStateForRTTCheck // (Native|Public) // @ game+0x35c45c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSafeHouseCharacter
// Size: 0xa98 (Inherited: 0xaa0)
class AGPSafeHouseCharacter : public AGPSafeHouseCharacterBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponSkeletalMeshComponent
// Size: 0x1380 (Inherited: 0x1380)
class UWeaponSkeletalMeshComponent : public UGPSkeletalMeshComponentExtra {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPFPPSkeletalMeshComponent
// Size: 0x1380 (Inherited: 0x1380)
class UGPFPPSkeletalMeshComponent : public UGPSkeletalMeshComponentExtra {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.LauncherDataComponentAnim
// Size: 0xab8 (Inherited: 0xab0)
class ULauncherDataComponentAnim : public UModularWeaponDataComponentAnim {
public:

	char pad_AB0[0x8]; // 0xab0(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponBowDataComponentAnim
// Size: 0xbe8 (Inherited: 0xab0)
class UWeaponBowDataComponentAnim : public UModularWeaponDataComponentAnim {
public:

	float Fire30Time; // 0xab0(0x04)
	float Fire60Time; // 0xab4(0x04)
	float ChargingAnimTime; // 0xab8(0x04)
	char pad_ABC[0x4]; // 0xabc(0x04)
	struct UAnimMontage* CharBowFire30Montage; // 0xac0(0x08)
	struct UAnimMontage* CharBowFire60Montage; // 0xac8(0x08)
	struct UAnimMontage* CharBowFullFireMontage; // 0xad0(0x08)
	struct UAnimMontage* CharBowAimFire30Montage; // 0xad8(0x08)
	struct UAnimMontage* CharBowAimFire60Montage; // 0xae0(0x08)
	struct UAnimMontage* CharBowAimFullFireMontage; // 0xae8(0x08)
	struct UAnimMontage* CharBowProneFire30Montage; // 0xaf0(0x08)
	struct UAnimMontage* CharBowProneFire60Montage; // 0xaf8(0x08)
	struct UAnimMontage* CharBowProneFullFireMontage; // 0xb00(0x08)
	struct UAnimSequence* CharPutWeapon_FireEnd; // 0xb08(0x08)
	struct UAnimSequence* CharFullBowPutWeapon_FireEnd; // 0xb10(0x08)
	struct UAnimSequenceBase* BowFire30Anim; // 0xb18(0x08)
	struct UAnimSequenceBase* BowFire60Anim; // 0xb20(0x08)
	struct UAnimSequenceBase* BowFullFireAnim; // 0xb28(0x08)
	struct UAnimSequenceBase* BowAimFire30Anim; // 0xb30(0x08)
	struct UAnimSequenceBase* BowAimFire60Anim; // 0xb38(0x08)
	struct UAnimSequenceBase* BowAimFullFireAnim; // 0xb40(0x08)
	struct UAnimSequenceBase* BowIdle2Aim; // 0xb48(0x08)
	struct UAnimSequenceBase* BowAim2Idle; // 0xb50(0x08)
	struct UAnimSequenceBase* BowProneFire30Anim; // 0xb58(0x08)
	struct UAnimSequenceBase* BowProneFire60Anim; // 0xb60(0x08)
	struct UAnimSequenceBase* BowProneFullFireAnim; // 0xb68(0x08)
	struct UAnimSequence* BowFullAimToIdle; // 0xb70(0x08)
	struct UAnimSequence* BowFullIdleToAim; // 0xb78(0x08)
	struct UAnimSequenceBase* BowPutWeapon_Empty; // 0xb80(0x08)
	struct UAnimMontage* BowChargingMontage; // 0xb88(0x08)
	struct UAnimSequenceBase* BowFireAnim_3p; // 0xb90(0x08)
	struct UAnimSequenceBase* BowProneFireAnim_3p; // 0xb98(0x08)
	struct UAnimMontage* CharFireMontage_3P; // 0xba0(0x08)
	struct UAnimMontage* CharProneFireMontage_3P; // 0xba8(0x08)
	char pad_BB0[0x10]; // 0xbb0(0x10)
	struct UFXResourceContainerComponent* ChargingEffectComp; // 0xbc0(0x08)
	struct UFXResourceContainerComponent* FireEffectComp; // 0xbc8(0x08)
	char pad_BD0[0x18]; // 0xbd0(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponChargeGunDataComponentAnim
// Size: 0xae0 (Inherited: 0xab0)
class UWeaponChargeGunDataComponentAnim : public UModularWeaponDataComponentAnim {
public:

	char pad_AB0[0x10]; // 0xab0(0x10)
	struct UFXResourceContainerComponent* ChargingEffectComp; // 0xac0(0x08)
	char pad_AC8[0x8]; // 0xac8(0x08)
	struct UFXResourceContainerComponent* FireEffectComp; // 0xad0(0x08)
	char pad_AD8[0x8]; // 0xad8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponMeleeDataComponentAnim
// Size: 0xae0 (Inherited: 0xab0)
class UWeaponMeleeDataComponentAnim : public UModularWeaponDataComponentAnim {
public:

	char pad_AB0[0x30]; // 0xab0(0x30)

	void OnBulletHitForDamage(struct AGPWeaponBulletBase* Bullet, struct FHitResult& HitResult); // Function GPGameplay.WeaponMeleeDataComponentAnim.OnBulletHitForDamage // (Native|Public|HasOutParms) // @ game+0x3708970
	void OnBulletHitAmbient(struct APawn* Intigator, struct FHitResult& HitReslut); // Function GPGameplay.WeaponMeleeDataComponentAnim.OnBulletHitAmbient // (Native|Public|HasOutParms) // @ game+0x3708850
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponSupportDataAnimComponnent
// Size: 0xbd8 (Inherited: 0xab0)
class UWeaponSupportDataAnimComponnent : public UModularWeaponDataComponentAnim {
public:

	/*struct TMap<enum class EWeaponAnimItemType, struct TSoftObjectPtr<UAnimSequenceBase>>*/char SpecialReloadAnim[0x50]; // 0xab0(0x50)
	/*struct TMap<enum class EWeaponAnimItemType, struct TSoftObjectPtr<UAnimSequenceBase>>*/char SpecialAimReloadAnim[0x50]; // 0xb00(0x50)
	/*struct TMap<enum class EWeaponAnimItemType, struct TSoftObjectPtr<UAnimSequenceBase>>*/char SpecialReloadWeaponAnim[0x50]; // 0xb50(0x50)
	char pad_BA0[0x10]; // 0xba0(0x10)
	struct TArray<struct UObject*> RecordAnim; // 0xbb0(0x10)
	char pad_BC0[0x10]; // 0xbc0(0x10)
	struct TWeakObjectPtr<struct UWeaponFuncComponentAimOutline> aimOutline; // 0xbd0(0x08)

	void OnAnimLoadCompleted(struct FSoftObjectPath& SoftObjectPath); // Function GPGameplay.WeaponSupportDataAnimComponnent.OnAnimLoadCompleted // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x3713440
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowableLeftDataComponentAnim
// Size: 0xa18 (Inherited: 0xa00)
class UWeaponThrowableLeftDataComponentAnim : public UWeaponThrowableDataComponentAnim {
public:

	bool bIsPlayedRightHandAnim; // 0xa00(0x01)
	char pad_A01[0x7]; // 0xa01(0x07)
	struct UAnimMontage* LastRightHandMontage; // 0xa08(0x08)
	bool bPlayEndEquip; // 0xa10(0x01)
	char pad_A11[0x7]; // 0xa11(0x07)

	void OnPostMeshHiddenChanged(); // Function GPGameplay.WeaponThrowableLeftDataComponentAnim.OnPostMeshHiddenChanged // (Final|Native|Public) // @ game+0x17621d0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponThrowUASDataComponentAnim
// Size: 0xa10 (Inherited: 0xa00)
class UWeaponThrowUASDataComponentAnim : public UWeaponThrowableDataComponentAnim {
public:

	bool bIsUASFired; // 0xa00(0x01)
	bool DisableTPMontageAnimInPreFire; // 0xa01(0x01)
	bool EnableFireWithPostIdle; // 0xa02(0x01)
	char pad_A03[0x1]; // 0xa03(0x01)
	float EndFireBlendoutTime; // 0xa04(0x04)
	float MeshTickInterval; // 0xa08(0x04)
	char pad_A0C[0x4]; // 0xa0c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemForeGWithBipod
// Size: 0x4a0 (Inherited: 0x358)
class UWeaponAdapterItemForeGWithBipod : public UWeaponAdapterItemForeGrip {
public:

	char pad_358[0x8]; // 0x358(0x08)
	struct UCompositedBipod* BipodItem; // 0x360(0x08)
	char pad_368[0x138]; // 0x368(0x138)

	void OnMeshAssetLoaded(uint64_t Guid); // Function GPGameplay.WeaponAdapterItemForeGWithBipod.OnMeshAssetLoaded // (Final|Native|Protected) // @ game+0x36b90a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemForeGWithFLight
// Size: 0x368 (Inherited: 0x358)
class UWeaponAdapterItemForeGWithFLight : public UWeaponAdapterItemForeGrip {
public:

	struct UCompositedFlashLight* FlashLightItem; // 0x358(0x08)
	char pad_360[0x8]; // 0x360(0x08)

	void OnMeshAssetLoaded(uint64_t Guid); // Function GPGameplay.WeaponAdapterItemForeGWithFLight.OnMeshAssetLoaded // (Final|Native|Protected) // @ game+0x36b9120
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemForeGWithLaser
// Size: 0x368 (Inherited: 0x358)
class UWeaponAdapterItemForeGWithLaser : public UWeaponAdapterItemForeGrip {
public:

	struct UCompositedLaser* LaserItem; // 0x358(0x08)
	char pad_360[0x8]; // 0x360(0x08)

	void OnMeshAssetLoaded(uint64_t Guid); // Function GPGameplay.WeaponAdapterItemForeGWithLaser.OnMeshAssetLoaded // (Final|Native|Protected) // @ game+0x36b91a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.WeaponAdapterItemReceiverWithScope
// Size: 0x6d0 (Inherited: 0x358)
class UWeaponAdapterItemReceiverWithScope : public UWeaponAdapterItemReceiver {
public:

	char pad_358[0x2d0]; // 0x358(0x2d0)
	struct AGPPlayerCameraManager* GPPlayerCameraManager; // 0x628(0x08)
	char pad_630[0x18]; // 0x630(0x18)
	struct UWeaponAdapterRangeScopeManager* ScopeManager; // 0x648(0x08)
	struct UMeshComponent* WeaponMeshComponent; // 0x650(0x08)
	struct UModularWeaponDataComponentAppearance* DCAppearance; // 0x658(0x08)
	struct UWeaponFuncComponentAppearance* ViewAppearance; // 0x660(0x08)
	char pad_668[0x8]; // 0x668(0x08)
	struct FTransform CacheCenterRelativeTrans; // 0x670(0x30)
	struct FTransform CacheCenterRelativeTransWitchSlopingScope; // 0x6a0(0x30)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.GPSpectatingCharacter
// Size: 0x1ad0 (Inherited: 0x1ad0)
class AGPSpectatingCharacter : public AGPCharacter {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ModularWeaponSkeletalMeshComponent
// Size: 0x1450 (Inherited: 0x1380)
class UModularWeaponSkeletalMeshComponent : public UWeaponSkeletalMeshComponent {
public:

	bool bEnableModular; // 0x1380(0x01)
	char pad_1381[0x7]; // 0x1381(0x07)
	struct FModularWeaponMergedInfo MergedInfo; // 0x1388(0x40)
	char pad_13C8[0x88]; // 0x13c8(0x88)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.ModularWeaponDynamicSkeletalMeshComponent
// Size: 0x13a0 (Inherited: 0x1380)
class UModularWeaponDynamicSkeletalMeshComponent : public UWeaponSkeletalMeshComponent {
public:

	char pad_1380[0x20]; // 0x1380(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class GPGameplay.FixedWeaponSkeletalMeshComponent
// Size: 0x1450 (Inherited: 0x1450)
class UFixedWeaponSkeletalMeshComponent : public UModularWeaponSkeletalMeshComponent {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
