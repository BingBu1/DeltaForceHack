
#ifdef _MSC_VER
	#pragma pack(push, 0x01)
#endif

namespace Dumper {
// Class Engine.ReplicationDriver
// Size: 0x30 (Inherited: 0x30)
class UReplicationDriver : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ReplicationConnectionDriver
// Size: 0x30 (Inherited: 0x30)
class UReplicationConnectionDriver : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AssetUserData
// Size: 0x30 (Inherited: 0x30)
class UAssetUserData : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AssetManager
// Size: 0x4b0 (Inherited: 0x30)
class UAssetManager : public UObject {
public:

	char pad_30[0x308]; // 0x30(0x308)
	struct TArray<struct UObject*> ObjectReferenceList; // 0x338(0x10)
	bool bIsGlobalAsyncScanEnvironment; // 0x348(0x01)
	bool bShouldGuessTypeAndName; // 0x349(0x01)
	bool bShouldUseSynchronousLoad; // 0x34a(0x01)
	bool bIsLoadingFromPakFiles; // 0x34b(0x01)
	bool bShouldAcquireMissingChunksOnLoad; // 0x34c(0x01)
	bool bOnlyCookProductionAssets; // 0x34d(0x01)
	bool bIsBulkScanning; // 0x34e(0x01)
	bool bIsPrimaryAssetDirectoryCurrent; // 0x34f(0x01)
	bool bIsManagementDatabaseCurrent; // 0x350(0x01)
	bool bUpdateManagementDatabaseAfterScan; // 0x351(0x01)
	bool bIncludeOnlyOnDiskAssets; // 0x352(0x01)
	char pad_353[0x1]; // 0x353(0x01)
	int32_t NumberOfSpawnedNotifications; // 0x354(0x04)
	char pad_358[0x158]; // 0x358(0x158)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.WorldComposition
// Size: 0x70 (Inherited: 0x30)
class UWorldComposition : public UObject {
public:

	char pad_30[0x20]; // 0x30(0x20)
	struct TArray<struct ULevelStreaming*> TilesStreaming; // 0x50(0x10)
	double TilesStreamingTimeThreshold; // 0x60(0x08)
	bool bLoadAllTilesDuringCinematic; // 0x68(0x01)
	bool bRebaseOriginIn3DSpace; // 0x69(0x01)
	bool bPhysicsStaticScene; // 0x6a(0x01)
	char pad_6B[0x1]; // 0x6b(0x01)
	float RebaseOriginDistance; // 0x6c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.World
// Size: 0x7f0 (Inherited: 0x30)
class UWorld : public UObject {
public:

	static class UWorld** GWorld; // 0x00(0x08)
	char pad_30[0x8]; // 0x30(0x08)
	struct UNetDriver* NetDriver; // 0x38(0x08)
	char pad_40[0x8]; // 0x40(0x08)
	struct ULineBatchComponent* LineBatcher; // 0x48(0x08)
	struct ULineBatchComponent* PersistentLineBatcher; // 0x50(0x08)
	struct ULineBatchComponent* ForegroundLineBatcher; // 0x58(0x08)
	struct AGameNetworkManager* NetworkManager; // 0x60(0x08)
	struct UPhysicsCollisionHandler* PhysicsCollisionHandler; // 0x68(0x08)
	struct TArray<struct UObject*> ExtraReferencedObjects; // 0x70(0x10)
	struct TArray<struct UObject*> PerModuleDataObjects; // 0x80(0x10)
	struct TArray<struct AActor*> LevelSequenceActors; // 0x90(0x10)
	struct TArray<struct ULevelStreaming*> StreamingLevels; // 0xa0(0x10)
	struct FStreamingLevelsToConsider StreamingLevelsToConsider; // 0xb0(0x28)
	struct FString StreamingLevelsPrefix; // 0xd8(0x10)
	struct ULevel* CurrentLevelPendingVisibility; // 0xe8(0x08)
	struct ULevel* CurrentLevelPendingInvisibility; // 0xf0(0x08)
	struct UDemoNetDriver* DemoNetDriver; // 0xf8(0x08)
	struct AParticleEventManager* MyParticleEventManager; // 0x100(0x08)
	struct ULevel* PersistentLevel; // 0x108(0x08)
	struct APhysicsVolume* DefaultPhysicsVolume; // 0x110(0x08)
	char pad_118[0x26]; // 0x118(0x26)
	char pad_13E_0 : 2; // 0x13e(0x01)
	char bAreConstraintsDirty : 1; // 0x13e(0x01)
	char pad_13E_3 : 5; // 0x13e(0x01)
	char pad_13F[0x1]; // 0x13f(0x01)
	struct UNavigationSystemBase* NavigationSystem; // 0x140(0x08)
	struct AGameModeBase* AuthorityGameMode; // 0x148(0x08)
	struct AGameStateBase* GameState; // 0x150(0x08)
	struct UAISystemBase* AISystem; // 0x158(0x08)
	struct UAvoidanceManager* AvoidanceManager; // 0x160(0x08)
	struct TArray<struct ULevel*> Levels; // 0x168(0x10)
	struct TArray<struct FLevelCollection> LevelCollections; // 0x178(0x10)
	char pad_188[0x8]; // 0x188(0x08)
	struct UGameInstance* OwningGameInstance; // 0x190(0x08)
	struct TArray<struct UMaterialParameterCollectionInstance*> ParameterCollectionInstances; // 0x198(0x10)
	struct UCanvas* CanvasForRenderingToTarget; // 0x1a8(0x08)
	struct UCanvas* CanvasForDrawMaterialToRenderTarget; // 0x1b0(0x08)
	char pad_1B8[0x50]; // 0x1b8(0x50)
	struct TArray<struct UActorComponent*> ComponentsThatNeedEndOfFrameUpdate; // 0x208(0x10)
	struct TArray<struct UActorComponent*> ComponentsThatNeedEndOfFrameUpdate_OnGameThread; // 0x218(0x10)
	char pad_228[0x420]; // 0x228(0x420)
	struct UWorldComposition* WorldComposition; // 0x648(0x08)
	char pad_650[0x70]; // 0x650(0x70)
	struct FWorldPSCPool PSCPool; // 0x6c0(0x58)
	char pad_718[0xd8]; // 0x718(0xd8)

	void SetWorldScale(enum class EWorldScale InWorldScale); // Function Engine.World.SetWorldScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9ecf070
	void SetSubWorldScale(enum class EWorldScale InWorldScale); // Function Engine.World.SetSubWorldScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9ecef70
	void SetMiniWorld(bool bInEnable); // Function Engine.World.SetMiniWorld // (Final|Native|Public|BlueprintCallable) // @ game+0x9ecece0
	void RestoreWorldScaleFromWorldSetting(); // Function Engine.World.RestoreWorldScaleFromWorldSetting // (Final|Native|Public|BlueprintCallable) // @ game+0x9eceb50
	void ResetSubWorldScale(); // Function Engine.World.ResetSubWorldScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9eceb30
	struct AWorldSettings* K2_GetWorldSettings(); // Function Engine.World.K2_GetWorldSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x9ece0c0
	void HandleTimelineScrubbed(); // Function Engine.World.HandleTimelineScrubbed // (Final|Native|Public) // @ game+0x9ece0a0
	enum class EWorldScale GetWorldScale(); // Function Engine.World.GetWorldScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9ece070
	bool GetMiniWorld(); // Function Engine.World.GetMiniWorld // (Final|Native|Public|BlueprintCallable) // @ game+0x9ece010
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PackageMapClient
// Size: 0x400 (Inherited: 0xe8)
class UPackageMapClient : public UPackageMap {
public:

	char pad_E8[0x318]; // 0xe8(0x318)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.OnlineBlueprintCallProxyBase
// Size: 0x30 (Inherited: 0x30)
class UOnlineBlueprintCallProxyBase : public UObject {
public:


	void Activate(); // Function Engine.OnlineBlueprintCallProxyBase.Activate // (Native|Public|BlueprintCallable) // @ game+0x8951b0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.OnlineEngineInterface
// Size: 0x30 (Inherited: 0x30)
class UOnlineEngineInterface : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.OnlineSession
// Size: 0x30 (Inherited: 0x30)
class UOnlineSession : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PlayerInput
// Size: 0x3b0 (Inherited: 0x30)
class UPlayerInput : public UObject {
public:

	char pad_30[0xf8]; // 0x30(0xf8)
	struct TArray<struct FKeyBind> DebugExecBindings; // 0x128(0x10)
	char pad_138[0x30]; // 0x138(0x30)
	struct TArray<struct FName> InvertedAxis; // 0x168(0x10)
	char pad_178[0x238]; // 0x178(0x238)

	void SetMouseSensitivity(float Sensitivity); // Function Engine.PlayerInput.SetMouseSensitivity // (Final|Exec|Native|Public) // @ game+0x9e83ab0
	void SetBind(struct FName BindName, struct FString Command); // Function Engine.PlayerInput.SetBind // (Final|Exec|Native|Public) // @ game+0x9e83420
	void InvertAxisKey(struct FKey AxisKey); // Function Engine.PlayerInput.InvertAxisKey // (Final|Exec|Native|Public) // @ game+0x9e82fa0
	void InvertAxis(struct FName AxisName); // Function Engine.PlayerInput.InvertAxis // (Final|Exec|Native|Public) // @ game+0x9e82f20
	void ClearSmoothing(); // Function Engine.PlayerInput.ClearSmoothing // (Final|Exec|Native|Public) // @ game+0x9e82a90
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CheatManager
// Size: 0x80 (Inherited: 0x30)
class UCheatManager : public UObject {
public:

	struct ADebugCameraController* DebugCameraControllerRef; // 0x30(0x08)
	struct UClass* DebugCameraControllerClass; // 0x38(0x08)
	char pad_40[0x40]; // 0x40(0x40)

	void Walk(); // Function Engine.CheatManager.Walk // (Exec|Native|Public|BlueprintCallable) // @ game+0x895960
	void ViewSelf(); // Function Engine.CheatManager.ViewSelf // (Exec|Native|Public) // @ game+0x9d9a180
	void ViewPlayer(struct FString S); // Function Engine.CheatManager.ViewPlayer // (Exec|Native|Public) // @ game+0x4a1e970
	void ViewClass(struct UClass* DesiredClass); // Function Engine.CheatManager.ViewClass // (Exec|Native|Public) // @ game+0x4970ae0
	void ViewActor(struct FName ActorName); // Function Engine.CheatManager.ViewActor // (Exec|Native|Public) // @ game+0x49709d0
	void UpdateSafeArea(); // Function Engine.CheatManager.UpdateSafeArea // (Final|Exec|Native|Public) // @ game+0x9d9a160
	void ToggleServerStatReplicatorUpdateStatNet(); // Function Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet // (Final|Exec|Native|Public) // @ game+0x9d9a140
	void ToggleServerStatReplicatorClientOverwrite(); // Function Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite // (Final|Exec|Native|Public) // @ game+0x9d9a120
	void ToggleDebugCamera(); // Function Engine.CheatManager.ToggleDebugCamera // (Exec|Native|Public) // @ game+0xaa7710
	void ToggleAILogging(); // Function Engine.CheatManager.ToggleAILogging // (Exec|Native|Public) // @ game+0x9212d0
	void TestCollisionDistance(); // Function Engine.CheatManager.TestCollisionDistance // (Exec|Native|Public) // @ game+0x9d9a100
	void Teleport(); // Function Engine.CheatManager.Teleport // (Exec|Native|Public|BlueprintCallable) // @ game+0x924260
	void Summon(struct FString ClassName); // Function Engine.CheatManager.Summon // (Exec|Native|Public) // @ game+0x9d9a030
	void StreamLevelOut(struct FName PackageName); // Function Engine.CheatManager.StreamLevelOut // (Exec|Native|Public) // @ game+0x9d5c0c0
	void StreamLevelIn(struct FName PackageName); // Function Engine.CheatManager.StreamLevelIn // (Exec|Native|Public) // @ game+0x9d584a0
	void SpawnServerStatReplicator(); // Function Engine.CheatManager.SpawnServerStatReplicator // (Final|Exec|Native|Public) // @ game+0x9d9a010
	void Slomo(float NewTimeDilation); // Function Engine.CheatManager.Slomo // (Exec|Native|Public|BlueprintCallable) // @ game+0x48e3a00
	void SetWorldOrigin(); // Function Engine.CheatManager.SetWorldOrigin // (Final|Exec|Native|Public) // @ game+0x9d99ff0
	void SetMouseSensitivityToDefault(); // Function Engine.CheatManager.SetMouseSensitivityToDefault // (Exec|Native|Public) // @ game+0x129c6f0
	void ServerToggleAILogging(); // Function Engine.CheatManager.ServerToggleAILogging // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x9d99f20
	void ReceiveInitCheatManager(); // Function Engine.CheatManager.ReceiveInitCheatManager // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveEndPlay(); // Function Engine.CheatManager.ReceiveEndPlay // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void PlayersOnly(); // Function Engine.CheatManager.PlayersOnly // (Exec|Native|Public|BlueprintCallable) // @ game+0x496f830
	void OnlyLoadLevel(struct FName PackageName); // Function Engine.CheatManager.OnlyLoadLevel // (Exec|Native|Public) // @ game+0x9d58530
	void LogLoc(); // Function Engine.CheatManager.LogLoc // (Exec|Native|Public) // @ game+0x40aad40
	void InvertMouse(); // Function Engine.CheatManager.InvertMouse // (Exec|Native|Public) // @ game+0x9d99f00
	void God(); // Function Engine.CheatManager.God // (Exec|Native|Public|BlueprintCallable) // @ game+0x8959a0
	void Ghost(); // Function Engine.CheatManager.Ghost // (Exec|Native|Public|BlueprintCallable) // @ game+0x895980
	void FreezeFrame(float Delay); // Function Engine.CheatManager.FreezeFrame // (Exec|Native|Public|BlueprintCallable) // @ game+0x624c650
	void Fly(); // Function Engine.CheatManager.Fly // (Exec|Native|Public|BlueprintCallable) // @ game+0xaa2210
	void FlushLog(); // Function Engine.CheatManager.FlushLog // (Exec|Native|Public) // @ game+0x40ab190
	void EnableDebugCamera(); // Function Engine.CheatManager.EnableDebugCamera // (Native|Protected|BlueprintCallable) // @ game+0x9d99ee0
	void DumpVoiceMutingState(); // Function Engine.CheatManager.DumpVoiceMutingState // (Exec|Native|Public) // @ game+0x48e3160
	void DumpPartyState(); // Function Engine.CheatManager.DumpPartyState // (Exec|Native|Public) // @ game+0x9d99ec0
	void DumpOnlineSessionState(); // Function Engine.CheatManager.DumpOnlineSessionState // (Exec|Native|Public) // @ game+0x9d99ea0
	void DumpChatState(); // Function Engine.CheatManager.DumpChatState // (Exec|Native|Public) // @ game+0x9d99e80
	void DisableDebugCamera(); // Function Engine.CheatManager.DisableDebugCamera // (Native|Protected|BlueprintCallable) // @ game+0x9d99e60
	void DestroyTarget(); // Function Engine.CheatManager.DestroyTarget // (Exec|Native|Public|BlueprintCallable) // @ game+0x4081b80
	void DestroyServerStatReplicator(); // Function Engine.CheatManager.DestroyServerStatReplicator // (Final|Exec|Native|Public) // @ game+0x9d99e40
	void DestroyPawns(struct UClass* aClass); // Function Engine.CheatManager.DestroyPawns // (Exec|Native|Public) // @ game+0x36a7e30
	void DestroyAllPawnsExceptTarget(); // Function Engine.CheatManager.DestroyAllPawnsExceptTarget // (Exec|Native|Public) // @ game+0xaa9850
	void DestroyAll(struct UClass* aClass); // Function Engine.CheatManager.DestroyAll // (Exec|Native|Public) // @ game+0xcb2b40
	void DebugCapsuleSweepSize(float HalfHeight, float radius); // Function Engine.CheatManager.DebugCapsuleSweepSize // (Exec|Native|Public) // @ game+0x9d99d70
	void DebugCapsuleSweepPawn(); // Function Engine.CheatManager.DebugCapsuleSweepPawn // (Exec|Native|Public) // @ game+0x9d99d50
	void DebugCapsuleSweepComplex(bool bTraceComplex); // Function Engine.CheatManager.DebugCapsuleSweepComplex // (Exec|Native|Public) // @ game+0x9d99cc0
	void DebugCapsuleSweepClear(); // Function Engine.CheatManager.DebugCapsuleSweepClear // (Exec|Native|Public) // @ game+0x9d99ca0
	void DebugCapsuleSweepChannel(enum class ECollisionChannel Channel); // Function Engine.CheatManager.DebugCapsuleSweepChannel // (Exec|Native|Public) // @ game+0x9d99c20
	void DebugCapsuleSweepCapture(); // Function Engine.CheatManager.DebugCapsuleSweepCapture // (Exec|Native|Public) // @ game+0x4094d90
	void DebugCapsuleSweep(); // Function Engine.CheatManager.DebugCapsuleSweep // (Exec|Native|Public) // @ game+0x9d99c00
	void DamageTarget(float DamageAmount); // Function Engine.CheatManager.DamageTarget // (Exec|Native|Public|BlueprintCallable) // @ game+0x9d99b80
	void CheatScript(struct FString ScriptName); // Function Engine.CheatManager.CheatScript // (Final|Exec|Native|Public) // @ game+0x9d99a60
	void ChangeSize(float F); // Function Engine.CheatManager.ChangeSize // (Exec|Native|Public|BlueprintCallable) // @ game+0xaa2310
	void BugItStringCreator(struct FVector ViewLocation, struct FRotator ViewRotation, struct FString& GoString, struct FString& LocString); // Function Engine.CheatManager.BugItStringCreator // (Exec|Native|Public|HasOutParms|HasDefaults) // @ game+0x9d99850
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll); // Function Engine.CheatManager.BugItGo // (Exec|Native|Public) // @ game+0x9d99680
	void BugIt(struct FString ScreenShotDescription); // Function Engine.CheatManager.BugIt // (Exec|Native|Public) // @ game+0x9d995b0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.GameUserSettings
// Size: 0x128 (Inherited: 0x30)
class UGameUserSettings : public UObject {
public:

	bool bUseVSync; // 0x30(0x01)
	bool bUseDynamicResolution; // 0x31(0x01)
	char pad_32[0x56]; // 0x32(0x56)
	uint32_t ResolutionSizeX; // 0x88(0x04)
	uint32_t ResolutionSizeY; // 0x8c(0x04)
	uint32_t LastUserConfirmedResolutionSizeX; // 0x90(0x04)
	uint32_t LastUserConfirmedResolutionSizeY; // 0x94(0x04)
	int32_t WindowPosX; // 0x98(0x04)
	int32_t WindowPosY; // 0x9c(0x04)
	int32_t FullscreenMode; // 0xa0(0x04)
	int32_t LastConfirmedFullscreenMode; // 0xa4(0x04)
	int32_t PreferredFullscreenMode; // 0xa8(0x04)
	uint32_t Version; // 0xac(0x04)
	int32_t AudioQualityLevel; // 0xb0(0x04)
	int32_t LastConfirmedAudioQualityLevel; // 0xb4(0x04)
	float FrameRateLimit; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
	int32_t DesiredScreenWidth; // 0xc0(0x04)
	bool bUseDesiredScreenHeight; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
	int32_t DesiredScreenHeight; // 0xc8(0x04)
	int32_t LastUserConfirmedDesiredScreenWidth; // 0xcc(0x04)
	int32_t LastUserConfirmedDesiredScreenHeight; // 0xd0(0x04)
	float LastRecommendedScreenWidth; // 0xd4(0x04)
	float LastRecommendedScreenHeight; // 0xd8(0x04)
	float LastCPUBenchmarkResult; // 0xdc(0x04)
	float LastGPUBenchmarkResult; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)
	struct TArray<float> LastCPUBenchmarkSteps; // 0xe8(0x10)
	struct TArray<float> LastGPUBenchmarkSteps; // 0xf8(0x10)
	float LastGPUBenchmarkMultiplier; // 0x108(0x04)
	bool bUseHDRDisplayOutput; // 0x10c(0x01)
	char pad_10D[0x3]; // 0x10d(0x03)
	int32_t HDRDisplayOutputNits; // 0x110(0x04)
	char pad_114[0x4]; // 0x114(0x04)
	/*struct FMulticastInlineDelegate*/char OnGameUserSettingsUINeedsUpdate[0x10]; // 0x118(0x10)

	void ValidateSettings(); // Function Engine.GameUserSettings.ValidateSettings // (Native|Public|BlueprintCallable) // @ game+0x895960
	bool SupportsHDRDisplayOutput(); // Function Engine.GameUserSettings.SupportsHDRDisplayOutput // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc6eb0
	void SetVSyncEnabled(bool bEnable); // Function Engine.GameUserSettings.SetVSyncEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x9dc6d20
	void SetVisualEffectQuality(int32_t Value); // Function Engine.GameUserSettings.SetVisualEffectQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x9dc6e30
	void SetViewDistanceQuality(int32_t Value); // Function Engine.GameUserSettings.SetViewDistanceQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x9dc6db0
	void SetToDefaults(); // Function Engine.GameUserSettings.SetToDefaults // (Native|Public|BlueprintCallable) // @ game+0x4094dd0
	void SetTextureQuality(int32_t Value); // Function Engine.GameUserSettings.SetTextureQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x9dc6ca0
	void SetShadowQuality(int32_t Value); // Function Engine.GameUserSettings.SetShadowQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x9dc6c20
	void SetShadingQuality(int32_t Value); // Function Engine.GameUserSettings.SetShadingQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x9dc6ba0
	void SetScreenResolution(struct FIntPoint Resolution); // Function Engine.GameUserSettings.SetScreenResolution // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9dc6b20
	void SetResolutionScaleValueEx(float NewScaleValue); // Function Engine.GameUserSettings.SetResolutionScaleValueEx // (Final|Native|Public|BlueprintCallable) // @ game+0x9dc6aa0
	void SetResolutionScaleValue(int32_t NewScaleValue); // Function Engine.GameUserSettings.SetResolutionScaleValue // (Final|Native|Public|BlueprintCallable) // @ game+0x9dc6a20
	void SetResolutionScaleNormalized(float NewScaleNormalized); // Function Engine.GameUserSettings.SetResolutionScaleNormalized // (Final|Native|Public|BlueprintCallable) // @ game+0x9dc69a0
	void SetPostProcessingQuality(int32_t Value); // Function Engine.GameUserSettings.SetPostProcessingQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x9dc6920
	void SetOverallScalabilityLevel(int32_t Value); // Function Engine.GameUserSettings.SetOverallScalabilityLevel // (Native|Public|BlueprintCallable) // @ game+0x8dfe3c0
	void SetFullscreenMode(enum class EWindowMode InFullscreenMode); // Function Engine.GameUserSettings.SetFullscreenMode // (Final|Native|Public|BlueprintCallable) // @ game+0x9dc68a0
	void SetFrameRateLimit(float NewLimit); // Function Engine.GameUserSettings.SetFrameRateLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x9dc6820
	void SetFoliageQuality(int32_t Value); // Function Engine.GameUserSettings.SetFoliageQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x9dc67a0
	void SetDynamicResolutionEnabled(bool bEnable); // Function Engine.GameUserSettings.SetDynamicResolutionEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x9dc6710
	void SetBenchmarkFallbackValues(); // Function Engine.GameUserSettings.SetBenchmarkFallbackValues // (Final|Native|Public|BlueprintCallable) // @ game+0x9dc66f0
	void SetAudioQualityLevel(int32_t QualityLevel); // Function Engine.GameUserSettings.SetAudioQualityLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x9dc6670
	void SetAntiAliasingQuality(int32_t Value); // Function Engine.GameUserSettings.SetAntiAliasingQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x9dc65f0
	void SaveSettings(); // Function Engine.GameUserSettings.SaveSettings // (Native|Public|BlueprintCallable) // @ game+0x8959a0
	void RunHardwareBenchmark(int32_t WorkScale, float CPUMultiplier, float GPUMultiplier); // Function Engine.GameUserSettings.RunHardwareBenchmark // (Native|Public|BlueprintCallable) // @ game+0x9dc64f0
	void RevertVideoMode(); // Function Engine.GameUserSettings.RevertVideoMode // (Final|Native|Public|BlueprintCallable) // @ game+0x9dc64d0
	void ResetToCurrentSettings(); // Function Engine.GameUserSettings.ResetToCurrentSettings // (Native|Public|BlueprintCallable) // @ game+0xaa2020
	void LoadSettings(bool bForceReload); // Function Engine.GameUserSettings.LoadSettings // (Native|Public|BlueprintCallable) // @ game+0x9dc6440
	bool IsVSyncEnabled(); // Function Engine.GameUserSettings.IsVSyncEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x49d90b0
	bool IsVSyncDirty(); // Function Engine.GameUserSettings.IsVSyncDirty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc6410
	bool IsScreenResolutionDirty(); // Function Engine.GameUserSettings.IsScreenResolutionDirty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc63e0
	bool IsHDREnabled(); // Function Engine.GameUserSettings.IsHDREnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc63b0
	bool IsFullscreenModeDirty(); // Function Engine.GameUserSettings.IsFullscreenModeDirty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc6380
	bool IsDynamicResolutionEnabled(); // Function Engine.GameUserSettings.IsDynamicResolutionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc6350
	bool IsDynamicResolutionDirty(); // Function Engine.GameUserSettings.IsDynamicResolutionDirty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc6320
	bool IsDirty(); // Function Engine.GameUserSettings.IsDirty // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xaa7690
	int32_t GetVisualEffectQuality(); // Function Engine.GameUserSettings.GetVisualEffectQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc62c0
	int32_t GetViewDistanceQuality(); // Function Engine.GameUserSettings.GetViewDistanceQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc6290
	int32_t GetTextureQuality(); // Function Engine.GameUserSettings.GetTextureQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc6260
	int32_t STATIC_GetSyncInterval(); // Function Engine.GameUserSettings.GetSyncInterval // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dc6230
	int32_t GetShadowQuality(); // Function Engine.GameUserSettings.GetShadowQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc6200
	int32_t GetShadingQuality(); // Function Engine.GameUserSettings.GetShadingQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc61d0
	struct FIntPoint GetScreenResolution(); // Function Engine.GameUserSettings.GetScreenResolution // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc6150
	float GetResolutionScaleNormalized(); // Function Engine.GameUserSettings.GetResolutionScaleNormalized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc6120
	void GetResolutionScaleInformationEx(float& CurrentScaleNormalized, float& CurrentScaleValue, float& MinScaleValue, float& MaxScaleValue); // Function Engine.GameUserSettings.GetResolutionScaleInformationEx // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc5f80
	void GetResolutionScaleInformation(float& CurrentScaleNormalized, int32_t& CurrentScaleValue, int32_t& MinScaleValue, int32_t& MaxScaleValue); // Function Engine.GameUserSettings.GetResolutionScaleInformation // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc5de0
	float GetRecommendedResolutionScale(); // Function Engine.GameUserSettings.GetRecommendedResolutionScale // (Native|Public|BlueprintCallable) // @ game+0x9dc5da0
	enum class EWindowMode GetPreferredFullscreenMode(); // Function Engine.GameUserSettings.GetPreferredFullscreenMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc5d70
	int32_t GetPostProcessingQuality(); // Function Engine.GameUserSettings.GetPostProcessingQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc5d40
	int32_t GetOverallScalabilityLevel(); // Function Engine.GameUserSettings.GetOverallScalabilityLevel // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc5bd0
	struct FIntPoint GetLastConfirmedScreenResolution(); // Function Engine.GameUserSettings.GetLastConfirmedScreenResolution // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc5b90
	enum class EWindowMode GetLastConfirmedFullscreenMode(); // Function Engine.GameUserSettings.GetLastConfirmedFullscreenMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc5b60
	struct UGameUserSettings* STATIC_GetGameUserSettings(); // Function Engine.GameUserSettings.GetGameUserSettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dc5b30
	enum class EWindowMode GetFullscreenMode(); // Function Engine.GameUserSettings.GetFullscreenMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc5b00
	float GetFrameRateLimit(); // Function Engine.GameUserSettings.GetFrameRateLimit // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc5ad0
	int32_t GetFoliageQuality(); // Function Engine.GameUserSettings.GetFoliageQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc5aa0
	struct FIntPoint GetDesktopResolution(); // Function Engine.GameUserSettings.GetDesktopResolution // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc5a60
	struct FIntPoint STATIC_GetDefaultWindowPosition(); // Function Engine.GameUserSettings.GetDefaultWindowPosition // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9dc5a20
	enum class EWindowMode STATIC_GetDefaultWindowMode(); // Function Engine.GameUserSettings.GetDefaultWindowMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dc59f0
	float GetDefaultResolutionScale(); // Function Engine.GameUserSettings.GetDefaultResolutionScale // (Native|Public|BlueprintCallable) // @ game+0x9dc59b0
	struct FIntPoint STATIC_GetDefaultResolution(); // Function Engine.GameUserSettings.GetDefaultResolution // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9dc5970
	int32_t GetCurrentHDRDisplayNits(); // Function Engine.GameUserSettings.GetCurrentHDRDisplayNits // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc5940
	int32_t GetAudioQualityLevel(); // Function Engine.GameUserSettings.GetAudioQualityLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc5920
	int32_t GetAntiAliasingQuality(); // Function Engine.GameUserSettings.GetAntiAliasingQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2021460
	void EnableHDRDisplayOutput(bool bEnable, int32_t DisplayNits); // Function Engine.GameUserSettings.EnableHDRDisplayOutput // (Final|Native|Public|BlueprintCallable) // @ game+0x9dc5860
	void ConfirmVideoMode(); // Function Engine.GameUserSettings.ConfirmVideoMode // (Native|Public|BlueprintCallable) // @ game+0x8964b0
	void ApplySettings(bool bCheckForCommandLineOverrides); // Function Engine.GameUserSettings.ApplySettings // (Native|Public|BlueprintCallable) // @ game+0x9021d70
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides); // Function Engine.GameUserSettings.ApplyResolutionSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x9dc57d0
	void ApplyNonResolutionSettings(); // Function Engine.GameUserSettings.ApplyNonResolutionSettings // (Native|Public|BlueprintCallable) // @ game+0x895c00
	void ApplyHardwareBenchmarkResults(); // Function Engine.GameUserSettings.ApplyHardwareBenchmarkResults // (Native|Public|BlueprintCallable) // @ game+0x496f830
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DPICustomScalingRule
// Size: 0x30 (Inherited: 0x30)
class UDPICustomScalingRule : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimMetaData
// Size: 0x30 (Inherited: 0x30)
class UAnimMetaData : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.NavAreaBase
// Size: 0x38 (Inherited: 0x30)
class UNavAreaBase : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SaveGame
// Size: 0x30 (Inherited: 0x30)
class USaveGame : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.EngineCustomTimeStep
// Size: 0x30 (Inherited: 0x30)
class UEngineCustomTimeStep : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Model
// Size: 0x2b0 (Inherited: 0x30)
class UModel : public UObject {
public:

	char pad_30[0x280]; // 0x30(0x280)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AISystemBase
// Size: 0x60 (Inherited: 0x30)
class UAISystemBase : public UObject {
public:

	struct FSoftClassPath AISystemClassName; // 0x30(0x18)
	struct FName AISystemModuleName; // 0x48(0x08)
	char pad_50[0x8]; // 0x50(0x08)
	bool bInstantiateAISystemOnClient; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimationBatchManager
// Size: 0x60 (Inherited: 0x30)
class UAnimationBatchManager : public UObject {
public:

	char pad_30[0x18]; // 0x30(0x18)
	struct TArray<struct USkeletalMeshComponent*> SkeletalMeshComps; // 0x48(0x10)
	char pad_58[0x8]; // 0x58(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimBoneCompressionSettings
// Size: 0x40 (Inherited: 0x30)
class UAnimBoneCompressionSettings : public UObject {
public:

	struct TArray<struct UAnimBoneCompressionCodec*> Codecs; // 0x30(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimClassData
// Size: 0x240 (Inherited: 0x30)
class UAnimClassData : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)
	struct TArray<struct FBakedAnimationStateMachine> BakedStateMachines; // 0x38(0x10)
	struct USkeleton* TargetSkeleton; // 0x48(0x08)
	struct TArray<struct FAnimNotifyEvent> AnimNotifies; // 0x50(0x10)
	struct TMap<struct FName, struct FCachedPoseIndices> OrderedSavedPoseIndicesMap; // 0x60(0x50)
	struct TArray<struct FAnimBlueprintFunction> AnimBlueprintFunctions; // 0xb0(0x10)
	/*struct TArray<struct TFieldPath<FNone>>*/char AnimNodeProperties[0x10]; // 0xc0(0x10)
	/*struct TArray<struct TFieldPath<FNone>>*/char LinkedAnimGraphNodeProperties[0x10]; // 0xd0(0x10)
	/*struct TArray<struct TFieldPath<FNone>>*/char LinkedAnimLayerNodeProperties[0x10]; // 0xe0(0x10)
	/*struct TArray<struct TFieldPath<FNone>>*/char PreUpdateNodeProperties[0x10]; // 0xf0(0x10)
	/*struct TArray<struct TFieldPath<FNone>>*/char DynamicResetNodeProperties[0x10]; // 0x100(0x10)
	/*struct TMap<struct FName, struct TFieldPath<FNone>>*/char AsestPlayerMapNodeProperties[0x50]; // 0x110(0x50)
	/*struct TArray<struct TFieldPath<FNone>>*/char StateMachineNodeProperties[0x10]; // 0x160(0x10)
	/*struct TArray<struct TFieldPath<FNone>>*/char InitializationNodeProperties[0x10]; // 0x170(0x10)
	struct TMap<struct FName, struct FGraphAssetPlayerInformation> GraphNameAssetPlayers; // 0x180(0x50)
	struct TArray<struct FName> SyncGroupNames; // 0x1d0(0x10)
	struct TArray<struct FExposedValueHandler> EvaluateGraphExposedInputs; // 0x1e0(0x10)
	struct TMap<struct FName, struct FAnimGraphBlendOptions> GraphBlendOptions; // 0x1f0(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimClassInterface
// Size: 0x30 (Inherited: 0x30)
class UAnimClassInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimCurveCompressionSettings
// Size: 0x38 (Inherited: 0x30)
class UAnimCurveCompressionSettings : public UObject {
public:

	struct UAnimCurveCompressionCodec* Codec; // 0x30(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimLayerInterface
// Size: 0x30 (Inherited: 0x30)
class UAnimLayerInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimSet
// Size: 0xf8 (Inherited: 0x30)
class UAnimSet : public UObject {
public:

	char bAnimRotationOnly : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct FName> TrackBoneNames; // 0x38(0x10)
	struct TArray<struct FAnimSetMeshLinkup> LinkupCache; // 0x48(0x10)
	struct TArray<char> BoneUseAnimTranslation; // 0x58(0x10)
	struct TArray<char> ForceUseMeshTranslation; // 0x68(0x10)
	struct TArray<struct FName> UseTranslationBoneNames; // 0x78(0x10)
	struct TArray<struct FName> ForceMeshTranslationBoneNames; // 0x88(0x10)
	struct FName PreviewSkelMeshName; // 0x98(0x08)
	struct FName BestRatioSkelMeshName; // 0xa0(0x08)
	char pad_A8[0x50]; // 0xa8(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimStateMachineTypes
// Size: 0x30 (Inherited: 0x30)
class UAnimStateMachineTypes : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AssetExportTask
// Size: 0x80 (Inherited: 0x30)
class UAssetExportTask : public UObject {
public:

	struct UObject* Object; // 0x30(0x08)
	struct UExporter* Exporter; // 0x38(0x08)
	struct FString Filename; // 0x40(0x10)
	bool bSelected; // 0x50(0x01)
	bool bReplaceIdentical; // 0x51(0x01)
	bool bPrompt; // 0x52(0x01)
	bool bAutomated; // 0x53(0x01)
	bool bUseFileArchive; // 0x54(0x01)
	bool bWriteEmptyFiles; // 0x55(0x01)
	char pad_56[0x2]; // 0x56(0x02)
	struct TArray<struct UObject*> IgnoreObjectList; // 0x58(0x10)
	struct UObject* Options; // 0x68(0x08)
	struct TArray<struct FString> Errors; // 0x70(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AssetImportData
// Size: 0x30 (Inherited: 0x30)
class UAssetImportData : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AssetMappingTable
// Size: 0x40 (Inherited: 0x30)
class UAssetMappingTable : public UObject {
public:

	struct TArray<struct FAssetMapping> MappedAssets; // 0x30(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AutomationTestSettings
// Size: 0x330 (Inherited: 0x30)
class UAutomationTestSettings : public UObject {
public:

	struct TArray<struct FString> EngineTestModules; // 0x30(0x10)
	struct TArray<struct FString> EditorTestModules; // 0x40(0x10)
	struct FSoftObjectPath AutomationTestmap; // 0x50(0x18)
	struct TArray<struct FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps; // 0x68(0x10)
	struct TArray<struct FSoftObjectPath> AssetsToOpen; // 0x78(0x10)
	struct FBuildPromotionTestSettings BuildPromotionTest; // 0x88(0x1f0)
	struct FMaterialEditorPromotionSettings MaterialEditorPromotionTest; // 0x278(0x30)
	struct FParticleEditorPromotionSettings ParticleEditorPromotionTest; // 0x2a8(0x10)
	struct FBlueprintEditorPromotionSettings BlueprintEditorPromotionTest; // 0x2b8(0x30)
	struct TArray<struct FString> TestLevelFolders; // 0x2e8(0x10)
	struct TArray<struct FExternalToolDefinition> ExternalTools; // 0x2f8(0x10)
	struct TArray<struct FEditorImportExportTestDefinition> ImportExportTestDefinitions; // 0x308(0x10)
	struct TArray<struct FLaunchOnTestSettings> LaunchOnSettings; // 0x318(0x10)
	struct FIntPoint DefaultScreenshotResolution; // 0x328(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AvoidanceManager
// Size: 0xe8 (Inherited: 0x30)
class UAvoidanceManager : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)
	float DefaultTimeToLive; // 0x38(0x04)
	float LockTimeAfterAvoid; // 0x3c(0x04)
	float LockTimeAfterClean; // 0x40(0x04)
	float DeltaTimeToPredict; // 0x44(0x04)
	float ArtificialRadiusExpansion; // 0x48(0x04)
	float TestHeightDifference; // 0x4c(0x04)
	float HeightCheckMargin; // 0x50(0x04)
	char pad_54[0x94]; // 0x54(0x94)

	bool RegisterMovementComponent(struct UMovementComponent* MovementComp, float AvoidanceWeight); // Function Engine.AvoidanceManager.RegisterMovementComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x9d7cb40
	int32_t GetObjectCount(); // Function Engine.AvoidanceManager.GetObjectCount // (Final|Native|Public|BlueprintCallable) // @ game+0x9d7cb10
	int32_t GetNewAvoidanceUID(); // Function Engine.AvoidanceManager.GetNewAvoidanceUID // (Final|Native|Public|BlueprintCallable) // @ game+0x9d7cae0
	struct FVector GetAvoidanceVelocityForComponent(struct UMovementComponent* MovementComp); // Function Engine.AvoidanceManager.GetAvoidanceVelocityForComponent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9d7ca40
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BinaryAsset
// Size: 0xd0 (Inherited: 0x30)
class UBinaryAsset : public UObject {
public:

	char pad_30[0xa0]; // 0x30(0xa0)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BlendableInterface
// Size: 0x30 (Inherited: 0x30)
class UBlendableInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BlendProfile
// Size: 0x50 (Inherited: 0x30)
class UBlendProfile : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)
	struct USkeleton* OwningSkeleton; // 0x38(0x08)
	struct TArray<struct FBlendProfileBoneEntry> ProfileEntries; // 0x40(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BlueprintExtension
// Size: 0x30 (Inherited: 0x30)
class UBlueprintExtension : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BoneMaskFilter
// Size: 0x40 (Inherited: 0x30)
class UBoneMaskFilter : public UObject {
public:

	struct TArray<struct FInputBlendPose> BlendPoses; // 0x30(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Breakpoint
// Size: 0x48 (Inherited: 0x30)
class UBreakpoint : public UObject {
public:

	char bEnabled : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct UEdGraphNode* Node; // 0x38(0x08)
	char bStepOnce : 1; // 0x40(0x01)
	char bStepOnce_WasPreviouslyDisabled : 1; // 0x40(0x01)
	char bStepOnce_RemoveAfterHit : 1; // 0x40(0x01)
	char pad_40_3 : 5; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BrushBuilder
// Size: 0x88 (Inherited: 0x30)
class UBrushBuilder : public UObject {
public:

	struct FString BitmapFilename; // 0x30(0x10)
	struct FString ToolTip; // 0x40(0x10)
	char NotifyBadParams : 1; // 0x50(0x01)
	char pad_50_1 : 7; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct TArray<struct FVector> Vertices; // 0x58(0x10)
	struct TArray<struct FBuilderPoly> Polys; // 0x68(0x10)
	struct FName Layer; // 0x78(0x08)
	char MergeCoplanars : 1; // 0x80(0x01)
	char pad_80_1 : 7; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ButtonStyleAsset
// Size: 0x2c8 (Inherited: 0x30)
class UButtonStyleAsset : public UObject {
public:

	struct FButtonStyle ButtonStyle; // 0x30(0x298)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CameraAnim
// Size: 0x9c0 (Inherited: 0x30)
class UCameraAnim : public UObject {
public:

	struct UInterpGroup* CameraInterpGroup; // 0x30(0x08)
	float AnimLength; // 0x38(0x04)
	struct FBox BoundingBox; // 0x3c(0x1c)
	char bRelativeToInitialTransform : 1; // 0x58(0x01)
	char bRelativeToInitialFOV : 1; // 0x58(0x01)
	char pad_58_2 : 6; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	float BaseFOV; // 0x5c(0x04)
	struct FPostProcessSettings BasePostProcessSettings; // 0x60(0x950)
	float BasePostProcessBlendWeight; // 0x9b0(0x04)
	char pad_9B4[0xc]; // 0x9b4(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CameraAnimInst
// Size: 0x120 (Inherited: 0x30)
class UCameraAnimInst : public UObject {
public:

	struct UCameraAnim* CamAnim; // 0x30(0x08)
	struct UInterpGroupInst* InterpGroupInst; // 0x38(0x08)
	char pad_40[0x18]; // 0x40(0x18)
	float PlayRate; // 0x58(0x04)
	char pad_5C[0x14]; // 0x5c(0x14)
	struct UInterpTrackMove* MoveTrack; // 0x70(0x08)
	struct UInterpTrackInstMove* MoveInst; // 0x78(0x08)
	enum class ECameraAnimPlaySpace PlaySpace; // 0x80(0x01)
	char pad_81[0x9f]; // 0x81(0x9f)

	void Stop(bool bImmediate); // Function Engine.CameraAnimInst.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x9d8e6f0
	void SetScale(float NewDuration); // Function Engine.CameraAnimInst.SetScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9d8e5e0
	void SetDuration(float NewDuration); // Function Engine.CameraAnimInst.SetDuration // (Final|Native|Public|BlueprintCallable) // @ game+0x9d8e2e0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CameraShake
// Size: 0x170 (Inherited: 0x30)
class UCameraShake : public UObject {
public:

	char bSingleInstance : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float OscillationDuration; // 0x34(0x04)
	float OscillationBlendInTime; // 0x38(0x04)
	float OscillationBlendOutTime; // 0x3c(0x04)
	struct FROscillator RotOscillation; // 0x40(0x24)
	struct FVOscillator LocOscillation; // 0x64(0x24)
	struct FFOscillator FOVOscillation; // 0x88(0x0c)
	float AnimPlayRate; // 0x94(0x04)
	float AnimScale; // 0x98(0x04)
	float AnimBlendInTime; // 0x9c(0x04)
	float AnimBlendOutTime; // 0xa0(0x04)
	float RandomAnimSegmentDuration; // 0xa4(0x04)
	struct UCameraAnim* Anim; // 0xa8(0x08)
	char bRandomAnimSegment : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x17]; // 0xb1(0x17)
	struct APlayerCameraManager* CameraOwner; // 0xc8(0x08)
	char pad_D0[0x88]; // 0xd0(0x88)
	float ShakeScale; // 0x158(0x04)
	float OscillatorTimeRemaining; // 0x15c(0x04)
	struct UCameraAnimInst* AnimInst; // 0x160(0x08)
	char pad_168[0x8]; // 0x168(0x08)

	void ReceiveStopShake(bool bImmediately); // Function Engine.CameraShake.ReceiveStopShake // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void ReceivePlayShake(float Scale); // Function Engine.CameraShake.ReceivePlayShake // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	bool ReceiveIsFinished(); // Function Engine.CameraShake.ReceiveIsFinished // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1761230
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, struct FMinimalViewInfo& POV, struct FMinimalViewInfo& ModifiedPOV); // Function Engine.CameraShake.BlueprintUpdateCameraShake // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x7ed88c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Canvas
// Size: 0x2d0 (Inherited: 0x30)
class UCanvas : public UObject {
public:

	float OrgX; // 0x30(0x04)
	float OrgY; // 0x34(0x04)
	float ClipX; // 0x38(0x04)
	float ClipY; // 0x3c(0x04)
	struct FColor DrawColor; // 0x40(0x04)
	char bCenterX : 1; // 0x44(0x01)
	char bCenterY : 1; // 0x44(0x01)
	char bNoSmooth : 1; // 0x44(0x01)
	char pad_44_3 : 5; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	int32_t SizeX; // 0x48(0x04)
	int32_t SizeY; // 0x4c(0x04)
	struct FPlane ColorModulate; // 0x50(0x10)
	struct UTexture2D* DefaultTexture; // 0x60(0x08)
	struct UTexture2D* GradientTexture0; // 0x68(0x08)
	struct UReporterGraph* ReporterGraph; // 0x70(0x08)
	char pad_78[0x258]; // 0x78(0x258)

	struct FVector2D K2_TextSize(struct UFont* RenderFont, struct FString RenderText, struct FVector2D Scale); // Function Engine.Canvas.K2_TextSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9d8df30
	struct FVector2D K2_StrLen(struct UFont* RenderFont, struct FString RenderText); // Function Engine.Canvas.K2_StrLen // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9d8de20
	struct FVector K2_Project(struct FVector WorldLocation); // Function Engine.Canvas.K2_Project // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9d8dd70
	void K2_DrawTriangle(struct UTexture* RenderTexture, struct TArray<struct FCanvasUVTri> Triangles); // Function Engine.Canvas.K2_DrawTriangle // (Final|Native|Public|BlueprintCallable) // @ game+0x9d8dc10
	void K2_DrawTexture(struct UTexture* RenderTexture, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, struct FLinearColor RenderColor, enum class EBlendMode BlendMode, float Rotation, struct FVector2D PivotPoint); // Function Engine.Canvas.K2_DrawTexture // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9d8d990
	void K2_DrawText(struct UFont* RenderFont, struct FString RenderText, struct FVector2D ScreenPosition, struct FVector2D Scale, struct FLinearColor RenderColor, float Kerning, struct FLinearColor ShadowColor, struct FVector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, struct FLinearColor OutlineColor); // Function Engine.Canvas.K2_DrawText // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9d8d5e0
	void K2_DrawPolygon(struct UTexture* RenderTexture, struct FVector2D ScreenPosition, struct FVector2D radius, int32_t NumberOfSides, struct FLinearColor RenderColor); // Function Engine.Canvas.K2_DrawPolygon // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9d8d450
	void K2_DrawMaterialTriangle(struct UMaterialInterface* RenderMaterial, struct TArray<struct FCanvasUVTri> Triangles); // Function Engine.Canvas.K2_DrawMaterialTriangle // (Final|Native|Public|BlueprintCallable) // @ game+0x9d8d2f0
	void K2_DrawMaterial(struct UMaterialInterface* RenderMaterial, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, float Rotation, struct FVector2D PivotPoint); // Function Engine.Canvas.K2_DrawMaterial // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9d8d0e0
	void K2_DrawLine(struct FVector2D ScreenPositionA, struct FVector2D ScreenPositionB, float Thickness, struct FLinearColor RenderColor); // Function Engine.Canvas.K2_DrawLine // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9d8cf90
	void K2_DrawBox(struct FVector2D ScreenPosition, struct FVector2D ScreenSize, float Thickness, struct FLinearColor RenderColor); // Function Engine.Canvas.K2_DrawBox // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9d8ce40
	void K2_DrawBorder(struct UTexture* BorderTexture, struct UTexture* BackgroundTexture, struct UTexture* LeftBorderTexture, struct UTexture* RightBorderTexture, struct UTexture* TopBorderTexture, struct UTexture* BottomBorderTexture, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, struct FLinearColor RenderColor, struct FVector2D BorderScale, struct FVector2D BackgroundScale, float Rotation, struct FVector2D PivotPoint, struct FVector2D CornerSize); // Function Engine.Canvas.K2_DrawBorder // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9d8ca00
	void K2_Deproject(struct FVector2D ScreenPosition, struct FVector& WorldOrigin, struct FVector& WorldDirection); // Function Engine.Canvas.K2_Deproject // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9d8c8e0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ChaosPhysicalMaterial
// Size: 0x40 (Inherited: 0x30)
class UChaosPhysicalMaterial : public UObject {
public:

	float Friction; // 0x30(0x04)
	float Restitution; // 0x34(0x04)
	float SleepingLinearVelocityThreshold; // 0x38(0x04)
	float SleepingAngularVelocityThreshold; // 0x3c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CheckBoxStyleAsset
// Size: 0x5f8 (Inherited: 0x30)
class UCheckBoxStyleAsset : public UObject {
public:

	struct FCheckBoxStyle CheckBoxStyle; // 0x30(0x5c8)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Console
// Size: 0x138 (Inherited: 0x30)
class UConsole : public UObject {
public:

	char pad_30[0x10]; // 0x30(0x10)
	struct ULocalPlayer* ConsoleTargetPlayer; // 0x40(0x08)
	struct UTexture2D* DefaultTexture_Black; // 0x48(0x08)
	struct UTexture2D* DefaultTexture_White; // 0x50(0x08)
	char pad_58[0x18]; // 0x58(0x18)
	struct TArray<struct FString> HistoryBuffer; // 0x70(0x10)
	char pad_80[0xb8]; // 0x80(0xb8)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CurveEdPresetCurve
// Size: 0x30 (Inherited: 0x30)
class UCurveEdPresetCurve : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CurveSourceInterface
// Size: 0x30 (Inherited: 0x30)
class UCurveSourceInterface : public UInterface {
public:


	float GetCurveValue(struct FName CurveName); // Function Engine.CurveSourceInterface.GetCurveValue // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x9d9fee0
	void GetCurves(struct TArray<struct FNamedCurveValue>& OutValues); // Function Engine.CurveSourceInterface.GetCurves // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x9d9ff80
	struct FName GetBindingName(); // Function Engine.CurveSourceInterface.GetBindingName // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x36d5850
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DamageType
// Size: 0x48 (Inherited: 0x30)
class UDamageType : public UObject {
public:

	char bCausedByWorld : 1; // 0x30(0x01)
	char bScaleMomentumByMass : 1; // 0x30(0x01)
	char bRadialDamageVelChange : 1; // 0x30(0x01)
	char pad_30_3 : 5; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float DamageImpulse; // 0x34(0x04)
	float DestructibleImpulse; // 0x38(0x04)
	float DestructibleDamageSpreadScale; // 0x3c(0x04)
	float DamageFalloff; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DestructibleInterface
// Size: 0x30 (Inherited: 0x30)
class UDestructibleInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DeviceProfileManager
// Size: 0xb8 (Inherited: 0x30)
class UDeviceProfileManager : public UObject {
public:

	struct TArray<struct UObject*> Profiles; // 0x30(0x10)
	char pad_40[0x78]; // 0x40(0x78)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DialogueVoice
// Size: 0x48 (Inherited: 0x30)
class UDialogueVoice : public UObject {
public:

	enum class EGrammaticalGender gender; // 0x30(0x01)
	enum class EGrammaticalNumber Plurality; // 0x31(0x01)
	char pad_32[0x2]; // 0x32(0x02)
	struct FGuid LocalizationGUID; // 0x34(0x10)
	char pad_44[0x4]; // 0x44(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DialogueWave
// Size: 0x78 (Inherited: 0x30)
class UDialogueWave : public UObject {
public:

	char bMature : 1; // 0x30(0x01)
	char bOverride_SubtitleOverride : 1; // 0x30(0x01)
	char pad_30_2 : 6; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct FString SpokenText; // 0x38(0x10)
	struct FString SubtitleOverride; // 0x48(0x10)
	struct TArray<struct FDialogueContextMapping> ContextMappings; // 0x58(0x10)
	struct FGuid LocalizationGUID; // 0x68(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.EdGraph
// Size: 0x68 (Inherited: 0x30)
class UEdGraph : public UObject {
public:

	struct UClass* Schema; // 0x30(0x08)
	struct TArray<struct UEdGraphNode*> Nodes; // 0x38(0x10)
	char bEditable : 1; // 0x48(0x01)
	char bAllowDeletion : 1; // 0x48(0x01)
	char bAllowRenaming : 1; // 0x48(0x01)
	char pad_48_3 : 5; // 0x48(0x01)
	char pad_49[0x1f]; // 0x49(0x1f)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.GraphNodeContextMenuContext
// Size: 0x58 (Inherited: 0x30)
class UGraphNodeContextMenuContext : public UObject {
public:

	struct UBlueprint* Blueprint; // 0x30(0x08)
	struct UEdGraph* Graph; // 0x38(0x08)
	struct UEdGraphNode* Node; // 0x40(0x08)
	char pad_48[0x8]; // 0x48(0x08)
	bool bIsDebugging; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.EdGraphPin_Deprecated
// Size: 0x120 (Inherited: 0x30)
class UEdGraphPin_Deprecated : public UObject {
public:

	struct FString PinName; // 0x30(0x10)
	struct FString PinToolTip; // 0x40(0x10)
	enum class EEdGraphPinDirection Direction; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct FEdGraphPinType PinType; // 0x58(0x58)
	struct FString DefaultValue; // 0xb0(0x10)
	struct FString AutogeneratedDefaultValue; // 0xc0(0x10)
	struct UObject* DefaultObject; // 0xd0(0x08)
	struct FText DefaultTextValue; // 0xd8(0x18)
	struct TArray<struct UEdGraphPin_Deprecated*> LinkedTo; // 0xf0(0x10)
	struct TArray<struct UEdGraphPin_Deprecated*> SubPins; // 0x100(0x10)
	struct UEdGraphPin_Deprecated* ParentPin; // 0x110(0x08)
	struct UEdGraphPin_Deprecated* ReferencePassThroughConnection; // 0x118(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.EdGraphSchema
// Size: 0x30 (Inherited: 0x30)
class UEdGraphSchema : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.EngineBaseTypes
// Size: 0x30 (Inherited: 0x30)
class UEngineBaseTypes : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.EngineHandlerComponentFactory
// Size: 0x30 (Inherited: 0x30)
class UEngineHandlerComponentFactory : public UHandlerComponentFactory {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.EngineTypes
// Size: 0x30 (Inherited: 0x30)
class UEngineTypes : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Exporter
// Size: 0x80 (Inherited: 0x30)
class UExporter : public UObject {
public:

	struct UClass* SupportedClass; // 0x30(0x08)
	struct UObject* ExportRootScope; // 0x38(0x08)
	struct TArray<struct FString> FormatExtension; // 0x40(0x10)
	struct TArray<struct FString> FormatDescription; // 0x50(0x10)
	int32_t PreferredFormatIndex; // 0x60(0x04)
	int32_t TextIndent; // 0x64(0x04)
	char bText : 1; // 0x68(0x01)
	char bSelectedOnly : 1; // 0x68(0x01)
	char bForceFileOperations : 1; // 0x68(0x01)
	char pad_68_3 : 5; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
	struct UAssetExportTask* ExportTask; // 0x70(0x08)
	char pad_78[0x8]; // 0x78(0x08)

	bool ScriptRunAssetExportTask(struct UAssetExportTask* Task); // Function Engine.Exporter.ScriptRunAssetExportTask // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	bool STATIC_RunAssetExportTasks(struct TArray<struct UAssetExportTask*>& ExportTasks); // Function Engine.Exporter.RunAssetExportTasks // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9db36f0
	bool STATIC_RunAssetExportTask(struct UAssetExportTask* Task); // Function Engine.Exporter.RunAssetExportTask // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x9db3670
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Font
// Size: 0x1d8 (Inherited: 0x30)
class UFont : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)
	enum class EFontCacheType FontCacheType; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct TArray<struct FFontCharacter> Characters; // 0x40(0x10)
	struct TArray<struct UTexture2D*> Textures; // 0x50(0x10)
	int32_t IsRemapped; // 0x60(0x04)
	float EmScale; // 0x64(0x04)
	float Ascent; // 0x68(0x04)
	float Descent; // 0x6c(0x04)
	float Leading; // 0x70(0x04)
	int32_t Kerning; // 0x74(0x04)
	struct FFontImportOptionsData ImportOptions; // 0x78(0xb0)
	int32_t NumCharacters; // 0x128(0x04)
	char pad_12C[0x4]; // 0x12c(0x04)
	struct TArray<int32_t> MaxCharHeight; // 0x130(0x10)
	float ScalingFactor; // 0x140(0x04)
	int32_t LegacyFontSize; // 0x144(0x04)
	struct FName LegacyFontName; // 0x148(0x08)
	struct FCompositeFont CompositeFont; // 0x150(0x38)
	char pad_188[0x50]; // 0x188(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.FontFace
// Size: 0x60 (Inherited: 0x30)
class UFontFace : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)
	struct FString SourceFilename; // 0x38(0x10)
	enum class EFontHinting Hinting; // 0x48(0x01)
	enum class EFontLoadingPolicy LoadingPolicy; // 0x49(0x01)
	enum class EFontLayoutMethod LayoutMethod; // 0x4a(0x01)
	char pad_4B[0x15]; // 0x4b(0x15)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.FontImportOptions
// Size: 0xe0 (Inherited: 0x30)
class UFontImportOptions : public UObject {
public:

	struct FFontImportOptionsData Data; // 0x30(0xb0)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ForceFeedbackAttenuation
// Size: 0xf8 (Inherited: 0x30)
class UForceFeedbackAttenuation : public UObject {
public:

	struct FForceFeedbackAttenuationSettings Attenuation; // 0x30(0xc8)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ForceFeedbackEffect
// Size: 0x48 (Inherited: 0x30)
class UForceFeedbackEffect : public UObject {
public:

	struct TArray<struct FForceFeedbackChannelDetails> ChannelDetails; // 0x30(0x10)
	float Duration; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.GpuMergeTextureTask
// Size: 0x70 (Inherited: 0x30)
class UGpuMergeTextureTask : public UObject {
public:

	struct UGpuMergedTexture* TargetTexture; // 0x30(0x08)
	struct UGpuMergedTexture* IntermediateGpuMergedTexture; // 0x38(0x08)
	char pad_40[0x20]; // 0x40(0x20)
	int64_t WaitRtcEndTimeTicks; // 0x60(0x08)
	char pad_68[0x8]; // 0x68(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.HLODProxy
// Size: 0x40 (Inherited: 0x30)
class UHLODProxy : public UObject {
public:

	struct TArray<struct FHLODProxyMesh> ProxyMeshes; // 0x30(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AmbisonicsSubmixSettingsBase
// Size: 0x30 (Inherited: 0x30)
class UAmbisonicsSubmixSettingsBase : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SpatializationPluginSourceSettingsBase
// Size: 0x30 (Inherited: 0x30)
class USpatializationPluginSourceSettingsBase : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.OcclusionPluginSourceSettingsBase
// Size: 0x30 (Inherited: 0x30)
class UOcclusionPluginSourceSettingsBase : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundModulationPluginSourceSettingsBase
// Size: 0x30 (Inherited: 0x30)
class USoundModulationPluginSourceSettingsBase : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ReverbPluginSourceSettingsBase
// Size: 0x30 (Inherited: 0x30)
class UReverbPluginSourceSettingsBase : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ImportantToggleSettingInterface
// Size: 0x30 (Inherited: 0x30)
class UImportantToggleSettingInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InheritableComponentHandler
// Size: 0x50 (Inherited: 0x30)
class UInheritableComponentHandler : public UObject {
public:

	struct TArray<struct FComponentOverrideRecord> Records; // 0x30(0x10)
	struct TArray<struct UActorComponent*> UnnecessaryComponents; // 0x40(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InputSettings
// Size: 0xf8 (Inherited: 0x30)
class UInputSettings : public UObject {
public:

	struct TArray<struct FInputAxisConfigEntry> AxisConfig; // 0x30(0x10)
	char bAltEnterTogglesFullscreen : 1; // 0x40(0x01)
	char bF11TogglesFullscreen : 1; // 0x40(0x01)
	char bUseMouseForTouch : 1; // 0x40(0x01)
	char bEnableMouseSmoothing : 1; // 0x40(0x01)
	char bEnableFOVScaling : 1; // 0x40(0x01)
	char bCaptureMouseOnLaunch : 1; // 0x40(0x01)
	char bDefaultViewportMouseLock : 1; // 0x40(0x01)
	char bAlwaysShowTouchInterface : 1; // 0x40(0x01)
	char bShowConsoleOnFourFingerTap : 1; // 0x41(0x01)
	char bEnableGestureRecognizer : 1; // 0x41(0x01)
	char pad_41_2 : 6; // 0x41(0x01)
	bool bUseAutocorrect; // 0x42(0x01)
	char pad_43[0x5]; // 0x43(0x05)
	struct TArray<struct FString> ExcludedAutocorrectOS; // 0x48(0x10)
	struct TArray<struct FString> ExcludedAutocorrectCultures; // 0x58(0x10)
	struct TArray<struct FString> ExcludedAutocorrectDeviceModels; // 0x68(0x10)
	enum class EMouseCaptureMode DefaultViewportMouseCaptureMode; // 0x78(0x01)
	enum class EMouseLockMode DefaultViewportMouseLockMode; // 0x79(0x01)
	char pad_7A[0x2]; // 0x7a(0x02)
	float FOVScale; // 0x7c(0x04)
	float DoubleClickTime; // 0x80(0x04)
	char pad_84[0x4]; // 0x84(0x04)
	struct TArray<struct FInputActionKeyMapping> ActionMappings; // 0x88(0x10)
	struct TArray<struct FInputAxisKeyMapping> AxisMappings; // 0x98(0x10)
	struct TArray<struct FInputActionSpeechMapping> SpeechMappings; // 0xa8(0x10)
	struct FSoftObjectPath DefaultTouchInterface; // 0xb8(0x18)
	struct FKey ConsoleKey; // 0xd0(0x18)
	struct TArray<struct FKey> ConsoleKeys; // 0xe8(0x10)

	void SaveKeyMappings(); // Function Engine.InputSettings.SaveKeyMappings // (Final|Native|Public|BlueprintCallable) // @ game+0x9dd1dc0
	void RemoveAxisMapping(struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.RemoveAxisMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9dd1b70
	void RemoveActionMapping(struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.RemoveActionMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9dd19f0
	struct UInputSettings* STATIC_GetInputSettings(); // Function Engine.InputSettings.GetInputSettings // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dd1320
	void GetAxisNames(struct TArray<struct FName>& AxisNames); // Function Engine.InputSettings.GetAxisNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dd0e60
	void GetAxisMappingByName(struct FName InAxisName, struct TArray<struct FInputAxisKeyMapping>& OutMappings); // Function Engine.InputSettings.GetAxisMappingByName // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dd0d00
	void GetActionNames(struct TArray<struct FName>& ActionNames); // Function Engine.InputSettings.GetActionNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dd0c30
	void GetActionMappingByName(struct FName InActionName, struct TArray<struct FInputActionKeyMapping>& OutMappings); // Function Engine.InputSettings.GetActionMappingByName // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dd0ad0
	void ForceRebuildKeymaps(); // Function Engine.InputSettings.ForceRebuildKeymaps // (Final|Native|Public|BlueprintCallable) // @ game+0x9dd0ab0
	void AddAxisMapping(struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.AddAxisMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9dd0360
	void AddActionMapping(struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.AddActionMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9dd01e0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Interface_AssetUserData
// Size: 0x30 (Inherited: 0x30)
class UInterface_AssetUserData : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Interface_CollisionDataProvider
// Size: 0x30 (Inherited: 0x30)
class UInterface_CollisionDataProvider : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Interface_PostProcessVolume
// Size: 0x30 (Inherited: 0x30)
class UInterface_PostProcessVolume : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Interface_PreviewMeshProvider
// Size: 0x30 (Inherited: 0x30)
class UInterface_PreviewMeshProvider : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpCurveEdSetup
// Size: 0x48 (Inherited: 0x30)
class UInterpCurveEdSetup : public UObject {
public:

	struct TArray<struct FCurveEdTab> Tabs; // 0x30(0x10)
	int32_t ActiveTab; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpData
// Size: 0x78 (Inherited: 0x30)
class UInterpData : public UObject {
public:

	float InterpLength; // 0x30(0x04)
	float PathBuildTime; // 0x34(0x04)
	struct TArray<struct UInterpGroup*> InterpGroups; // 0x38(0x10)
	struct UInterpCurveEdSetup* CurveEdSetup; // 0x48(0x08)
	float EdSectionStart; // 0x50(0x04)
	float EdSectionEnd; // 0x54(0x04)
	char bShouldBakeAndPrune : 1; // 0x58(0x01)
	char pad_58_1 : 7; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
	struct UInterpGroupDirector* CachedDirectorGroup; // 0x60(0x08)
	struct TArray<struct FName> AllEventNames; // 0x68(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.IntSerialization
// Size: 0x58 (Inherited: 0x30)
class UIntSerialization : public UObject {
public:

	uint16_t UnsignedInt16Variable; // 0x30(0x02)
	char pad_32[0x2]; // 0x32(0x02)
	uint32_t UnsignedInt32Variable; // 0x34(0x04)
	uint64_t UnsignedInt64Variable; // 0x38(0x08)
	int8_t SignedInt8Variable; // 0x40(0x01)
	char pad_41[0x1]; // 0x41(0x01)
	int16_t SignedInt16Variable; // 0x42(0x02)
	char pad_44[0x4]; // 0x44(0x04)
	int64_t SignedInt64Variable; // 0x48(0x08)
	char UnsignedInt8Variable; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	int32_t SignedInt32Variable; // 0x54(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Layer
// Size: 0x50 (Inherited: 0x30)
class ULayer : public UObject {
public:

	struct FName LayerName; // 0x30(0x08)
	char bIsVisible : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct TArray<struct FLayerActorStats> ActorStats; // 0x40(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Level
// Size: 0x3c0 (Inherited: 0x30)
class ULevel : public UObject {
public:

	char pad_30[0x88-0x10]; // 0x30(0x88)
	struct TArray<struct AActor*> Actors;
	struct UWorld* OwningWorld; // 0xb8(0x08)
	struct UModel* Model; // 0xc0(0x08)
	struct TArray<struct UModelComponent*> ModelComponents; // 0xc8(0x10)
	struct ULevelActorContainer* ActorCluster; // 0xd8(0x08)
	int32_t NumTextureStreamingUnbuiltComponents; // 0xe0(0x04)
	int32_t NumTextureStreamingDirtyResources; // 0xe4(0x04)
	struct ALevelScriptActor* LevelScriptActor; // 0xe8(0x08)
	struct ANavigationObjectBase* NavListStart; // 0xf0(0x08)
	struct ANavigationObjectBase* NavListEnd; // 0xf8(0x08)
	struct TArray<struct UNavigationDataChunk*> NavDataChunks; // 0x100(0x10)
	float LightmapTotalSize; // 0x110(0x04)
	float ShadowmapTotalSize; // 0x114(0x04)
	struct TArray<struct FVector> StaticNavigableGeometry; // 0x118(0x10)
	struct TArray<struct FGuid> StreamingTextureGuids; // 0x128(0x10)
	char pad_138[0x98]; // 0x138(0x98)
	struct FGuid LevelBuildDataId; // 0x1d0(0x10)
	struct UMapBuildDataRegistry* MapBuildData; // 0x1e0(0x08)
	struct FIntVector LightBuildLevelOffset; // 0x1e8(0x0c)
	char bIsLightingScenario : 1; // 0x1f4(0x01)
	char pad_1F4_1 : 2; // 0x1f4(0x01)
	char bTextureStreamingRotationChanged : 1; // 0x1f4(0x01)
	char bStaticComponentsRegisteredInStreamingManager : 1; // 0x1f4(0x01)
	char bIsVisible : 1; // 0x1f4(0x01)
	char pad_1F4_6 : 2; // 0x1f4(0x01)
	char pad_1F5[0x5b]; // 0x1f5(0x5b)
	struct AWorldSettings* WorldSettings; // 0x250(0x08)
	char pad_258[0x8]; // 0x258(0x08)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x260(0x10)
	char pad_270[0x10]; // 0x270(0x10)
	/*struct TArray<struct FReplicatedStaticActorDestructionInfo>*/char DestroyedReplicatedStaticActors[0x10]; // 0x280(0x10)
	char pad_290[0x130]; // 0x290(0x130)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LevelActorContainer
// Size: 0x40 (Inherited: 0x30)
class ULevelActorContainer : public UObject {
public:

	struct TArray<struct AActor*> actors; // 0x30(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LightmappedSurfaceCollection
// Size: 0x48 (Inherited: 0x30)
class ULightmappedSurfaceCollection : public UObject {
public:

	struct UModel* SourceModel; // 0x30(0x08)
	struct TArray<int32_t> Surfaces; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LightmassPrimitiveSettingsObject
// Size: 0x50 (Inherited: 0x30)
class ULightmassPrimitiveSettingsObject : public UObject {
public:

	struct FLightmassPrimitiveSettings LightmassSettings; // 0x30(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LocalLightGroupBake
// Size: 0x220 (Inherited: 0x30)
class ULocalLightGroupBake : public UObject {
public:

	struct TArray<struct FLocalLightGroupBakeLightMapInfo> LightMapInfos; // 0x30(0x10)
	struct TArray<struct FLocalLightGroupBakeShadowMapInfo> ShadowMapInfos; // 0x40(0x10)
	char pad_50[0x140]; // 0x50(0x140)
	struct TArray<struct ULightMapVirtualTexture2D*> ConvertedVTLightmaps; // 0x190(0x10)
	bool bForHD; // 0x1a0(0x01)
	char pad_1A1[0x7f]; // 0x1a1(0x7f)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LocalReflectionGroupBake
// Size: 0xe8 (Inherited: 0x30)
class ULocalReflectionGroupBake : public UObject {
public:

	char pad_30[0xb8]; // 0x30(0xb8)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MapBuildDataRegistry
// Size: 0x240 (Inherited: 0x30)
class UMapBuildDataRegistry : public UObject {
public:

	enum class ELightingBuildQuality LevelLightingQuality; // 0x30(0x01)
	char pad_31[0x20f]; // 0x31(0x20f)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TetLightCache
// Size: 0x80 (Inherited: 0x30)
class UTetLightCache : public UObject {
public:

	char pad_30[0x50]; // 0x30(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialParameterCollection
// Size: 0x80 (Inherited: 0x30)
class UMaterialParameterCollection : public UObject {
public:

	struct FGuid StateId; // 0x30(0x10)
	struct TArray<struct FCollectionScalarParameter> ScalarParameters; // 0x40(0x10)
	struct TArray<struct FCollectionVectorParameter> VectorParameters; // 0x50(0x10)
	char pad_60[0x20]; // 0x60(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialParameterCollectionInstance
// Size: 0xf8 (Inherited: 0x30)
class UMaterialParameterCollectionInstance : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)
	struct UMaterialParameterCollection* Collection; // 0x38(0x08)
	char pad_40[0xb8]; // 0x40(0xb8)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MatineeAnimInterface
// Size: 0x30 (Inherited: 0x30)
class UMatineeAnimInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MatineeInterface
// Size: 0x30 (Inherited: 0x30)
class UMatineeInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MorphTarget
// Size: 0x50 (Inherited: 0x30)
class UMorphTarget : public UObject {
public:

	struct USkeletalMesh* BaseSkelMesh; // 0x30(0x08)
	char pad_38[0x18]; // 0x38(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.NavAgentInterface
// Size: 0x30 (Inherited: 0x30)
class UNavAgentInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.NavCollisionBase
// Size: 0x78 (Inherited: 0x30)
class UNavCollisionBase : public UObject {
public:

	char bIsDynamicObstacle : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x47]; // 0x31(0x47)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.NavEdgeProviderInterface
// Size: 0x30 (Inherited: 0x30)
class UNavEdgeProviderInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.NavigationDataChunk
// Size: 0x38 (Inherited: 0x30)
class UNavigationDataChunk : public UObject {
public:

	struct FName NavigationDataName; // 0x30(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.NavigationDataInterface
// Size: 0x30 (Inherited: 0x30)
class UNavigationDataInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.NavigationSystemBase
// Size: 0x30 (Inherited: 0x30)
class UNavigationSystemBase : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.NavLinkDefinition
// Size: 0x58 (Inherited: 0x30)
class UNavLinkDefinition : public UObject {
public:

	struct TArray<struct FNavigationLink> Links; // 0x30(0x10)
	struct TArray<struct FNavigationSegmentLink> SegmentLinks; // 0x40(0x10)
	char pad_50[0x8]; // 0x50(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.NavPathObserverInterface
// Size: 0x30 (Inherited: 0x30)
class UNavPathObserverInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.NavRelevantInterface
// Size: 0x30 (Inherited: 0x30)
class UNavRelevantInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.NetworkPredictionInterface
// Size: 0x30 (Inherited: 0x30)
class UNetworkPredictionInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.NodeMappingContainer
// Size: 0x170 (Inherited: 0x30)
class UNodeMappingContainer : public UObject {
public:

	struct TMap<struct FName, struct FNodeItem> SourceItems; // 0x30(0x50)
	struct TMap<struct FName, struct FNodeItem> TargetItems; // 0x80(0x50)
	struct TMap<struct FName, struct FName> SourceToTarget; // 0xd0(0x50)
	/*struct TSoftObjectPtr<UObject>*/char SourceAsset[0x28]; // 0x120(0x28)
	/*struct TSoftObjectPtr<UObject>*/char TargetAsset[0x28]; // 0x148(0x28)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.NodeMappingProviderInterface
// Size: 0x30 (Inherited: 0x30)
class UNodeMappingProviderInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.GI2DData
// Size: 0x80 (Inherited: 0x30)
class UGI2DData : public UObject {
public:

	char pad_30[0x10]; // 0x30(0x10)
	/*struct TArray<struct TSoftObjectPtr<UTexture2D>>*/char GITextureSoftPtrs[0x10]; // 0x40(0x10)
	struct UTexture2D* GITexture; // 0x50(0x08)
	char pad_58[0x8]; // 0x58(0x08)
	struct UTexture2D* AOTexture; // 0x60(0x08)
	char pad_68[0x8]; // 0x68(0x08)
	struct FVector4 GI2DMinMax; // 0x70(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TetLightDataMap
// Size: 0x80 (Inherited: 0x30)
class UTetLightDataMap : public UObject {
public:

	/*struct TMap<struct FIntVector, struct TSoftObjectPtr<UTetLightData>>*/char DataMap[0x50]; // 0x30(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ObjectLibrary
// Size: 0xb0 (Inherited: 0x30)
class UObjectLibrary : public UObject {
public:

	struct UClass* ObjectBaseClass; // 0x30(0x08)
	bool bHasBlueprintClasses; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct TArray<struct UObject*> Objects; // 0x40(0x10)
	struct TArray<struct TWeakObjectPtr<struct UObject>> WeakObjects; // 0x50(0x10)
	bool bUseWeakReferences; // 0x60(0x01)
	bool bIsFullyLoaded; // 0x61(0x01)
	char pad_62[0x4e]; // 0x62(0x4e)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ObjectPoolInterface
// Size: 0x30 (Inherited: 0x30)
class UObjectPoolInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ObjectPoolableInterface
// Size: 0x30 (Inherited: 0x30)
class UObjectPoolableInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ObjectReferencer
// Size: 0x40 (Inherited: 0x30)
class UObjectReferencer : public UObject {
public:

	struct TArray<struct UObject*> ReferencedObjects; // 0x30(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleLODLevel
// Size: 0xc0 (Inherited: 0x30)
class UParticleLODLevel : public UObject {
public:

	int32_t Level; // 0x30(0x04)
	char bEnabled : 1; // 0x34(0x01)
	char pad_34_1 : 7; // 0x34(0x01)
	char pad_35[0x3]; // 0x35(0x03)
	struct UParticleModuleRequired* RequiredModule; // 0x38(0x08)
	struct TArray<struct UParticleModule*> Modules; // 0x40(0x10)
	struct UParticleModuleTypeDataBase* TypeDataModule; // 0x50(0x08)
	struct UParticleModuleSpawn* SpawnModule; // 0x58(0x08)
	struct UParticleModuleEventGenerator* EventGenerator; // 0x60(0x08)
	struct TArray<struct UParticleModuleSpawnBase*> SpawningModules; // 0x68(0x10)
	struct TArray<struct UParticleModule*> SpawnModules; // 0x78(0x10)
	struct TArray<struct UParticleModule*> UpdateModules; // 0x88(0x10)
	struct TArray<struct UParticleModuleOrbit*> OrbitModules; // 0x98(0x10)
	struct TArray<struct UParticleModuleEventReceiverBase*> EventReceiverModules; // 0xa8(0x10)
	char ConvertedModules : 1; // 0xb8(0x01)
	char pad_B8_1 : 7; // 0xb8(0x01)
	char pad_B9[0x3]; // 0xb9(0x03)
	int32_t PeakActiveParticles; // 0xbc(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleEventSendToGame
// Size: 0x30 (Inherited: 0x30)
class UParticleModuleEventSendToGame : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleSystemReplay
// Size: 0x48 (Inherited: 0x30)
class UParticleSystemReplay : public UObject {
public:

	int32_t ClipIDNumber; // 0x30(0x04)
	char pad_34[0x14]; // 0x34(0x14)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PathFollowingAgentInterface
// Size: 0x30 (Inherited: 0x30)
class UPathFollowingAgentInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PhysicalMaterial
// Size: 0x88 (Inherited: 0x30)
class UPhysicalMaterial : public UObject {
public:

	float Friction; // 0x30(0x04)
	enum class EFrictionCombineMode FrictionCombineMode; // 0x34(0x01)
	bool bOverrideFrictionCombineMode; // 0x35(0x01)
	char pad_36[0x2]; // 0x36(0x02)
	float Restitution; // 0x38(0x04)
	enum class EFrictionCombineMode RestitutionCombineMode; // 0x3c(0x01)
	bool bOverrideRestitutionCombineMode; // 0x3d(0x01)
	char pad_3E[0x2]; // 0x3e(0x02)
	float Density; // 0x40(0x04)
	float RaiseMassToPower; // 0x44(0x04)
	float DestructibleDamageThresholdScale; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct UPhysicalMaterialPropertyBase* PhysicalMaterialProperty; // 0x50(0x08)
	enum class EPhysicalSurface SurfaceType; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	float TireFrictionScale; // 0x5c(0x04)
	struct TArray<struct FTireFrictionScalePair> TireFrictionScales; // 0x60(0x10)
	char pad_70[0x18]; // 0x70(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PhysicalMaterialPropertyBase
// Size: 0x30 (Inherited: 0x30)
class UPhysicalMaterialPropertyBase : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PhysicsAsset
// Size: 0x128 (Inherited: 0x30)
class UPhysicsAsset : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)
	struct TArray<int32_t> BoundsBodies; // 0x38(0x10)
	struct TArray<struct USkeletalBodySetup*> SkeletalBodySetups; // 0x48(0x10)
	struct TArray<struct UPhysicsConstraintTemplate*> ConstraintSetup; // 0x58(0x10)
	char bNotForDedicatedServer : 1; // 0x68(0x01)
	char pad_68_1 : 7; // 0x68(0x01)
	char pad_69[0xa7]; // 0x69(0xa7)
	struct UThumbnailInfo* ThumbnailInfo; // 0x110(0x08)
	struct TArray<struct UBodySetup*> BodySetup; // 0x118(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PhysicsCollisionHandler
// Size: 0x48 (Inherited: 0x30)
class UPhysicsCollisionHandler : public UObject {
public:

	float ImpactThreshold; // 0x30(0x04)
	float ImpactReFireDelay; // 0x34(0x04)
	struct USoundBase* DefaultImpactSound; // 0x38(0x08)
	float LastImpactSoundTime; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PhysicsConstraintTemplate
// Size: 0x300 (Inherited: 0x30)
class UPhysicsConstraintTemplate : public UObject {
public:

	struct FConstraintInstance DefaultInstance; // 0x30(0x1b8)
	struct TArray<struct FPhysicsConstraintProfileHandle> ProfileHandles; // 0x1e8(0x10)
	struct FConstraintProfileProperties DefaultProfile; // 0x1f8(0x104)
	char pad_2FC[0x4]; // 0x2fc(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PlatformInterfaceWebResponse
// Size: 0xb8 (Inherited: 0x30)
class UPlatformInterfaceWebResponse : public UObject {
public:

	struct FString OriginalURL; // 0x30(0x10)
	int32_t ResponseCode; // 0x40(0x04)
	int32_t Tag; // 0x44(0x04)
	struct FString StringResponse; // 0x48(0x10)
	struct TArray<char> BinaryResponse; // 0x58(0x10)
	char pad_68[0x50]; // 0x68(0x50)

	int32_t GetNumHeaders(); // Function Engine.PlatformInterfaceWebResponse.GetNumHeaders // (Native|Public) // @ game+0x9e73b80
	struct FString GetHeaderValue(struct FString HeaderName); // Function Engine.PlatformInterfaceWebResponse.GetHeaderValue // (Native|Public) // @ game+0x9e739e0
	void GetHeader(int32_t HeaderIndex, struct FString& Header, struct FString& Value); // Function Engine.PlatformInterfaceWebResponse.GetHeader // (Native|Public|HasOutParms) // @ game+0x9e73840
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Polys
// Size: 0x40 (Inherited: 0x30)
class UPolys : public UObject {
public:

	char pad_30[0x10]; // 0x30(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PoseWatch
// Size: 0x40 (Inherited: 0x30)
class UPoseWatch : public UObject {
public:

	struct UEdGraphNode* Node; // 0x30(0x08)
	struct FColor PoseWatchColour; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PreBakeTODDirectionalShadowDepthMap
// Size: 0x80 (Inherited: 0x30)
class UPreBakeTODDirectionalShadowDepthMap : public UObject {
public:

	struct TMap<struct FString, struct FPreBakeDirectionalShadowDepthMap> DirectionalShadowDepthMaps; // 0x30(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PreviewCollectionInterface
// Size: 0x30 (Inherited: 0x30)
class UPreviewCollectionInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ReverbEffect
// Size: 0x60 (Inherited: 0x30)
class UReverbEffect : public UObject {
public:

	float Density; // 0x30(0x04)
	float Diffusion; // 0x34(0x04)
	float Gain; // 0x38(0x04)
	float GainHF; // 0x3c(0x04)
	float DecayTime; // 0x40(0x04)
	float DecayHFRatio; // 0x44(0x04)
	float ReflectionsGain; // 0x48(0x04)
	float ReflectionsDelay; // 0x4c(0x04)
	float LateGain; // 0x50(0x04)
	float LateDelay; // 0x54(0x04)
	float AirAbsorptionGainHF; // 0x58(0x04)
	float RoomRolloffFactor; // 0x5c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Rig
// Size: 0x58 (Inherited: 0x30)
class URig : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)
	struct TArray<struct FTransformBase> TransformBases; // 0x38(0x10)
	struct TArray<struct FNode> Nodes; // 0x48(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.RuntimeOptionsBase
// Size: 0x40 (Inherited: 0x30)
class URuntimeOptionsBase : public UObject {
public:

	char pad_30[0x10]; // 0x30(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.RuntimeVirtualTexture
// Size: 0x170 (Inherited: 0x30)
class URuntimeVirtualTexture : public UObject {
public:

	int32_t TileCount; // 0x30(0x04)
	int32_t TileSize; // 0x34(0x04)
	int32_t TileBorderSize; // 0x38(0x04)
	enum class ERuntimeVirtualTextureMaterialType MaterialType; // 0x3c(0x01)
	bool bCompressTextures; // 0x3d(0x01)
	bool bEnableRTCDecompressSimulation; // 0x3e(0x01)
	char pad_3F[0x1]; // 0x3f(0x01)
	struct FRTCProfile RuntimeTexCompressionProfile; // 0x40(0x0c)
	struct FRTCProfile RTCProfileTex0; // 0x4c(0x0c)
	struct FRTCProfile RTCProfileTex1; // 0x58(0x0c)
	struct FRTCProfile RTCProfileTex2; // 0x64(0x0c)
	bool bEnable; // 0x70(0x01)
	bool bClearTextures; // 0x71(0x01)
	bool bSinglePhysicalSpace; // 0x72(0x01)
	bool bPrivateSpace; // 0x73(0x01)
	bool bAdaptive; // 0x74(0x01)
	bool bContinuousUpdate; // 0x75(0x01)
	bool bEnableScalability; // 0x76(0x01)
	char pad_77[0x1]; // 0x77(0x01)
	int32_t RemoveLowMips; // 0x78(0x04)
	int32_t size; // 0x7c(0x04)
	int32_t StreamLowMips; // 0x80(0x04)
	char pad_84[0x4]; // 0x84(0x04)
	struct URuntimeVirtualTextureStreamingProxy* StreamingTexture_ForPC; // 0x88(0x08)
	struct URuntimeVirtualTextureStreamingProxy* StreamingTexture_Runtime; // 0x90(0x08)
	int32_t StreamTextureMipLevel; // 0x98(0x04)
	int32_t SubSVTRegionSize; // 0x9c(0x04)
	int32_t SubSVTRegionMipOffset; // 0xa0(0x04)
	char pad_A4[0x4]; // 0xa4(0x04)
	struct FSVTRegionDataSoftObject RegionSVT0sSoftPath; // 0xa8(0x20)
	/*struct TSoftObjectPtr<URuntimeVirtualTextureStreamingProxy>*/char SVT1SoftPath[0x28]; // 0xc8(0x28)
	char pad_F0[0x80]; // 0xf0(0x80)

	int32_t GetSize(); // Function Engine.RuntimeVirtualTexture.GetSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e93480
	int32_t GetPageTableSize(); // Function Engine.RuntimeVirtualTexture.GetPageTableSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e93450
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.RVOAvoidanceInterface
// Size: 0x30 (Inherited: 0x30)
class URVOAvoidanceInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Scene
// Size: 0x30 (Inherited: 0x30)
class UScene : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SCS_Node
// Size: 0xe0 (Inherited: 0x30)
class USCS_Node : public UObject {
public:

	struct UClass* ComponentClass; // 0x30(0x08)
	struct UActorComponent* ComponentTemplate; // 0x38(0x08)
	struct FBlueprintCookedComponentInstancingData CookedComponentInstancingData; // 0x40(0x48)
	struct FName AttachToName; // 0x88(0x08)
	struct FName ParentComponentOrVariableName; // 0x90(0x08)
	struct FName ParentComponentOwnerClassName; // 0x98(0x08)
	bool bIsParentComponentNative; // 0xa0(0x01)
	char pad_A1[0x7]; // 0xa1(0x07)
	struct TArray<struct USCS_Node*> ChildNodes; // 0xa8(0x10)
	struct TArray<struct FBPVariableMetaDataEntry> MetaDataArray; // 0xb8(0x10)
	struct FGuid VariableGuid; // 0xc8(0x10)
	struct FName InternalVariableName; // 0xd8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Selection
// Size: 0xa8 (Inherited: 0x30)
class USelection : public UObject {
public:

	char pad_30[0x78]; // 0x30(0x78)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SimpleConstructionScript
// Size: 0xa8 (Inherited: 0x30)
class USimpleConstructionScript : public UObject {
public:

	struct TArray<struct USCS_Node*> RootNodes; // 0x30(0x10)
	struct TArray<struct USCS_Node*> AllNodes; // 0x40(0x10)
	struct USCS_Node* DefaultSceneRootNode; // 0x50(0x08)
	char pad_58[0x50]; // 0x58(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SkeletalMeshSocket
// Size: 0x68 (Inherited: 0x30)
class USkeletalMeshSocket : public UObject {
public:

	struct FName SocketName; // 0x30(0x08)
	struct FName BoneName; // 0x38(0x08)
	struct FVector RelativeLocation; // 0x40(0x0c)
	struct FRotator RelativeRotation; // 0x4c(0x0c)
	struct FVector RelativeScale; // 0x58(0x0c)
	bool bForceAlwaysAnimated; // 0x64(0x01)
	char pad_65[0x1]; // 0x65(0x01)
	bool bOverrideByMeshOnlySocket; // 0x66(0x01)
	char pad_67[0x1]; // 0x67(0x01)

	void InitializeSocketFromLocation(struct USkeletalMeshComponent* SkelComp, struct FVector WorldLocation, struct FVector WorldNormal); // Function Engine.SkeletalMeshSocket.InitializeSocketFromLocation // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9ea72a0
	struct FVector GetSocketLocation(struct USkeletalMeshComponent* SkelComp); // Function Engine.SkeletalMeshSocket.GetSocketLocation // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea7020
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SlateBrushAsset
// Size: 0xc0 (Inherited: 0x30)
class USlateBrushAsset : public UObject {
public:

	struct FSlateBrush Brush; // 0x30(0x90)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SlateTextureAtlasInterface
// Size: 0x30 (Inherited: 0x30)
class USlateTextureAtlasInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundAttenuation
// Size: 0x380 (Inherited: 0x30)
class USoundAttenuation : public UObject {
public:

	struct FSoundAttenuationSettings Attenuation; // 0x30(0x350)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundClass
// Size: 0x98 (Inherited: 0x30)
class USoundClass : public UObject {
public:

	struct FSoundClassProperties Properties; // 0x30(0x30)
	struct TArray<struct USoundClass*> ChildClasses; // 0x60(0x10)
	struct TArray<struct FPassiveSoundMixModifier> PassiveSoundMixModifiers; // 0x70(0x10)
	struct FSoundModulation Modulation; // 0x80(0x10)
	struct USoundClass* ParentClass; // 0x90(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundConcurrency
// Size: 0x50 (Inherited: 0x30)
class USoundConcurrency : public UObject {
public:

	struct FSoundConcurrencySettings Concurrency; // 0x30(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundEffectSourcePresetChain
// Size: 0x48 (Inherited: 0x30)
class USoundEffectSourcePresetChain : public UObject {
public:

	struct TArray<struct FSourceEffectChainEntry> Chain; // 0x30(0x10)
	char bPlayEffectChainTails : 1; // 0x40(0x01)
	char pad_40_1 : 7; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundGroups
// Size: 0x90 (Inherited: 0x30)
class USoundGroups : public UObject {
public:

	struct TArray<struct FSoundGroup> SoundGroupProfiles; // 0x30(0x10)
	char pad_40[0x50]; // 0x40(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundMix
// Size: 0x90 (Inherited: 0x30)
class USoundMix : public UObject {
public:

	char bApplyEQ : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float EQPriority; // 0x34(0x04)
	struct FAudioEQEffect EQSettings; // 0x38(0x38)
	struct TArray<struct FSoundClassAdjuster> SoundClassEffects; // 0x70(0x10)
	float InitialDelay; // 0x80(0x04)
	float FadeInTime; // 0x84(0x04)
	float Duration; // 0x88(0x04)
	float FadeOutTime; // 0x8c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundSubmix
// Size: 0x90 (Inherited: 0x30)
class USoundSubmix : public UObject {
public:

	struct TArray<struct USoundSubmix*> ChildSubmixes; // 0x30(0x10)
	struct USoundSubmix* ParentSubmix; // 0x40(0x08)
	enum class ESubmixChannelFormat ChannelFormat; // 0x48(0x01)
	char bMuteWhenBackgrounded : 1; // 0x49(0x01)
	char pad_49_1 : 7; // 0x49(0x01)
	char pad_4A[0x6]; // 0x4a(0x06)
	struct TArray<struct USoundEffectSubmixPreset*> SubmixEffectChain; // 0x50(0x10)
	struct UAmbisonicsSubmixSettingsBase* AmbisonicsPluginSettings; // 0x60(0x08)
	int32_t EnvelopeFollowerAttackTime; // 0x68(0x04)
	int32_t EnvelopeFollowerReleaseTime; // 0x6c(0x04)
	float OutputVolume; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
	/*struct FMulticastInlineDelegate*/char OnSubmixRecordedFileDone[0x10]; // 0x78(0x10)
	char pad_88[0x8]; // 0x88(0x08)

	void StopRecordingOutput(struct UObject* WorldContextObject, enum class EAudioRecordingExportType ExportType, struct FString Name, struct FString Path, struct USoundWave* ExistingSoundWaveToOverwrite); // Function Engine.SoundSubmix.StopRecordingOutput // (Final|Native|Public|BlueprintCallable) // @ game+0x9eb8340
	void StopEnvelopeFollowing(struct UObject* WorldContextObject); // Function Engine.SoundSubmix.StopEnvelopeFollowing // (Final|Native|Public|BlueprintCallable) // @ game+0x9eb82c0
	void StartRecordingOutput(struct UObject* WorldContextObject, float ExpectedDuration); // Function Engine.SoundSubmix.StartRecordingOutput // (Final|Native|Public|BlueprintCallable) // @ game+0x9eb8200
	void StartEnvelopeFollowing(struct UObject* WorldContextObject); // Function Engine.SoundSubmix.StartEnvelopeFollowing // (Final|Native|Public|BlueprintCallable) // @ game+0x9eb8180
	void SetSubmixOutputVolume(struct UObject* WorldContextObject, float InOutputVolume); // Function Engine.SoundSubmix.SetSubmixOutputVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x9eb7b60
	void AddEnvelopeFollowerDelegate(/*struct UObject* WorldContextObject, struct FDelegate& OnSubmixEnvelopeBP*/); // Function Engine.SoundSubmix.AddEnvelopeFollowerDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9eb2dc0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SplineMetadata
// Size: 0x30 (Inherited: 0x30)
class USplineMetadata : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.StaticMeshSocket
// Size: 0x70 (Inherited: 0x30)
class UStaticMeshSocket : public UObject {
public:

	struct FName SocketName; // 0x30(0x08)
	struct FVector RelativeLocation; // 0x38(0x0c)
	struct FRotator RelativeRotation; // 0x44(0x0c)
	struct FVector RelativeScale; // 0x50(0x0c)
	char pad_5C[0x4]; // 0x5c(0x04)
	struct FString Tag; // 0x60(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.StringTable
// Size: 0x48 (Inherited: 0x30)
class UStringTable : public UObject {
public:

	char pad_30[0x18]; // 0x30(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SubsurfaceProfile
// Size: 0xc0 (Inherited: 0x30)
class USubsurfaceProfile : public UObject {
public:

	struct FSubsurfaceProfileStruct Settings; // 0x30(0x8c)
	char pad_BC[0x4]; // 0xbc(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SubUVAnimation
// Size: 0x70 (Inherited: 0x30)
class USubUVAnimation : public UObject {
public:

	struct UTexture2D* SubUVTexture; // 0x30(0x08)
	int32_t SubImages_Horizontal; // 0x38(0x04)
	int32_t SubImages_Vertical; // 0x3c(0x04)
	enum class ESubUVBoundingVertexCount BoundingMode; // 0x40(0x01)
	enum class EOpacitySourceMode OpacitySourceMode; // 0x41(0x01)
	char pad_42[0x2]; // 0x42(0x02)
	float AlphaThreshold; // 0x44(0x04)
	char pad_48[0x28]; // 0x48(0x28)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TetLightData
// Size: 0x90 (Inherited: 0x30)
class UTetLightData : public UObject {
public:

	char pad_30[0x60]; // 0x30(0x60)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TextPropertyTestObject
// Size: 0x78 (Inherited: 0x30)
class UTextPropertyTestObject : public UObject {
public:

	struct FText DefaultedText; // 0x30(0x18)
	struct FText UndefaultedText; // 0x48(0x18)
	struct FText TransientText; // 0x60(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ThumbnailInfo
// Size: 0x30 (Inherited: 0x30)
class UThumbnailInfo : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TimelineTemplate
// Size: 0xb8 (Inherited: 0x30)
class UTimelineTemplate : public UObject {
public:

	float TimelineLength; // 0x30(0x04)
	enum class ETimelineLengthMode LengthMode; // 0x34(0x01)
	char bAutoPlay : 1; // 0x35(0x01)
	char bLoop : 1; // 0x35(0x01)
	char bReplicated : 1; // 0x35(0x01)
	char bIgnoreTimeDilation : 1; // 0x35(0x01)
	char pad_35_4 : 4; // 0x35(0x01)
	char pad_36[0x2]; // 0x36(0x02)
	struct TArray<struct FTTEventTrack> EventTracks; // 0x38(0x10)
	struct TArray<struct FTTFloatTrack> FloatTracks; // 0x48(0x10)
	struct TArray<struct FTTVectorTrack> VectorTracks; // 0x58(0x10)
	struct TArray<struct FTTLinearColorTrack> LinearColorTracks; // 0x68(0x10)
	struct TArray<struct FBPVariableMetaDataEntry> MetaDataArray; // 0x78(0x10)
	struct FGuid TimelineGuid; // 0x88(0x10)
	struct FName VariableName; // 0x98(0x08)
	struct FName DirectionPropertyName; // 0xa0(0x08)
	struct FName UpdateFunctionName; // 0xa8(0x08)
	struct FName FinishedFunctionName; // 0xb0(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TouchInterface
// Size: 0x60 (Inherited: 0x30)
class UTouchInterface : public UObject {
public:

	struct TArray<struct FTouchInputControl> Controls; // 0x30(0x10)
	float ActiveOpacity; // 0x40(0x04)
	float InactiveOpacity; // 0x44(0x04)
	float TimeUntilDeactive; // 0x48(0x04)
	float TimeUntilReset; // 0x4c(0x04)
	float ActivationDelay; // 0x50(0x04)
	bool bPreventRecenter; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
	float StartupDelay; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.UserDefinedEnum
// Size: 0xb8 (Inherited: 0x68)
class UUserDefinedEnum : public UEnum {
public:

	struct TMap<struct FName, struct FText> DisplayNameMap; // 0x68(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.UserDefinedStruct
// Size: 0x118 (Inherited: 0xd0)
class UUserDefinedStruct : public UScriptStruct {
public:

	enum class EUserDefinedStructureStatus Status; // 0xd0(0x01)
	char pad_D1[0x3]; // 0xd1(0x03)
	struct FGuid Guid; // 0xd4(0x10)
	char pad_E4[0x34]; // 0xe4(0x34)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.VirtualTexturePoolConfig
// Size: 0x48 (Inherited: 0x30)
class UVirtualTexturePoolConfig : public UObject {
public:

	int32_t DefaultSizeInMegabyte; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct TArray<struct FVirtualTextureSpacePoolConfig> Pools; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.VisualLoggerAutomationTests
// Size: 0x30 (Inherited: 0x30)
class UVisualLoggerAutomationTests : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.VisualLoggerDebugSnapshotInterface
// Size: 0x30 (Inherited: 0x30)
class UVisualLoggerDebugSnapshotInterface : public UInterface {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.HierarchicalLODSetup
// Size: 0x68 (Inherited: 0x30)
class UHierarchicalLODSetup : public UObject {
public:

	struct TArray<struct FHierarchicalSimplification> HierarchicalLODSetup; // 0x30(0x10)
	/*struct TSoftObjectPtr<UMaterialInterface>*/char OverrideBaseMaterial[0x28]; // 0x40(0x28)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// BlueprintGeneratedClass Engine.Default__BlueprintGeneratedClass
// Size: 0x00 (Inherited: 0x00)
class Default__BlueprintGeneratedClass {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// AnimBlueprintGeneratedClass Engine.Default__AnimBlueprintGeneratedClass
// Size: 0x00 (Inherited: 0x00)
class Default__AnimBlueprintGeneratedClass {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BlueprintFunctionLibrary
// Size: 0x30 (Inherited: 0x30)
class UBlueprintFunctionLibrary : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimNotify
// Size: 0x40 (Inherited: 0x30)
class UAnimNotify : public UObject {
public:

	char pad_30[0x10]; // 0x30(0x10)

	bool Received_Notify(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Engine.AnimNotify.Received_Notify // (Event|Public|BlueprintEvent|Const) // @ game+0x7ed88c0
	struct FString GetNotifyName(); // Function Engine.AnimNotify.GetNotifyName // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x9d713c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.GameInstance
// Size: 0x1a8 (Inherited: 0x30)
class UGameInstance : public UObject {
public:

	char pad_30[0x10]; // 0x30(0x10)
	struct TArray<struct ULocalPlayer*> LocalPlayers; // 0x40(0x10)
	struct UOnlineSession* OnlineSession; // 0x50(0x08)
	struct TArray<struct UObject*> ReferencedObjects; // 0x58(0x10)
	char pad_68[0x140]; // 0x68(0x140)

	void ReceiveShutdown(); // Function Engine.GameInstance.ReceiveShutdown // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveInit(); // Function Engine.GameInstance.ReceiveInit // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void HandleTravelError(enum class ETravelFailure FailureType); // Function Engine.GameInstance.HandleTravelError // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void HandleNetworkError(enum class ENetworkFailure FailureType, bool bIsServer); // Function Engine.GameInstance.HandleNetworkError // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void DebugRemovePlayer(int32_t ControllerId); // Function Engine.GameInstance.DebugRemovePlayer // (Exec|Native|Public) // @ game+0x6fb0850
	void DebugCreatePlayer(int32_t ControllerId); // Function Engine.GameInstance.DebugCreatePlayer // (Exec|Native|Public) // @ game+0x9dbb2e0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Subsystem
// Size: 0x38 (Inherited: 0x30)
class USubsystem : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Actor
// Size: 0x378 (Inherited: 0x30)
class AActor : public UObject {
public:

	struct FActorTickFunction PrimaryActorTick; // 0x30(0x68)
	char bHidden : 1; // 0x98(0x01)
	char bNetTemporary : 1; // 0x98(0x01)
	char bNetStartup : 1; // 0x98(0x01)
	char bOnlyRelevantToOwner : 1; // 0x98(0x01)
	char bAlwaysRelevant : 1; // 0x98(0x01)
	char bReplicateMovement : 1; // 0x98(0x01)
	char bShouldCallPreReplication : 1; // 0x98(0x01)
	char pad_98_7 : 1; // 0x98(0x01)
	char bTearOff : 1; // 0x99(0x01)
	char bExchangedRoles : 1; // 0x99(0x01)
	char bNetLoadOnClient : 1; // 0x99(0x01)
	char bNetUseOwnerRelevancy : 1; // 0x99(0x01)
	char bRelevantForNetworkReplays : 1; // 0x99(0x01)
	char bRelevantForLevelBounds : 1; // 0x99(0x01)
	char bReplayRewindable : 1; // 0x99(0x01)
	char bAllowTickBeforeBeginPlay : 1; // 0x99(0x01)
	char bAllowBluePrintTick : 1; // 0x9a(0x01)
	char bAutoDestroyWhenFinished : 1; // 0x9a(0x01)
	char bBlockInput : 1; // 0x9a(0x01)
	char bCanBeDamaged : 1; // 0x9a(0x01)
	char bCollideWhenPlacing : 1; // 0x9a(0x01)
	char bFindCameraComponentWhenViewTarget : 1; // 0x9a(0x01)
	char bGenerateOverlapEventsDuringLevelStreaming : 1; // 0x9a(0x01)
	char bIgnoresOriginShifting : 1; // 0x9a(0x01)
	char bEnableAutoLODGeneration : 1; // 0x9b(0x01)
	char bIsEditorOnlyActor : 1; // 0x9b(0x01)
	char bActorSeamlessTraveled : 1; // 0x9b(0x01)
	char bReplicates : 1; // 0x9b(0x01)
	char bCanBeInCluster : 1; // 0x9b(0x01)
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x9b(0x01)
	char pad_9B_6 : 2; // 0x9b(0x01)
	char pad_9C_0 : 6; // 0x9c(0x01)
	char bActorEnableCollision : 1; // 0x9c(0x01)
	char bActorIsBeingDestroyed : 1; // 0x9c(0x01)
	char pad_9D[0x1]; // 0x9d(0x01)
	enum class EActorUpdateOverlapsMethod UpdateOverlapsMethodDuringLevelStreaming; // 0x9e(0x01)
	enum class EActorUpdateOverlapsMethod DefaultUpdateOverlapsMethodDuringLevelStreaming; // 0x9f(0x01)
	enum class ENetRole RemoteRole; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	struct FRepMovement ReplicatedMovement; // 0xa4(0x34)
	float InitialLifeSpan; // 0xd8(0x04)
	float CustomTimeDilation; // 0xdc(0x04)
	char pad_E0[0x8]; // 0xe0(0x08)
	struct FRepAttachment AttachmentReplication; // 0xe8(0x40)
	struct AActor* Owner; // 0x128(0x08)
	struct FName NetDriverName; // 0x130(0x08)
	enum class ENetRole Role; // 0x138(0x01)
	enum class ENetDormancy NetDormancy; // 0x139(0x01)
	enum class ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x13a(0x01)
	enum class EAutoReceiveInput AutoReceiveInput; // 0x13b(0x01)
	int32_t InputPriority; // 0x13c(0x04)
	struct UInputComponent* InputComponent; // 0x140(0x08)
	float NetCullDistanceSquared; // 0x148(0x04)
	float NetCullDistanceSquared_HD; // 0x14c(0x04)
	float NetCullDistanceSquared_M; // 0x150(0x04)
	int32_t NetTag; // 0x154(0x04)
	float NetUpdateFrequency; // 0x158(0x04)
	float MinNetUpdateFrequency; // 0x15c(0x04)
	float NetPriority; // 0x160(0x04)
	char pad_164[0xc]; // 0x164(0x0c)
	struct APawn* Instigator; // 0x170(0x08)
	struct TArray<struct AActor*> Children; // 0x178(0x10)
	struct USceneComponent* RootComponent; // 0x188(0x08)
	struct TArray<struct AMatineeActor*> ControllingMatineeActors; // 0x190(0x10)
	char pad_1A0[0x8]; // 0x1a0(0x08)
	struct TArray<struct FName> Layers; // 0x1a8(0x10)
	struct TWeakObjectPtr<struct UChildActorComponent> ParentComponent; // 0x1b8(0x08)
	struct TArray<struct FName> Tags; // 0x1c0(0x10)
	struct FMulticastSparseDelegate OnTakeAnyDamage; // 0x1d0(0x01)
	struct FMulticastSparseDelegate OnTakePointDamage; // 0x1d1(0x01)
	struct FMulticastSparseDelegate OnTakeRadialDamage; // 0x1d2(0x01)
	struct FMulticastSparseDelegate OnActorBeginOverlap; // 0x1d3(0x01)
	struct FMulticastSparseDelegate OnActorEndOverlap; // 0x1d4(0x01)
	struct FMulticastSparseDelegate OnBeginCursorOver; // 0x1d5(0x01)
	struct FMulticastSparseDelegate OnEndCursorOver; // 0x1d6(0x01)
	struct FMulticastSparseDelegate OnClicked; // 0x1d7(0x01)
	struct FMulticastSparseDelegate OnReleased; // 0x1d8(0x01)
	struct FMulticastSparseDelegate OnInputTouchBegin; // 0x1d9(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnd; // 0x1da(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnter; // 0x1db(0x01)
	struct FMulticastSparseDelegate OnInputTouchLeave; // 0x1dc(0x01)
	struct FMulticastSparseDelegate OnActorHit; // 0x1dd(0x01)
	char pad_1DE[0x22]; // 0x1de(0x22)
	struct FMulticastSparseDelegate OnDestroyed; // 0x200(0x01)
	struct FMulticastSparseDelegate OnEndPlay; // 0x201(0x01)
	char pad_202[0x76]; // 0x202(0x76)
	struct TArray<struct UActorComponent*> InstanceComponents; // 0x278(0x10)
	struct TArray<struct UActorComponent*> BlueprintCreatedComponents; // 0x288(0x10)
	char pad_298[0xe0]; // 0x298(0xe0)

	bool WasRecentlyRendered(float Tolerance); // Function Engine.Actor.WasRecentlyRendered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d5c950
	bool WasRecentlyContinuousRendered(struct UWorld* World, float Tolerance); // Function Engine.Actor.WasRecentlyContinuousRendered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d5c890
	void UserConstructionScript(); // Function Engine.Actor.UserConstructionScript // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void TearOff(); // Function Engine.Actor.TearOff // (Native|Public|BlueprintCallable) // @ game+0x895c00
	void SnapRootComponentTo(struct AActor* InParentActor, struct FName InSocketName); // Function Engine.Actor.SnapRootComponentTo // (Final|Native|Public|BlueprintCallable) // @ game+0x9d5c7d0
	void SetTickGroup(enum class ETickingGroup NewTickGroup); // Function Engine.Actor.SetTickGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x9d5c6c0
	void SetTickableWhenPaused(bool bTickableWhenPaused); // Function Engine.Actor.SetTickableWhenPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x9d5c740
	void SetReplicates(bool bInReplicates); // Function Engine.Actor.SetReplicates // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x9d5c630
	void SetReplicateMovement(bool bInReplicateMovement); // Function Engine.Actor.SetReplicateMovement // (Native|Public|BlueprintCallable) // @ game+0x6391040
	void SetOwner(struct AActor* NewOwner); // Function Engine.Actor.SetOwner // (Native|Public|BlueprintCallable) // @ game+0x360c630
	void SetNetDormancy(enum class ENetDormancy NewDormancy); // Function Engine.Actor.SetNetDormancy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x9d5c5b0
	void SetLifeSpan(float InLifespan); // Function Engine.Actor.SetLifeSpan // (Native|Public|BlueprintCallable) // @ game+0x9d5c530
	void SetActorTickInterval(float TickInterval); // Function Engine.Actor.SetActorTickInterval // (Final|Native|Public|BlueprintCallable) // @ game+0x9d5c4b0
	void SetActorTickEnabled(bool bEnabled); // Function Engine.Actor.SetActorTickEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x9d5c420
	void SetActorScale3D(struct FVector NewScale3D); // Function Engine.Actor.SetActorScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9d5c390
	void SetActorRelativeScale3D(struct FVector NewRelativeScale); // Function Engine.Actor.SetActorRelativeScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9d5c300
	void SetActorHiddenInGame(bool bNewHidden); // Function Engine.Actor.SetActorHiddenInGame // (Native|Public|BlueprintCallable) // @ game+0x9d5c270
	void SetActorEnableCollision(bool bNewActorEnableCollision); // Function Engine.Actor.SetActorEnableCollision // (Final|Native|Public|BlueprintCallable) // @ game+0x9d5c1e0
	void RemoveTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.Actor.RemoveTickPrerequisiteComponent // (Native|Public|BlueprintCallable) // @ game+0x9d5c150
	void RemoveTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.Actor.RemoveTickPrerequisiteActor // (Native|Public|BlueprintCallable) // @ game+0x9d5c0c0
	void ReceiveTick(float DeltaSeconds); // Function Engine.Actor.ReceiveTick // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveRadialDamage(float DamageReceived, struct UDamageType* DamageType, struct FVector Origin, struct FHitResult& HitInfo, struct AController* InstigatedBy, struct AActor* DamageCauser); // Function Engine.Actor.ReceiveRadialDamage // (BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x7ed88c0
	void ReceivePointDamage(float Damage, struct UDamageType* DamageType, struct FVector HitLocation, struct FVector HitNormal, struct UPrimitiveComponent* HitComponent, struct FName BoneName, struct FVector ShotFromDirection, struct AController* InstigatedBy, struct AActor* DamageCauser, struct FHitResult& HitInfo); // Function Engine.Actor.ReceivePointDamage // (BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveHit(struct UPrimitiveComponent* MyComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, bool bSelfMoved, struct FVector HitLocation, struct FVector HitNormal, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Engine.Actor.ReceiveHit // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveEndPlay(enum class EEndPlayReason EndPlayReason); // Function Engine.Actor.ReceiveEndPlay // (Event|Protected|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveDestroyed(); // Function Engine.Actor.ReceiveDestroyed // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveBeginPlay(); // Function Engine.Actor.ReceiveBeginPlay // (Event|Protected|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveAnyDamage(float Damage, struct UDamageType* DamageType, struct AController* InstigatedBy, struct AActor* DamageCauser); // Function Engine.Actor.ReceiveAnyDamage // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveActorOnReleased(struct FKey ButtonReleased); // Function Engine.Actor.ReceiveActorOnReleased // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveActorOnInputTouchLeave(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchLeave // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveActorOnInputTouchEnter(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchEnter // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveActorOnInputTouchEnd(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchEnd // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveActorOnInputTouchBegin(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchBegin // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveActorOnClicked(struct FKey ButtonPressed); // Function Engine.Actor.ReceiveActorOnClicked // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveActorEndOverlap(struct AActor* OtherActor); // Function Engine.Actor.ReceiveActorEndOverlap // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveActorEndCursorOver(); // Function Engine.Actor.ReceiveActorEndCursorOver // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveActorBeginOverlap(struct AActor* OtherActor); // Function Engine.Actor.ReceiveActorBeginOverlap // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveActorBeginCursorOver(); // Function Engine.Actor.ReceiveActorBeginCursorOver // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int32_t CinematicTextureGroups); // Function Engine.Actor.PrestreamTextures // (Native|Public|BlueprintCallable) // @ game+0x9d5bfb0
	void OnRep_ReplicateMovement(); // Function Engine.Actor.OnRep_ReplicateMovement // (Native|Public) // @ game+0x8951b0
	void OnRep_ReplicatedMovement(); // Function Engine.Actor.OnRep_ReplicatedMovement // (Native|Public) // @ game+0x3624900
	void OnRep_Owner(); // Function Engine.Actor.OnRep_Owner // (Native|Protected) // @ game+0x921830
	void OnRep_Instigator(); // Function Engine.Actor.OnRep_Instigator // (Native|Public) // @ game+0xaa9890
	void OnRep_AttachmentReplication(); // Function Engine.Actor.OnRep_AttachmentReplication // (Native|Public) // @ game+0x895960
	void MakeNoise(float Loudness, struct APawn* NoiseInstigator, struct FVector NoiseLocation, float MaxRange, struct FName Tag); // Function Engine.Actor.MakeNoise // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9d5be20
	struct UMaterialInstanceDynamic* MakeMIDForMaterial(struct UMaterialInterface* Parent); // Function Engine.Actor.MakeMIDForMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x9d5bd90
	bool K2_TeleportTo(struct FVector DestLocation, struct FRotator DestRotation); // Function Engine.Actor.K2_TeleportTo // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9d5bca0
	bool K2_SetActorTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9d5baa0
	bool K2_SetActorRotation(struct FRotator NewRotation, bool bTeleportPhysics); // Function Engine.Actor.K2_SetActorRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9d5b9c0
	void K2_SetActorRelativeTransform(struct FTransform& NewRelativeTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorRelativeTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9d5b7c0
	void K2_SetActorRelativeRotation(struct FRotator NewRelativeRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorRelativeRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9d5b620
	void K2_SetActorRelativeLocation(struct FVector NewRelativeLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorRelativeLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9d5b480
	bool K2_SetActorLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorLocationAndRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9d5b280
	bool K2_SetActorLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9d5b0d0
	void K2_OnReset(); // Function Engine.Actor.K2_OnReset // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void K2_OnEndViewTarget(struct APlayerController* PC); // Function Engine.Actor.K2_OnEndViewTarget // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void K2_OnBecomeViewTarget(struct APlayerController* PC); // Function Engine.Actor.K2_OnBecomeViewTarget // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	struct USceneComponent* K2_GetRootComponent(); // Function Engine.Actor.K2_GetRootComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d5b0b0
	struct TArray<struct UActorComponent*> K2_GetComponentsByClass(struct UClass* ComponentClass); // Function Engine.Actor.K2_GetComponentsByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d5afd0
	struct FRotator K2_GetActorRotation(); // Function Engine.Actor.K2_GetActorRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d5af20
	struct FVector K2_GetActorLocation(); // Function Engine.Actor.K2_GetActorLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d5aeb0
	void K2_DetachFromActor(enum class EDetachmentRule LocationRule, enum class EDetachmentRule RotationRule, enum class EDetachmentRule ScaleRule); // Function Engine.Actor.K2_DetachFromActor // (Final|Native|Public|BlueprintCallable) // @ game+0x9d5adb0
	void K2_DestroyComponent(struct UActorComponent* Component); // Function Engine.Actor.K2_DestroyComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x9d5ad30
	void K2_DestroyActor(); // Function Engine.Actor.K2_DestroyActor // (Native|Public|BlueprintCallable) // @ game+0x49bcba0
	void K2_AttachToComponent(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachToComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x9d5ab70
	void K2_AttachToActor(struct AActor* ParentActor, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachToActor // (Final|Native|Public|BlueprintCallable) // @ game+0x9d5a9b0
	void K2_AttachRootComponentToActor(struct AActor* InParentActor, struct FName InSocketName, enum class EAttachLocation AttachLocationType, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachRootComponentToActor // (Final|Native|Public|BlueprintCallable) // @ game+0x9d5a860
	void K2_AttachRootComponentTo(struct USceneComponent* InParent, struct FName InSocketName, enum class EAttachLocation AttachLocationType, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachRootComponentTo // (Final|Native|Public|BlueprintCallable) // @ game+0x9d5a710
	void K2_AddActorWorldTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9d5a510
	void K2_AddActorWorldRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9d5a370
	void K2_AddActorWorldOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9d5a1d0
	void K2_AddActorLocalTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorLocalTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9d59fd0
	void K2_AddActorLocalRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorLocalRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9d59e30
	void K2_AddActorLocalOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorLocalOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9d59c90
	bool IsOverlappingActor(struct AActor* Other); // Function Engine.Actor.IsOverlappingActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d59c00
	bool IsChildActor(); // Function Engine.Actor.IsChildActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d59bd0
	bool IsActorTickEnabled(); // Function Engine.Actor.IsActorTickEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d59ba0
	bool IsActorBeingDestroyed(); // Function Engine.Actor.IsActorBeingDestroyed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d59b70
	bool HasAuthority(); // Function Engine.Actor.HasAuthority // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d59b40
	float GetVerticalDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetVerticalDistanceTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d59aa0
	struct FVector GetVelocity(); // Function Engine.Actor.GetVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d59a60
	struct FTransform GetTransform(); // Function Engine.Actor.GetTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d59a10
	bool GetTickableWhenPaused(); // Function Engine.Actor.GetTickableWhenPaused // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d599e0
	float GetSquaredDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetSquaredDistanceTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d59940
	enum class ENetRole GetRemoteRole(); // Function Engine.Actor.GetRemoteRole // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d59920
	struct UChildActorComponent* GetParentComponent(); // Function Engine.Actor.GetParentComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d598f0
	struct AActor* GetParentActor(); // Function Engine.Actor.GetParentActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d598c0
	struct AActor* GetOwner(); // Function Engine.Actor.GetOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d598a0
	void GetOverlappingComponents(struct TArray<struct UPrimitiveComponent*>& OverlappingComponents); // Function Engine.Actor.GetOverlappingComponents // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d597d0
	void GetOverlappingActors(struct TArray<struct AActor*>& OverlappingActors, struct UClass* ClassFilter); // Function Engine.Actor.GetOverlappingActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d596b0
	enum class ENetRole GetLocalRole(); // Function Engine.Actor.GetLocalRole // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d59690
	float GetLifeSpan(); // Function Engine.Actor.GetLifeSpan // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d59650
	struct AController* GetInstigatorController(); // Function Engine.Actor.GetInstigatorController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d59620
	struct APawn* GetInstigator(); // Function Engine.Actor.GetInstigator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d595f0
	struct FVector GetInputVectorAxisValue(struct FKey InputAxisKey); // Function Engine.Actor.GetInputVectorAxisValue // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d594f0
	float GetInputAxisValue(struct FName InputAxisName); // Function Engine.Actor.GetInputAxisValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d59450
	float GetInputAxisKeyValue(struct FKey InputAxisKey); // Function Engine.Actor.GetInputAxisKeyValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d59360
	float GetHorizontalDotProductTo(struct AActor* OtherActor); // Function Engine.Actor.GetHorizontalDotProductTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d592c0
	float GetHorizontalDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetHorizontalDistanceTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d59220
	float GetGameTimeSinceCreation(); // Function Engine.Actor.GetGameTimeSinceCreation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d591f0
	float GetDotProductTo(struct AActor* OtherActor); // Function Engine.Actor.GetDotProductTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d59150
	float GetDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetDistanceTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d590b0
	struct TArray<struct UActorComponent*> GetComponentsByTag(struct UClass* ComponentClass, struct FName Tag); // Function Engine.Actor.GetComponentsByTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d58fa0
	struct TArray<struct UActorComponent*> GetComponentsByInterface(struct UClass* Interface); // Function Engine.Actor.GetComponentsByInterface // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d58ec0
	struct UActorComponent* GetComponentByClass(struct UClass* ComponentClass); // Function Engine.Actor.GetComponentByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d58e30
	struct FName GetAttachParentSocketName(); // Function Engine.Actor.GetAttachParentSocketName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d58cd0
	struct AActor* GetAttachParentActor(); // Function Engine.Actor.GetAttachParentActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d58ca0
	void GetAttachedActors(struct TArray<struct AActor*>& OutActors, bool bResetArray); // Function Engine.Actor.GetAttachedActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d58d10
	void GetAllChildActors(struct TArray<struct AActor*>& ChildActors, bool bIncludeDescendants); // Function Engine.Actor.GetAllChildActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d58b80
	struct FVector GetActorUpVector(); // Function Engine.Actor.GetActorUpVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d58b10
	float GetActorTimeDilation(); // Function Engine.Actor.GetActorTimeDilation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d58ae0
	float GetActorTickInterval(); // Function Engine.Actor.GetActorTickInterval // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d58ab0
	struct FVector GetActorScale3D(); // Function Engine.Actor.GetActorScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d58a70
	struct FVector GetActorRightVector(); // Function Engine.Actor.GetActorRightVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d58a00
	struct FVector GetActorRelativeScale3D(); // Function Engine.Actor.GetActorRelativeScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d589c0
	struct FVector GetActorForwardVector(); // Function Engine.Actor.GetActorForwardVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d58950
	void GetActorEyesViewPoint(struct FVector& OutLocation, struct FRotator& OutRotation); // Function Engine.Actor.GetActorEyesViewPoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d58860
	bool GetActorEnableCollision(); // Function Engine.Actor.GetActorEnableCollision // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d58830
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector& Origin, struct FVector& BoxExtent); // Function Engine.Actor.GetActorBounds // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d58700
	void ForceNetUpdate(); // Function Engine.Actor.ForceNetUpdate // (Native|Public|BlueprintCallable) // @ game+0x7895230
	void FlushNetDormancy(); // Function Engine.Actor.FlushNetDormancy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x9d586e0
	void EnableInput(struct APlayerController* PlayerController); // Function Engine.Actor.EnableInput // (Native|Public|BlueprintCallable) // @ game+0x9d58650
	void DisableInput(struct APlayerController* PlayerController); // Function Engine.Actor.DisableInput // (Native|Public|BlueprintCallable) // @ game+0xcb2910
	void DetachRootComponentFromParent(bool bMaintainWorldPosition); // Function Engine.Actor.DetachRootComponentFromParent // (Final|Native|Public|BlueprintCallable) // @ game+0x9d585c0
	void AddTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.Actor.AddTickPrerequisiteComponent // (Native|Public|BlueprintCallable) // @ game+0x9d58530
	void AddTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.Actor.AddTickPrerequisiteActor // (Native|Public|BlueprintCallable) // @ game+0x9d584a0
	struct UActorComponent* AddComponent(struct FName TemplateName, bool bManualAttachment, struct FTransform& RelativeTransform, struct UObject* ComponentTemplateContext); // Function Engine.Actor.AddComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9d582e0
	bool ActorHasTag(struct FName Tag); // Function Engine.Actor.ActorHasTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d58250
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DataAsset
// Size: 0x38 (Inherited: 0x30)
class UDataAsset : public UObject {
public:

	struct UClass* NativeClass; // 0x30(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ActorComponent
// Size: 0x100 (Inherited: 0x30)
class UActorComponent : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)
	struct FActorComponentTickFunction PrimaryComponentTick; // 0x38(0x68)
	struct TArray<struct FName> ComponentTags; // 0xa0(0x10)
	char bAllowBluePrintTick : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0xb8(0x10)
	char pad_C8[0x8]; // 0xc8(0x08)
	char pad_D0_0 : 3; // 0xd0(0x01)
	char bReplicates : 1; // 0xd0(0x01)
	char bShouldCallPreReplication : 1; // 0xd0(0x01)
	char bNetAddressable : 1; // 0xd0(0x01)
	char bRegisterAsData : 1; // 0xd0(0x01)
	char pad_D0_7 : 1; // 0xd0(0x01)
	char pad_D1[0x1]; // 0xd1(0x01)
	enum class EComponentReplicationFlags ReplicationFlag; // 0xd2(0x01)
	char pad_D3_0 : 4; // 0xd3(0x01)
	char bAutoActivate : 1; // 0xd3(0x01)
	char bIsActive : 1; // 0xd3(0x01)
	char bEditableWhenInherited : 1; // 0xd3(0x01)
	char pad_D3_7 : 1; // 0xd3(0x01)
	char bCanEverAffectNavigation : 1; // 0xd4(0x01)
	char pad_D4_1 : 1; // 0xd4(0x01)
	char bIsEditorOnly : 1; // 0xd4(0x01)
	char pad_D4_3 : 5; // 0xd4(0x01)
	char pad_D5[0x1]; // 0xd5(0x01)
	enum class EComponentCreationMethod CreationMethod; // 0xd6(0x01)
	struct FMulticastSparseDelegate OnComponentActivated; // 0xd7(0x01)
	struct FMulticastSparseDelegate OnComponentDeactivated; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
	struct TArray<struct FSimpleMemberReference> UCSModifiedProperties; // 0xe0(0x10)
	char pad_F0[0x10]; // 0xf0(0x10)

	void ToggleActive(); // Function Engine.ActorComponent.ToggleActive // (Native|Public|BlueprintCallable) // @ game+0x921830
	void SetTickGroup(enum class ETickingGroup NewTickGroup); // Function Engine.ActorComponent.SetTickGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x9d602b0
	void SetTickableWhenPaused(bool bTickableWhenPaused); // Function Engine.ActorComponent.SetTickableWhenPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x9d60330
	void SetIsReplicated(bool ShouldReplicate); // Function Engine.ActorComponent.SetIsReplicated // (Final|Native|Public|BlueprintCallable) // @ game+0x9d60220
	void SetComponentTickInterval(float TickInterval); // Function Engine.ActorComponent.SetComponentTickInterval // (Final|Native|Public|BlueprintCallable) // @ game+0x9d601a0
	void SetComponentTickEnabled(bool bEnabled); // Function Engine.ActorComponent.SetComponentTickEnabled // (Native|Public|BlueprintCallable) // @ game+0x9d60110
	void SetAutoActivate(bool bNewAutoActivate); // Function Engine.ActorComponent.SetAutoActivate // (Native|Public|BlueprintCallable) // @ game+0x6391040
	void SetActive(bool bNewActive, bool bReset); // Function Engine.ActorComponent.SetActive // (Native|Public|BlueprintCallable) // @ game+0x9d60040
	void RemoveTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.ActorComponent.RemoveTickPrerequisiteComponent // (Native|Public|BlueprintCallable) // @ game+0x9d5ffb0
	void RemoveTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.ActorComponent.RemoveTickPrerequisiteActor // (Native|Public|BlueprintCallable) // @ game+0x9d5ff20
	void ReceiveTick(float DeltaSeconds); // Function Engine.ActorComponent.ReceiveTick // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveEndPlay(enum class EEndPlayReason EndPlayReason); // Function Engine.ActorComponent.ReceiveEndPlay // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveBeginPlay(); // Function Engine.ActorComponent.ReceiveBeginPlay // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void OnRep_IsActive(); // Function Engine.ActorComponent.OnRep_IsActive // (Native|Public) // @ game+0x8951b0
	void K2_DestroyComponent(struct UObject* Object); // Function Engine.ActorComponent.K2_DestroyComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x9d5fe20
	bool IsComponentTickEnabled(); // Function Engine.ActorComponent.IsComponentTickEnabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d5fdf0
	bool IsBeingDestroyed(); // Function Engine.ActorComponent.IsBeingDestroyed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d5fdc0
	bool IsActive(); // Function Engine.ActorComponent.IsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d5fd90
	struct AActor* GetOwner(); // Function Engine.ActorComponent.GetOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d5fd70
	float GetComponentTickInterval(); // Function Engine.ActorComponent.GetComponentTickInterval // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d5fd40
	void Deactivate(); // Function Engine.ActorComponent.Deactivate // (Native|Public|BlueprintCallable) // @ game+0x8964b0
	bool ComponentHasTag(struct FName Tag); // Function Engine.ActorComponent.ComponentHasTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d5fb30
	void AddTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.ActorComponent.AddTickPrerequisiteComponent // (Native|Public|BlueprintCallable) // @ game+0x9d5f9e0
	void AddTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.ActorComponent.AddTickPrerequisiteActor // (Native|Public|BlueprintCallable) // @ game+0x9d5f950
	void Activate(bool bReset); // Function Engine.ActorComponent.Activate // (Native|Public|BlueprintCallable) // @ game+0x624b450
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DeveloperSettings
// Size: 0x40 (Inherited: 0x30)
class UDeveloperSettings : public UObject {
public:

	char pad_30[0x10]; // 0x30(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BlueprintCore
// Size: 0x58 (Inherited: 0x30)
class UBlueprintCore : public UObject {
public:

	struct UClass* SkeletonGeneratedClass; // 0x30(0x08)
	struct UClass* GeneratedClass; // 0x38(0x08)
	bool bLegacyNeedToPurgeSkelRefs; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	struct FGuid BlueprintGuid; // 0x44(0x10)
	char pad_54[0x4]; // 0x54(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BlueprintGeneratedClass
// Size: 0x370 (Inherited: 0x270)
class UBlueprintGeneratedClass : public UClass {
public:

	int32_t NumReplicatedProperties; // 0x270(0x04)
	char bHasNativizedParent : 1; // 0x274(0x01)
	char bHasCookedComponentInstancingData : 1; // 0x274(0x01)
	char pad_274_2 : 6; // 0x274(0x01)
	char pad_275[0x3]; // 0x275(0x03)
	struct TArray<struct UDynamicBlueprintBinding*> DynamicBindingObjects; // 0x278(0x10)
	struct TArray<struct UActorComponent*> ComponentTemplates; // 0x288(0x10)
	struct TArray<struct UTimelineTemplate*> Timelines; // 0x298(0x10)
	struct TArray<struct FBPComponentClassOverride> ComponentClassOverrides; // 0x2a8(0x10)
	/*struct USimpleConstructionScript**/char SimpleConstructionScript[0x8]; // 0x2b8(0x08)
	struct UInheritableComponentHandler* InheritableComponentHandler; // 0x2c0(0x08)
	struct UStructProperty* UberGraphFramePointerProperty; // 0x2c8(0x08)
	char pad_2D0[0x8]; // 0x2d0(0x08)
	struct UFunction* UberGraphFunction; // 0x2d8(0x08)
	bool bForceClusteringDisable; // 0x2e0(0x01)
	char pad_2E1[0x7]; // 0x2e1(0x07)
	struct TMap<struct FName, struct FBlueprintCookedComponentInstancingData> CookedComponentInstancingData; // 0x2e8(0x50)
	char pad_338[0x38]; // 0x338(0x38)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BlueprintAsyncActionBase
// Size: 0x38 (Inherited: 0x30)
class UBlueprintAsyncActionBase : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)

	void Activate(); // Function Engine.BlueprintAsyncActionBase.Activate // (Native|Public|BlueprintCallable) // @ game+0x8951b0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.StreamableRenderAsset
// Size: 0x48 (Inherited: 0x30)
class UStreamableRenderAsset : public UObject {
public:

	double ForceMipLevelsToBeResidentTimestamp; // 0x30(0x08)
	int32_t NumCinematicMipLevels; // 0x38(0x04)
	int32_t StreamingIndex; // 0x3c(0x04)
	int32_t CachedCombinedLODBias; // 0x40(0x04)
	char CachedNumResidentLODs; // 0x44(0x01)
	char CachedNumPerfectWantedLODs; // 0x45(0x01)
	char bCachedReadyForStreaming : 1; // 0x46(0x01)
	char NeverStream : 1; // 0x46(0x01)
	char bGlobalForceMipLevelsToBeResident : 1; // 0x46(0x01)
	char bIsStreamable : 1; // 0x46(0x01)
	char bHasStreamingUpdatePending : 1; // 0x46(0x01)
	char bForceMiplevelsToBeResident : 1; // 0x46(0x01)
	char bIgnoreStreamingMipBias : 1; // 0x46(0x01)
	char bUseCinematicMipLevels : 1; // 0x46(0x01)
	char bForceKeepFullMipLevels : 1; // 0x47(0x01)
	char pad_47_1 : 7; // 0x47(0x01)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimBoneCompressionCodec
// Size: 0x40 (Inherited: 0x30)
class UAnimBoneCompressionCodec : public UObject {
public:

	struct FString Description; // 0x30(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimCurveCompressionCodec
// Size: 0x30 (Inherited: 0x30)
class UAnimCurveCompressionCodec : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialInterface
// Size: 0x90 (Inherited: 0x30)
class UMaterialInterface : public UObject {
public:

	char pad_30[0x10]; // 0x30(0x10)
	struct USubsurfaceProfile* SubsurfaceProfile; // 0x40(0x08)
	char pad_48[0x10]; // 0x48(0x10)
	struct FLightmassMaterialInterfaceSettings LightmassSettings; // 0x58(0x10)
	struct TArray<struct FMaterialTextureInfo> TextureStreamingData; // 0x68(0x10)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x78(0x10)
	char pad_88[0x8]; // 0x88(0x08)

	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int32_t CinematicTextureGroups, bool bFastResponse); // Function Engine.MaterialInterface.SetForceMipLevelsToBeResident // (RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9e4ebe0
	struct UPhysicalMaterial* GetPhysicalMaterial(); // Function Engine.MaterialInterface.GetPhysicalMaterial // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x893de0
	struct UMaterial* GetBaseMaterial(); // Function Engine.MaterialInterface.GetBaseMaterial // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9e4e810
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LevelStreaming
// Size: 0x148 (Inherited: 0x30)
class ULevelStreaming : public UObject {
public:

	/*struct TSoftObjectPtr<UWorld>*/char WorldAsset[0x28]; // 0x30(0x28)
	struct FName PackageNameToLoad; // 0x58(0x08)
	struct TArray<struct FName> LODPackageNames; // 0x60(0x10)
	char pad_70[0x10]; // 0x70(0x10)
	struct FTransform LevelTransform; // 0x80(0x30)
	int32_t LevelLODIndex; // 0xb0(0x04)
	int32_t StreamingPriority; // 0xb4(0x04)
	char pad_B8[0x2]; // 0xb8(0x02)
	char pad_BA_0 : 3; // 0xba(0x01)
	char bShouldBeVisible : 1; // 0xba(0x01)
	char bShouldBeLoaded : 1; // 0xba(0x01)
	char bLocked : 1; // 0xba(0x01)
	char bIsStatic : 1; // 0xba(0x01)
	char bShouldBlockOnLoad : 1; // 0xba(0x01)
	char bShouldBlockOnUnload : 1; // 0xbb(0x01)
	char bDisableDistanceStreaming : 1; // 0xbb(0x01)
	char bDrawOnLevelStatusMap : 1; // 0xbb(0x01)
	char pad_BB_3 : 5; // 0xbb(0x01)
	struct FLinearColor LevelColor; // 0xbc(0x10)
	char pad_CC[0x4]; // 0xcc(0x04)
	struct TArray<struct ALevelStreamingVolume*> EditorStreamingVolumes; // 0xd0(0x10)
	float MinTimeBetweenVolumeUnloadRequests; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)
	/*struct FMulticastInlineDelegate*/char OnLevelLoaded[0x10]; // 0xe8(0x10)
	/*struct FMulticastInlineDelegate*/char OnLevelUnloaded[0x10]; // 0xf8(0x10)
	/*struct FMulticastInlineDelegate*/char OnLevelShown[0x10]; // 0x108(0x10)
	/*struct FMulticastInlineDelegate*/char OnLevelHidden[0x10]; // 0x118(0x10)
	struct ULevel* LoadedLevel; // 0x128(0x08)
	struct ULevel* PendingUnloadLevel; // 0x130(0x08)
	char pad_138[0x10]; // 0x138(0x10)

	bool ShouldBeLoaded(); // Function Engine.LevelStreaming.ShouldBeLoaded // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17617b0
	void SetShouldBeVisible(bool bInShouldBeVisible); // Function Engine.LevelStreaming.SetShouldBeVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x9e36cf0
	void SetShouldBeLoaded(bool bInShouldBeLoaded); // Function Engine.LevelStreaming.SetShouldBeLoaded // (Native|Public|BlueprintCallable) // @ game+0x9021d70
	void SetPriority(int32_t NewPriority); // Function Engine.LevelStreaming.SetPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x9e36b70
	void SetLevelLODIndex(int32_t LodIndex); // Function Engine.LevelStreaming.SetLevelLODIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x9e36480
	bool IsStreamingStatePending(); // Function Engine.LevelStreaming.IsStreamingStatePending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e35230
	bool IsLevelVisible(); // Function Engine.LevelStreaming.IsLevelVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e35200
	bool IsLevelLoaded(); // Function Engine.LevelStreaming.IsLevelLoaded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e351d0
	struct FName GetWorldAssetPackageFName(); // Function Engine.LevelStreaming.GetWorldAssetPackageFName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e35160
	struct ULevel* GetLoadedLevel(); // Function Engine.LevelStreaming.GetLoadedLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d598a0
	struct ALevelScriptActor* GetLevelScriptActor(); // Function Engine.LevelStreaming.GetLevelScriptActor // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e350c0
	struct ULevelStreaming* CreateInstance(struct FString UniqueInstanceName); // Function Engine.LevelStreaming.CreateInstance // (Final|Native|Public|BlueprintCallable) // @ game+0x9e34fc0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimNotifyState
// Size: 0x38 (Inherited: 0x30)
class UAnimNotifyState : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)

	bool Received_NotifyTick(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation, float FrameDeltaTime); // Function Engine.AnimNotifyState.Received_NotifyTick // (Event|Public|BlueprintEvent|Const) // @ game+0x7ed88c0
	bool Received_NotifyEnd(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Engine.AnimNotifyState.Received_NotifyEnd // (Event|Public|BlueprintEvent|Const) // @ game+0x7ed88c0
	bool Received_NotifyBegin(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation, float TotalDuration); // Function Engine.AnimNotifyState.Received_NotifyBegin // (Event|Public|BlueprintEvent|Const) // @ game+0x7ed88c0
	struct FString GetNotifyName(); // Function Engine.AnimNotifyState.GetNotifyName // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x9d713c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrack
// Size: 0x78 (Inherited: 0x30)
class UInterpTrack : public UObject {
public:

	char pad_30[0x10]; // 0x30(0x10)
	struct TArray<struct UInterpTrack*> SubTracks; // 0x40(0x10)
	struct UClass* TrackInstClass; // 0x50(0x08)
	enum class ETrackActiveCondition ActiveCondition; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
	struct FString TrackTitle; // 0x60(0x10)
	char bOnePerGroup : 1; // 0x70(0x01)
	char bDirGroupOnly : 1; // 0x70(0x01)
	char bDisableTrack : 1; // 0x70(0x01)
	char bIsSelected : 1; // 0x70(0x01)
	char bIsAnimControlTrack : 1; // 0x70(0x01)
	char bSubTrackOnly : 1; // 0x70(0x01)
	char bVisible : 1; // 0x70(0x01)
	char bIsRecording : 1; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackInst
// Size: 0x30 (Inherited: 0x30)
class UInterpTrackInst : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Commandlet
// Size: 0x88 (Inherited: 0x30)
class UCommandlet : public UObject {
public:

	struct FString HelpDescription; // 0x30(0x10)
	struct FString HelpUsage; // 0x40(0x10)
	struct FString HelpWebLink; // 0x50(0x10)
	struct TArray<struct FString> HelpParamNames; // 0x60(0x10)
	struct TArray<struct FString> HelpParamDescriptions; // 0x70(0x10)
	char IsServer : 1; // 0x80(0x01)
	char IsClient : 1; // 0x80(0x01)
	char IsEditor : 1; // 0x80(0x01)
	char LogToConsole : 1; // 0x80(0x01)
	char ShowErrorCount : 1; // 0x80(0x01)
	char ForceSuccess : 1; // 0x80(0x01)
	char ShowProgress : 1; // 0x80(0x01)
	char pad_80_7 : 1; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Channel
// Size: 0x78 (Inherited: 0x30)
class UChannel : public UObject {
public:

	struct UNetConnection* Connection; // 0x30(0x08)
	char pad_38[0x40]; // 0x38(0x40)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Player
// Size: 0x50 (Inherited: 0x30)
class UPlayer : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)
	struct APlayerController* PlayerController; // 0x38(0x08)
	int32_t CurrentNetSpeed; // 0x40(0x04)
	int32_t ConfiguredInternetSpeed; // 0x44(0x04)
	int32_t ConfiguredLanSpeed; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.NetDriver
// Size: 0x7b8 (Inherited: 0x30)
class UNetDriver : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)
	struct FString NetConnectionClassName; // 0x38(0x10)
	struct FString ReplicationDriverClassName; // 0x48(0x10)
	int32_t MaxDownloadSize; // 0x58(0x04)
	char bClampListenServerTickRate : 1; // 0x5c(0x01)
	char pad_5C_1 : 7; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
	int32_t NetServerMaxTickRate; // 0x60(0x04)
	int32_t MaxNetTickRate; // 0x64(0x04)
	int32_t MaxInternetClientRate; // 0x68(0x04)
	int32_t MaxClientRate; // 0x6c(0x04)
	float ServerTravelPause; // 0x70(0x04)
	float SpawnPrioritySeconds; // 0x74(0x04)
	float RelevantTimeout; // 0x78(0x04)
	float KeepAliveTime; // 0x7c(0x04)
	float InitialConnectTimeout; // 0x80(0x04)
	float ConnectionTimeout; // 0x84(0x04)
	float TimeoutMultiplierForUnoptimizedBuilds; // 0x88(0x04)
	bool bNoTimeouts; // 0x8c(0x01)
	bool bNeverApplyNetworkEmulationSettings; // 0x8d(0x01)
	char pad_8E[0x2]; // 0x8e(0x02)
	struct UNetConnection* ServerConnection; // 0x90(0x08)
	struct TArray<struct UNetConnection*> ClientConnections; // 0x98(0x10)
	char pad_A8[0x60]; // 0xa8(0x60)
	int32_t RecentlyDisconnectedTrackingTime; // 0x108(0x04)
	char pad_10C[0x3c]; // 0x10c(0x3c)
	struct UWorld* World; // 0x148(0x08)
	struct UPackage* WorldPackage; // 0x150(0x08)
	char pad_158[0x20]; // 0x158(0x20)
	struct UClass* NetConnectionClass; // 0x178(0x08)
	struct UClass* ReplicationDriverClass; // 0x180(0x08)
	char pad_188[0x10]; // 0x188(0x10)
	struct FName NetDriverName; // 0x198(0x08)
	struct TArray<struct FChannelDefinition> ChannelDefinitions; // 0x1a0(0x10)
	struct TMap<struct FName, struct FChannelDefinition> ChannelDefinitionMap; // 0x1b0(0x50)
	struct TArray<struct UChannel*> ActorChannelPool; // 0x200(0x10)
	char pad_210[0x8]; // 0x210(0x08)
	float Time; // 0x218(0x04)
	char pad_21C[0x4d4]; // 0x21c(0x4d4)
	struct UReplicationDriver* ReplicationDriver; // 0x6f0(0x08)
	char pad_6F8[0xc0]; // 0x6f8(0xc0)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpression
// Size: 0x48 (Inherited: 0x30)
class UMaterialExpression : public UObject {
public:

	struct UMaterial* Material; // 0x30(0x08)
	struct UMaterialFunction* Function; // 0x38(0x08)
	char bIsParameterExpression : 1; // 0x40(0x01)
	char pad_40_1 : 7; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimInstance
// Size: 0x280 (Inherited: 0x30)
class UAnimInstance : public UObject {
public:

	struct USkeleton* CurrentSkeleton; // 0x30(0x08)
	enum class ERootMotionMode RootMotionMode; // 0x38(0x01)
	char bUseMultiThreadedAnimationUpdate : 1; // 0x39(0x01)
	char bUsingCopyPoseFromMesh : 1; // 0x39(0x01)
	char pad_39_2 : 2; // 0x39(0x01)
	char bQueueMontageEvents : 1; // 0x39(0x01)
	char pad_39_5 : 3; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
	/*struct FMulticastInlineDelegate*/char OnMontageBlendingOut[0x10]; // 0x40(0x10)
	/*struct FMulticastInlineDelegate*/char OnMontageStarted[0x10]; // 0x50(0x10)
	/*struct FMulticastInlineDelegate*/char OnMontageEnded[0x10]; // 0x60(0x10)
	/*struct FMulticastInlineDelegate*/char OnAllMontageInstancesEnded[0x10]; // 0x70(0x10)
	char pad_80[0x88]; // 0x80(0x88)
	struct FAnimNotifyQueue NotifyQueue; // 0x108(0x70)
	struct TArray<struct FAnimNotifyEvent> ActiveAnimNotifyState; // 0x178(0x10)
	char pad_188[0x61]; // 0x188(0x61)
	char bSkipBlueprintUpdateAnimation : 1; // 0x1e9(0x01)
	char bSkipBlueprintPostEvaluateAnimation : 1; // 0x1e9(0x01)
	char pad_1E9_2 : 6; // 0x1e9(0x01)
	char pad_1EA[0x96]; // 0x1ea(0x96)

	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic); // Function Engine.AnimInstance.UnlockAIResources // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x9d68220
	void UnlinkAnimClassLayers(struct UClass* InClass); // Function Engine.AnimInstance.UnlinkAnimClassLayers // (Final|Native|Public|BlueprintCallable) // @ game+0x9d681a0
	struct APawn* TryGetPawnOwner(); // Function Engine.AnimInstance.TryGetPawnOwner // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d68170
	void StopSlotAnimation(float InBlendOutTime, struct FName SlotNodeName); // Function Engine.AnimInstance.StopSlotAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x9d680a0
	void SnapshotPose(struct FPoseSnapshot& Snapshot); // Function Engine.AnimInstance.SnapshotPose // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9d67f80
	void SetRootMotionMode(enum class ERootMotionMode Value); // Function Engine.AnimInstance.SetRootMotionMode // (Final|Native|Public|BlueprintCallable) // @ game+0x9d67f00
	void SetMorphTarget(struct FName MorphTargetName, float Value); // Function Engine.AnimInstance.SetMorphTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x9d67e40
	void SavePoseSnapshot(struct FName SnapshotName); // Function Engine.AnimInstance.SavePoseSnapshot // (Native|Public|BlueprintCallable) // @ game+0x72c5c60
	void ResetDynamics(enum class ETeleportType InTeleportType); // Function Engine.AnimInstance.ResetDynamics // (Final|Native|Public|BlueprintCallable) // @ game+0x9d67dc0
	struct UAnimMontage* PlaySlotAnimationAsDynamicMontage(struct UAnimSequenceBase* Asset, struct FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage // (Final|Native|Public|BlueprintCallable) // @ game+0x9d67b80
	float PlaySlotAnimation(struct UAnimSequenceBase* Asset, struct FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount); // Function Engine.AnimInstance.PlaySlotAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x9d679c0
	void Montage_Stop(float InBlendOutTime, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x9d678f0
	void Montage_SetPosition(struct UAnimMontage* Montage, float NewPosition); // Function Engine.AnimInstance.Montage_SetPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x9d67830
	void Montage_SetPlayRate(struct UAnimMontage* Montage, float NewPlayRate); // Function Engine.AnimInstance.Montage_SetPlayRate // (Final|Native|Public|BlueprintCallable) // @ game+0x9d67770
	void Montage_SetNextSection(struct FName SectionNameToChange, struct FName NextSection, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_SetNextSection // (Final|Native|Public|BlueprintCallable) // @ game+0x9d67670
	void Montage_Resume(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_Resume // (Final|Native|Public|BlueprintCallable) // @ game+0x9d675f0
	float Montage_Play(struct UAnimMontage* MontageToPlay, float InPlayRate, enum class EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // Function Engine.AnimInstance.Montage_Play // (Final|Native|Public|BlueprintCallable) // @ game+0x9d67460
	void Montage_Pause(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_Pause // (Final|Native|Public|BlueprintCallable) // @ game+0x9d673e0
	void Montage_JumpToSectionsEnd(struct FName SectionName, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_JumpToSectionsEnd // (Final|Native|Public|BlueprintCallable) // @ game+0x9d67320
	void Montage_JumpToSection(struct FName SectionName, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_JumpToSection // (Final|Native|Public|BlueprintCallable) // @ game+0x9d67260
	bool Montage_IsPlaying(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_IsPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d671d0
	bool Montage_IsActive(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_IsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d67140
	float Montage_GetPosition(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d670a0
	float Montage_GetPlayRate(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetPlayRate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d67000
	bool Montage_GetIsStopped(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetIsStopped // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d66f70
	struct FName Montage_GetCurrentSection(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetCurrentSection // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d66ee0
	float Montage_GetBlendTime(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetBlendTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d66e40
	void LockAIResources(bool bLockMovement, bool LockAILogic); // Function Engine.AnimInstance.LockAIResources // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x9d66d70
	void LinkAnimGraphByTag(struct FName InTag, struct UClass* InClass); // Function Engine.AnimInstance.LinkAnimGraphByTag // (Final|Native|Public|BlueprintCallable) // @ game+0x9d66cb0
	void LinkAnimClassLayers(struct UClass* InClass); // Function Engine.AnimInstance.LinkAnimClassLayers // (Final|Native|Public|BlueprintCallable) // @ game+0x9d66c30
	bool IsSyncGroupBetweenMarkers(struct FName InSyncGroupName, struct FName PreviousMarker, struct FName NextMarker, bool bRespectMarkerOrder); // Function Engine.AnimInstance.IsSyncGroupBetweenMarkers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d66ae0
	bool IsPlayingSlotAnimation(struct UAnimSequenceBase* Asset, struct FName SlotNodeName); // Function Engine.AnimInstance.IsPlayingSlotAnimation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d66a20
	bool IsAnyMontagePlaying(); // Function Engine.AnimInstance.IsAnyMontagePlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d669f0
	bool HasMarkerBeenHitThisFrame(struct FName SyncGroup, struct FName MarkerName); // Function Engine.AnimInstance.HasMarkerBeenHitThisFrame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d66930
	bool GetTimeToClosestMarker(struct FName SyncGroup, struct FName MarkerName, float& OutMarkerTime); // Function Engine.AnimInstance.GetTimeToClosestMarker // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d66820
	struct FMarkerSyncAnimPosition GetSyncGroupPosition(struct FName InSyncGroupName); // Function Engine.AnimInstance.GetSyncGroupPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d66780
	float GetRelevantAnimTimeRemainingFraction(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d666c0
	float GetRelevantAnimTimeRemaining(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d66600
	float GetRelevantAnimTimeFraction(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d66540
	float GetRelevantAnimTime(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d66480
	float GetRelevantAnimLength(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimLength // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d663c0
	struct USkeletalMeshComponent* GetOwningComponent(); // Function Engine.AnimInstance.GetOwningComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d66390
	struct AActor* GetOwningActor(); // Function Engine.AnimInstance.GetOwningActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d66360
	struct UAnimInstance* GetLinkedAnimLayerInstanceByGroup(struct FName InGroup); // Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroup // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d662d0
	struct UAnimInstance* GetLinkedAnimLayerInstanceByClass(struct UClass* InClass); // Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d66240
	void GetLinkedAnimGraphInstancesByTag(struct FName InTag, struct TArray<struct UAnimInstance*>& OutLinkedInstances); // Function Engine.AnimInstance.GetLinkedAnimGraphInstancesByTag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d66130
	struct UAnimInstance* GetLinkedAnimGraphInstanceByTag(struct FName InTag); // Function Engine.AnimInstance.GetLinkedAnimGraphInstanceByTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d660a0
	float GetInstanceTransitionTimeElapsedFraction(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d65fe0
	float GetInstanceTransitionTimeElapsed(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionTimeElapsed // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d65f20
	float GetInstanceTransitionCrossfadeDuration(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d65e60
	float GetInstanceStateWeight(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetInstanceStateWeight // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d65da0
	float GetInstanceMachineWeight(int32_t MachineIndex); // Function Engine.AnimInstance.GetInstanceMachineWeight // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d65d10
	float GetInstanceCurrentStateElapsedTime(int32_t MachineIndex); // Function Engine.AnimInstance.GetInstanceCurrentStateElapsedTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d65c80
	float GetInstanceAssetPlayerTimeFromEndFraction(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d65bf0
	float GetInstanceAssetPlayerTimeFromEnd(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d65b60
	float GetInstanceAssetPlayerTimeFraction(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d65ad0
	float GetInstanceAssetPlayerTime(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d65a40
	float GetInstanceAssetPlayerLength(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerLength // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d659b0
	float GetCurveValue(struct FName CurveName); // Function Engine.AnimInstance.GetCurveValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d65910
	struct FName GetCurrentStateName(int32_t MachineIndex); // Function Engine.AnimInstance.GetCurrentStateName // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d65880
	struct UAnimMontage* GetCurrentActiveMontage(); // Function Engine.AnimInstance.GetCurrentActiveMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d65850
	struct TMap<struct FName, float> GetAnimAssetPlayPositions(); // Function Engine.AnimInstance.GetAnimAssetPlayPositions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d65710
	float GetAnimAssetPlayPosition(struct FName InName); // Function Engine.AnimInstance.GetAnimAssetPlayPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d65670
	void GetAllCurveNames(struct TArray<struct FName>& OutNames); // Function Engine.AnimInstance.GetAllCurveNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d655a0
	void GetActiveCurveNames(enum class EAnimCurveType CurveType, struct TArray<struct FName>& OutNames); // Function Engine.AnimInstance.GetActiveCurveNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d65490
	void ClearMorphTargets(); // Function Engine.AnimInstance.ClearMorphTargets // (Final|Native|Public|BlueprintCallable) // @ game+0x9d65470
	float CalculateDirection(struct FVector& Velocity, struct FRotator& BaseRotation); // Function Engine.AnimInstance.CalculateDirection // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d65370
	void BlueprintUpdateAnimation(float DeltaTimeX); // Function Engine.AnimInstance.BlueprintUpdateAnimation // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void BlueprintPostEvaluateAnimation(); // Function Engine.AnimInstance.BlueprintPostEvaluateAnimation // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void BlueprintInitializeAnimation(); // Function Engine.AnimInstance.BlueprintInitializeAnimation // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void BlueprintBeginPlay(); // Function Engine.AnimInstance.BlueprintBeginPlay // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Engine
// Size: 0xf60 (Inherited: 0x30)
class UEngine : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)
	struct UFont* TinyFont; // 0x38(0x08)
	struct FSoftObjectPath TinyFontName; // 0x40(0x18)
	struct UFont* SmallFont; // 0x58(0x08)
	struct FSoftObjectPath SmallFontName; // 0x60(0x18)
	struct UFont* MediumFont; // 0x78(0x08)
	struct FSoftObjectPath MediumFontName; // 0x80(0x18)
	struct UFont* LargeFont; // 0x98(0x08)
	struct FSoftObjectPath LargeFontName; // 0xa0(0x18)
	struct UFont* SubtitleFont; // 0xb8(0x08)
	struct FSoftObjectPath SubtitleFontName; // 0xc0(0x18)
	struct TArray<struct UFont*> AdditionalFonts; // 0xd8(0x10)
	char pad_E8[0x8]; // 0xe8(0x08)
	struct TArray<struct FString> AdditionalFontNames; // 0xf0(0x10)
	struct UClass* ConsoleClass; // 0x100(0x08)
	struct FSoftClassPath ConsoleClassName; // 0x108(0x18)
	struct UClass* GameViewportClientClass; // 0x120(0x08)
	struct FSoftClassPath GameViewportClientClassName; // 0x128(0x18)
	struct UClass* LocalPlayerClass; // 0x140(0x08)
	struct FSoftClassPath LocalPlayerClassName; // 0x148(0x18)
	struct UClass* WorldSettingsClass; // 0x160(0x08)
	struct FSoftClassPath WorldSettingsClassName; // 0x168(0x18)
	struct FSoftClassPath NavigationSystemClassName; // 0x180(0x18)
	struct UClass* NavigationSystemClass; // 0x198(0x08)
	struct FSoftClassPath NavigationSystemConfigClassName; // 0x1a0(0x18)
	struct UClass* NavigationSystemConfigClass; // 0x1b8(0x08)
	struct FSoftClassPath AvoidanceManagerClassName; // 0x1c0(0x18)
	struct UClass* AvoidanceManagerClass; // 0x1d8(0x08)
	struct UClass* PhysicsCollisionHandlerClass; // 0x1e0(0x08)
	struct FSoftClassPath PhysicsCollisionHandlerClassName; // 0x1e8(0x18)
	struct FSoftClassPath GameUserSettingsClassName; // 0x200(0x18)
	struct UClass* GameUserSettingsClass; // 0x218(0x08)
	struct FSoftClassPath AIControllerClassName; // 0x220(0x18)
	struct UGameUserSettings* GameUserSettings; // 0x238(0x08)
	struct UClass* LevelScriptActorClass; // 0x240(0x08)
	struct FSoftClassPath LevelScriptActorClassName; // 0x248(0x18)
	struct FSoftClassPath DefaultBlueprintBaseClassName; // 0x260(0x18)
	struct FSoftClassPath GameSingletonClassName; // 0x278(0x18)
	struct UObject* GameSingleton; // 0x290(0x08)
	struct FSoftClassPath AssetManagerClassName; // 0x298(0x18)
	struct UAssetManager* AssetManager; // 0x2b0(0x08)
	struct UTexture2D* DefaultTexture; // 0x2b8(0x08)
	struct FSoftObjectPath DefaultTextureName; // 0x2c0(0x18)
	struct UTexture* DefaultDiffuseTexture; // 0x2d8(0x08)
	struct FSoftObjectPath DefaultDiffuseTextureName; // 0x2e0(0x18)
	struct UTexture2D* DefaultBSPVertexTexture; // 0x2f8(0x08)
	struct FSoftObjectPath DefaultBSPVertexTextureName; // 0x300(0x18)
	struct UTexture2D* HighFrequencyNoiseTexture; // 0x318(0x08)
	struct FSoftObjectPath HighFrequencyNoiseTextureName; // 0x320(0x18)
	struct UTexture2D* DefaultBokehTexture; // 0x338(0x08)
	struct FSoftObjectPath DefaultBokehTextureName; // 0x340(0x18)
	struct UTexture2D* DefaultBloomKernelTexture; // 0x358(0x08)
	struct FSoftObjectPath DefaultBloomKernelTextureName; // 0x360(0x18)
	struct UMaterial* WireframeMaterial; // 0x378(0x08)
	struct FString WireframeMaterialName; // 0x380(0x10)
	struct UMaterial* HairDefaultMaterial; // 0x390(0x08)
	struct FString HairDefaultMaterialName; // 0x398(0x10)
	struct UMaterial* HairDebugMaterial; // 0x3a8(0x08)
	struct FString HairDebugMaterialName; // 0x3b0(0x10)
	struct UMaterial* ErrorMeshMaterial; // 0x3c0(0x08)
	struct UMaterial* WIPMeshMaterial; // 0x3c8(0x08)
	struct UMaterial* WarningMeshMaterial; // 0x3d0(0x08)
	struct FString ErrorMeshMaterialName; // 0x3d8(0x10)
	struct FString WIPMeshMaterialName; // 0x3e8(0x10)
	struct FString WarningMeshMaterialName; // 0x3f8(0x10)
	struct UMaterial* DebugMeshMaterial; // 0x408(0x08)
	struct FSoftObjectPath DebugMeshMaterialName; // 0x410(0x18)
	struct UMaterial* EmissiveMeshMaterial; // 0x428(0x08)
	struct FSoftObjectPath EmissiveMeshMaterialName; // 0x430(0x18)
	struct UMaterial* LevelColorationLitMaterial; // 0x448(0x08)
	struct FString LevelColorationLitMaterialName; // 0x450(0x10)
	struct UMaterial* LevelColorationUnlitMaterial; // 0x460(0x08)
	struct FString LevelColorationUnlitMaterialName; // 0x468(0x10)
	struct UMaterial* LightingTexelDensityMaterial; // 0x478(0x08)
	struct FString LightingTexelDensityName; // 0x480(0x10)
	struct UMaterial* ShadedLevelColorationLitMaterial; // 0x490(0x08)
	struct FString ShadedLevelColorationLitMaterialName; // 0x498(0x10)
	struct UMaterial* ShadedLevelColorationUnlitMaterial; // 0x4a8(0x08)
	struct FString ShadedLevelColorationUnlitMaterialName; // 0x4b0(0x10)
	struct UMaterial* SolidCollisionMaterial; // 0x4c0(0x08)
	struct FString SolidCollisionMaterialName; // 0x4c8(0x10)
	struct UMaterial* VolumeTranslucenceMaterial; // 0x4d8(0x08)
	struct FString VolumeTranslucenceMaterialName; // 0x4e0(0x10)
	struct UMaterial* RemoveSurfaceMaterial; // 0x4f0(0x08)
	struct FSoftObjectPath RemoveSurfaceMaterialName; // 0x4f8(0x18)
	struct UMaterial* VertexColorMaterial; // 0x510(0x08)
	struct FString VertexColorMaterialName; // 0x518(0x10)
	struct UMaterial* VertexColorViewModeMaterial_ColorOnly; // 0x528(0x08)
	struct FString VertexColorViewModeMaterialName_ColorOnly; // 0x530(0x10)
	struct UMaterial* VertexColorViewModeMaterial_AlphaAsColor; // 0x540(0x08)
	struct FString VertexColorViewModeMaterialName_AlphaAsColor; // 0x548(0x10)
	struct UMaterial* VertexColorViewModeMaterial_RedOnly; // 0x558(0x08)
	struct FString VertexColorViewModeMaterialName_RedOnly; // 0x560(0x10)
	struct UMaterial* VertexColorViewModeMaterial_GreenOnly; // 0x570(0x08)
	struct FString VertexColorViewModeMaterialName_GreenOnly; // 0x578(0x10)
	struct UMaterial* VertexColorViewModeMaterial_BlueOnly; // 0x588(0x08)
	struct FString VertexColorViewModeMaterialName_BlueOnly; // 0x590(0x10)
	struct FSoftObjectPath DebugEditorMaterialName; // 0x5a0(0x18)
	struct UMaterial* ConstraintLimitMaterial; // 0x5b8(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialX; // 0x5c0(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialXAxis; // 0x5c8(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialY; // 0x5d0(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialYAxis; // 0x5d8(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialZ; // 0x5e0(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialZAxis; // 0x5e8(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialPrismatic; // 0x5f0(0x08)
	struct UMaterial* InvalidLightmapSettingsMaterial; // 0x5f8(0x08)
	struct FSoftObjectPath InvalidLightmapSettingsMaterialName; // 0x600(0x18)
	struct UMaterial* PreviewShadowsIndicatorMaterial; // 0x618(0x08)
	struct FSoftObjectPath PreviewShadowsIndicatorMaterialName; // 0x620(0x18)
	struct UMaterial* ArrowMaterial; // 0x638(0x08)
	struct UMaterialInstanceDynamic* ArrowMaterialYellow; // 0x640(0x08)
	struct FSoftObjectPath ArrowMaterialName; // 0x648(0x18)
	struct FLinearColor LightingOnlyBrightness; // 0x660(0x10)
	struct TArray<struct FLinearColor> ShaderComplexityColors; // 0x670(0x10)
	struct TArray<struct FLinearColor> QuadComplexityColors; // 0x680(0x10)
	struct TArray<struct FLinearColor> LightComplexityColors; // 0x690(0x10)
	struct TArray<struct FLinearColor> CustomLightComplexityColors; // 0x6a0(0x10)
	struct TArray<struct FLinearColor> StationaryLightOverlapColors; // 0x6b0(0x10)
	struct TArray<struct FLinearColor> LODColorationColors; // 0x6c0(0x10)
	struct TArray<struct FLinearColor> HLODColorationColors; // 0x6d0(0x10)
	struct TArray<struct FLinearColor> StreamingAccuracyColors; // 0x6e0(0x10)
	float MaxPixelShaderAdditiveComplexityCount; // 0x6f0(0x04)
	float MaxES2PixelShaderAdditiveComplexityCount; // 0x6f4(0x04)
	float MaxES3PixelShaderAdditiveComplexityCount; // 0x6f8(0x04)
	float MinLightMapDensity; // 0x6fc(0x04)
	float IdealLightMapDensity; // 0x700(0x04)
	float MaxLightMapDensity; // 0x704(0x04)
	char bRenderLightMapDensityGrayscale : 1; // 0x708(0x01)
	char pad_708_1 : 7; // 0x708(0x01)
	char pad_709[0x3]; // 0x709(0x03)
	float RenderLightMapDensityGrayscaleScale; // 0x70c(0x04)
	float RenderLightMapDensityColorScale; // 0x710(0x04)
	struct FLinearColor LightMapDensityVertexMappedColor; // 0x714(0x10)
	struct FLinearColor LightMapDensitySelectedColor; // 0x724(0x10)
	char pad_734[0x4]; // 0x734(0x04)
	struct TArray<struct FStatColorMapping> StatColorMappings; // 0x738(0x10)
	struct UPhysicalMaterial* DefaultPhysMaterial; // 0x748(0x08)
	struct FSoftObjectPath DefaultPhysMaterialName; // 0x750(0x18)
	struct TArray<struct FGameNameRedirect> ActiveGameNameRedirects; // 0x768(0x10)
	struct TArray<struct FClassRedirect> ActiveClassRedirects; // 0x778(0x10)
	struct TArray<struct FPluginRedirect> ActivePluginRedirects; // 0x788(0x10)
	struct TArray<struct FStructRedirect> ActiveStructRedirects; // 0x798(0x10)
	struct UTexture2D* PreIntegratedSkinBRDFTexture; // 0x7a8(0x08)
	struct FSoftObjectPath PreIntegratedSkinBRDFTextureName; // 0x7b0(0x18)
	struct UTexture2D* MobilePreIntegratedSkinBRDFTexture; // 0x7c8(0x08)
	struct FSoftObjectPath MobilePreIntegratedSkinBRDFTextureName; // 0x7d0(0x18)
	struct UTexture2D* LandscapeShadowmaskTexture; // 0x7e8(0x08)
	struct FVector4 LandscapePositionAndSize; // 0x7f0(0x10)
	struct FVector4 LandscapeHeightInfo; // 0x800(0x10)
	struct UTexture2D* LandscapeLocalHeightmap; // 0x810(0x08)
	struct FVector2D LandscapeLocalHeightmapLeftTop; // 0x818(0x08)
	float LandscapeLocalHeightmapInvPatchSize; // 0x820(0x04)
	char pad_824[0x4]; // 0x824(0x04)
	struct TArray<struct FVector4> LandscapeLocalHeightmapOffsetScale; // 0x828(0x10)
	struct FSoftObjectPath SMAAAreaTextureName; // 0x838(0x18)
	struct FSoftObjectPath SMAASearchTextureName; // 0x850(0x18)
	struct UTexture2D* SmaaSearchTexture; // 0x868(0x08)
	struct UTexture2D* SmaaAreaTexture; // 0x870(0x08)
	struct UTexture2D* BlueNoiseTexture; // 0x878(0x08)
	struct FSoftObjectPath BlueNoiseTextureName; // 0x880(0x18)
	struct UTexture2D* MiniFontTexture; // 0x898(0x08)
	struct FSoftObjectPath MiniFontTextureName; // 0x8a0(0x18)
	struct UTexture* WeightMapPlaceholderTexture; // 0x8b8(0x08)
	struct FSoftObjectPath WeightMapPlaceholderTextureName; // 0x8c0(0x18)
	struct UTexture2D* LightMapDensityTexture; // 0x8d8(0x08)
	struct FSoftObjectPath LightMapDensityTextureName; // 0x8e0(0x18)
	char pad_8F8[0x8]; // 0x8f8(0x08)
	struct UGameViewportClient* GameViewport; // 0x900(0x08)
	struct TArray<struct FString> DeferredCommands; // 0x908(0x10)
	int32_t TickCycles; // 0x918(0x04)
	int32_t GameCycles; // 0x91c(0x04)
	int32_t ClientCycles; // 0x920(0x04)
	float NearClipPlane; // 0x924(0x04)
	char bHardwareSurveyEnabled : 1; // 0x928(0x01)
	char bSubtitlesEnabled : 1; // 0x928(0x01)
	char bSubtitlesForcedOff : 1; // 0x928(0x01)
	char pad_928_3 : 5; // 0x928(0x01)
	char pad_929[0x3]; // 0x929(0x03)
	int32_t MaximumLoopIterationCount; // 0x92c(0x04)
	char bCanBlueprintsTickByDefault : 1; // 0x930(0x01)
	char bOptimizeAnimBlueprintMemberVariableAccess : 1; // 0x930(0x01)
	char bAllowMultiThreadedAnimationUpdate : 1; // 0x930(0x01)
	char bEnableEditorPSysRealtimeLOD : 1; // 0x930(0x01)
	char pad_930_4 : 1; // 0x930(0x01)
	char bSmoothFrameRate : 1; // 0x930(0x01)
	char bUseFixedFrameRate : 1; // 0x930(0x01)
	char pad_930_7 : 1; // 0x930(0x01)
	char pad_931[0x3]; // 0x931(0x03)
	float FixedFrameRate; // 0x934(0x04)
	struct FFloatRange SmoothedFrameRateRange; // 0x938(0x10)
	struct UEngineCustomTimeStep* DefaultCustomTimeStep; // 0x948(0x08)
	struct UEngineCustomTimeStep* CurrentCustomTimeStep; // 0x950(0x08)
	struct FSoftClassPath CustomTimeStepClassName; // 0x958(0x18)
	struct UTimecodeProvider* DefaultTimecodeProvider; // 0x970(0x08)
	struct UTimecodeProvider* CustomTimecodeProvider; // 0x978(0x08)
	struct FSoftClassPath DefaultTimecodeProviderClassName; // 0x980(0x18)
	struct FSoftClassPath TimecodeProviderClassName; // 0x998(0x18)
	struct FFrameRate DefaultTimecodeFrameRate; // 0x9b0(0x08)
	char bCheckForMultiplePawnsSpawnedInAFrame : 1; // 0x9b8(0x01)
	char pad_9B8_1 : 7; // 0x9b8(0x01)
	char pad_9B9[0x3]; // 0x9b9(0x03)
	int32_t NumPawnsAllowedToBeSpawnedInAFrame; // 0x9bc(0x04)
	char bShouldGenerateLowQualityLightmaps : 1; // 0x9c0(0x01)
	char pad_9C0_1 : 7; // 0x9c0(0x01)
	char pad_9C1[0x3]; // 0x9c1(0x03)
	struct FColor C_WorldBox; // 0x9c4(0x04)
	struct FColor C_BrushWire; // 0x9c8(0x04)
	struct FColor C_AddWire; // 0x9cc(0x04)
	struct FColor C_SubtractWire; // 0x9d0(0x04)
	struct FColor C_SemiSolidWire; // 0x9d4(0x04)
	struct FColor C_NonSolidWire; // 0x9d8(0x04)
	struct FColor C_WireBackground; // 0x9dc(0x04)
	struct FColor C_ScaleBoxHi; // 0x9e0(0x04)
	struct FColor C_VolumeCollision; // 0x9e4(0x04)
	struct FColor C_BSPCollision; // 0x9e8(0x04)
	struct FColor C_OrthoBackground; // 0x9ec(0x04)
	struct FColor C_Volume; // 0x9f0(0x04)
	struct FColor C_BrushShape; // 0x9f4(0x04)
	float StreamingDistanceFactor; // 0x9f8(0x04)
	char pad_9FC[0x4]; // 0x9fc(0x04)
	struct FDirectoryPath GameScreenshotSaveDirectory; // 0xa00(0x10)
	enum class ETransitionType TransitionType; // 0xa10(0x01)
	char pad_A11[0x7]; // 0xa11(0x07)
	struct FString TransitionDescription; // 0xa18(0x10)
	struct FString TransitionGameMode; // 0xa28(0x10)
	float MeshLODRange; // 0xa38(0x04)
	char bAllowMatureLanguage : 1; // 0xa3c(0x01)
	char pad_A3C_1 : 7; // 0xa3c(0x01)
	char pad_A3D[0x3]; // 0xa3d(0x03)
	float CameraRotationThreshold; // 0xa40(0x04)
	float CameraTranslationThreshold; // 0xa44(0x04)
	float PrimitiveProbablyVisibleTime; // 0xa48(0x04)
	float MaxOcclusionPixelsFraction; // 0xa4c(0x04)
	char bPauseOnLossOfFocus : 1; // 0xa50(0x01)
	char pad_A50_1 : 7; // 0xa50(0x01)
	char pad_A51[0x3]; // 0xa51(0x03)
	int32_t MaxParticleResize; // 0xa54(0x04)
	int32_t MaxParticleResizeWarn; // 0xa58(0x04)
	char pad_A5C[0x4]; // 0xa5c(0x04)
	struct TArray<struct FDropNoteInfo> PendingDroppedNotes; // 0xa60(0x10)
	float NetClientTicksPerSecond; // 0xa70(0x04)
	float DisplayGamma; // 0xa74(0x04)
	float MinDesiredFrameRate; // 0xa78(0x04)
	struct FLinearColor DefaultSelectedMaterialColor; // 0xa7c(0x10)
	struct FLinearColor SelectedMaterialColor; // 0xa8c(0x10)
	struct FLinearColor SelectionOutlineColor; // 0xa9c(0x10)
	struct FLinearColor SubduedSelectionOutlineColor; // 0xaac(0x10)
	struct FLinearColor SelectedMaterialColorOverride; // 0xabc(0x10)
	bool bIsOverridingSelectedColor; // 0xacc(0x01)
	char pad_ACD[0x3]; // 0xacd(0x03)
	char bEnableOnScreenDebugMessages : 1; // 0xad0(0x01)
	char bEnableOnScreenDebugMessagesDisplay : 1; // 0xad0(0x01)
	char bSuppressMapWarnings : 1; // 0xad0(0x01)
	char bDisableAILogging : 1; // 0xad0(0x01)
	char pad_AD0_4 : 4; // 0xad0(0x01)
	char pad_AD1[0x3]; // 0xad1(0x03)
	uint32_t bEnableVisualLogRecordingOnStart; // 0xad4(0x04)
	char pad_AD8[0x4]; // 0xad8(0x04)
	int32_t ScreenSaverInhibitorSemaphore; // 0xadc(0x04)
	char bLockReadOnlyLevels : 1; // 0xae0(0x01)
	char pad_AE0_1 : 7; // 0xae0(0x01)
	char pad_AE1[0x7]; // 0xae1(0x07)
	struct FString ParticleEventManagerClassPath; // 0xae8(0x10)
	char pad_AF8[0x10]; // 0xaf8(0x10)
	float SelectionHighlightIntensity; // 0xb08(0x04)
	float BSPSelectionHighlightIntensity; // 0xb0c(0x04)
	float SelectionHighlightIntensityBillboards; // 0xb10(0x04)
	char pad_B14[0x264]; // 0xb14(0x264)
	struct TArray<struct FNetDriverDefinition> NetDriverDefinitions; // 0xd78(0x10)
	struct TArray<struct FString> ServerActors; // 0xd88(0x10)
	struct TArray<struct FString> RuntimeServerActors; // 0xd98(0x10)
	float NetErrorLogInterval; // 0xda8(0x04)
	char bStartedLoadMapMovie : 1; // 0xdac(0x01)
	char pad_DAC_1 : 7; // 0xdac(0x01)
	char pad_DAD[0x1b]; // 0xdad(0x1b)
	int32_t NextWorldContextHandle; // 0xdc8(0x04)
	char pad_DCC[0x194]; // 0xdcc(0x194)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ScriptViewportClient
// Size: 0x40 (Inherited: 0x30)
class UScriptViewportClient : public UObject {
public:

	char pad_30[0x10]; // 0x30(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CameraModifier
// Size: 0x50 (Inherited: 0x30)
class UCameraModifier : public UObject {
public:

	char bDebug : 1; // 0x30(0x01)
	char bExclusive : 1; // 0x30(0x01)
	char pad_30_2 : 6; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	char Priority; // 0x34(0x01)
	char pad_35[0x3]; // 0x35(0x03)
	struct APlayerCameraManager* CameraOwner; // 0x38(0x08)
	float AlphaInTime; // 0x40(0x04)
	float AlphaOutTime; // 0x44(0x04)
	float Alpha; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)

	bool IsDisabled(); // Function Engine.CameraModifier.IsDisabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17602c0
	struct AActor* GetViewTarget(); // Function Engine.CameraModifier.GetViewTarget // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x6fa6200
	void EnableModifier(); // Function Engine.CameraModifier.EnableModifier // (Native|Public|BlueprintCallable) // @ game+0x895960
	void DisableModifier(bool bImmediate); // Function Engine.CameraModifier.DisableModifier // (Native|Public|BlueprintCallable) // @ game+0x6391040
	void BlueprintModifyPostProcess(float DeltaTime, float& PostProcessBlendWeight, struct FPostProcessSettings& PostProcessSettings); // Function Engine.CameraModifier.BlueprintModifyPostProcess // (BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x7ed88c0
	void BlueprintModifyCamera(float DeltaTime, struct FVector ViewLocation, struct FRotator ViewRotation, float FOV, struct FVector& NewViewLocation, struct FRotator& NewViewRotation, float& NewFOV); // Function Engine.CameraModifier.BlueprintModifyCamera // (BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x7ed88c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DynamicBlueprintBinding
// Size: 0x30 (Inherited: 0x30)
class UDynamicBlueprintBinding : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundEffectPreset
// Size: 0x48 (Inherited: 0x30)
class USoundEffectPreset : public UObject {
public:

	char pad_30[0x18]; // 0x30(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundBase
// Size: 0x168 (Inherited: 0x30)
class USoundBase : public UObject {
public:

	struct USoundClass* SoundClassObject; // 0x30(0x08)
	char bDebug : 1; // 0x38(0x01)
	char bOverrideConcurrency : 1; // 0x38(0x01)
	char bOutputToBusOnly : 1; // 0x38(0x01)
	char bHasDelayNode : 1; // 0x38(0x01)
	char bHasConcatenatorNode : 1; // 0x38(0x01)
	char bBypassVolumeScaleForPriority : 1; // 0x38(0x01)
	char pad_38_6 : 2; // 0x38(0x01)
	enum class EVirtualizationMode VirtualizationMode; // 0x39(0x01)
	char pad_3A[0x56]; // 0x3a(0x56)
	/*struct TSet<struct USoundConcurrency*>*/char ConcurrencySet[0x50]; // 0x90(0x50)
	struct FSoundConcurrencySettings ConcurrencyOverrides; // 0xe0(0x20)
	float Duration; // 0x100(0x04)
	float MaxDistance; // 0x104(0x04)
	float TotalSamples; // 0x108(0x04)
	float Priority; // 0x10c(0x04)
	struct USoundAttenuation* AttenuationSettings; // 0x110(0x08)
	struct FSoundModulation Modulation; // 0x118(0x10)
	struct USoundSubmix* SoundSubmixObject; // 0x128(0x08)
	struct TArray<struct FSoundSubmixSendInfo> SoundSubmixSends; // 0x130(0x10)
	struct USoundEffectSourcePresetChain* SourceEffectChain; // 0x140(0x08)
	struct TArray<struct FSoundSourceBusSendInfo> BusSends; // 0x148(0x10)
	struct TArray<struct FSoundSourceBusSendInfo> PreEffectBusSends; // 0x158(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimationAsset
// Size: 0x88 (Inherited: 0x30)
class UAnimationAsset : public UObject {
public:

	char pad_30[0x10]; // 0x30(0x10)
	struct USkeleton* Skeleton; // 0x40(0x08)
	char pad_48[0x20]; // 0x48(0x20)
	struct TArray<struct UAnimMetaData*> MetaData; // 0x68(0x10)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x78(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Skeleton
// Size: 0x378 (Inherited: 0x30)
class USkeleton : public UObject {
public:

	char pad_30[0x10]; // 0x30(0x10)
	struct TArray<struct FBoneNode> BoneTree; // 0x40(0x10)
	struct TArray<struct FTransform> RefLocalPoses; // 0x50(0x10)
	char pad_60[0x118]; // 0x60(0x118)
	struct FGuid VirtualBoneGuid; // 0x178(0x10)
	struct TArray<struct FVirtualBone> VirtualBones; // 0x188(0x10)
	struct TArray<struct USkeletalMeshSocket*> Sockets; // 0x198(0x10)
	char pad_1A8[0x50]; // 0x1a8(0x50)
	struct FSmartNameContainer SmartNames; // 0x1f8(0x50)
	char pad_248[0x28]; // 0x248(0x28)
	struct USkeleton* MasterSkeleton; // 0x270(0x08)
	char pad_278[0x8]; // 0x278(0x08)
	struct TArray<struct UBlendProfile*> BlendProfiles; // 0x280(0x10)
	struct TArray<struct FAnimSlotGroup> SlotGroups; // 0x290(0x10)
	char pad_2A0[0xc8]; // 0x2a0(0xc8)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x368(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BodySetup
// Size: 0x258 (Inherited: 0x30)
class UBodySetup : public UObject {
public:

	struct FKAggregateGeom AggGeom; // 0x30(0x58)
	struct FName BoneName; // 0x88(0x08)
	enum class EPhysicsType PhysicsType; // 0x90(0x01)
	char bAlwaysFullAnimWeight : 1; // 0x91(0x01)
	char bConsiderForBounds : 1; // 0x91(0x01)
	char bMeshCollideAll : 1; // 0x91(0x01)
	char bDoubleSidedGeometry : 1; // 0x91(0x01)
	char bGenerateNonMirroredCollision : 1; // 0x91(0x01)
	char bSharedCookedData : 1; // 0x91(0x01)
	char bGenerateMirroredCollision : 1; // 0x91(0x01)
	char pad_91_7 : 1; // 0x91(0x01)
	char pad_92[0x1]; // 0x92(0x01)
	char BindedTraceMaskFilter; // 0x93(0x01)
	enum class EBodyCollisionResponse CollisionReponse; // 0x94(0x01)
	enum class ECollisionTraceFlag CollisionTraceFlag; // 0x95(0x01)
	char pad_96[0x2]; // 0x96(0x02)
	struct UPhysicalMaterial* PhysMaterial; // 0x98(0x08)
	struct FWalkableSlopeOverride WalkableSlopeOverride; // 0xa0(0x10)
	char pad_B0[0x68]; // 0xb0(0x68)
	struct FBodyInstance DefaultInstance; // 0x118(0x120)
	char pad_238[0x8]; // 0x238(0x08)
	struct FVector BuildScale3D; // 0x240(0x0c)
	char pad_24C[0xc]; // 0x24c(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BookmarkBase
// Size: 0x30 (Inherited: 0x30)
class UBookmarkBase : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PlatformInterfaceBase
// Size: 0x40 (Inherited: 0x30)
class UPlatformInterfaceBase : public UObject {
public:

	struct TArray<struct FDelegateArray> AllDelegates; // 0x30(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CurveTable
// Size: 0xa8 (Inherited: 0x30)
class UCurveTable : public UObject {
public:

	char pad_30[0x78]; // 0x30(0x78)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DataTable
// Size: 0x148 (Inherited: 0x30)
class UDataTable : public UObject {
public:

	struct UScriptStruct* RowStruct; // 0x30(0x08)
	char pad_38[0xb0]; // 0x38(0xb0)
	char bStripFromClientBuilds : 1; // 0xe8(0x01)
	char bIgnoreExtraFields : 1; // 0xe8(0x01)
	char bIgnoreMissingFields : 1; // 0xe8(0x01)
	char pad_E8_3 : 5; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
	struct FString ImportKeyField; // 0xf0(0x10)
	char bIgnoreReferencedObjectsGC : 1; // 0x100(0x01)
	char bCanMMapToFile : 1; // 0x100(0x01)
	char pad_100_2 : 6; // 0x100(0x01)
	char pad_101[0x1]; // 0x101(0x01)
	bool bIgnoreKeepReferenceObject; // 0x102(0x01)
	char pad_103[0x45]; // 0x103(0x45)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CurveBase
// Size: 0x38 (Inherited: 0x30)
class UCurveBase : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)

	void GetValueRange(float& MinValue, float& MaxValue); // Function Engine.CurveBase.GetValueRange // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d9c480
	void GetTimeRange(float& MinTime, float& MaxTime); // Function Engine.CurveBase.GetTimeRange // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d9c3a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PendingNetGame
// Size: 0xc8 (Inherited: 0x30)
class UPendingNetGame : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)
	struct UNetDriver* NetDriver; // 0x38(0x08)
	struct UDemoNetDriver* DemoNetDriver; // 0x40(0x08)
	char pad_48[0x80]; // 0x48(0x80)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TextureLODSettings
// Size: 0x40 (Inherited: 0x30)
class UTextureLODSettings : public UObject {
public:

	struct TArray<struct FTextureLODGroup> TextureLODGroups; // 0x30(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Distribution
// Size: 0x38 (Inherited: 0x30)
class UDistribution : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.EdGraphNode
// Size: 0xa0 (Inherited: 0x30)
class UEdGraphNode : public UObject {
public:

	char pad_30[0x10]; // 0x30(0x10)
	struct TArray<struct UEdGraphPin_Deprecated*> DeprecatedPins; // 0x40(0x10)
	int32_t NodePosX; // 0x50(0x04)
	int32_t NodePosY; // 0x54(0x04)
	int32_t NodeWidth; // 0x58(0x04)
	int32_t NodeHeight; // 0x5c(0x04)
	enum class ENodeAdvancedPins AdvancedPinDisplay; // 0x60(0x01)
	enum class ENodeEnabledState EnabledState; // 0x61(0x01)
	char pad_62[0x1]; // 0x62(0x01)
	char pad_63_0 : 1; // 0x63(0x01)
	char bDisplayAsDisabled : 1; // 0x63(0x01)
	char bUserSetEnabledState : 1; // 0x63(0x01)
	char pad_63_3 : 1; // 0x63(0x01)
	char bIsNodeEnabled : 1; // 0x63(0x01)
	char pad_63_5 : 1; // 0x63(0x01)
	char bHasCompilerMessage : 1; // 0x63(0x01)
	char pad_63_7 : 1; // 0x63(0x01)
	char pad_64[0x4]; // 0x64(0x04)
	struct FString NodeComment; // 0x68(0x10)
	int32_t ErrorType; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct FString ErrorMsg; // 0x80(0x10)
	struct FGuid NodeGuid; // 0x90(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LocalMessage
// Size: 0x30 (Inherited: 0x30)
class ULocalMessage : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.HapticFeedbackEffect_Base
// Size: 0x30 (Inherited: 0x30)
class UHapticFeedbackEffect_Base : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpFilter
// Size: 0x40 (Inherited: 0x30)
class UInterpFilter : public UObject {
public:

	struct FString Caption; // 0x30(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpGroup
// Size: 0x58 (Inherited: 0x30)
class UInterpGroup : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)
	struct TArray<struct UInterpTrack*> InterpTracks; // 0x38(0x10)
	struct FName GroupName; // 0x48(0x08)
	struct FColor GroupColor; // 0x50(0x04)
	char bCollapsed : 1; // 0x54(0x01)
	char bVisible : 1; // 0x54(0x01)
	char bIsFolder : 1; // 0x54(0x01)
	char bIsParented : 1; // 0x54(0x01)
	char bIsSelected : 1; // 0x54(0x01)
	char pad_54_5 : 3; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpGroupInst
// Size: 0x50 (Inherited: 0x30)
class UInterpGroupInst : public UObject {
public:

	struct UInterpGroup* Group; // 0x30(0x08)
	struct AActor* GroupActor; // 0x38(0x08)
	struct TArray<struct UInterpTrackInst*> TrackInst; // 0x40(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialFunctionInterface
// Size: 0x48 (Inherited: 0x30)
class UMaterialFunctionInterface : public UObject {
public:

	struct FGuid StateId; // 0x30(0x10)
	enum class EMaterialFunctionUsage MaterialFunctionUsage; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.NavigationSystemConfig
// Size: 0x58 (Inherited: 0x30)
class UNavigationSystemConfig : public UObject {
public:

	struct FSoftClassPath NavigationSystemClass; // 0x30(0x18)
	struct FNavAgentSelector SupportedAgentsMask; // 0x48(0x04)
	struct FName DefaultAgentName; // 0x4c(0x08)
	char bIsOverriden : 1; // 0x54(0x01)
	char pad_54_1 : 7; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleEmitter
// Size: 0x1c0 (Inherited: 0x30)
class UParticleEmitter : public UObject {
public:

	struct FName EmitterName; // 0x30(0x08)
	int32_t SubUVDataOffset; // 0x38(0x04)
	enum class EEmitterRenderMode EmitterRenderMode; // 0x3c(0x01)
	enum class EParticleSignificanceLevel SignificanceLevel; // 0x3d(0x01)
	enum class EParticleVRSShadingRate ParticleVRSShadingRate; // 0x3e(0x01)
	char pad_3F[0x1]; // 0x3f(0x01)
	char bUseLegacySpawningBehavior : 1; // 0x40(0x01)
	char pad_40_1 : 3; // 0x40(0x01)
	char ConvertedModules : 1; // 0x40(0x01)
	char bIsSoloing : 1; // 0x40(0x01)
	char bCookedOut : 1; // 0x40(0x01)
	char bDisabledLODsKeepEmitterAlive : 1; // 0x40(0x01)
	char bDisableWhenInsignficant : 1; // 0x41(0x01)
	char pad_41_1 : 7; // 0x41(0x01)
	char pad_42[0x6]; // 0x42(0x06)
	struct TArray<struct UParticleLODLevel*> LODLevels; // 0x48(0x10)
	int32_t PeakActiveParticles; // 0x58(0x04)
	int32_t InitialAllocationCount; // 0x5c(0x04)
	float QualityLevelSpawnRateScale; // 0x60(0x04)
	uint32_t DetailModeBitmask; // 0x64(0x04)
	char pad_68[0x158]; // 0x68(0x158)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModule
// Size: 0x38 (Inherited: 0x30)
class UParticleModule : public UObject {
public:

	char bSpawnModule : 1; // 0x30(0x01)
	char bUpdateModule : 1; // 0x30(0x01)
	char bFinalUpdateModule : 1; // 0x30(0x01)
	char bUpdateForGPUEmitter : 1; // 0x30(0x01)
	char bCurvesAsColor : 1; // 0x30(0x01)
	char b3DDrawMode : 1; // 0x30(0x01)
	char bSupported3DDrawMode : 1; // 0x30(0x01)
	char bEnabled : 1; // 0x30(0x01)
	char bEditable : 1; // 0x31(0x01)
	char LODDuplicate : 1; // 0x31(0x01)
	char bSupportsRandomSeed : 1; // 0x31(0x01)
	char bRequiresLoopingNotification : 1; // 0x31(0x01)
	char pad_31_4 : 4; // 0x31(0x01)
	char LODValidity; // 0x32(0x01)
	char pad_33[0x5]; // 0x33(0x05)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.FXSystemAsset
// Size: 0x38 (Inherited: 0x30)
class UFXSystemAsset : public UObject {
public:

	uint32_t MaxPoolSize; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PreBakeShadowDepthMap
// Size: 0x68 (Inherited: 0x30)
class UPreBakeShadowDepthMap : public UObject {
public:

	int32_t ShadowMapResolution; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct TArray<uint32_t> AllTileQuantizedQuadEntry; // 0x38(0x10)
	struct TArray<uint32_t> AllTileFlattenQuadTree; // 0x48(0x10)
	struct TArray<uint32_t> TileDataOffset; // 0x58(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ReporterBase
// Size: 0x38 (Inherited: 0x30)
class UReporterBase : public UObject {
public:

	char pad_30[0x8]; // 0x30(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNode
// Size: 0x48 (Inherited: 0x30)
class USoundNode : public UObject {
public:

	struct TArray<struct USoundNode*> ChildNodes; // 0x30(0x10)
	char pad_40[0x8]; // 0x40(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TimecodeProvider
// Size: 0x38 (Inherited: 0x30)
class UTimecodeProvider : public UObject {
public:

	int32_t FrameDelay; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)

	struct FTimecode GetTimecode(); // Function Engine.TimecodeProvider.GetTimecode // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ec5d90
	enum class ETimecodeProviderSynchronizationState GetSynchronizationState(); // Function Engine.TimecodeProvider.GetSynchronizationState // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ec5d60
	struct FFrameRate GetFrameRate(); // Function Engine.TimecodeProvider.GetFrameRate // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ec5c90
	struct FTimecode GetDelayedTimecode(); // Function Engine.TimecodeProvider.GetDelayedTimecode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ec5c50
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.VectorField
// Size: 0x50 (Inherited: 0x30)
class UVectorField : public UObject {
public:

	struct FBox Bounds; // 0x30(0x1c)
	float Intensity; // 0x4c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.VirtualTexture
// Size: 0x30 (Inherited: 0x30)
class UVirtualTexture : public UObject {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.GameplayStatics
// Size: 0x30 (Inherited: 0x30)
class UGameplayStatics : public UBlueprintFunctionLibrary {
public:


	void STATIC_UnloadStreamLevel(struct UObject* WorldContextObject, struct FName LevelName, struct FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload); // Function Engine.GameplayStatics.UnloadStreamLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dc3930
	bool STATIC_SuggestProjectileVelocity_CustomArc(struct UObject* WorldContextObject, struct FVector& OutLaunchVelocity, struct FVector StartPos, struct FVector EndPos, float OverrideGravityZ, float ArcParam); // Function Engine.GameplayStatics.SuggestProjectileVelocity_CustomArc // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9dc3750
	struct UAudioComponent* STATIC_SpawnSoundAttached(struct USoundBase* Sound, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnSoundAttached // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9dc33c0
	struct UAudioComponent* STATIC_SpawnSoundAtLocation(struct UObject* WorldContextObject, struct USoundBase* Sound, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnSoundAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9dc30f0
	struct UAudioComponent* STATIC_SpawnSound2D(struct UObject* WorldContextObject, struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnSound2D // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x9dc2ec0
	struct UObject* STATIC_SpawnObject(struct UClass* objectClass, struct UObject* Outer); // Function Engine.GameplayStatics.SpawnObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dc2e00
	struct UForceFeedbackComponent* STATIC_SpawnForceFeedbackAttached(struct UForceFeedbackEffect* ForceFeedbackEffect, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, struct UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnForceFeedbackAttached // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9dc2aa0
	struct UForceFeedbackComponent* STATIC_SpawnForceFeedbackAtLocation(struct UObject* WorldContextObject, struct UForceFeedbackEffect* ForceFeedbackEffect, struct FVector Location, struct FRotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, struct UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnForceFeedbackAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9dc2810
	struct UParticleSystemComponent* STATIC_SpawnEmitterAttached(struct UParticleSystem* EmitterTemplate, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, struct FVector Scale, enum class EAttachLocation LocationType, bool bAutoDestroy, enum class EPSCPoolMethod PoolingMethod, bool bAutoActivate); // Function Engine.GameplayStatics.SpawnEmitterAttached // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9dc2530
	struct UParticleSystemComponent* STATIC_SpawnEmitterAtLocation(struct UObject* WorldContextObject, struct UParticleSystem* EmitterTemplate, struct FVector Location, struct FRotator Rotation, struct FVector Scale, bool bAutoDestroy, enum class EPSCPoolMethod PoolingMethod, bool bAutoActivateSystem); // Function Engine.GameplayStatics.SpawnEmitterAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9dc22d0
	struct UAudioComponent* STATIC_SpawnDialogueAttached(struct UDialogueWave* Dialogue, struct FDialogueContext& Context, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnDialogueAttached // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9dc1ee0
	struct UAudioComponent* STATIC_SpawnDialogueAtLocation(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnDialogueAtLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9dc1bc0
	struct UAudioComponent* STATIC_SpawnDialogue2D(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnDialogue2D // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9dc1980
	struct UDecalComponent* STATIC_SpawnDecalAttached(struct UMaterialInterface* DecalMaterial, struct FVector DecalSize, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, float LifeSpan); // Function Engine.GameplayStatics.SpawnDecalAttached // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9dc1530
	struct UDecalComponent* STATIC_SpawnDecalAtLocation(struct UObject* WorldContextObject, struct UMaterialInterface* DecalMaterial, struct FVector DecalSize, struct FVector Location, struct FRotator Rotation, float LifeSpan); // Function Engine.GameplayStatics.SpawnDecalAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9dc1350
	void STATIC_SetWorldOriginLocation(struct UObject* WorldContextObject, struct FIntVector NewLocation); // Function Engine.GameplayStatics.SetWorldOriginLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9dc11f0
	void STATIC_SetViewportMouseCaptureMode(struct UObject* WorldContextObject, enum class EMouseCaptureMode MouseCaptureMode); // Function Engine.GameplayStatics.SetViewportMouseCaptureMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dc1140
	void STATIC_SetSubtitlesEnabled(bool bEnabled); // Function Engine.GameplayStatics.SetSubtitlesEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dc10c0
	void STATIC_SetSoundMixClassOverride(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier, struct USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren); // Function Engine.GameplayStatics.SetSoundMixClassOverride // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dc0ed0
	void STATIC_SetPlayerControllerID(struct APlayerController* Player, int32_t ControllerId); // Function Engine.GameplayStatics.SetPlayerControllerID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dc0e20
	void STATIC_SetMaxAudioChannelsScaled(struct UObject* WorldContextObject, float MaxChannelCountScale); // Function Engine.GameplayStatics.SetMaxAudioChannelsScaled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dc0d70
	void STATIC_SetGlobalTimeDilation(struct UObject* WorldContextObject, float TimeDilation); // Function Engine.GameplayStatics.SetGlobalTimeDilation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dc0cc0
	void STATIC_SetGlobalPitchModulation(struct UObject* WorldContextObject, float PitchModulation, float TimeSec); // Function Engine.GameplayStatics.SetGlobalPitchModulation // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x9dc0bd0
	void STATIC_SetGlobalListenerFocusParameters(struct UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale); // Function Engine.GameplayStatics.SetGlobalListenerFocusParameters // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x9dc0950
	bool STATIC_SetGamePaused(struct UObject* WorldContextObject, bool bPaused); // Function Engine.GameplayStatics.SetGamePaused // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dc0890
	void STATIC_SetForceDisableSplitscreen(struct UObject* WorldContextObject, bool bDisable); // Function Engine.GameplayStatics.SetForceDisableSplitscreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dc07d0
	void STATIC_SetEnableWorldRendering(struct UObject* WorldContextObject, bool bEnable); // Function Engine.GameplayStatics.SetEnableWorldRendering // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dc0710
	void STATIC_SetBaseSoundMix(struct UObject* WorldContextObject, struct USoundMix* InSoundMix); // Function Engine.GameplayStatics.SetBaseSoundMix // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dc0660
	bool STATIC_SaveGameToSlot(struct USaveGame* SaveGameObject, struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.SaveGameToSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dc03d0
	void STATIC_RemovePlayer(struct APlayerController* Player, bool bDestroyPawn); // Function Engine.GameplayStatics.RemovePlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dc0100
	struct FVector STATIC_RebaseZeroOriginOntoLocal(struct UObject* WorldContextObject, struct FVector WorldLocation); // Function Engine.GameplayStatics.RebaseZeroOriginOntoLocal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dc0020
	struct FVector STATIC_RebaseLocalOriginOntoZero(struct UObject* WorldContextObject, struct FVector WorldLocation); // Function Engine.GameplayStatics.RebaseLocalOriginOntoZero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dbff40
	void STATIC_PushSoundMixModifier(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier); // Function Engine.GameplayStatics.PushSoundMixModifier // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dbfe30
	bool STATIC_ProjectWorldToScreen(struct APlayerController* Player, struct FVector& WorldPosition, struct FVector2D& ScreenPosition, bool bPlayerViewportRelative); // Function Engine.GameplayStatics.ProjectWorldToScreen // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dbfce0
	void STATIC_PrimeSound(struct USoundBase* InSound); // Function Engine.GameplayStatics.PrimeSound // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dbfc70
	void STATIC_PopSoundMixModifier(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier); // Function Engine.GameplayStatics.PopSoundMixModifier // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dbfbc0
	void STATIC_PlayWorldCameraShake(struct UObject* WorldContextObject, struct UClass* Shake, struct FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter); // Function Engine.GameplayStatics.PlayWorldCameraShake // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9dbf9b0
	void STATIC_PlaySoundAtLocation(struct UObject* WorldContextObject, struct USoundBase* Sound, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, struct AActor* OwningActor); // Function Engine.GameplayStatics.PlaySoundAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9dbf6e0
	void STATIC_PlaySound2D(struct UObject* WorldContextObject, struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundConcurrency* ConcurrencySettings, struct AActor* OwningActor); // Function Engine.GameplayStatics.PlaySound2D // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x9dbf4f0
	void STATIC_PlayDialogueAtLocation(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings); // Function Engine.GameplayStatics.PlayDialogueAtLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9dbf210
	void STATIC_PlayDialogue2D(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime); // Function Engine.GameplayStatics.PlayDialogue2D // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9dbf010
	struct FString STATIC_ParseOption(struct FString Options, struct FString Key); // Function Engine.GameplayStatics.ParseOption // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbee30
	void STATIC_OpenLevel(struct UObject* WorldContextObject, struct FName LevelName, bool bAbsolute, struct FString Options); // Function Engine.GameplayStatics.OpenLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dbec60
	struct FHitResult STATIC_MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, struct FVector Location, struct FVector ImpactPoint, struct FVector Normal, struct FVector ImpactNormal, struct UPhysicalMaterial* PhysMat, struct AActor* HitActor, struct UPrimitiveComponent* HitComponent, struct FName HitBoneName, int32_t HitItem, int32_t FaceIndex, struct FVector TraceStart, struct FVector TraceEnd); // Function Engine.GameplayStatics.MakeHitResult // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dbe6b0
	void STATIC_LoadStreamLevel(struct UObject* WorldContextObject, struct FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, struct FLatentActionInfo LatentInfo); // Function Engine.GameplayStatics.LoadStreamLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dbe500
	struct USaveGame* STATIC_LoadGameFromSlot(struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.LoadGameFromSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dbe400
	bool STATIC_IsSplitscreenForceDisabled(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.IsSplitscreenForceDisabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbe270
	bool STATIC_IsGamePaused(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.IsGamePaused // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbe1f0
	bool STATIC_HasOption(struct FString Options, struct FString InKey); // Function Engine.GameplayStatics.HasOption // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbdf90
	bool STATIC_HasLaunchOption(struct FString OptionToCheck); // Function Engine.GameplayStatics.HasLaunchOption // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbdea0
	int32_t STATIC_GrassOverlappingSphereCount(struct UObject* WorldContextObject, struct UStaticMesh* StaticMesh, struct FVector CenterPosition, float radius); // Function Engine.GameplayStatics.GrassOverlappingSphereCount // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9dbdcd0
	struct FIntVector STATIC_GetWorldOriginLocation(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetWorldOriginLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dbdc30
	float STATIC_GetWorldDeltaSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetWorldDeltaSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbdba0
	void STATIC_GetViewProjectionMatrix(struct FMinimalViewInfo DesiredView, struct FMatrix& ViewMatrix, struct FMatrix& ProjectionMatrix, struct FMatrix& ViewProjectionMatrix); // Function Engine.GameplayStatics.GetViewProjectionMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dbd7d0
	enum class EMouseCaptureMode STATIC_GetViewportMouseCaptureMode(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetViewportMouseCaptureMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbdb20
	float STATIC_GetUnpausedTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetUnpausedTimeSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbd740
	float STATIC_GetTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetTimeSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbd6b0
	enum class EPhysicalSurface STATIC_GetSurfaceType(struct FHitResult& Hit); // Function Engine.GameplayStatics.GetSurfaceType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9dbd5e0
	struct ULevelStreaming* STATIC_GetStreamingLevel(struct UObject* WorldContextObject, struct FName PackageName); // Function Engine.GameplayStatics.GetStreamingLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbd520
	float STATIC_GetRealTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetRealTimeSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbd490
	struct APawn* STATIC_GetPlayerPawn(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerPawn // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbd3d0
	int32_t STATIC_GetPlayerControllerID(struct APlayerController* Player); // Function Engine.GameplayStatics.GetPlayerControllerID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbd350
	struct APlayerController* STATIC_GetPlayerControllerFromID(struct UObject* WorldContextObject, int32_t ControllerId); // Function Engine.GameplayStatics.GetPlayerControllerFromID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbd290
	struct APlayerController* STATIC_GetPlayerController(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbd1d0
	struct ACHARACTER* STATIC_GetPlayerCharacter(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerCharacter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbd110
	struct APlayerCameraManager* STATIC_GetPlayerCameraManager(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerCameraManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbd050
	struct FString STATIC_GetPlatformName(); // Function Engine.GameplayStatics.GetPlatformName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbcfd0
	struct UClass* STATIC_GetObjectClass(struct UObject* Object); // Function Engine.GameplayStatics.GetObjectClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbcf50
	int32_t STATIC_GetMaxAudioChannelCount(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetMaxAudioChannelCount // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dbce70
	void STATIC_GetKeyValue(struct FString Pair, struct FString& Key, struct FString& Value); // Function Engine.GameplayStatics.GetKeyValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9dbcc80
	int32_t STATIC_GetIntOption(struct FString Options, struct FString Key, int32_t DefaultValue); // Function Engine.GameplayStatics.GetIntOption // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbcb00
	float STATIC_GetGlobalTimeDilation(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGlobalTimeDilation // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbca70
	struct AGameStateBase* STATIC_GetGameState(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGameState // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbc9f0
	struct AGameModeBase* STATIC_GetGameMode(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGameMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbc970
	struct UGameInstance* STATIC_GetGameInstance(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGameInstance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbc8f0
	bool STATIC_GetEnableWorldRendering(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetEnableWorldRendering // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dbc870
	struct UReverbEffect* STATIC_GetCurrentReverbEffect(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetCurrentReverbEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dbc750
	struct FString STATIC_GetCurrentLevelName(struct UObject* WorldContextObject, bool bRemovePrefixString); // Function Engine.GameplayStatics.GetCurrentLevelName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dbc640
	float STATIC_GetAudioTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetAudioTimeSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbc5b0
	void STATIC_GetAllActorsWithTag(struct UObject* WorldContextObject, struct FName Tag, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsWithTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9dbc470
	void STATIC_GetAllActorsWithInterface(struct UObject* WorldContextObject, struct UClass* Interface, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsWithInterface // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9dbc330
	void STATIC_GetAllActorsOfClassWithTag(struct UObject* WorldContextObject, struct UClass* ActorClass, struct FName Tag, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsOfClassWithTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9dbc1b0
	void STATIC_GetAllActorsOfClass(struct UObject* WorldContextObject, struct UClass* ActorClass, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsOfClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9dbc070
	struct AActor* STATIC_GetActorOfClass(struct UObject* WorldContextObject, struct UClass* ActorClass); // Function Engine.GameplayStatics.GetActorOfClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dbbfb0
	void STATIC_GetActorArrayBounds(struct TArray<struct AActor*>& actors, bool bOnlyCollidingComponents, struct FVector& Center, struct FVector& BoxExtent); // Function Engine.GameplayStatics.GetActorArrayBounds // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9dbbe00
	struct FVector STATIC_GetActorArrayAverageLocation(struct TArray<struct AActor*>& actors); // Function Engine.GameplayStatics.GetActorArrayAverageLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9dbbd20
	void STATIC_GetAccurateRealTime(struct UObject* WorldContextObject, int32_t& Seconds, float& PartialSeconds); // Function Engine.GameplayStatics.GetAccurateRealTime // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9dbbc00
	void STATIC_FlushLevelStreaming(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.FlushLevelStreaming // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dbbb90
	struct AActor* STATIC_FinishSpawningActor(struct AActor* Actor, struct FTransform& SpawnTransform); // Function Engine.GameplayStatics.FinishSpawningActor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9dbba70
	bool STATIC_FindCollisionUV(struct FHitResult& Hit, int32_t UVChannel, struct FVector2D& UV); // Function Engine.GameplayStatics.FindCollisionUV // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dbb7e0
	void STATIC_EnableLiveStreaming(bool Enable); // Function Engine.GameplayStatics.EnableLiveStreaming // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dbb740
	bool STATIC_DoesSaveGameExist(struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.DoesSaveGameExist // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dbb640
	bool STATIC_DeprojectScreenToWorld(struct APlayerController* Player, struct FVector2D& ScreenPosition, struct FVector& WorldPosition, struct FVector& WorldDirection, bool bPlayerViewportRelative); // Function Engine.GameplayStatics.DeprojectScreenToWorld // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dbb470
	bool STATIC_DeleteGameInSlot(struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.DeleteGameInSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dbb370
	void STATIC_DeactivateReverbEffect(struct UObject* WorldContextObject, struct FName TagName); // Function Engine.GameplayStatics.DeactivateReverbEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dbb230
	struct UAudioComponent* STATIC_CreateSound2D(struct UObject* WorldContextObject, struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // Function Engine.GameplayStatics.CreateSound2D // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x9dbb000
	struct USaveGame* STATIC_CreateSaveGameObject(struct UClass* SaveGameClass); // Function Engine.GameplayStatics.CreateSaveGameObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dbaf80
	struct APlayerController* STATIC_CreatePlayer(struct UObject* WorldContextObject, int32_t ControllerId, bool bSpawnPlayerController); // Function Engine.GameplayStatics.CreatePlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dbae90
	void STATIC_ClearSoundMixModifiers(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.ClearSoundMixModifiers // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dbae20
	void STATIC_ClearSoundMixClassOverride(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier, struct USoundClass* InSoundClass, float FadeOutTime); // Function Engine.GameplayStatics.ClearSoundMixClassOverride // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dbacf0
	void STATIC_CancelAsyncLoading(); // Function Engine.GameplayStatics.CancelAsyncLoading // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9dbaae0
	void STATIC_BreakHitResult(struct FHitResult& Hit, bool& bBlockingHit, bool& bInitialOverlap, float& Time, float& Distance, struct FVector& Location, struct FVector& ImpactPoint, struct FVector& Normal, struct FVector& ImpactNormal, struct UPhysicalMaterial*& PhysMat, struct AActor*& HitActor, struct UPrimitiveComponent*& HitComponent, struct FName& HitBoneName, int32_t& HitItem, int32_t& FaceIndex, struct FVector& TraceStart, struct FVector& TraceEnd); // Function Engine.GameplayStatics.BreakHitResult // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dba3f0
	bool STATIC_BlueprintSuggestProjectileVelocity(struct UObject* WorldContextObject, struct FVector& TossVelocity, struct FVector StartLocation, struct FVector EndLocation, float LaunchSpeed, float OverrideGravityZ, enum class ESuggestProjVelocityTraceOption TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug); // Function Engine.GameplayStatics.BlueprintSuggestProjectileVelocity // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9db9310
	bool STATIC_Blueprint_PredictProjectilePath_ByTraceChannel(struct UObject* WorldContextObject, struct FHitResult& OutHit, struct TArray<struct FVector>& OutPathPositions, struct FVector& OutLastTraceDestination, struct FVector StartPos, struct FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByTraceChannel // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9db9e70
	bool STATIC_Blueprint_PredictProjectilePath_ByObjectType(struct UObject* WorldContextObject, struct FHitResult& OutHit, struct TArray<struct FVector>& OutPathPositions, struct FVector& OutLastTraceDestination, struct FVector StartPos, struct FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByObjectType // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9db98a0
	bool STATIC_Blueprint_PredictProjectilePath_Advanced(struct UObject* WorldContextObject, struct FPredictProjectilePathParams& PredictParams, struct FPredictProjectilePathResult& PredictResult); // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_Advanced // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9db9600
	struct AActor* STATIC_BeginSpawningActorFromClass(struct UObject* WorldContextObject, struct UClass* ActorClass, struct FTransform& SpawnTransform, bool bNoCollisionFail, struct AActor* Owner); // Function Engine.GameplayStatics.BeginSpawningActorFromClass // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9db9110
	struct AActor* STATIC_BeginSpawningActorFromBlueprint(struct UObject* WorldContextObject, struct UBlueprint* Blueprint, struct FTransform& SpawnTransform, bool bNoCollisionFail); // Function Engine.GameplayStatics.BeginSpawningActorFromBlueprint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9db8f70
	struct AActor* STATIC_BeginDeferredActorSpawnFromClass(struct UObject* WorldContextObject, struct UClass* ActorClass, struct FTransform& SpawnTransform, enum class ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, struct AActor* Owner); // Function Engine.GameplayStatics.BeginDeferredActorSpawnFromClass // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9db8d80
	bool STATIC_AreSubtitlesEnabled(); // Function Engine.GameplayStatics.AreSubtitlesEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9db8d50
	bool STATIC_AreAnyListenersWithinRange(struct UObject* WorldContextObject, struct FVector Location, float MaximumRange); // Function Engine.GameplayStatics.AreAnyListenersWithinRange // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9db8c40
	bool STATIC_ApplyRadialDamageWithFalloff(struct UObject* WorldContextObject, float BaseDamage, float MinimumDamage, struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, struct UClass* DamageTypeClass, struct TArray<struct AActor*>& IgnoreActors, struct AActor* DamageCauser, struct AController* InstigatedByController, enum class ECollisionChannel DamagePreventionChannel); // Function Engine.GameplayStatics.ApplyRadialDamageWithFalloff // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9db88a0
	bool STATIC_ApplyRadialDamage(struct UObject* WorldContextObject, float BaseDamage, struct FVector& Origin, float DamageRadius, struct UClass* DamageTypeClass, struct TArray<struct AActor*>& IgnoreActors, struct AActor* DamageCauser, struct AController* InstigatedByController, bool bDoFullDamage, enum class ECollisionChannel DamagePreventionChannel); // Function Engine.GameplayStatics.ApplyRadialDamage // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9db8590
	float STATIC_ApplyPointDamage(struct AActor* DamagedActor, float BaseDamage, struct FVector& HitFromDirection, struct FHitResult& HitInfo, struct AController* EventInstigator, struct AActor* DamageCauser, struct UClass* DamageTypeClass); // Function Engine.GameplayStatics.ApplyPointDamage // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9db8340
	float STATIC_ApplyDamage(struct AActor* DamagedActor, float BaseDamage, struct AController* EventInstigator, struct AActor* DamageCauser, struct UClass* DamageTypeClass); // Function Engine.GameplayStatics.ApplyDamage // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x9db81c0
	void STATIC_ActivateReverbEffect(struct UObject* WorldContextObject, struct UReverbEffect* ReverbEffect, struct FName TagName, float Priority, float Volume, float FadeTime); // Function Engine.GameplayStatics.ActivateReverbEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9db8010
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BlueprintMapLibrary
// Size: 0x30 (Inherited: 0x30)
class UBlueprintMapLibrary : public UBlueprintFunctionLibrary {
public:


	void STATIC_SetMapPropertyByName(struct UObject* Object, struct FName PropertyName, struct TMap<int32_t, int32_t>& Value); // Function Engine.BlueprintMapLibrary.SetMapPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9d80c60
	void STATIC_Map_Values(struct TMap<int32_t, int32_t>& TargetMap, struct TArray<int32_t>& Values); // Function Engine.BlueprintMapLibrary.Map_Values // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9d80b60
	bool STATIC_Map_Remove(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key); // Function Engine.BlueprintMapLibrary.Map_Remove // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9d809b0
	int32_t STATIC_Map_Length(struct TMap<int32_t, int32_t>& TargetMap); // Function Engine.BlueprintMapLibrary.Map_Length // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9d80900
	void STATIC_Map_Keys(struct TMap<int32_t, int32_t>& TargetMap, struct TArray<int32_t>& Keys); // Function Engine.BlueprintMapLibrary.Map_Keys // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9d80800
	bool STATIC_Map_Find(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& Value); // Function Engine.BlueprintMapLibrary.Map_Find // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9d80570
	bool STATIC_Map_Contains(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key); // Function Engine.BlueprintMapLibrary.Map_Contains // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9d803c0
	void STATIC_Map_Clear(struct TMap<int32_t, int32_t>& TargetMap); // Function Engine.BlueprintMapLibrary.Map_Clear // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9d80320
	void STATIC_Map_Add(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& Value); // Function Engine.BlueprintMapLibrary.Map_Add // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9d800b0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BlueprintPathsLibrary
// Size: 0x30 (Inherited: 0x30)
class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary {
public:


	struct FString STATIC_VideoCaptureDir(); // Function Engine.BlueprintPathsLibrary.VideoCaptureDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d86a50
	void STATIC_ValidatePath(struct FString InPath, bool& bDidSucceed, struct FText& OutReason); // Function Engine.BlueprintPathsLibrary.ValidatePath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9d868b0
	void STATIC_Split(struct FString InPath, struct FString& PathPart, struct FString& FilenamePart, struct FString& ExtensionPart); // Function Engine.BlueprintPathsLibrary.Split // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9d86650
	struct FString STATIC_SourceConfigDir(); // Function Engine.BlueprintPathsLibrary.SourceConfigDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c51520
	bool STATIC_ShouldSaveToUserDir(); // Function Engine.BlueprintPathsLibrary.ShouldSaveToUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d86620
	struct FString STATIC_ShaderWorkingDir(); // Function Engine.BlueprintPathsLibrary.ShaderWorkingDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d865a0
	void STATIC_SetProjectFilePath(struct FString NewGameProjectFilePath); // Function Engine.BlueprintPathsLibrary.SetProjectFilePath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9d864f0
	struct FString STATIC_SetExtension(struct FString InPath, struct FString InNewExtension); // Function Engine.BlueprintPathsLibrary.SetExtension // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d86370
	struct FString STATIC_ScreenShotDir(); // Function Engine.BlueprintPathsLibrary.ScreenShotDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d862f0
	struct FString STATIC_SandboxesDir(); // Function Engine.BlueprintPathsLibrary.SandboxesDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d85a70
	struct FString STATIC_RootDir(); // Function Engine.BlueprintPathsLibrary.RootDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c51bf0
	void STATIC_RemoveDuplicateSlashes(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.RemoveDuplicateSlashes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9d85930
	struct FString STATIC_ProjectUserDir(); // Function Engine.BlueprintPathsLibrary.ProjectUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c51820
	struct FString STATIC_ProjectSavedDir(); // Function Engine.BlueprintPathsLibrary.ProjectSavedDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c517a0
	struct FString STATIC_ProjectPluginsDir(); // Function Engine.BlueprintPathsLibrary.ProjectPluginsDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d858b0
	struct FString STATIC_ProjectPersistentDownloadDir(); // Function Engine.BlueprintPathsLibrary.ProjectPersistentDownloadDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d85830
	struct FString STATIC_ProjectModsDir(); // Function Engine.BlueprintPathsLibrary.ProjectModsDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c51720
	struct FString STATIC_ProjectLogDir(); // Function Engine.BlueprintPathsLibrary.ProjectLogDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d857b0
	struct FString STATIC_ProjectIntermediateDir(); // Function Engine.BlueprintPathsLibrary.ProjectIntermediateDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c516a0
	struct FString STATIC_ProjectDir(); // Function Engine.BlueprintPathsLibrary.ProjectDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c51620
	struct FString STATIC_ProjectContentDir(); // Function Engine.BlueprintPathsLibrary.ProjectContentDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c515a0
	struct FString STATIC_ProjectConfigDir(); // Function Engine.BlueprintPathsLibrary.ProjectConfigDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c51520
	struct FString STATIC_ProfilingDir(); // Function Engine.BlueprintPathsLibrary.ProfilingDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d85730
	void STATIC_NormalizeFilename(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.NormalizeFilename // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9d855f0
	void STATIC_NormalizeDirectoryName(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.NormalizeDirectoryName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9d854b0
	struct FString STATIC_MakeValidFileName(struct FString inString, struct FString InReplacementChar); // Function Engine.BlueprintPathsLibrary.MakeValidFileName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d85330
	void STATIC_MakeStandardFilename(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.MakeStandardFilename // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9d851f0
	void STATIC_MakePlatformFilename(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.MakePlatformFilename // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9d850b0
	bool STATIC_MakePathRelativeTo(struct FString InPath, struct FString InRelativeTo, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.MakePathRelativeTo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9d84ef0
	struct FString STATIC_LaunchDir(); // Function Engine.BlueprintPathsLibrary.LaunchDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c50200
	bool STATIC_IsSamePath(struct FString PathA, struct FString PathB); // Function Engine.BlueprintPathsLibrary.IsSamePath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d84db0
	bool STATIC_IsRestrictedPath(struct FString InPath); // Function Engine.BlueprintPathsLibrary.IsRestrictedPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d84cf0
	bool STATIC_IsRelative(struct FString InPath); // Function Engine.BlueprintPathsLibrary.IsRelative // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d84c30
	bool STATIC_IsProjectFilePathSet(); // Function Engine.BlueprintPathsLibrary.IsProjectFilePathSet // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d84c00
	bool STATIC_IsDrive(struct FString InPath); // Function Engine.BlueprintPathsLibrary.IsDrive // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d84b40
	bool STATIC_HasProjectPersistentDownloadDir(); // Function Engine.BlueprintPathsLibrary.HasProjectPersistentDownloadDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d84b10
	struct TArray<struct FString> STATIC_GetToolTipLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetToolTipLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d84ad0
	struct TArray<struct FString> STATIC_GetRestrictedFolderNames(); // Function Engine.BlueprintPathsLibrary.GetRestrictedFolderNames // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d84a90
	struct FString STATIC_GetRelativePathToRoot(); // Function Engine.BlueprintPathsLibrary.GetRelativePathToRoot // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d84a50
	struct TArray<struct FString> STATIC_GetPropertyNameLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetPropertyNameLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d84a10
	struct FString STATIC_GetProjectFilePath(); // Function Engine.BlueprintPathsLibrary.GetProjectFilePath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d84990
	struct FString STATIC_GetPath(struct FString InPath); // Function Engine.BlueprintPathsLibrary.GetPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d84880
	struct FString STATIC_GetInvalidFileSystemChars(); // Function Engine.BlueprintPathsLibrary.GetInvalidFileSystemChars // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d84690
	struct TArray<struct FString> STATIC_GetGameLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetGameLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d84650
	struct FString STATIC_GetExtension(struct FString InPath, bool bIncludeDot); // Function Engine.BlueprintPathsLibrary.GetExtension // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d84500
	struct TArray<struct FString> STATIC_GetEngineLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetEngineLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d844c0
	struct TArray<struct FString> STATIC_GetEditorLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetEditorLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d84480
	struct FString STATIC_GetCleanFilename(struct FString InPath); // Function Engine.BlueprintPathsLibrary.GetCleanFilename // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d84340
	struct FString STATIC_GetBaseFilename(struct FString InPath, bool bRemovePath); // Function Engine.BlueprintPathsLibrary.GetBaseFilename // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d841f0
	struct FString STATIC_GeneratedConfigDir(); // Function Engine.BlueprintPathsLibrary.GeneratedConfigDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d84170
	struct FString STATIC_GameUserDeveloperDir(); // Function Engine.BlueprintPathsLibrary.GameUserDeveloperDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d840f0
	struct FString STATIC_GameSourceDir(); // Function Engine.BlueprintPathsLibrary.GameSourceDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d84070
	struct FString STATIC_GameDevelopersDir(); // Function Engine.BlueprintPathsLibrary.GameDevelopersDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d83ff0
	struct FString STATIC_GameAgnosticSavedDir(); // Function Engine.BlueprintPathsLibrary.GameAgnosticSavedDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d83b30
	bool STATIC_FileExists(struct FString InPath); // Function Engine.BlueprintPathsLibrary.FileExists // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d83f30
	struct FString STATIC_FeaturePackDir(); // Function Engine.BlueprintPathsLibrary.FeaturePackDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d83eb0
	struct FString STATIC_EnterprisePluginsDir(); // Function Engine.BlueprintPathsLibrary.EnterprisePluginsDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d83e30
	struct FString STATIC_EnterpriseFeaturePackDir(); // Function Engine.BlueprintPathsLibrary.EnterpriseFeaturePackDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d83db0
	struct FString STATIC_EnterpriseDir(); // Function Engine.BlueprintPathsLibrary.EnterpriseDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d83d30
	struct FString STATIC_EngineVersionAgnosticUserDir(); // Function Engine.BlueprintPathsLibrary.EngineVersionAgnosticUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d83cb0
	struct FString STATIC_EngineUserDir(); // Function Engine.BlueprintPathsLibrary.EngineUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d83c30
	struct FString STATIC_EngineSourceDir(); // Function Engine.BlueprintPathsLibrary.EngineSourceDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d83bb0
	struct FString STATIC_EngineSavedDir(); // Function Engine.BlueprintPathsLibrary.EngineSavedDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d83b30
	struct FString STATIC_EnginePluginsDir(); // Function Engine.BlueprintPathsLibrary.EnginePluginsDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d83ab0
	struct FString STATIC_EngineIntermediateDir(); // Function Engine.BlueprintPathsLibrary.EngineIntermediateDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d83a30
	struct FString STATIC_EngineDir(); // Function Engine.BlueprintPathsLibrary.EngineDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d839b0
	struct FString STATIC_EngineContentDir(); // Function Engine.BlueprintPathsLibrary.EngineContentDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d83930
	struct FString STATIC_EngineConfigDir(); // Function Engine.BlueprintPathsLibrary.EngineConfigDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d838b0
	bool STATIC_DirectoryExists(struct FString InPath); // Function Engine.BlueprintPathsLibrary.DirectoryExists // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d837f0
	struct FString STATIC_DiffDir(); // Function Engine.BlueprintPathsLibrary.DiffDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d83770
	struct FString STATIC_CreateTempFilename(struct FString Path, struct FString Prefix, struct FString Extension); // Function Engine.BlueprintPathsLibrary.CreateTempFilename // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d83570
	struct FString STATIC_ConvertToSandboxPath(struct FString InPath, struct FString InSandboxName); // Function Engine.BlueprintPathsLibrary.ConvertToSandboxPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d833f0
	struct FString STATIC_ConvertRelativePathToFull(struct FString InPath, struct FString InBasePath); // Function Engine.BlueprintPathsLibrary.ConvertRelativePathToFull // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d83270
	struct FString STATIC_ConvertFromSandboxPath(struct FString InPath, struct FString InSandboxName); // Function Engine.BlueprintPathsLibrary.ConvertFromSandboxPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d830f0
	struct FString STATIC_Combine(struct TArray<struct FString>& InPaths); // Function Engine.BlueprintPathsLibrary.Combine // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9d82f90
	bool STATIC_CollapseRelativeDirectories(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.CollapseRelativeDirectories // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9d82e40
	struct FString STATIC_CloudDir(); // Function Engine.BlueprintPathsLibrary.CloudDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d82dc0
	struct FString STATIC_ChangeExtension(struct FString InPath, struct FString InNewExtension); // Function Engine.BlueprintPathsLibrary.ChangeExtension // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d82c20
	struct FString STATIC_BugItDir(); // Function Engine.BlueprintPathsLibrary.BugItDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d82a80
	struct FString STATIC_AutomationTransientDir(); // Function Engine.BlueprintPathsLibrary.AutomationTransientDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d82a00
	struct FString STATIC_AutomationLogDir(); // Function Engine.BlueprintPathsLibrary.AutomationLogDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d82980
	struct FString STATIC_AutomationDir(); // Function Engine.BlueprintPathsLibrary.AutomationDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d82900
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BlueprintPlatformLibrary
// Size: 0x30 (Inherited: 0x30)
class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary {
public:


	int32_t STATIC_ScheduleLocalNotificationFromNow(int32_t inSecondsFromNow, struct FText& Title, struct FText& Body, struct FText& Action, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationFromNow // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9d86040
	void STATIC_ScheduleLocalNotificationBadgeFromNow(int32_t inSecondsFromNow, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeFromNow // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9d85f50
	int32_t STATIC_ScheduleLocalNotificationBadgeAtTime(struct FDateTime& FireDateTime, bool LocalTime, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeAtTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9d85df0
	int32_t STATIC_ScheduleLocalNotificationAtTime(struct FDateTime& FireDateTime, bool LocalTime, struct FText& Title, struct FText& Body, struct FText& Action, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationAtTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9d85af0
	void STATIC_GetLaunchNotification(bool& NotificationLaunchedApp, struct FString& ActivationEvent, int32_t& FireDate); // Function Engine.BlueprintPlatformLibrary.GetLaunchNotification // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9d84710
	enum class EScreenOrientation STATIC_GetDeviceOrientation(); // Function Engine.BlueprintPlatformLibrary.GetDeviceOrientation // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9d84450
	void STATIC_ClearAllLocalNotifications(); // Function Engine.BlueprintPlatformLibrary.ClearAllLocalNotifications // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9d82da0
	void STATIC_CancelLocalNotificationById(int32_t NotificationId); // Function Engine.BlueprintPlatformLibrary.CancelLocalNotificationById // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9d82bb0
	void STATIC_CancelLocalNotification(struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.CancelLocalNotification // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9d82b00
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BlueprintSetLibrary
// Size: 0x30 (Inherited: 0x30)
class UBlueprintSetLibrary : public UBlueprintFunctionLibrary {
public:


	void STATIC_SetSetPropertyByName(/*struct UObject* Object, struct FName PropertyName, struct TSet<int32_t>& Value*/); // Function Engine.BlueprintSetLibrary.SetSetPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9d89100
	void STATIC_Set_Union(/*struct TSet<int32_t>& A, struct TSet<int32_t>& B, struct TSet<int32_t>& Result*/); // Function Engine.BlueprintSetLibrary.Set_Union // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9d89e20
	void STATIC_Set_ToArray(/*struct TSet<int32_t>& A, struct TArray<int32_t>& Result*/); // Function Engine.BlueprintSetLibrary.Set_ToArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9d89d20
	void STATIC_Set_RemoveItems(/*struct TSet<int32_t>& TargetSet, struct TArray<int32_t>& Items*/); // Function Engine.BlueprintSetLibrary.Set_RemoveItems // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9d89c20
	bool STATIC_Set_Remove(/*struct TSet<int32_t>& TargetSet, int32_t& Item*/); // Function Engine.BlueprintSetLibrary.Set_Remove // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9d89a70
	int32_t STATIC_Set_Length(/*struct TSet<int32_t>& TargetSet*/); // Function Engine.BlueprintSetLibrary.Set_Length // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9d899c0
	void STATIC_Set_Intersection(/*struct TSet<int32_t>& A, struct TSet<int32_t>& B, struct TSet<int32_t>& Result*/); // Function Engine.BlueprintSetLibrary.Set_Intersection // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9d89850
	void STATIC_Set_Difference(/*struct TSet<int32_t>& A, struct TSet<int32_t>& B, struct TSet<int32_t>& Result*/); // Function Engine.BlueprintSetLibrary.Set_Difference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9d896e0
	bool STATIC_Set_Contains(/*struct TSet<int32_t>& TargetSet, int32_t& ItemToFind*/); // Function Engine.BlueprintSetLibrary.Set_Contains // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9d89530
	void STATIC_Set_Clear(/*struct TSet<int32_t>& TargetSet*/); // Function Engine.BlueprintSetLibrary.Set_Clear // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9d89490
	void STATIC_Set_AddItems(/*struct TSet<int32_t>& TargetSet, struct TArray<int32_t>& NewItems*/); // Function Engine.BlueprintSetLibrary.Set_AddItems // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9d89390
	void STATIC_Set_Add(/*struct TSet<int32_t>& TargetSet, int32_t& NewItem*/); // Function Engine.BlueprintSetLibrary.Set_Add // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9d891f0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DataTableFunctionLibrary
// Size: 0x30 (Inherited: 0x30)
class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary {
public:


	void STATIC_GetDataTableRowNames(struct UDataTable* Table, struct TArray<struct FName>& OutRowNames); // Function Engine.DataTableFunctionLibrary.GetDataTableRowNames // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9da04d0
	bool STATIC_GetDataTableRowFromName(struct UDataTable* Table, struct FName RowName, struct FTableRowBase& OutRow); // Function Engine.DataTableFunctionLibrary.GetDataTableRowFromName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9da0240
	struct TArray<struct FString> STATIC_GetDataTableColumnAsString(struct UDataTable* DataTable, struct FName PropertyName); // Function Engine.DataTableFunctionLibrary.GetDataTableColumnAsString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9da0050
	void STATIC_EvaluateCurveTableRow(struct UCurveTable* CurveTable, struct FName RowName, float InXY, enum class EEvaluateCurveTableResult& OutResult, float& OutXY, struct FString ContextString); // Function Engine.DataTableFunctionLibrary.EvaluateCurveTableRow // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9d9fb60
	bool STATIC_DoesDataTableRowExist(struct UDataTable* Table, struct FName RowName); // Function Engine.DataTableFunctionLibrary.DoesDataTableRowExist // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9d9faa0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DebugDrawService
// Size: 0x30 (Inherited: 0x30)
class UDebugDrawService : public UBlueprintFunctionLibrary {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.HealthSnapshotBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary {
public:


	void STATIC_StopPerformanceSnapshots(); // Function Engine.HealthSnapshotBlueprintLibrary.StopPerformanceSnapshots // (Final|Exec|Native|Static|Public|BlueprintCallable) // @ game+0x9dccb80
	void STATIC_StartPerformanceSnapshots(); // Function Engine.HealthSnapshotBlueprintLibrary.StartPerformanceSnapshots // (Final|Exec|Native|Static|Public|BlueprintCallable) // @ game+0x9dccb60
	void STATIC_LogPerformanceSnapshot(struct FString SnapshotTitle, bool bResetStats); // Function Engine.HealthSnapshotBlueprintLibrary.LogPerformanceSnapshot // (Final|Exec|Native|Static|Public|BlueprintCallable) // @ game+0x9dcbde0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ImportanceSamplingLibrary
// Size: 0x30 (Inherited: 0x30)
class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary {
public:


	float STATIC_RandomSobolFloat(int32_t Index, int32_t Dimension, float Seed); // Function Engine.ImportanceSamplingLibrary.RandomSobolFloat // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dcc760
	struct FVector STATIC_RandomSobolCell3D(int32_t Index, int32_t NumCells, struct FVector Cell, struct FVector Seed); // Function Engine.ImportanceSamplingLibrary.RandomSobolCell3D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dcc5d0
	struct FVector2D STATIC_RandomSobolCell2D(int32_t Index, int32_t NumCells, struct FVector2D Cell, struct FVector2D Seed); // Function Engine.ImportanceSamplingLibrary.RandomSobolCell2D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dcc490
	float STATIC_NextSobolFloat(int32_t Index, int32_t Dimension, float PreviousValue); // Function Engine.ImportanceSamplingLibrary.NextSobolFloat // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dcc2f0
	struct FVector STATIC_NextSobolCell3D(int32_t Index, int32_t NumCells, struct FVector PreviousValue); // Function Engine.ImportanceSamplingLibrary.NextSobolCell3D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dcc1d0
	struct FVector2D STATIC_NextSobolCell2D(int32_t Index, int32_t NumCells, struct FVector2D PreviousValue); // Function Engine.ImportanceSamplingLibrary.NextSobolCell2D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dcc0d0
	struct FImportanceTexture STATIC_MakeImportanceTexture(struct UTexture2D* Texture, enum class EImportanceWeight WeightingFunc); // Function Engine.ImportanceSamplingLibrary.MakeImportanceTexture // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dcbf40
	void STATIC_ImportanceSample(struct FImportanceTexture& Texture, struct FVector2D& Rand, int32_t Samples, float Intensity, struct FVector2D& SamplePosition, struct FLinearColor& SampleColor, float& SampleIntensity, float& SampleSize); // Function Engine.ImportanceSamplingLibrary.ImportanceSample // (Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dcbb10
	void STATIC_BreakImportanceTexture(struct FImportanceTexture& ImportanceTexture, struct UTexture2D*& Texture, enum class EImportanceWeight& WeightingFunc); // Function Engine.ImportanceSamplingLibrary.BreakImportanceTexture // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9dca030
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.KismetArrayLibrary
// Size: 0x30 (Inherited: 0x30)
class UKismetArrayLibrary : public UBlueprintFunctionLibrary {
public:


	void STATIC_SetArrayPropertyByName(struct UObject* Object, struct FName PropertyName, struct TArray<int32_t>& Value); // Function Engine.KismetArrayLibrary.SetArrayPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9ddabd0
	void STATIC_FilterArray(struct TArray<struct AActor*>& TargetArray, struct UClass* FilterClass, struct TArray<struct AActor*>& FilteredArray); // Function Engine.KismetArrayLibrary.FilterArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9ddaa40
	void STATIC_Array_Swap(struct TArray<int32_t>& TargetArray, int32_t FirstIndex, int32_t SecondIndex); // Function Engine.KismetArrayLibrary.Array_Swap // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9dda910
	void STATIC_Array_Shuffle(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_Shuffle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9dda870
	void STATIC_Array_Set(struct TArray<int32_t>& TargetArray, int32_t Index, int32_t& Item, bool bSizeToFit); // Function Engine.KismetArrayLibrary.Array_Set // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9dda650
	void STATIC_Array_Resize(struct TArray<int32_t>& TargetArray, int32_t size); // Function Engine.KismetArrayLibrary.Array_Resize // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9dda560
	bool STATIC_Array_RemoveItem(struct TArray<int32_t>& TargetArray, int32_t& Item); // Function Engine.KismetArrayLibrary.Array_RemoveItem // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9dda3b0
	void STATIC_Array_Remove(struct TArray<int32_t>& TargetArray, int32_t IndexToRemove); // Function Engine.KismetArrayLibrary.Array_Remove // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9dda2c0
	int32_t STATIC_Array_Length(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_Length // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9dda210
	int32_t STATIC_Array_LastIndex(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_LastIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9dda160
	bool STATIC_Array_IsValidIndex(struct TArray<int32_t>& TargetArray, int32_t IndexToTest); // Function Engine.KismetArrayLibrary.Array_IsValidIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9dda070
	void STATIC_Array_Insert(struct TArray<int32_t>& TargetArray, int32_t& NewItem, int32_t Index); // Function Engine.KismetArrayLibrary.Array_Insert // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9dd9e90
	bool STATIC_Array_Identical(struct TArray<int32_t>& ArrayA, struct TArray<int32_t>& ArrayB); // Function Engine.KismetArrayLibrary.Array_Identical // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9dd9d80
	void STATIC_Array_Get(struct TArray<int32_t>& TargetArray, int32_t Index, int32_t& Item); // Function Engine.KismetArrayLibrary.Array_Get // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9dd9b90
	int32_t STATIC_Array_Find(struct TArray<int32_t>& TargetArray, int32_t& ItemToFind); // Function Engine.KismetArrayLibrary.Array_Find // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9dd99e0
	bool STATIC_Array_Contains(struct TArray<int32_t>& TargetArray, int32_t& ItemToFind); // Function Engine.KismetArrayLibrary.Array_Contains // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9dd9820
	void STATIC_Array_Clear(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_Clear // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9dd9780
	void STATIC_Array_Append(struct TArray<int32_t>& TargetArray, struct TArray<int32_t>& SourceArray); // Function Engine.KismetArrayLibrary.Array_Append // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9dd9680
	int32_t STATIC_Array_AddUnique(struct TArray<int32_t>& TargetArray, int32_t& NewItem); // Function Engine.KismetArrayLibrary.Array_AddUnique // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9dd94d0
	int32_t STATIC_Array_Add(struct TArray<int32_t>& TargetArray, int32_t& NewItem); // Function Engine.KismetArrayLibrary.Array_Add // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9dd9320
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.KismetGuidLibrary
// Size: 0x30 (Inherited: 0x30)
class UKismetGuidLibrary : public UBlueprintFunctionLibrary {
public:


	void STATIC_Parse_StringToGuid(struct FString GuidString, struct FGuid& OutGUID, bool& Success); // Function Engine.KismetGuidLibrary.Parse_StringToGuid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dff350
	bool STATIC_NotEqual_GuidGuid(struct FGuid& A, struct FGuid& B); // Function Engine.KismetGuidLibrary.NotEqual_GuidGuid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfe420
	struct FGuid STATIC_NewGuid(); // Function Engine.KismetGuidLibrary.NewGuid // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfd510
	bool STATIC_IsValid_Guid(struct FGuid& InGuid); // Function Engine.KismetGuidLibrary.IsValid_Guid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df3390
	void STATIC_Invalidate_Guid(struct FGuid& InGuid); // Function Engine.KismetGuidLibrary.Invalidate_Guid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9df2680
	bool STATIC_EqualEqual_GuidGuid(struct FGuid& A, struct FGuid& B); // Function Engine.KismetGuidLibrary.EqualEqual_GuidGuid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9deb7d0
	struct FString STATIC_Conv_GuidToString(struct FGuid& InGuid); // Function Engine.KismetGuidLibrary.Conv_GuidToString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de7ee0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.KismetInputLibrary
// Size: 0x30 (Inherited: 0x30)
class UKismetInputLibrary : public UBlueprintFunctionLibrary {
public:


	bool STATIC_PointerEvent_IsTouchEvent(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_IsTouchEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e00690
	bool STATIC_PointerEvent_IsMouseButtonDown(struct FPointerEvent& Input, struct FKey MouseButton); // Function Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e004d0
	float STATIC_PointerEvent_GetWheelDelta(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetWheelDelta // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e003a0
	int32_t STATIC_PointerEvent_GetUserIndex(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetUserIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e00270
	int32_t STATIC_PointerEvent_GetTouchpadIndex(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e00140
	struct FVector2D STATIC_PointerEvent_GetScreenSpacePosition(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e00010
	int32_t STATIC_PointerEvent_GetPointerIndex(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetPointerIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9dffee0
	struct FVector2D STATIC_PointerEvent_GetLastScreenSpacePosition(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dffdb0
	enum class ESlateGesture STATIC_PointerEvent_GetGestureType(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetGestureType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9dffc80
	struct FVector2D STATIC_PointerEvent_GetGestureDelta(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetGestureDelta // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dffb50
	struct FKey STATIC_PointerEvent_GetEffectingButton(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetEffectingButton // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9dff9f0
	struct FVector2D STATIC_PointerEvent_GetCursorDelta(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetCursorDelta // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dff8c0
	bool STATIC_Key_IsVectorAxis(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsVectorAxis // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df3ec0
	bool STATIC_Key_IsValid(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df3df0
	bool STATIC_Key_IsMouseButton(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsMouseButton // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df3d20
	bool STATIC_Key_IsModifierKey(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsModifierKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df3c50
	bool STATIC_Key_IsKeyboardKey(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsKeyboardKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df3b80
	bool STATIC_Key_IsGamepadKey(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsGamepadKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df3ab0
	bool STATIC_Key_IsFloatAxis(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsFloatAxis // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df39e0
	enum class EUINavigation STATIC_Key_GetNavigationDirectionFromKey(struct FKeyEvent& InKeyEvent); // Function Engine.KismetInputLibrary.Key_GetNavigationDirectionFromKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df38e0
	enum class EUINavigation STATIC_Key_GetNavigationDirectionFromAnalog(struct FAnalogInputEvent& InAnalogEvent); // Function Engine.KismetInputLibrary.Key_GetNavigationDirectionFromAnalog // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df37d0
	enum class EUINavigationAction STATIC_Key_GetNavigationActionFromKey(struct FKeyEvent& InKeyEvent); // Function Engine.KismetInputLibrary.Key_GetNavigationActionFromKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df36d0
	enum class EUINavigationAction STATIC_Key_GetNavigationAction(struct FKey& InKey); // Function Engine.KismetInputLibrary.Key_GetNavigationAction // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df3600
	struct FText STATIC_Key_GetDisplayName(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_GetDisplayName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df34e0
	bool STATIC_InputEvent_IsShiftDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsShiftDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df25d0
	bool STATIC_InputEvent_IsRightShiftDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightShiftDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df2520
	bool STATIC_InputEvent_IsRightControlDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightControlDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df2470
	bool STATIC_InputEvent_IsRightCommandDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightCommandDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df23c0
	bool STATIC_InputEvent_IsRightAltDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightAltDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df2310
	bool STATIC_InputEvent_IsRepeat(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRepeat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df2260
	bool STATIC_InputEvent_IsLeftShiftDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df21b0
	bool STATIC_InputEvent_IsLeftControlDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftControlDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df2100
	bool STATIC_InputEvent_IsLeftCommandDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df2050
	bool STATIC_InputEvent_IsLeftAltDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftAltDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df1fa0
	bool STATIC_InputEvent_IsControlDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsControlDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df1ef0
	bool STATIC_InputEvent_IsCommandDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsCommandDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df1e40
	bool STATIC_InputEvent_IsAltDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsAltDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df1d90
	struct FText STATIC_InputChord_GetDisplayName(struct FInputChord& Key); // Function Engine.KismetInputLibrary.InputChord_GetDisplayName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df1c40
	int32_t STATIC_GetUserIndex(struct FKeyEvent& Input); // Function Engine.KismetInputLibrary.GetUserIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9df0610
	struct FKey STATIC_GetKey(struct FKeyEvent& Input); // Function Engine.KismetInputLibrary.GetKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9deed00
	float STATIC_GetAnalogValue(struct FAnalogInputEvent& Input); // Function Engine.KismetInputLibrary.GetAnalogValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9dedf60
	bool STATIC_EqualEqual_KeyKey(struct FKey A, struct FKey B); // Function Engine.KismetInputLibrary.EqualEqual_KeyKey // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9debb60
	bool STATIC_EqualEqual_InputChordInputChord(struct FInputChord A, struct FInputChord B); // Function Engine.KismetInputLibrary.EqualEqual_InputChordInputChord // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9deb8d0
	void STATIC_CalibrateTilt(); // Function Engine.KismetInputLibrary.CalibrateTilt // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9de7150
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.KismetInternationalizationLibrary
// Size: 0x30 (Inherited: 0x30)
class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary {
public:


	bool STATIC_SetCurrentLocale(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentLocale // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e05810
	bool STATIC_SetCurrentLanguageAndLocale(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentLanguageAndLocale // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e05710
	bool STATIC_SetCurrentLanguage(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentLanguage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e05610
	bool STATIC_SetCurrentCulture(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentCulture // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e05510
	bool STATIC_SetCurrentAssetGroupCulture(struct FName AssetGroup, struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentAssetGroupCulture // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e053d0
	struct FString STATIC_GetSuitableCulture(struct TArray<struct FString>& AvailableCultures, struct FString CultureToMatch, struct FString FallbackCulture); // Function Engine.KismetInternationalizationLibrary.GetSuitableCulture // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9defff0
	struct FString STATIC_GetNativeCulture(enum class ELocalizedTextSourceCategory TextCategory); // Function Engine.KismetInternationalizationLibrary.GetNativeCulture // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9def570
	struct TArray<struct FString> STATIC_GetLocalizedCultures(bool IncludeGame, bool IncludeEngine, bool IncludeEditor, bool IncludeAdditional); // Function Engine.KismetInternationalizationLibrary.GetLocalizedCultures // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9deee30
	struct FString STATIC_GetCurrentLocale(); // Function Engine.KismetInternationalizationLibrary.GetCurrentLocale // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dee670
	struct FString STATIC_GetCurrentLanguage(); // Function Engine.KismetInternationalizationLibrary.GetCurrentLanguage // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dee5f0
	struct FString STATIC_GetCurrentCulture(); // Function Engine.KismetInternationalizationLibrary.GetCurrentCulture // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dee5f0
	struct FString STATIC_GetCurrentAssetGroupCulture(struct FName AssetGroup); // Function Engine.KismetInternationalizationLibrary.GetCurrentAssetGroupCulture // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dee520
	struct FString STATIC_GetCultureDisplayName(struct FString Culture, bool Localized); // Function Engine.KismetInternationalizationLibrary.GetCultureDisplayName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dee3d0
	void STATIC_ClearCurrentAssetGroupCulture(struct FName AssetGroup, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.ClearCurrentAssetGroupCulture // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9de7760
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.KismetMaterialLibrary
// Size: 0x30 (Inherited: 0x30)
class UKismetMaterialLibrary : public UBlueprintFunctionLibrary {
public:


	void STATIC_SetVectorParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName, struct FLinearColor& ParameterValue); // Function Engine.KismetMaterialLibrary.SetVectorParameterValue // (Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e05b10
	void STATIC_SetScalarParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName, float ParameterValue); // Function Engine.KismetMaterialLibrary.SetScalarParameterValue // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x9e059e0
	struct FLinearColor STATIC_GetVectorParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName); // Function Engine.KismetMaterialLibrary.GetVectorParameterValue // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9df07f0
	float STATIC_GetScalarParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName); // Function Engine.KismetMaterialLibrary.GetScalarParameterValue // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x9defc70
	struct UMaterialInstanceDynamic* STATIC_CreateDynamicMaterialInstance(struct UObject* WorldContextObject, struct UMaterialInterface* Parent, struct FName OptionalName); // Function Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x9de9010
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.KismetMathLibrary
// Size: 0x30 (Inherited: 0x30)
class UKismetMathLibrary : public UBlueprintFunctionLibrary {
public:


	int32_t STATIC_Xor_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Xor_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e0d050
	int64_t STATIC_Xor_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Xor_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e0cf90
	struct FVector STATIC_WeightedMovingAverage_FVector(struct FVector CurrentSample, struct FVector PreviousSample, float Weight); // Function Engine.KismetMathLibrary.WeightedMovingAverage_FVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0cd40
	struct FRotator STATIC_WeightedMovingAverage_FRotator(struct FRotator CurrentSample, struct FRotator PreviousSample, float Weight); // Function Engine.KismetMathLibrary.WeightedMovingAverage_FRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0cc00
	float STATIC_WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight); // Function Engine.KismetMathLibrary.WeightedMovingAverage_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e0ce80
	float STATIC_VSizeXYSquared(struct FVector A); // Function Engine.KismetMathLibrary.VSizeXYSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e08720
	float STATIC_VSizeXY(struct FVector A); // Function Engine.KismetMathLibrary.VSizeXY // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e08690
	float STATIC_VSizeSquared(struct FVector A); // Function Engine.KismetMathLibrary.VSizeSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e08600
	float STATIC_VSize2DSquared(struct FVector2D A); // Function Engine.KismetMathLibrary.VSize2DSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e084e0
	float STATIC_VSize2D(struct FVector2D A); // Function Engine.KismetMathLibrary.VSize2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e08450
	float STATIC_VSize(struct FVector A); // Function Engine.KismetMathLibrary.VSize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e08560
	struct FVector STATIC_VLerp(struct FVector A, struct FVector B, float Alpha); // Function Engine.KismetMathLibrary.VLerp // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e08320
	struct FVector STATIC_VInterpTo_Constant(struct FVector Current, struct FVector Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.VInterpTo_Constant // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e081a0
	struct FVector STATIC_VInterpTo(struct FVector Current, struct FVector Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.VInterpTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e08020
	struct FVector STATIC_VectorSpringInterp(struct FVector Current, struct FVector Target, struct FVectorSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass); // Function Engine.KismetMathLibrary.VectorSpringInterp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e0a0a0
	struct FVector STATIC_Vector_Zero(); // Function Engine.KismetMathLibrary.Vector_Zero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0cbd0
	struct FVector STATIC_Vector_Up(); // Function Engine.KismetMathLibrary.Vector_Up // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0cba0
	void STATIC_Vector_UnwindEuler(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_UnwindEuler // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e0cb20
	struct FVector2D STATIC_Vector_UnitCartesianToSpherical(struct FVector A); // Function Engine.KismetMathLibrary.Vector_UnitCartesianToSpherical // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0ca40
	struct FVector STATIC_Vector_ToRadians(struct FVector A); // Function Engine.KismetMathLibrary.Vector_ToRadians // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0c9a0
	struct FVector STATIC_Vector_ToDegrees(struct FVector A); // Function Engine.KismetMathLibrary.Vector_ToDegrees // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0c900
	struct FVector STATIC_Vector_SnappedToGrid(struct FVector InVect, float InGridSize); // Function Engine.KismetMathLibrary.Vector_SnappedToGrid // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0c790
	void STATIC_Vector_Set(struct FVector& A, float X, float Y, float Z); // Function Engine.KismetMathLibrary.Vector_Set // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e0c640
	struct FVector STATIC_Vector_Right(); // Function Engine.KismetMathLibrary.Vector_Right // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0c610
	struct FVector STATIC_Vector_Reciprocal(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_Reciprocal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0c530
	struct FVector STATIC_Vector_ProjectOnToNormal(struct FVector V, struct FVector InNormal); // Function Engine.KismetMathLibrary.Vector_ProjectOnToNormal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0c440
	struct FVector STATIC_Vector_One(); // Function Engine.KismetMathLibrary.Vector_One // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0c410
	struct FVector STATIC_Vector_NormalUnsafe(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_NormalUnsafe // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0c140
	void STATIC_Vector_Normalize(struct FVector& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_Normalize // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e0c280
	struct FVector STATIC_Vector_Normal2D(struct FVector A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_Normal2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0bfa0
	struct FVector STATIC_Vector_MirrorByPlane(struct FVector A, struct FPlane& InPlane); // Function Engine.KismetMathLibrary.Vector_MirrorByPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0be50
	struct FVector STATIC_Vector_Left(); // Function Engine.KismetMathLibrary.Vector_Left // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0be20
	bool STATIC_Vector_IsZero(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_IsZero // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0bd70
	bool STATIC_Vector_IsUnit(struct FVector& A, float SquaredLenthTolerance); // Function Engine.KismetMathLibrary.Vector_IsUnit // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0bc60
	bool STATIC_Vector_IsUniform(struct FVector& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_IsUniform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0bb40
	bool STATIC_Vector_IsNormal(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_IsNormal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0ba70
	bool STATIC_Vector_IsNearlyZero(struct FVector& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_IsNearlyZero // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0b960
	bool STATIC_Vector_IsNAN(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_IsNAN // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0b890
	float STATIC_Vector_HeadingAngle(struct FVector A); // Function Engine.KismetMathLibrary.Vector_HeadingAngle // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0b730
	struct FVector STATIC_Vector_GetSignVector(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetSignVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0b670
	struct FVector STATIC_Vector_GetProjection(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetProjection // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0b5e0
	float STATIC_Vector_GetAbsMin(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetAbsMin // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0b540
	float STATIC_Vector_GetAbsMax(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetAbsMax // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0b4a0
	struct FVector STATIC_Vector_GetAbs(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetAbs // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0b400
	struct FVector STATIC_Vector_Forward(); // Function Engine.KismetMathLibrary.Vector_Forward // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0b3d0
	struct FVector STATIC_Vector_Down(); // Function Engine.KismetMathLibrary.Vector_Down // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0b3a0
	float STATIC_Vector_DistanceSquared(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_DistanceSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0b2c0
	float STATIC_Vector_Distance2DSquared(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_Distance2DSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0b110
	float STATIC_Vector_Distance2D(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_Distance2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0b040
	float STATIC_Vector_Distance(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_Distance // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0b1e0
	float STATIC_Vector_CosineAngle2D(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Vector_CosineAngle2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0ae40
	struct FVector STATIC_Vector_ComponentMin(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Vector_ComponentMin // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0ad70
	struct FVector STATIC_Vector_ComponentMax(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Vector_ComponentMax // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0aca0
	struct FVector STATIC_Vector_ClampSizeMax2D(struct FVector A, float Max); // Function Engine.KismetMathLibrary.Vector_ClampSizeMax2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0a910
	struct FVector STATIC_Vector_ClampSizeMax(struct FVector A, float Max); // Function Engine.KismetMathLibrary.Vector_ClampSizeMax // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0aac0
	struct FVector STATIC_Vector_ClampSize2D(struct FVector A, float Min, float Max); // Function Engine.KismetMathLibrary.Vector_ClampSize2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0a790
	struct FVector STATIC_Vector_BoundedToCube(struct FVector InVect, float InRadius); // Function Engine.KismetMathLibrary.Vector_BoundedToCube // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0a690
	struct FVector STATIC_Vector_BoundedToBox(struct FVector InVect, struct FVector InBoxMin, struct FVector InBoxMax); // Function Engine.KismetMathLibrary.Vector_BoundedToBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0a560
	struct FVector STATIC_Vector_Backward(); // Function Engine.KismetMathLibrary.Vector_Backward // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0a530
	void STATIC_Vector_Assign(struct FVector& A, struct FVector& InVector); // Function Engine.KismetMathLibrary.Vector_Assign // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e0a450
	void STATIC_Vector_AddBounded(struct FVector& A, struct FVector InAddVect, float InRadius); // Function Engine.KismetMathLibrary.Vector_AddBounded // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e0a2f0
	struct FVector4 STATIC_Vector4_Zero(); // Function Engine.KismetMathLibrary.Vector4_Zero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0a080
	float STATIC_Vector4_SizeSquared3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_SizeSquared3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e09ef0
	float STATIC_Vector4_SizeSquared(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_SizeSquared // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e09fb0
	float STATIC_Vector4_Size3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_Size3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e09d60
	float STATIC_Vector4_Size(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_Size // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e09e20
	void STATIC_Vector4_Set(struct FVector4& A, float X, float Y, float Z, float W); // Function Engine.KismetMathLibrary.Vector4_Set // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e09bc0
	struct FVector4 STATIC_Vector4_NormalUnsafe3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_NormalUnsafe3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e098a0
	void STATIC_Vector4_Normalize3(struct FVector4& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector4_Normalize3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e09a00
	struct FVector4 STATIC_Vector4_Normal3(struct FVector4& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector4_Normal3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e096d0
	struct FVector4 STATIC_Vector4_Negated(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_Negated // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e09630
	struct FVector4 STATIC_Vector4_MirrorByVector3(struct FVector4& Direction, struct FVector4& SurfaceNormal); // Function Engine.KismetMathLibrary.Vector4_MirrorByVector3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e09470
	bool STATIC_Vector4_IsZero(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_IsZero // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e093b0
	bool STATIC_Vector4_IsUnit3(struct FVector4& A, float SquaredLenthTolerance); // Function Engine.KismetMathLibrary.Vector4_IsUnit3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e09290
	bool STATIC_Vector4_IsNormal3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_IsNormal3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e091c0
	bool STATIC_Vector4_IsNearlyZero3(struct FVector4& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector4_IsNearlyZero3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e090a0
	bool STATIC_Vector4_IsNAN(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_IsNAN // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e08fb0
	float STATIC_Vector4_DotProduct3(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Vector4_DotProduct3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e08d60
	float STATIC_Vector4_DotProduct(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Vector4_DotProduct // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e08e80
	struct FVector4 STATIC_Vector4_CrossProduct3(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Vector4_CrossProduct3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e08be0
	void STATIC_Vector4_Assign(struct FVector4& A, struct FVector4& InVector); // Function Engine.KismetMathLibrary.Vector4_Assign // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e08af0
	struct FVector2D STATIC_Vector2DInterpTo_Constant(struct FVector2D Current, struct FVector2D Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.Vector2DInterpTo_Constant // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e08900
	struct FVector2D STATIC_Vector2DInterpTo(struct FVector2D Current, struct FVector2D Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.Vector2DInterpTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e087a0
	struct FVector2D STATIC_Vector2D_Zero(); // Function Engine.KismetMathLibrary.Vector2D_Zero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e08ac0
	struct FVector2D STATIC_Vector2D_Unit45Deg(); // Function Engine.KismetMathLibrary.Vector2D_Unit45Deg // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e08a90
	struct FVector2D STATIC_Vector2D_One(); // Function Engine.KismetMathLibrary.Vector2D_One // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e08a60
	struct FVector STATIC_VEase(struct FVector A, struct FVector B, float Alpha, enum class EEasingFunc EasingFunc, float BlendExp, int32_t Steps); // Function Engine.KismetMathLibrary.VEase // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e07e30
	struct FDateTime STATIC_UtcNow(); // Function Engine.KismetMathLibrary.UtcNow // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e07df0
	struct FRotator STATIC_TransformRotation(struct FTransform& T, struct FRotator Rotation); // Function Engine.KismetMathLibrary.TransformRotation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e07bd0
	struct FVector STATIC_TransformLocation(struct FTransform& T, struct FVector Location); // Function Engine.KismetMathLibrary.TransformLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e07a30
	struct FVector STATIC_TransformDirection(struct FTransform& T, struct FVector Direction); // Function Engine.KismetMathLibrary.TransformDirection // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e078a0
	float STATIC_Transform_Determinant(struct FTransform& Transform); // Function Engine.KismetMathLibrary.Transform_Determinant // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e07d10
	struct FVector2D STATIC_ToSign2D(struct FVector2D A); // Function Engine.KismetMathLibrary.ToSign2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e077b0
	struct FVector2D STATIC_ToRounded2D(struct FVector2D A); // Function Engine.KismetMathLibrary.ToRounded2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e076f0
	void STATIC_ToDirectionAndLength2D(struct FVector2D A, struct FVector2D& OutDir, float& OutLength); // Function Engine.KismetMathLibrary.ToDirectionAndLength2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e07580
	struct FDateTime STATIC_Today(); // Function Engine.KismetMathLibrary.Today // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e07850
	struct FTransform STATIC_TLerp(struct FTransform& A, struct FTransform& B, float Alpha, enum class ELerpInterpolationMode InterpMode); // Function Engine.KismetMathLibrary.TLerp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e07000
	struct FTransform STATIC_TInterpTo(struct FTransform& Current, struct FTransform& Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.TInterpTo // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e06de0
	struct FTimespan STATIC_TimespanZeroValue(); // Function Engine.KismetMathLibrary.TimespanZeroValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x7a6da60
	float STATIC_TimespanRatio(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.TimespanRatio // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e074a0
	struct FTimespan STATIC_TimespanMinValue(); // Function Engine.KismetMathLibrary.TimespanMinValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e07470
	struct FTimespan STATIC_TimespanMaxValue(); // Function Engine.KismetMathLibrary.TimespanMaxValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e07440
	bool STATIC_TimespanFromString(struct FString TimespanString, struct FTimespan& Result); // Function Engine.KismetMathLibrary.TimespanFromString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e072a0
	struct FTransform STATIC_TEase(struct FTransform& A, struct FTransform& B, float Alpha, enum class EEasingFunc EasingFunc, float BlendExp, int32_t Steps); // Function Engine.KismetMathLibrary.TEase // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e06b60
	float STATIC_Tan(float A); // Function Engine.KismetMathLibrary.Tan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e07220
	struct FVector STATIC_Subtract_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Subtract_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e06a90
	struct FVector STATIC_Subtract_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Subtract_VectorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e069b0
	struct FVector STATIC_Subtract_VectorFloat(struct FVector A, float B); // Function Engine.KismetMathLibrary.Subtract_VectorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e068d0
	struct FVector4 STATIC_Subtract_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Subtract_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e067d0
	struct FVector2D STATIC_Subtract_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Subtract_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e06710
	struct FVector2D STATIC_Subtract_Vector2DFloat(struct FVector2D A, float B); // Function Engine.KismetMathLibrary.Subtract_Vector2DFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e06640
	struct FTimespan STATIC_Subtract_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Subtract_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e06170
	struct FQuat STATIC_Subtract_QuatQuat(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Subtract_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e06550
	struct FLinearColor STATIC_Subtract_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Subtract_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e06460
	int32_t STATIC_Subtract_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Subtract_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e063a0
	int64_t STATIC_Subtract_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Subtract_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e062e0
	float STATIC_Subtract_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Subtract_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e06220
	struct FDateTime STATIC_Subtract_DateTimeTimespan(struct FDateTime A, struct FTimespan B); // Function Engine.KismetMathLibrary.Subtract_DateTimeTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e06170
	struct FTimespan STATIC_Subtract_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Subtract_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e06170
	char STATIC_Subtract_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Subtract_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e060c0
	float STATIC_Square(float A); // Function Engine.KismetMathLibrary.Square // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e06040
	float STATIC_Sqrt(float A); // Function Engine.KismetMathLibrary.Sqrt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e05f90
	struct FVector STATIC_Spherical2DToUnitCartesian(struct FVector2D A); // Function Engine.KismetMathLibrary.Spherical2DToUnitCartesian // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e05ee0
	float STATIC_Sin(float A); // Function Engine.KismetMathLibrary.Sin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e05e60
	int64_t STATIC_SignOfInteger64(int64_t A); // Function Engine.KismetMathLibrary.SignOfInteger64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e05d20
	int32_t STATIC_SignOfInteger(int32_t A); // Function Engine.KismetMathLibrary.SignOfInteger // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e05dc0
	float STATIC_SignOfFloat(float A); // Function Engine.KismetMathLibrary.SignOfFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e05c50
	void STATIC_SetRandomStreamSeed(struct FRandomStream& Stream, int32_t NewSeed); // Function Engine.KismetMathLibrary.SetRandomStreamSeed // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e05910
	void STATIC_Set2D(struct FVector2D& A, float X, float Y); // Function Engine.KismetMathLibrary.Set2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e052c0
	struct FVector STATIC_SelectVector(struct FVector A, struct FVector B, bool bPickA); // Function Engine.KismetMathLibrary.SelectVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e04df0
	struct FTransform STATIC_SelectTransform(struct FTransform& A, struct FTransform& B, bool bPickA); // Function Engine.KismetMathLibrary.SelectTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e05100
	struct FString STATIC_SelectString(struct FString A, struct FString B, bool bPickA); // Function Engine.KismetMathLibrary.SelectString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e04f00
	struct FRotator STATIC_SelectRotator(struct FRotator A, struct FRotator B, bool bPickA); // Function Engine.KismetMathLibrary.SelectRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e04df0
	struct UObject* STATIC_SelectObject(struct UObject* A, struct UObject* B, bool bSelectA); // Function Engine.KismetMathLibrary.SelectObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e049f0
	int32_t STATIC_SelectInt(int32_t A, int32_t B, bool bPickA); // Function Engine.KismetMathLibrary.SelectInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e04d00
	float STATIC_SelectFloat(float A, float B, bool bPickA); // Function Engine.KismetMathLibrary.SelectFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e04bf0
	struct FLinearColor STATIC_SelectColor(struct FLinearColor A, struct FLinearColor B, bool bPickA); // Function Engine.KismetMathLibrary.SelectColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e04ae0
	struct UClass* STATIC_SelectClass(struct UClass* A, struct UClass* B, bool bSelectA); // Function Engine.KismetMathLibrary.SelectClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e049f0
	void STATIC_SeedRandomStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.SeedRandomStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e04970
	float STATIC_SafeDivide(float A, float B); // Function Engine.KismetMathLibrary.SafeDivide // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e048b0
	int64_t STATIC_Round64(float A); // Function Engine.KismetMathLibrary.Round64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e04760
	int32_t STATIC_Round(float A); // Function Engine.KismetMathLibrary.Round // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e04820
	struct FRotator STATIC_RotatorFromAxisAndAngle(struct FVector Axis, float Angle); // Function Engine.KismetMathLibrary.RotatorFromAxisAndAngle // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e04680
	struct FVector STATIC_RotateAngleAxis(struct FVector InVect, float AngleDeg, struct FVector Axis); // Function Engine.KismetMathLibrary.RotateAngleAxis // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e04540
	struct FRotator STATIC_RLerp(struct FRotator A, struct FRotator B, float Alpha, bool bShortestPath); // Function Engine.KismetMathLibrary.RLerp // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e02dc0
	struct FRotator STATIC_RInterpTo_Constant(struct FRotator Current, struct FRotator Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.RInterpTo_Constant // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e02c40
	struct FRotator STATIC_RInterpTo(struct FRotator Current, struct FRotator Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.RInterpTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e02ac0
	void STATIC_RGBToHSV_Vector(struct FLinearColor RGB, struct FLinearColor& HSV); // Function Engine.KismetMathLibrary.RGBToHSV_Vector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e029e0
	void STATIC_RGBToHSV(struct FLinearColor InColor, float& H, float& S, float& V, float& A); // Function Engine.KismetMathLibrary.RGBToHSV // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e027f0
	struct FLinearColor STATIC_RGBLinearToHSV(struct FLinearColor RGB); // Function Engine.KismetMathLibrary.RGBLinearToHSV // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e02760
	void STATIC_ResetVectorSpringState(struct FVectorSpringState& SpringState); // Function Engine.KismetMathLibrary.ResetVectorSpringState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e044a0
	void STATIC_ResetRandomStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.ResetRandomStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e04420
	void STATIC_ResetFloatSpringState(struct FFloatSpringState& SpringState); // Function Engine.KismetMathLibrary.ResetFloatSpringState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e04390
	struct FRotator STATIC_REase(struct FRotator A, struct FRotator B, float Alpha, bool bShortestPath, enum class EEasingFunc EasingFunc, float BlendExp, int32_t Steps); // Function Engine.KismetMathLibrary.REase // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e02530
	struct FVector STATIC_RandomUnitVectorInEllipticalConeInRadiansFromStream(struct FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadiansFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e04200
	struct FVector STATIC_RandomUnitVectorInEllipticalConeInRadians(struct FVector ConeDir, float MaxYawInRadians, float MaxPitchInRadians); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadians // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e040e0
	struct FVector STATIC_RandomUnitVectorInEllipticalConeInDegreesFromStream(struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegreesFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e03f40
	struct FVector STATIC_RandomUnitVectorInEllipticalConeInDegrees(struct FVector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegrees // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e03e10
	struct FVector STATIC_RandomUnitVectorInConeInRadiansFromStream(struct FVector& ConeDir, float ConeHalfAngleInRadians, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInRadiansFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e03ce0
	struct FVector STATIC_RandomUnitVectorInConeInRadians(struct FVector ConeDir, float ConeHalfAngleInRadians); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInRadians // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e03c00
	struct FVector STATIC_RandomUnitVectorInConeInDegreesFromStream(struct FVector& ConeDir, float ConeHalfAngleInDegrees, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInDegreesFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e03ad0
	struct FVector STATIC_RandomUnitVectorInConeInDegrees(struct FVector ConeDir, float ConeHalfAngleInDegrees); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInDegrees // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e039e0
	struct FVector STATIC_RandomUnitVectorFromStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e03940
	struct FVector STATIC_RandomUnitVector(); // Function Engine.KismetMathLibrary.RandomUnitVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e03900
	struct FRotator STATIC_RandomRotatorFromStream(bool bRoll, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomRotatorFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e03820
	struct FRotator STATIC_RandomRotator(bool bRoll); // Function Engine.KismetMathLibrary.RandomRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e03780
	struct FVector STATIC_RandomPointInBoundingBox(struct FVector Origin, struct FVector BoxExtent); // Function Engine.KismetMathLibrary.RandomPointInBoundingBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e03640
	int32_t STATIC_RandomIntegerInRangeFromStream(int32_t Min, int32_t Max, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomIntegerInRangeFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e03540
	int32_t STATIC_RandomIntegerInRange(int32_t Min, int32_t Max); // Function Engine.KismetMathLibrary.RandomIntegerInRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x7a7ef10
	int32_t STATIC_RandomIntegerFromStream(int32_t Max, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomIntegerFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e03470
	int64_t STATIC_RandomInteger64InRange(int64_t Min, int64_t Max); // Function Engine.KismetMathLibrary.RandomInteger64InRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x7a7f010
	int64_t STATIC_RandomInteger64(int64_t Max); // Function Engine.KismetMathLibrary.RandomInteger64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e033b0
	int32_t STATIC_RandomInteger(int32_t Max); // Function Engine.KismetMathLibrary.RandomInteger // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x7a7ed10
	float STATIC_RandomFloatInRangeFromStream(float Min, float Max, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomFloatInRangeFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e032a0
	float STATIC_RandomFloatInRange(float Min, float Max); // Function Engine.KismetMathLibrary.RandomFloatInRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x7a78840
	float STATIC_RandomFloatFromStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomFloatFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e03210
	float STATIC_RandomFloat(); // Function Engine.KismetMathLibrary.RandomFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e031d0
	bool STATIC_RandomBoolWithWeightFromStream(float Weight, struct FRandomStream& RandomStream); // Function Engine.KismetMathLibrary.RandomBoolWithWeightFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e030f0
	bool STATIC_RandomBoolWithWeight(float Weight); // Function Engine.KismetMathLibrary.RandomBoolWithWeight // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e03070
	bool STATIC_RandomBoolFromStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomBoolFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e02fe0
	bool STATIC_RandomBool(); // Function Engine.KismetMathLibrary.RandomBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x7a7ebe0
	float STATIC_RadiansToDegrees(float A); // Function Engine.KismetMathLibrary.RadiansToDegrees // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e02f60
	struct FVector STATIC_Quat_VectorUp(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_VectorUp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e01220
	struct FVector STATIC_Quat_VectorRight(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_VectorRight // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e01110
	struct FVector STATIC_Quat_VectorForward(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_VectorForward // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e01020
	struct FVector STATIC_Quat_UnrotateVector(struct FQuat& Q, struct FVector& V); // Function Engine.KismetMathLibrary.Quat_UnrotateVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e02300
	float STATIC_Quat_SizeSquared(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_SizeSquared // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e02240
	float STATIC_Quat_Size(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Size // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e02180
	void STATIC_Quat_SetFromEuler(struct FQuat& Q, struct FVector& Euler); // Function Engine.KismetMathLibrary.Quat_SetFromEuler // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e020a0
	void STATIC_Quat_SetComponents(struct FQuat& Q, float X, float Y, float Z, float W); // Function Engine.KismetMathLibrary.Quat_SetComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e01f10
	struct FRotator STATIC_Quat_Rotator(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Rotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e01e70
	struct FVector STATIC_Quat_RotateVector(struct FQuat& Q, struct FVector& V); // Function Engine.KismetMathLibrary.Quat_RotateVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e01c50
	struct FQuat STATIC_Quat_Normalized(struct FQuat& Q, float Tolerance); // Function Engine.KismetMathLibrary.Quat_Normalized // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e01b00
	void STATIC_Quat_Normalize(struct FQuat& Q, float Tolerance); // Function Engine.KismetMathLibrary.Quat_Normalize // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e019c0
	struct FQuat STATIC_Quat_MakeFromEuler(struct FVector& Euler); // Function Engine.KismetMathLibrary.Quat_MakeFromEuler // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e01920
	struct FQuat STATIC_Quat_Log(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Log // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e01880
	bool STATIC_Quat_IsNormalized(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_IsNormalized // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e017b0
	bool STATIC_Quat_IsNonFinite(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_IsNonFinite // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e016d0
	bool STATIC_Quat_IsIdentity(struct FQuat& Q, float Tolerance); // Function Engine.KismetMathLibrary.Quat_IsIdentity // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e015c0
	bool STATIC_Quat_IsFinite(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_IsFinite // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e014e0
	struct FQuat STATIC_Quat_Inversed(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Inversed // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e01410
	struct FQuat STATIC_Quat_Identity(); // Function Engine.KismetMathLibrary.Quat_Identity // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e013f0
	struct FVector STATIC_Quat_GetRotationAxis(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetRotationAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e01310
	struct FVector STATIC_Quat_GetAxisZ(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAxisZ // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e01220
	struct FVector STATIC_Quat_GetAxisY(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAxisY // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e01110
	struct FVector STATIC_Quat_GetAxisX(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAxisX // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e01020
	float STATIC_Quat_GetAngle(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAngle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e00f70
	struct FQuat STATIC_Quat_Exp(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Exp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e00ed0
	struct FVector STATIC_Quat_Euler(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Euler // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e00e30
	void STATIC_Quat_EnforceShortestArcWith(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Quat_EnforceShortestArcWith // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e00d00
	float STATIC_Quat_AngularDistance(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Quat_AngularDistance // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e00bc0
	struct FVector STATIC_ProjectVectorOnToVector(struct FVector V, struct FVector Target); // Function Engine.KismetMathLibrary.ProjectVectorOnToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e00a70
	struct FVector STATIC_ProjectVectorOnToPlane(struct FVector V, struct FVector PlaneNormal); // Function Engine.KismetMathLibrary.ProjectVectorOnToPlane // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e00940
	struct FVector STATIC_ProjectPointOnToPlane(struct FVector Point, struct FVector PlaneBase, struct FVector PlaneNormal); // Function Engine.KismetMathLibrary.ProjectPointOnToPlane // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e007c0
	bool STATIC_PointsAreCoplanar(struct TArray<struct FVector>& Points, float Tolerance); // Function Engine.KismetMathLibrary.PointsAreCoplanar // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x7a7e2b0
	float STATIC_PerlinNoise1D(float Value); // Function Engine.KismetMathLibrary.PerlinNoise1D // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dff840
	int32_t STATIC_Percent_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Percent_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dff760
	float STATIC_Percent_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Percent_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dff580
	char STATIC_Percent_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Percent_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dff4b0
	int32_t STATIC_Or_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Or_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dff290
	int64_t STATIC_Or_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Or_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dff1d0
	struct FDateTime STATIC_Now(); // Function Engine.KismetMathLibrary.Now // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dff190
	bool STATIC_NotEqualExactly_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.NotEqualExactly_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfdf70
	bool STATIC_NotEqualExactly_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.NotEqualExactly_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfde40
	bool STATIC_NotEqualExactly_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.NotEqualExactly_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfdd70
	bool STATIC_NotEqual_VectorVector(struct FVector A, struct FVector B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfeed0
	bool STATIC_NotEqual_Vector4Vector4(struct FVector4& A, struct FVector4& B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfed40
	bool STATIC_NotEqual_Vector2DVector2D(struct FVector2D A, struct FVector2D B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfec20
	bool STATIC_NotEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.NotEqual_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfe2a0
	bool STATIC_NotEqual_RotatorRotator(struct FRotator A, struct FRotator B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_RotatorRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfea90
	bool STATIC_NotEqual_QuatQuat(struct FQuat& A, struct FQuat& B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfe930
	bool STATIC_NotEqual_ObjectObject(struct UObject* A, struct UObject* B); // Function Engine.KismetMathLibrary.NotEqual_ObjectObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dfe1e0
	bool STATIC_NotEqual_NameName(struct FName A, struct FName B); // Function Engine.KismetMathLibrary.NotEqual_NameName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dfe850
	bool STATIC_NotEqual_MatrixMatrix(struct FMatrix& A, struct FMatrix& B, float Tolerance); // Function Engine.KismetMathLibrary.NotEqual_MatrixMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfe6c0
	bool STATIC_NotEqual_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.NotEqual_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfe5e0
	bool STATIC_NotEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.NotEqual_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dfe520
	bool STATIC_NotEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.NotEqual_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dfe1e0
	bool STATIC_NotEqual_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.NotEqual_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dfe350
	bool STATIC_NotEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.NotEqual_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfe2a0
	bool STATIC_NotEqual_ClassClass(struct UClass* A, struct UClass* B); // Function Engine.KismetMathLibrary.NotEqual_ClassClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dfe1e0
	bool STATIC_NotEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.NotEqual_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dfe120
	bool STATIC_NotEqual_BoolBool(bool A, bool B); // Function Engine.KismetMathLibrary.NotEqual_BoolBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dfe050
	bool STATIC_Not_PreBool(bool A); // Function Engine.KismetMathLibrary.Not_PreBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dff110
	int64_t STATIC_Not_Int64(int64_t A); // Function Engine.KismetMathLibrary.Not_Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dff010
	int32_t STATIC_Not_Int(int32_t A); // Function Engine.KismetMathLibrary.Not_Int // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dff090
	struct FVector2D STATIC_NormalSafe2D(struct FVector2D A, float Tolerance); // Function Engine.KismetMathLibrary.NormalSafe2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfd810
	float STATIC_NormalizeToRange(float Value, float RangeMin, float RangeMax); // Function Engine.KismetMathLibrary.NormalizeToRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dfdb70
	struct FRotator STATIC_NormalizedDeltaRotator(struct FRotator A, struct FRotator B); // Function Engine.KismetMathLibrary.NormalizedDeltaRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfdc80
	float STATIC_NormalizeAxis(float Angle); // Function Engine.KismetMathLibrary.NormalizeAxis // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dfdaf0
	void STATIC_Normalize2D(struct FVector2D& A, float Tolerance); // Function Engine.KismetMathLibrary.Normalize2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9dfd970
	struct FVector2D STATIC_Normal2D(struct FVector2D A); // Function Engine.KismetMathLibrary.Normal2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfd550
	struct FVector STATIC_Normal(struct FVector A, float Tolerance); // Function Engine.KismetMathLibrary.Normal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfd660
	struct FVector STATIC_NegateVector(struct FVector A); // Function Engine.KismetMathLibrary.NegateVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfd3d0
	struct FRotator STATIC_NegateRotator(struct FRotator A); // Function Engine.KismetMathLibrary.NegateRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfd330
	struct FVector2D STATIC_Negated2D(struct FVector2D& A); // Function Engine.KismetMathLibrary.Negated2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfd470
	bool STATIC_NearlyEqual_TransformTransform(struct FTransform& A, struct FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance); // Function Engine.KismetMathLibrary.NearlyEqual_TransformTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfd110
	bool STATIC_NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NearlyEqual_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dfd000
	float STATIC_MultiplyMultiply_FloatFloat(float Base, float Exp); // Function Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dfbde0
	float STATIC_MultiplyByPi(float Value); // Function Engine.KismetMathLibrary.MultiplyByPi // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dfbd60
	struct FVector STATIC_Multiply_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Multiply_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfcf30
	struct FVector STATIC_Multiply_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Multiply_VectorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfcaf0
	struct FVector STATIC_Multiply_VectorFloat(struct FVector A, float B); // Function Engine.KismetMathLibrary.Multiply_VectorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfca10
	struct FVector4 STATIC_Multiply_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Multiply_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfce30
	struct FVector2D STATIC_Multiply_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Multiply_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfcd70
	struct FVector2D STATIC_Multiply_Vector2DFloat(struct FVector2D A, float B); // Function Engine.KismetMathLibrary.Multiply_Vector2DFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfcca0
	struct FTimespan STATIC_Multiply_TimespanFloat(struct FTimespan A, float Scalar); // Function Engine.KismetMathLibrary.Multiply_TimespanFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfcbd0
	struct FRotator STATIC_Multiply_RotatorInt(struct FRotator A, int32_t B); // Function Engine.KismetMathLibrary.Multiply_RotatorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfcaf0
	struct FRotator STATIC_Multiply_RotatorFloat(struct FRotator A, float B); // Function Engine.KismetMathLibrary.Multiply_RotatorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfca10
	struct FQuat STATIC_Multiply_QuatQuat(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Multiply_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfc8d0
	struct FMatrix STATIC_Multiply_MatrixMatrix(struct FMatrix& A, struct FMatrix& B); // Function Engine.KismetMathLibrary.Multiply_MatrixMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfc6c0
	struct FMatrix STATIC_Multiply_MatrixFloat(struct FMatrix& A, float B); // Function Engine.KismetMathLibrary.Multiply_MatrixFloat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfc440
	struct FLinearColor STATIC_Multiply_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Multiply_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfc350
	struct FLinearColor STATIC_Multiply_LinearColorFloat(struct FLinearColor A, float B); // Function Engine.KismetMathLibrary.Multiply_LinearColorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfc260
	int32_t STATIC_Multiply_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Multiply_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dfc1a0
	float STATIC_Multiply_IntFloat(int32_t A, float B); // Function Engine.KismetMathLibrary.Multiply_IntFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dfc0e0
	int64_t STATIC_Multiply_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Multiply_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dfc020
	float STATIC_Multiply_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Multiply_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dfbf60
	char STATIC_Multiply_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Multiply_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dfbea0
	struct FVector STATIC_MirrorVectorByNormal(struct FVector InVect, struct FVector InNormal); // Function Engine.KismetMathLibrary.MirrorVectorByNormal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9def8b0
	void STATIC_MinOfIntArray(struct TArray<int32_t>& IntArray, int32_t& IndexOfMinValue, int32_t& MinValue); // Function Engine.KismetMathLibrary.MinOfIntArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9dfb910
	void STATIC_MinOfFloatArray(struct TArray<float>& FloatArray, int32_t& IndexOfMinValue, float& MinValue); // Function Engine.KismetMathLibrary.MinOfFloatArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9dfb7a0
	void STATIC_MinOfByteArray(struct TArray<char>& ByteArray, int32_t& IndexOfMinValue, char& MinValue); // Function Engine.KismetMathLibrary.MinOfByteArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9dfb630
	int64_t STATIC_MinInt64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.MinInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dfb570
	void STATIC_MinimumAreaRectangle(struct UObject* WorldContextObject, struct TArray<struct FVector>& InVerts, struct FVector& SampleSurfaceNormal, struct FVector& OutRectCenter, struct FRotator& OutRectRotation, float& OutSideLengthX, float& OutSideLengthY, bool bDebugDraw); // Function Engine.KismetMathLibrary.MinimumAreaRectangle // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9dfba80
	int32_t STATIC_Min(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Min // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dfb4b0
	void STATIC_MaxOfIntArray(struct TArray<int32_t>& IntArray, int32_t& IndexOfMaxValue, int32_t& MaxValue); // Function Engine.KismetMathLibrary.MaxOfIntArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9dfb340
	void STATIC_MaxOfFloatArray(struct TArray<float>& FloatArray, int32_t& IndexOfMaxValue, float& MaxValue); // Function Engine.KismetMathLibrary.MaxOfFloatArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9dfb1d0
	void STATIC_MaxOfByteArray(struct TArray<char>& ByteArray, int32_t& IndexOfMaxValue, char& MaxValue); // Function Engine.KismetMathLibrary.MaxOfByteArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9dfb060
	int64_t STATIC_MaxInt64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.MaxInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dfafa0
	int32_t STATIC_Max(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Max // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dfaee0
	struct FVector4 STATIC_Matrix_TransformVector4(struct FMatrix& M, struct FVector4 V); // Function Engine.KismetMathLibrary.Matrix_TransformVector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfac80
	struct FVector4 STATIC_Matrix_TransformVector(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_TransformVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfada0
	struct FVector4 STATIC_Matrix_TransformPosition(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_TransformPosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfab40
	struct FQuat STATIC_Matrix_ToQuat(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_ToQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfaaa0
	void STATIC_Matrix_SetOrigin(struct FMatrix& M, struct FVector NewOrigin); // Function Engine.KismetMathLibrary.Matrix_SetOrigin // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9dfa9c0
	void STATIC_Matrix_SetColumn(struct FMatrix& M, enum class EMatrixColumns Column, struct FVector Value); // Function Engine.KismetMathLibrary.Matrix_SetColumn // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9dfa890
	void STATIC_Matrix_SetAxis(struct FMatrix& M, enum class EAxis Axis, struct FVector AxisVector); // Function Engine.KismetMathLibrary.Matrix_SetAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9dfa760
	struct FMatrix STATIC_Matrix_ScaleTranslation(struct FMatrix& M, struct FVector Scale3D); // Function Engine.KismetMathLibrary.Matrix_ScaleTranslation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfa620
	struct FMatrix STATIC_Matrix_RemoveTranslation(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_RemoveTranslation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfa560
	void STATIC_Matrix_RemoveScaling(struct FMatrix& M, float Tolerance); // Function Engine.KismetMathLibrary.Matrix_RemoveScaling // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9dfa490
	struct FMatrix STATIC_Matrix_Mirror(struct FMatrix& M, enum class EAxis MirrorAxis, enum class EAxis FlipAxis); // Function Engine.KismetMathLibrary.Matrix_Mirror // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfa320
	struct FVector STATIC_Matrix_InverseTransformVector(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_InverseTransformVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfa1c0
	struct FVector STATIC_Matrix_InverseTransformPosition(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_InverseTransformPosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfa060
	struct FMatrix STATIC_Matrix_Identity(); // Function Engine.KismetMathLibrary.Matrix_Identity // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dfa010
	struct FVector STATIC_Matrix_GetUnitAxis(struct FMatrix& M, enum class EAxis Axis); // Function Engine.KismetMathLibrary.Matrix_GetUnitAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df9f10
	void STATIC_Matrix_GetUnitAxes(struct FMatrix& M, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.Matrix_GetUnitAxes // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df9d80
	struct FMatrix STATIC_Matrix_GetTransposed(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetTransposed // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df9b90
	struct FMatrix STATIC_Matrix_GetTransposeAdjoint(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetTransposeAdjoint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df9ad0
	struct FVector STATIC_Matrix_GetScaleVector(struct FMatrix& M, float Tolerance); // Function Engine.KismetMathLibrary.Matrix_GetScaleVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df96e0
	struct FVector STATIC_Matrix_GetScaledAxis(struct FMatrix& M, enum class EAxis Axis); // Function Engine.KismetMathLibrary.Matrix_GetScaledAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df9990
	void STATIC_Matrix_GetScaledAxes(struct FMatrix& M, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.Matrix_GetScaledAxes // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df97e0
	float STATIC_Matrix_GetRotDeterminant(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetRotDeterminant // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df95d0
	struct FRotator STATIC_Matrix_GetRotator(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de83f0
	struct FVector STATIC_Matrix_GetOrigin(struct FMatrix& InMatrix); // Function Engine.KismetMathLibrary.Matrix_GetOrigin // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df9530
	float STATIC_Matrix_GetMaximumAxisScale(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetMaximumAxisScale // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df94a0
	struct FMatrix STATIC_Matrix_GetMatrixWithoutScale(struct FMatrix& M, float Tolerance); // Function Engine.KismetMathLibrary.Matrix_GetMatrixWithoutScale // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df9370
	struct FMatrix STATIC_Matrix_GetInverse(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetInverse // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df92b0
	bool STATIC_Matrix_GetFrustumTopPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumTopPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df90b0
	bool STATIC_Matrix_GetFrustumRightPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumRightPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df8eb0
	bool STATIC_Matrix_GetFrustumNearPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumNearPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df8cf0
	bool STATIC_Matrix_GetFrustumLeftPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumLeftPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df8af0
	bool STATIC_Matrix_GetFrustumFarPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumFarPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df88f0
	bool STATIC_Matrix_GetFrustumBottomPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumBottomPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df86f0
	float STATIC_Matrix_GetDeterminant(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetDeterminant // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df8660
	struct FVector STATIC_Matrix_GetColumn(struct FMatrix& M, enum class EMatrixColumns Column); // Function Engine.KismetMathLibrary.Matrix_GetColumn // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df8570
	bool STATIC_Matrix_ContainsNaN(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_ContainsNaN // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df84e0
	struct FMatrix STATIC_Matrix_ConcatenateTranslation(struct FMatrix& M, struct FVector translation); // Function Engine.KismetMathLibrary.Matrix_ConcatenateTranslation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df8350
	struct FMatrix STATIC_Matrix_ApplyScale(struct FMatrix& M, float Scale); // Function Engine.KismetMathLibrary.Matrix_ApplyScale // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df80f0
	float STATIC_MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB); // Function Engine.KismetMathLibrary.MapRangeUnclamped // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df7f50
	float STATIC_MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB); // Function Engine.KismetMathLibrary.MapRangeClamped // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df7db0
	struct FVector4 STATIC_MakeVector4(float X, float Y, float Z, float W); // Function Engine.KismetMathLibrary.MakeVector4 // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df7b40
	struct FVector2D STATIC_MakeVector2D(float X, float Y); // Function Engine.KismetMathLibrary.MakeVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df7a80
	struct FVector STATIC_MakeVector(float X, float Y, float Z); // Function Engine.KismetMathLibrary.MakeVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df7ca0
	struct FTransform STATIC_MakeTransform(struct FVector Location, struct FRotator Rotation, struct FVector Scale); // Function Engine.KismetMathLibrary.MakeTransform // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df78f0
	struct FTimespan STATIC_MakeTimespan2(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t FractionNano); // Function Engine.KismetMathLibrary.MakeTimespan2 // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df75f0
	struct FTimespan STATIC_MakeTimespan(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t Milliseconds); // Function Engine.KismetMathLibrary.MakeTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df7770
	struct FRotator STATIC_MakeRotFromZY(struct FVector& Z, struct FVector& Y); // Function Engine.KismetMathLibrary.MakeRotFromZY // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df7290
	struct FRotator STATIC_MakeRotFromZX(struct FVector& Z, struct FVector& X); // Function Engine.KismetMathLibrary.MakeRotFromZX // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df7180
	struct FRotator STATIC_MakeRotFromZ(struct FVector& Z); // Function Engine.KismetMathLibrary.MakeRotFromZ // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df70c0
	struct FRotator STATIC_MakeRotFromYZ(struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.MakeRotFromYZ // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df6fb0
	struct FRotator STATIC_MakeRotFromYX(struct FVector& Y, struct FVector& X); // Function Engine.KismetMathLibrary.MakeRotFromYX // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df6ea0
	struct FRotator STATIC_MakeRotFromY(struct FVector& Y); // Function Engine.KismetMathLibrary.MakeRotFromY // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df6de0
	struct FRotator STATIC_MakeRotFromXZ(struct FVector& X, struct FVector& Z); // Function Engine.KismetMathLibrary.MakeRotFromXZ // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df6cd0
	struct FRotator STATIC_MakeRotFromXY(struct FVector& X, struct FVector& Y); // Function Engine.KismetMathLibrary.MakeRotFromXY // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df6bc0
	struct FRotator STATIC_MakeRotFromX(struct FVector& X); // Function Engine.KismetMathLibrary.MakeRotFromX // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df6b00
	struct FRotator STATIC_MakeRotator(float Roll, float Pitch, float Yaw); // Function Engine.KismetMathLibrary.MakeRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df74e0
	struct FRotator STATIC_MakeRotationFromAxes(struct FVector Forward, struct FVector Right, struct FVector Up); // Function Engine.KismetMathLibrary.MakeRotationFromAxes // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df73a0
	struct FTransform STATIC_MakeRelativeTransform(struct FTransform& A, struct FTransform& RelativeTo); // Function Engine.KismetMathLibrary.MakeRelativeTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df6970
	struct FRandomStream STATIC_MakeRandomStream(int32_t InitialSeed); // Function Engine.KismetMathLibrary.MakeRandomStream // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df68e0
	struct FQualifiedFrameTime STATIC_MakeQualifiedFrameTime(struct FFrameNumber Frame, struct FFrameRate FrameRate, float SubFrame); // Function Engine.KismetMathLibrary.MakeQualifiedFrameTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df67e0
	float STATIC_MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase); // Function Engine.KismetMathLibrary.MakePulsatingValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df66d0
	struct FPlane STATIC_MakePlaneFromPointAndNormal(struct FVector Point, struct FVector Normal); // Function Engine.KismetMathLibrary.MakePlaneFromPointAndNormal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df65f0
	struct FFrameRate STATIC_MakeFrameRate(int32_t Numerator, int32_t Denominator); // Function Engine.KismetMathLibrary.MakeFrameRate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df6530
	struct FDateTime STATIC_MakeDateTime(int32_t Year, int32_t Month, int32_t Day, int32_t Hour, int32_t Minute, int32_t Second, int32_t Millisecond); // Function Engine.KismetMathLibrary.MakeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df6340
	struct FLinearColor STATIC_MakeColor(float R, float G, float B, float A); // Function Engine.KismetMathLibrary.MakeColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df61e0
	struct FBox2D STATIC_MakeBox2D(struct FVector2D Min, struct FVector2D Max); // Function Engine.KismetMathLibrary.MakeBox2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df6030
	struct FBox STATIC_MakeBox(struct FVector Min, struct FVector Max); // Function Engine.KismetMathLibrary.MakeBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df6100
	float STATIC_Loge(float A); // Function Engine.KismetMathLibrary.Loge // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df5fb0
	float STATIC_Log(float A, float Base); // Function Engine.KismetMathLibrary.Log // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df5ef0
	bool STATIC_LinePlaneIntersection_OriginNormal(struct FVector& LineStart, struct FVector& LineEnd, struct FVector PlaneOrigin, struct FVector PlaneNormal, float& T, struct FVector& Intersection); // Function Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df4ad0
	bool STATIC_LinePlaneIntersection(struct FVector& LineStart, struct FVector& LineEnd, struct FPlane& APlane, float& T, struct FVector& Intersection); // Function Engine.KismetMathLibrary.LinePlaneIntersection // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df48f0
	struct FLinearColor STATIC_LinearColorLerpUsingHSV(struct FLinearColor A, struct FLinearColor B, float Alpha); // Function Engine.KismetMathLibrary.LinearColorLerpUsingHSV // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df4e80
	struct FLinearColor STATIC_LinearColorLerp(struct FLinearColor A, struct FLinearColor B, float Alpha); // Function Engine.KismetMathLibrary.LinearColorLerp // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df4cf0
	struct FLinearColor STATIC_LinearColor_Yellow(); // Function Engine.KismetMathLibrary.LinearColor_Yellow // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df5ed0
	struct FLinearColor STATIC_LinearColor_White(); // Function Engine.KismetMathLibrary.LinearColor_White // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df5eb0
	struct FLinearColor STATIC_LinearColor_Transparent(); // Function Engine.KismetMathLibrary.LinearColor_Transparent // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df5e90
	struct FColor STATIC_LinearColor_ToRGBE(struct FLinearColor InLinearColor); // Function Engine.KismetMathLibrary.LinearColor_ToRGBE // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df5e00
	struct FLinearColor STATIC_LinearColor_ToNewOpacity(struct FLinearColor InColor, float InOpacity); // Function Engine.KismetMathLibrary.LinearColor_ToNewOpacity // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df5d20
	void STATIC_LinearColor_SetTemperature(struct FLinearColor& InOutColor, float InTemperature); // Function Engine.KismetMathLibrary.LinearColor_SetTemperature // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9df5c50
	void STATIC_LinearColor_SetRGBA(struct FLinearColor& InOutColor, float R, float G, float B, float A); // Function Engine.KismetMathLibrary.LinearColor_SetRGBA // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9df5a30
	void STATIC_LinearColor_SetRandomHue(struct FLinearColor& InOutColor); // Function Engine.KismetMathLibrary.LinearColor_SetRandomHue // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9df5bc0
	void STATIC_LinearColor_SetFromSRGB(struct FLinearColor& InOutColor, struct FColor& InSRGB); // Function Engine.KismetMathLibrary.LinearColor_SetFromSRGB // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9df5950
	void STATIC_LinearColor_SetFromPow22(struct FLinearColor& InOutColor, struct FColor& InColor); // Function Engine.KismetMathLibrary.LinearColor_SetFromPow22 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9df5870
	void STATIC_LinearColor_SetFromHSV(struct FLinearColor& InOutColor, float H, float S, float V, float A); // Function Engine.KismetMathLibrary.LinearColor_SetFromHSV // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9df56e0
	void STATIC_LinearColor_Set(struct FLinearColor& InOutColor, struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_Set // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9df5620
	struct FLinearColor STATIC_LinearColor_Red(); // Function Engine.KismetMathLibrary.LinearColor_Red // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df5600
	struct FColor STATIC_LinearColor_QuantizeRound(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_QuantizeRound // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df5570
	struct FColor STATIC_LinearColor_Quantize(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_Quantize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df54e0
	bool STATIC_LinearColor_IsNearEqual(struct FLinearColor A, struct FLinearColor B, float Tolerance); // Function Engine.KismetMathLibrary.LinearColor_IsNearEqual // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df5390
	struct FLinearColor STATIC_LinearColor_Green(); // Function Engine.KismetMathLibrary.LinearColor_Green // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df5370
	struct FLinearColor STATIC_LinearColor_Gray(); // Function Engine.KismetMathLibrary.LinearColor_Gray // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df5350
	float STATIC_LinearColor_GetMin(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_GetMin // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df52d0
	float STATIC_LinearColor_GetMax(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_GetMax // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df5250
	float STATIC_LinearColor_GetLuminance(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_GetLuminance // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df51b0
	float STATIC_LinearColor_Distance(struct FLinearColor C1, struct FLinearColor C2); // Function Engine.KismetMathLibrary.LinearColor_Distance // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df50b0
	struct FLinearColor STATIC_LinearColor_Desaturated(struct FLinearColor InColor, float InDesaturation); // Function Engine.KismetMathLibrary.LinearColor_Desaturated // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df4fe0
	struct FLinearColor STATIC_LinearColor_Blue(); // Function Engine.KismetMathLibrary.LinearColor_Blue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df4fc0
	struct FLinearColor STATIC_LinearColor_Black(); // Function Engine.KismetMathLibrary.LinearColor_Black // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df4fa0
	struct FVector STATIC_LessLess_VectorRotator(struct FVector A, struct FRotator B); // Function Engine.KismetMathLibrary.LessLess_VectorRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df4450
	bool STATIC_LessEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.LessEqual_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df4160
	bool STATIC_LessEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.LessEqual_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df4390
	bool STATIC_LessEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.LessEqual_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df42d0
	bool STATIC_LessEqual_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.LessEqual_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df4210
	bool STATIC_LessEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.LessEqual_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df4160
	bool STATIC_LessEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.LessEqual_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df40a0
	bool STATIC_Less_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Less_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df4600
	bool STATIC_Less_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Less_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df4830
	bool STATIC_Less_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Less_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df4770
	bool STATIC_Less_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Less_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df46b0
	bool STATIC_Less_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Less_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df4600
	bool STATIC_Less_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Less_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df4540
	float STATIC_Lerp(float A, float B, float Alpha); // Function Engine.KismetMathLibrary.Lerp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df3f90
	bool STATIC_IsZero2D(struct FVector2D& A); // Function Engine.KismetMathLibrary.IsZero2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df3430
	bool STATIC_IsPointInBoxWithTransform(struct FVector Point, struct FTransform& BoxWorldTransform, struct FVector BoxExtent); // Function Engine.KismetMathLibrary.IsPointInBoxWithTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df3200
	bool STATIC_IsPointInBox(struct FVector Point, struct FVector BoxOrigin, struct FVector BoxExtent); // Function Engine.KismetMathLibrary.IsPointInBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df30d0
	bool STATIC_IsNearlyZero2D(struct FVector2D& A, float Tolerance); // Function Engine.KismetMathLibrary.IsNearlyZero2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df2fd0
	bool STATIC_IsMorning(struct FDateTime A); // Function Engine.KismetMathLibrary.IsMorning // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df2f20
	bool STATIC_IsLeapYear(int32_t Year); // Function Engine.KismetMathLibrary.IsLeapYear // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df2ea0
	bool STATIC_IsAfternoon(struct FDateTime A); // Function Engine.KismetMathLibrary.IsAfternoon // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df2df0
	struct FTransform STATIC_InvertTransform(struct FTransform& T); // Function Engine.KismetMathLibrary.InvertTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df2be0
	struct FRotator STATIC_InverseTransformRotation(struct FTransform& T, struct FRotator Rotation); // Function Engine.KismetMathLibrary.InverseTransformRotation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df2aa0
	struct FVector STATIC_InverseTransformLocation(struct FTransform& T, struct FVector Location); // Function Engine.KismetMathLibrary.InverseTransformLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df28a0
	struct FVector STATIC_InverseTransformDirection(struct FTransform& T, struct FVector Direction); // Function Engine.KismetMathLibrary.InverseTransformDirection // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df2710
	bool STATIC_InRange_IntInt(int32_t Value, int32_t Min, int32_t Max, bool InclusiveMin, bool InclusiveMax); // Function Engine.KismetMathLibrary.InRange_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df1ac0
	bool STATIC_InRange_Int64Int64(int64_t Value, int64_t Min, int64_t Max, bool InclusiveMin, bool InclusiveMax); // Function Engine.KismetMathLibrary.InRange_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df1930
	bool STATIC_InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax); // Function Engine.KismetMathLibrary.InRange_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df1790
	float STATIC_Hypotenuse(float Width, float Height); // Function Engine.KismetMathLibrary.Hypotenuse // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df16d0
	struct FLinearColor STATIC_HSVToRGBLinear(struct FLinearColor HSV); // Function Engine.KismetMathLibrary.HSVToRGBLinear // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df1560
	void STATIC_HSVToRGB_Vector(struct FLinearColor HSV, struct FLinearColor& RGB); // Function Engine.KismetMathLibrary.HSVToRGB_Vector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df15f0
	struct FLinearColor STATIC_HSVToRGB(float H, float S, float V, float A); // Function Engine.KismetMathLibrary.HSVToRGB // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df13f0
	float STATIC_GridSnap_Float(float Location, float GridSize); // Function Engine.KismetMathLibrary.GridSnap_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df12f0
	struct FVector STATIC_GreaterGreater_VectorRotator(struct FVector A, struct FRotator B); // Function Engine.KismetMathLibrary.GreaterGreater_VectorRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df0e50
	bool STATIC_GreaterEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df0b60
	bool STATIC_GreaterEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.GreaterEqual_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df0d90
	bool STATIC_GreaterEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.GreaterEqual_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df0cd0
	bool STATIC_GreaterEqual_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.GreaterEqual_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df0c10
	bool STATIC_GreaterEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df0b60
	bool STATIC_GreaterEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.GreaterEqual_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df0aa0
	bool STATIC_Greater_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Greater_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df1000
	bool STATIC_Greater_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Greater_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df1230
	bool STATIC_Greater_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Greater_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df1170
	bool STATIC_Greater_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Greater_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df10b0
	bool STATIC_Greater_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Greater_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df1000
	bool STATIC_Greater_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Greater_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df0f40
	int32_t STATIC_GetYear(struct FDateTime A); // Function Engine.KismetMathLibrary.GetYear // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df0a20
	void STATIC_GetYawPitchFromVector(struct FVector InVec, float& Yaw, float& Pitch); // Function Engine.KismetMathLibrary.GetYawPitchFromVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df08f0
	struct FVector STATIC_GetVectorArrayAverage(struct TArray<struct FVector>& Vectors); // Function Engine.KismetMathLibrary.GetVectorArrayAverage // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df0710
	struct FVector STATIC_GetUpVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.GetUpVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df0570
	float STATIC_GetTotalSeconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalSeconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df04f0
	float STATIC_GetTotalMinutes(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalMinutes // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df0470
	float STATIC_GetTotalMilliseconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalMilliseconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df03f0
	float STATIC_GetTotalHours(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalHours // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df0370
	float STATIC_GetTotalDays(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalDays // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df02f0
	struct FTimespan STATIC_GetTimeOfDay(struct FDateTime A); // Function Engine.KismetMathLibrary.GetTimeOfDay // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9df0270
	float STATIC_GetTAU(); // Function Engine.KismetMathLibrary.GetTAU // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9df0250
	void STATIC_GetSlopeDegreeAngles(struct FVector& MyRightYAxis, struct FVector& FloorNormal, struct FVector& UpVector, float& OutSlopePitchDegreeAngle, float& OutSlopeRollDegreeAngle); // Function Engine.KismetMathLibrary.GetSlopeDegreeAngles // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9defe10
	int32_t STATIC_GetSeconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetSeconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9defd60
	int32_t STATIC_GetSecond(struct FDateTime A); // Function Engine.KismetMathLibrary.GetSecond // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9defd60
	struct FVector2D STATIC_GetRotated2D(struct FVector2D A, float AngleDeg); // Function Engine.KismetMathLibrary.GetRotated2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9defa40
	struct FVector STATIC_GetRightVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.GetRightVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9def9a0
	struct FVector STATIC_GetReflectionVector(struct FVector Direction, struct FVector SurfaceNormal); // Function Engine.KismetMathLibrary.GetReflectionVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9def8b0
	float STATIC_GetPointDistanceToSegment(struct FVector Point, struct FVector SegmentStart, struct FVector SegmentEnd); // Function Engine.KismetMathLibrary.GetPointDistanceToSegment // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9def780
	float STATIC_GetPointDistanceToLine(struct FVector Point, struct FVector LineOrigin, struct FVector LineDirection); // Function Engine.KismetMathLibrary.GetPointDistanceToLine // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9def650
	float STATIC_GetPI(); // Function Engine.KismetMathLibrary.GetPI // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9def630
	int32_t STATIC_GetMonth(struct FDateTime A); // Function Engine.KismetMathLibrary.GetMonth // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9def4f0
	int32_t STATIC_GetMinutes(struct FTimespan A); // Function Engine.KismetMathLibrary.GetMinutes // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9def440
	int32_t STATIC_GetMinute(struct FDateTime A); // Function Engine.KismetMathLibrary.GetMinute // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9def440
	float STATIC_GetMinElement(struct FVector A); // Function Engine.KismetMathLibrary.GetMinElement // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9def3c0
	float STATIC_GetMin2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetMin2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9def340
	int32_t STATIC_GetMilliseconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetMilliseconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9def290
	int32_t STATIC_GetMillisecond(struct FDateTime A); // Function Engine.KismetMathLibrary.GetMillisecond // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9def1e0
	float STATIC_GetMaxElement(struct FVector A); // Function Engine.KismetMathLibrary.GetMaxElement // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9def160
	float STATIC_GetMax2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetMax2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9def0e0
	int32_t STATIC_GetHours(struct FTimespan A); // Function Engine.KismetMathLibrary.GetHours // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9deec50
	int32_t STATIC_GetHour12(struct FDateTime A); // Function Engine.KismetMathLibrary.GetHour12 // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9deebd0
	int32_t STATIC_GetHour(struct FDateTime A); // Function Engine.KismetMathLibrary.GetHour // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9deec50
	struct FVector STATIC_GetForwardVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.GetForwardVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9deeb30
	struct FTimespan STATIC_GetDuration(struct FTimespan A); // Function Engine.KismetMathLibrary.GetDuration // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9deeab0
	struct FVector STATIC_GetDirectionUnitVector(struct FVector From, struct FVector To); // Function Engine.KismetMathLibrary.GetDirectionUnitVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dee900
	int32_t STATIC_GetDays(struct FTimespan A); // Function Engine.KismetMathLibrary.GetDays // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dee880
	int32_t STATIC_GetDayOfYear(struct FDateTime A); // Function Engine.KismetMathLibrary.GetDayOfYear // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dee800
	int32_t STATIC_GetDay(struct FDateTime A); // Function Engine.KismetMathLibrary.GetDay // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dee780
	struct FDateTime STATIC_GetDate(struct FDateTime A); // Function Engine.KismetMathLibrary.GetDate // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dee6f0
	void STATIC_GetAzimuthAndElevation(struct FVector InDirection, struct FTransform& ReferenceFrame, float& Azimuth, float& Elevation); // Function Engine.KismetMathLibrary.GetAzimuthAndElevation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dee1f0
	void STATIC_GetAxes(struct FRotator A, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.GetAxes // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dee070
	float STATIC_GetAbsMax2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetAbsMax2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9deded0
	struct FVector2D STATIC_GetAbs2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetAbs2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dede40
	struct FIntVector STATIC_FTruncVector(struct FVector& InVector); // Function Engine.KismetMathLibrary.FTruncVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9ded470
	int64_t STATIC_FTrunc64(float A); // Function Engine.KismetMathLibrary.FTrunc64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9ded370
	int32_t STATIC_FTrunc(float A); // Function Engine.KismetMathLibrary.FTrunc // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9ded3f0
	struct FTimespan STATIC_FromSeconds(float Seconds); // Function Engine.KismetMathLibrary.FromSeconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9deddb0
	struct FTimespan STATIC_FromMinutes(float Minutes); // Function Engine.KismetMathLibrary.FromMinutes // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dedd20
	struct FTimespan STATIC_FromMilliseconds(float Milliseconds); // Function Engine.KismetMathLibrary.FromMilliseconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dedc90
	struct FTimespan STATIC_FromHours(float Hours); // Function Engine.KismetMathLibrary.FromHours // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dedc00
	struct FTimespan STATIC_FromDays(float Days); // Function Engine.KismetMathLibrary.FromDays // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dedb70
	float STATIC_Fraction(float A); // Function Engine.KismetMathLibrary.Fraction // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dedae0
	int32_t STATIC_FMod(float Dividend, float Divisor, float& Remainder); // Function Engine.KismetMathLibrary.FMod // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9ded260
	float STATIC_FMin(float A, float B); // Function Engine.KismetMathLibrary.FMin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9ded1a0
	float STATIC_FMax(float A, float B); // Function Engine.KismetMathLibrary.FMax // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9ded0e0
	float STATIC_FloatSpringInterp(float Current, float Target, struct FFloatSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass); // Function Engine.KismetMathLibrary.FloatSpringInterp // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9ded8d0
	float STATIC_FixedTurn(float InCurrent, float InDesired, float InDeltaRate); // Function Engine.KismetMathLibrary.FixedTurn // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x7a78c40
	float STATIC_FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.FInterpTo_Constant // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x7a785a0
	float STATIC_FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.FInterpTo // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x7a786f0
	float STATIC_FInterpEaseInOut(float A, float B, float Alpha, float Exponent); // Function Engine.KismetMathLibrary.FInterpEaseInOut // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9decf90
	void STATIC_FindNearestPointsOnLineSegments(struct FVector Segment1Start, struct FVector Segment1End, struct FVector Segment2Start, struct FVector Segment2End, struct FVector& Segment1Point, struct FVector& Segment2Point); // Function Engine.KismetMathLibrary.FindNearestPointsOnLineSegments // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x7a7fad0
	struct FRotator STATIC_FindLookAtRotation(struct FVector& Start, struct FVector& Target); // Function Engine.KismetMathLibrary.FindLookAtRotation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9ded790
	struct FVector STATIC_FindClosestPointOnSegment(struct FVector Point, struct FVector SegmentStart, struct FVector SegmentEnd); // Function Engine.KismetMathLibrary.FindClosestPointOnSegment // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9ded650
	struct FVector STATIC_FindClosestPointOnLine(struct FVector Point, struct FVector LineOrigin, struct FVector LineDirection); // Function Engine.KismetMathLibrary.FindClosestPointOnLine // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9ded510
	int64_t STATIC_FFloor64(float A); // Function Engine.KismetMathLibrary.FFloor64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dece40
	int32_t STATIC_FFloor(float A); // Function Engine.KismetMathLibrary.FFloor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9decf00
	float STATIC_FClamp(float Value, float Min, float Max); // Function Engine.KismetMathLibrary.FClamp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9decd30
	int64_t STATIC_FCeil64(float A); // Function Engine.KismetMathLibrary.FCeil64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9decbe0
	int32_t STATIC_FCeil(float A); // Function Engine.KismetMathLibrary.FCeil // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9decca0
	float STATIC_Exp(float A); // Function Engine.KismetMathLibrary.Exp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9decb60
	bool STATIC_EqualExactly_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.EqualExactly_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9deca80
	bool STATIC_EqualExactly_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.EqualExactly_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dec950
	bool STATIC_EqualExactly_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.EqualExactly_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dec880
	bool STATIC_EqualEqual_VectorVector(struct FVector A, struct FVector B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dec740
	bool STATIC_EqualEqual_Vector4Vector4(struct FVector4& A, struct FVector4& B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dec5b0
	bool STATIC_EqualEqual_Vector2DVector2D(struct FVector2D A, struct FVector2D B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dec490
	bool STATIC_EqualEqual_TransformTransform(struct FTransform& A, struct FTransform& B); // Function Engine.KismetMathLibrary.EqualEqual_TransformTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dec310
	bool STATIC_EqualEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.EqualEqual_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9deb650
	bool STATIC_EqualEqual_RotatorRotator(struct FRotator A, struct FRotator B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_RotatorRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dec180
	bool STATIC_EqualEqual_QuatQuat(struct FQuat& A, struct FQuat& B, float Tolerance); // Function Engine.KismetMathLibrary.EqualEqual_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dec020
	bool STATIC_EqualEqual_ObjectObject(struct UObject* A, struct UObject* B); // Function Engine.KismetMathLibrary.EqualEqual_ObjectObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9deb590
	bool STATIC_EqualEqual_NameName(struct FName A, struct FName B); // Function Engine.KismetMathLibrary.EqualEqual_NameName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9debf40
	bool STATIC_EqualEqual_MatrixMatrix(struct FMatrix& A, struct FMatrix& B, float Tolerance); // Function Engine.KismetMathLibrary.EqualEqual_MatrixMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9debdb0
	bool STATIC_EqualEqual_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.EqualEqual_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9debcd0
	bool STATIC_EqualEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.EqualEqual_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9debaa0
	bool STATIC_EqualEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.EqualEqual_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9deb590
	bool STATIC_EqualEqual_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.EqualEqual_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9deb700
	bool STATIC_EqualEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9deb650
	bool STATIC_EqualEqual_ClassClass(struct UClass* A, struct UClass* B); // Function Engine.KismetMathLibrary.EqualEqual_ClassClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9deb590
	bool STATIC_EqualEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.EqualEqual_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9deb4d0
	bool STATIC_EqualEqual_BoolBool(bool A, bool B); // Function Engine.KismetMathLibrary.EqualEqual_BoolBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9deb400
	float STATIC_Ease(float A, float B, float Alpha, enum class EEasingFunc EasingFunc, float BlendExp, int32_t Steps); // Function Engine.KismetMathLibrary.Ease // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9deb240
	struct FVector STATIC_DynamicWeightedMovingAverage_FVector(struct FVector CurrentSample, struct FVector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9deaef0
	struct FRotator STATIC_DynamicWeightedMovingAverage_FRotator(struct FRotator CurrentSample, struct FRotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dead40
	float STATIC_DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9deb0a0
	float STATIC_DotProduct2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.DotProduct2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9deabb0
	float STATIC_Dot_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Dot_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9deac70
	struct FVector STATIC_Divide_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Divide_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9deaaa0
	struct FVector STATIC_Divide_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Divide_VectorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dea990
	struct FVector STATIC_Divide_VectorFloat(struct FVector A, float B); // Function Engine.KismetMathLibrary.Divide_VectorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dea880
	struct FVector4 STATIC_Divide_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Divide_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dea780
	struct FVector2D STATIC_Divide_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Divide_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dea680
	struct FVector2D STATIC_Divide_Vector2DFloat(struct FVector2D A, float B); // Function Engine.KismetMathLibrary.Divide_Vector2DFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dea580
	struct FTimespan STATIC_Divide_TimespanFloat(struct FTimespan A, float Scalar); // Function Engine.KismetMathLibrary.Divide_TimespanFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dea4b0
	struct FLinearColor STATIC_Divide_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Divide_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dea3c0
	int32_t STATIC_Divide_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Divide_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dea2e0
	int64_t STATIC_Divide_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Divide_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dea200
	float STATIC_Divide_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Divide_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dea020
	char STATIC_Divide_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Divide_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de9f50
	float STATIC_DistanceSquared2D(struct FVector2D v1, struct FVector2D v2); // Function Engine.KismetMathLibrary.DistanceSquared2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de9e80
	float STATIC_Distance2D(struct FVector2D v1, struct FVector2D v2); // Function Engine.KismetMathLibrary.Distance2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de9db0
	float STATIC_DegTan(float A); // Function Engine.KismetMathLibrary.DegTan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de9ca0
	float STATIC_DegSin(float A); // Function Engine.KismetMathLibrary.DegSin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de9c10
	float STATIC_DegreesToRadians(float A); // Function Engine.KismetMathLibrary.DegreesToRadians // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de9d30
	float STATIC_DegCos(float A); // Function Engine.KismetMathLibrary.DegCos // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de9b80
	float STATIC_DegAtan2(float Y, float X); // Function Engine.KismetMathLibrary.DegAtan2 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de9a20
	float STATIC_DegAtan(float A); // Function Engine.KismetMathLibrary.DegAtan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de9af0
	float STATIC_DegAsin(float A); // Function Engine.KismetMathLibrary.DegAsin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de9980
	float STATIC_DegAcos(float A); // Function Engine.KismetMathLibrary.DegAcos // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de98e0
	int32_t STATIC_DaysInYear(int32_t Year); // Function Engine.KismetMathLibrary.DaysInYear // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de9860
	int32_t STATIC_DaysInMonth(int32_t Year, int32_t Month); // Function Engine.KismetMathLibrary.DaysInMonth // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de9780
	struct FDateTime STATIC_DateTimeMinValue(); // Function Engine.KismetMathLibrary.DateTimeMinValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x7a6da60
	struct FDateTime STATIC_DateTimeMaxValue(); // Function Engine.KismetMathLibrary.DateTimeMaxValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de9750
	bool STATIC_DateTimeFromString(struct FString DateTimeString, struct FDateTime& Result); // Function Engine.KismetMathLibrary.DateTimeFromString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de95b0
	bool STATIC_DateTimeFromIsoString(struct FString IsoString, struct FDateTime& Result); // Function Engine.KismetMathLibrary.DateTimeFromIsoString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de93f0
	float STATIC_CrossProduct2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.CrossProduct2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de9220
	struct FVector STATIC_Cross_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Cross_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de92e0
	struct FVector STATIC_CreateVectorFromYawPitch(float Yaw, float Pitch, float Length); // Function Engine.KismetMathLibrary.CreateVectorFromYawPitch // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de9100
	float STATIC_Cos(float A); // Function Engine.KismetMathLibrary.Cos // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de8f90
	struct FTransform STATIC_ConvertTransformToRelative(struct FTransform& Transform, struct FTransform& ParentTransform); // Function Engine.KismetMathLibrary.ConvertTransformToRelative // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de8e00
	struct FVector2D STATIC_Conv_VectorToVector2D(struct FVector InVector); // Function Engine.KismetMathLibrary.Conv_VectorToVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de8d80
	struct FTransform STATIC_Conv_VectorToTransform(struct FVector InLocation); // Function Engine.KismetMathLibrary.Conv_VectorToTransform // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de8ce0
	struct FRotator STATIC_Conv_VectorToRotator(struct FVector InVec); // Function Engine.KismetMathLibrary.Conv_VectorToRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de8c40
	struct FQuat STATIC_Conv_VectorToQuaterion(struct FVector InVec); // Function Engine.KismetMathLibrary.Conv_VectorToQuaterion // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de8bb0
	struct FLinearColor STATIC_Conv_VectorToLinearColor(struct FVector InVec); // Function Engine.KismetMathLibrary.Conv_VectorToLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de8b20
	struct FVector STATIC_Conv_Vector4ToVector(struct FVector4& InVector4); // Function Engine.KismetMathLibrary.Conv_Vector4ToVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de8a70
	struct FRotator STATIC_Conv_Vector4ToRotator(struct FVector4& InVec); // Function Engine.KismetMathLibrary.Conv_Vector4ToRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de89c0
	struct FQuat STATIC_Conv_Vector4ToQuaterion(struct FVector4& InVec); // Function Engine.KismetMathLibrary.Conv_Vector4ToQuaterion // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de8910
	struct FVector STATIC_Conv_Vector2DToVector(struct FVector2D InVector2D, float Z); // Function Engine.KismetMathLibrary.Conv_Vector2DToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de8850
	struct FIntPoint STATIC_Conv_Vector2DToIntPoint(struct FVector2D InVector2D); // Function Engine.KismetMathLibrary.Conv_Vector2DToIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de87a0
	struct FMatrix STATIC_Conv_TransformToMatrix(struct FTransform& Transform); // Function Engine.KismetMathLibrary.Conv_TransformToMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de8690
	struct FVector STATIC_Conv_RotatorToVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.Conv_RotatorToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de85f0
	struct FTransform STATIC_Conv_RotatorToTransform(struct FRotator& inRotator); // Function Engine.KismetMathLibrary.Conv_RotatorToTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de8540
	struct FTransform STATIC_Conv_MatrixToTransform(struct FMatrix& InMatrix); // Function Engine.KismetMathLibrary.Conv_MatrixToTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de8490
	struct FRotator STATIC_Conv_MatrixToRotator(struct FMatrix& InMatrix); // Function Engine.KismetMathLibrary.Conv_MatrixToRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de83f0
	struct FVector STATIC_Conv_LinearColorToVector(struct FLinearColor InLinearColor); // Function Engine.KismetMathLibrary.Conv_LinearColorToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de8360
	struct FColor STATIC_Conv_LinearColorToColor(struct FLinearColor InLinearColor, bool InUseSRGB); // Function Engine.KismetMathLibrary.Conv_LinearColorToColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de8280
	struct FVector STATIC_Conv_IntVectorToVector(struct FIntVector& InIntVector); // Function Engine.KismetMathLibrary.Conv_IntVectorToVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de81c0
	struct FIntVector STATIC_Conv_IntToIntVector(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToIntVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de8140
	int64_t STATIC_Conv_IntToInt64(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de80c0
	float STATIC_Conv_IntToFloat(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de8040
	char STATIC_Conv_IntToByte(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de7fc0
	bool STATIC_Conv_IntToBool(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de7aa0
	struct FVector STATIC_Conv_FloatToVector(float InFloat); // Function Engine.KismetMathLibrary.Conv_FloatToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de7e50
	struct FLinearColor STATIC_Conv_FloatToLinearColor(float InFloat); // Function Engine.KismetMathLibrary.Conv_FloatToLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de7db0
	struct FLinearColor STATIC_Conv_ColorToLinearColor(struct FColor InColor); // Function Engine.KismetMathLibrary.Conv_ColorToLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de7d20
	int32_t STATIC_Conv_ByteToInt(char InByte); // Function Engine.KismetMathLibrary.Conv_ByteToInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de7cb0
	float STATIC_Conv_ByteToFloat(char InByte); // Function Engine.KismetMathLibrary.Conv_ByteToFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de7c30
	int32_t STATIC_Conv_BoolToInt(bool InBool); // Function Engine.KismetMathLibrary.Conv_BoolToInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de7bb0
	float STATIC_Conv_BoolToFloat(bool InBool); // Function Engine.KismetMathLibrary.Conv_BoolToFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de7b20
	char STATIC_Conv_BoolToByte(bool InBool); // Function Engine.KismetMathLibrary.Conv_BoolToByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de7aa0
	struct FTransform STATIC_ComposeTransforms(struct FTransform& A, struct FTransform& B); // Function Engine.KismetMathLibrary.ComposeTransforms // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de7910
	struct FRotator STATIC_ComposeRotators(struct FRotator A, struct FRotator B); // Function Engine.KismetMathLibrary.ComposeRotators // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de7820
	bool STATIC_ClassIsChildOf(struct UClass* TestClass, struct UClass* ParentClass); // Function Engine.KismetMathLibrary.ClassIsChildOf // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de76a0
	struct FVector STATIC_ClampVectorSize(struct FVector A, float Min, float Max); // Function Engine.KismetMathLibrary.ClampVectorSize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de7500
	int64_t STATIC_ClampInt64(int64_t Value, int64_t Min, int64_t Max); // Function Engine.KismetMathLibrary.ClampInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de7400
	float STATIC_ClampAxis(float Angle); // Function Engine.KismetMathLibrary.ClampAxis // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de7380
	struct FVector2D STATIC_ClampAxes2D(struct FVector2D A, float MinAxisVal, float MaxAxisVal); // Function Engine.KismetMathLibrary.ClampAxes2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de7260
	float STATIC_ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees); // Function Engine.KismetMathLibrary.ClampAngle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x7a75e30
	int32_t STATIC_Clamp(int32_t Value, int32_t Min, int32_t Max); // Function Engine.KismetMathLibrary.Clamp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de7170
	struct FLinearColor STATIC_CInterpTo(struct FLinearColor Current, struct FLinearColor Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.CInterpTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de6fd0
	void STATIC_BreakVector4(struct FVector4& InVec, float& X, float& Y, float& Z, float& W); // Function Engine.KismetMathLibrary.BreakVector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de6c70
	void STATIC_BreakVector2D(struct FVector2D InVec, float& X, float& Y); // Function Engine.KismetMathLibrary.BreakVector2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de6b50
	void STATIC_BreakVector(struct FVector InVec, float& X, float& Y, float& Z); // Function Engine.KismetMathLibrary.BreakVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de6e60
	void STATIC_BreakTransform(struct FTransform& InTransform, struct FVector& Location, struct FRotator& Rotation, struct FVector& Scale); // Function Engine.KismetMathLibrary.BreakTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de6920
	void STATIC_BreakTimespan2(struct FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& FractionNano); // Function Engine.KismetMathLibrary.BreakTimespan2 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de64c0
	void STATIC_BreakTimespan(struct FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& Milliseconds); // Function Engine.KismetMathLibrary.BreakTimespan // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de66f0
	void STATIC_BreakRotIntoAxes(struct FRotator& InRot, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.BreakRotIntoAxes // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de61d0
	void STATIC_BreakRotator(struct FRotator InRot, float& Roll, float& Pitch, float& Yaw); // Function Engine.KismetMathLibrary.BreakRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de6350
	void STATIC_BreakRandomStream(struct FRandomStream& InRandomStream, int32_t& InitialSeed); // Function Engine.KismetMathLibrary.BreakRandomStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de60f0
	void STATIC_BreakQualifiedFrameTime(struct FQualifiedFrameTime& InFrameTime, struct FFrameNumber& Frame, struct FFrameRate& FrameRate, float& SubFrame); // Function Engine.KismetMathLibrary.BreakQualifiedFrameTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de5f50
	void STATIC_BreakFrameRate(struct FFrameRate& InFrameRate, int32_t& Numerator, int32_t& Denominator); // Function Engine.KismetMathLibrary.BreakFrameRate // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9de5e20
	void STATIC_BreakDateTime(struct FDateTime InDateTime, int32_t& Year, int32_t& Month, int32_t& Day, int32_t& Hour, int32_t& Minute, int32_t& Second, int32_t& Millisecond); // Function Engine.KismetMathLibrary.BreakDateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de5b70
	void STATIC_BreakColor(struct FLinearColor InColor, float& R, float& G, float& B, float& A); // Function Engine.KismetMathLibrary.BreakColor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de5990
	bool STATIC_BooleanXOR(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanXOR // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de58d0
	bool STATIC_BooleanOR(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanOR // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de5800
	bool STATIC_BooleanNOR(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanNOR // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de5730
	bool STATIC_BooleanNAND(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanNAND // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de5660
	bool STATIC_BooleanAND(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanAND // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de5590
	char STATIC_BMin(char A, char B); // Function Engine.KismetMathLibrary.BMin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de54d0
	char STATIC_BMax(char A, char B); // Function Engine.KismetMathLibrary.BMax // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de5410
	float STATIC_Atan2(float Y, float X); // Function Engine.KismetMathLibrary.Atan2 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de52d0
	float STATIC_Atan(float A); // Function Engine.KismetMathLibrary.Atan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de5390
	float STATIC_Asin(float A); // Function Engine.KismetMathLibrary.Asin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de5230
	int32_t STATIC_And_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.And_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de5170
	int64_t STATIC_And_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.And_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de50b0
	struct FVector STATIC_Add_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Add_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de4fe0
	struct FVector STATIC_Add_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Add_VectorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de4f00
	struct FVector STATIC_Add_VectorFloat(struct FVector A, float B); // Function Engine.KismetMathLibrary.Add_VectorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de4e20
	struct FVector4 STATIC_Add_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Add_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de4d20
	struct FVector2D STATIC_Add_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Add_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de4c60
	struct FVector2D STATIC_Add_Vector2DFloat(struct FVector2D A, float B); // Function Engine.KismetMathLibrary.Add_Vector2DFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de4b90
	struct FTimespan STATIC_Add_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Add_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de45a0
	struct FQuat STATIC_Add_QuatQuat(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Add_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de4aa0
	struct FMatrix STATIC_Add_MatrixMatrix(struct FMatrix& A, struct FMatrix& B); // Function Engine.KismetMathLibrary.Add_MatrixMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de4980
	struct FLinearColor STATIC_Add_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Add_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de4890
	int32_t STATIC_Add_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Add_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de47d0
	int64_t STATIC_Add_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Add_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de4710
	float STATIC_Add_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Add_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de4650
	struct FDateTime STATIC_Add_DateTimeTimespan(struct FDateTime A, struct FTimespan B); // Function Engine.KismetMathLibrary.Add_DateTimeTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de45a0
	struct FDateTime STATIC_Add_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Add_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9de45a0
	char STATIC_Add_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Add_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de44f0
	float STATIC_Acos(float A); // Function Engine.KismetMathLibrary.Acos // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de4450
	int64_t STATIC_Abs_Int64(int64_t A); // Function Engine.KismetMathLibrary.Abs_Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de4340
	int32_t STATIC_Abs_Int(int32_t A); // Function Engine.KismetMathLibrary.Abs_Int // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de43d0
	float STATIC_Abs(float A); // Function Engine.KismetMathLibrary.Abs // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de42c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.KismetNodeHelperLibrary
// Size: 0x30 (Inherited: 0x30)
class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary {
public:


	void STATIC_MarkBit(int32_t& Data, int32_t Index); // Function Engine.KismetNodeHelperLibrary.MarkBit // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e145c0
	bool STATIC_HasUnmarkedBit(int32_t Data, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.HasUnmarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e13940
	bool STATIC_HasMarkedBit(int32_t Data, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.HasMarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e13880
	char STATIC_GetValidValue(struct UEnum* Enum, char EnumeratorValue); // Function Engine.KismetNodeHelperLibrary.GetValidValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e137c0
	int32_t STATIC_GetUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits, bool bRandom); // Function Engine.KismetNodeHelperLibrary.GetUnmarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e13690
	int32_t STATIC_GetRandomUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e13410
	int32_t STATIC_GetFirstUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e13320
	char STATIC_GetEnumeratorValueFromIndex(struct UEnum* Enum, char EnumeratorIndex); // Function Engine.KismetNodeHelperLibrary.GetEnumeratorValueFromIndex // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e13260
	struct FString STATIC_GetEnumeratorUserFriendlyName(struct UEnum* Enum, char EnumeratorValue); // Function Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e13150
	struct FName STATIC_GetEnumeratorName(struct UEnum* Enum, char EnumeratorValue); // Function Engine.KismetNodeHelperLibrary.GetEnumeratorName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e13090
	void STATIC_ClearBit(int32_t& Data, int32_t Index); // Function Engine.KismetNodeHelperLibrary.ClearBit // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e10510
	void STATIC_ClearAllBits(int32_t& Data); // Function Engine.KismetNodeHelperLibrary.ClearAllBits // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e10490
	bool STATIC_BitIsMarked(int32_t Data, int32_t Index); // Function Engine.KismetNodeHelperLibrary.BitIsMarked // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e0ea20
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.KismetRenderingLibrary
// Size: 0x30 (Inherited: 0x30)
class UKismetRenderingLibrary : public UBlueprintFunctionLibrary {
public:


	void STATIC_SetCastInsetShadowForAllAttachments(struct UPrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup); // Function Engine.KismetRenderingLibrary.SetCastInsetShadowForAllAttachments // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x9e15ec0
	struct UTextureCube* STATIC_RenderTargetCreateStaticTextureCubeEditorOnly(struct UTextureRenderTargetCube* RenderTarget, struct FString Name, bool bForceOverride, enum class TextureCompressionSettings CompressionSettings, enum class TextureMipGenSettings MipSettings); // Function Engine.KismetRenderingLibrary.RenderTargetCreateStaticTextureCubeEditorOnly // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x9e15380
	struct UTexture2D* STATIC_RenderTargetCreateStaticTexture2DEditorOnly(struct UTextureRenderTarget2D* RenderTarget, struct FString Name, enum class TextureCompressionSettings CompressionSettings, enum class TextureMipGenSettings MipSettings); // Function Engine.KismetRenderingLibrary.RenderTargetCreateStaticTexture2DEditorOnly // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x9e151c0
	void STATIC_ReleaseRenderTarget2D(struct UTextureRenderTarget2D* TextureRenderTarget); // Function Engine.KismetRenderingLibrary.ReleaseRenderTarget2D // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x1c51a90
	struct FColor STATIC_ReadRenderTargetUV(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, float U, float V); // Function Engine.KismetRenderingLibrary.ReadRenderTargetUV // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e15080
	struct FLinearColor STATIC_ReadRenderTargetRawUV(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, float U, float V); // Function Engine.KismetRenderingLibrary.ReadRenderTargetRawUV // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e14f20
	struct FLinearColor STATIC_ReadRenderTargetRawPixel(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y); // Function Engine.KismetRenderingLibrary.ReadRenderTargetRawPixel // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e14dd0
	struct FColor STATIC_ReadRenderTargetPixel(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y); // Function Engine.KismetRenderingLibrary.ReadRenderTargetPixel // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e14c90
	struct FSkelMeshSkinWeightInfo STATIC_MakeSkinWeightInfo(int32_t Bone0, char Weight0, int32_t Bone1, char Weight1, int32_t Bone2, char Weight2, int32_t Bone3, char Weight3); // Function Engine.KismetRenderingLibrary.MakeSkinWeightInfo // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e14370
	struct UTexture2D* STATIC_ImportFileAsTexture2D(struct UObject* WorldContextObject, struct FString Filename); // Function Engine.KismetRenderingLibrary.ImportFileAsTexture2D // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x9e13b10
	struct UTexture2D* STATIC_ImportBufferAsTexture2D(struct UObject* WorldContextObject, struct TArray<char>& Buffer); // Function Engine.KismetRenderingLibrary.ImportBufferAsTexture2D // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e13a00
	void STATIC_ExportTexture2D(struct UObject* WorldContextObject, struct UTexture2D* Texture, struct FString FilePath, struct FString Filename); // Function Engine.KismetRenderingLibrary.ExportTexture2D // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x9e12a90
	void STATIC_ExportRenderTarget(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct FString FilePath, struct FString Filename); // Function Engine.KismetRenderingLibrary.ExportRenderTarget // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x9e128f0
	void STATIC_EndDrawCanvasToRenderTarget(struct UObject* WorldContextObject, struct FDrawToRenderTargetContext& Context); // Function Engine.KismetRenderingLibrary.EndDrawCanvasToRenderTarget // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e12420
	void STATIC_DrawMaterialToRenderTargetWithCoordinate(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct UMaterialInterface* Material, struct FVector2D ScreenPosition, struct FVector2D ScreenSize); // Function Engine.KismetRenderingLibrary.DrawMaterialToRenderTargetWithCoordinate // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e122b0
	void STATIC_DrawMaterialToRenderTarget(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct UMaterialInterface* Material); // Function Engine.KismetRenderingLibrary.DrawMaterialToRenderTarget // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x9e121c0
	struct UTextureRenderTarget2D* STATIC_CreateRenderTarget2D(struct UObject* WorldContextObject, int32_t Width, int32_t Height, enum class ETextureRenderTargetFormat Format, struct FLinearColor ClearColor, bool bAutoGenerateMipMaps, bool bAutoFillMipMaps, bool bClearRenderTargetImmediatly); // Function Engine.KismetRenderingLibrary.CreateRenderTarget2D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e11dd0
	void STATIC_ConvertRenderTargetToTextureCubeEditorOnly(struct UObject* WorldContextObject, struct UTextureRenderTargetCube* RenderTarget, struct UTextureCube* TextureCube); // Function Engine.KismetRenderingLibrary.ConvertRenderTargetToTextureCubeEditorOnly // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x9e11ce0
	void STATIC_ConvertRenderTargetToTexture2DEditorOnly(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* RenderTarget, struct UTexture2D* Texture); // Function Engine.KismetRenderingLibrary.ConvertRenderTargetToTexture2DEditorOnly // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x9e11bf0
	void STATIC_ClearRenderTarget2D(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct FLinearColor ClearColor); // Function Engine.KismetRenderingLibrary.ClearRenderTarget2D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e105e0
	void STATIC_BuildReflectionCaptures(); // Function Engine.KismetRenderingLibrary.BuildReflectionCaptures // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x995e80
	void STATIC_BreakSkinWeightInfo(struct FSkelMeshSkinWeightInfo InWeight, int32_t& Bone0, char& Weight0, int32_t& Bone1, char& Weight1, int32_t& Bone2, char& Weight2, int32_t& Bone3, char& Weight3); // Function Engine.KismetRenderingLibrary.BreakSkinWeightInfo // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e0eae0
	void STATIC_BeginDrawCanvasToRenderTarget(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct UCanvas*& Canvas, struct FVector2D& size, struct FDrawToRenderTargetContext& Context, bool immediateDrawing); // Function Engine.KismetRenderingLibrary.BeginDrawCanvasToRenderTarget // (Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e0e800
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.KismetStringLibrary
// Size: 0x30 (Inherited: 0x30)
class UKismetStringLibrary : public UBlueprintFunctionLibrary {
public:


	struct FString STATIC_TrimTrailing(struct FString SourceString); // Function Engine.KismetStringLibrary.TrimTrailing // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e16810
	struct FString STATIC_Trim(struct FString SourceString); // Function Engine.KismetStringLibrary.Trim // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e16700
	struct FString STATIC_ToUpper(struct FString SourceString); // Function Engine.KismetStringLibrary.ToUpper // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e165f0
	struct FString STATIC_ToLower(struct FString SourceString); // Function Engine.KismetStringLibrary.ToLower // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e164e0
	struct FString STATIC_TimeSecondsToString(float InSeconds); // Function Engine.KismetStringLibrary.TimeSecondsToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e16410
	bool STATIC_StartsWith(struct FString SourceString, struct FString InPrefix, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.StartsWith // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e16290
	bool STATIC_Split(struct FString SourceString, struct FString InStr, struct FString& LeftS, struct FString& RightS, enum class ESearchCase SearchCase, enum class ESearchDir SearchDir); // Function Engine.KismetStringLibrary.Split // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e15fd0
	struct FString STATIC_RightPad(struct FString SourceString, int32_t ChCount); // Function Engine.KismetStringLibrary.RightPad // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e15d70
	struct FString STATIC_RightChop(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.RightChop // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e15c20
	struct FString STATIC_Right(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.Right // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e15ad0
	struct FString STATIC_Reverse(struct FString SourceString); // Function Engine.KismetStringLibrary.Reverse // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e159c0
	int32_t STATIC_ReplaceInline(struct FString& SourceString, struct FString SearchText, struct FString ReplacementText, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.ReplaceInline // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e157c0
	struct FString STATIC_Replace(struct FString SourceString, struct FString From, struct FString To, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.Replace // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e15590
	struct TArray<struct FString> STATIC_ParseIntoArray(struct FString SourceString, struct FString Delimiter, bool CullEmptyStrings); // Function Engine.KismetStringLibrary.ParseIntoArray // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e14a90
	bool STATIC_NotEqual_StrStr(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.NotEqual_StrStr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e14810
	bool STATIC_NotEqual_StriStri(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.NotEqual_StriStri // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e14950
	struct FString STATIC_Mid(struct FString SourceString, int32_t Start, int32_t Count); // Function Engine.KismetStringLibrary.Mid // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e13500
	bool STATIC_MatchesWildcard(struct FString SourceString, struct FString Wildcard, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.MatchesWildcard // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e14690
	int32_t STATIC_Len(struct FString S); // Function Engine.KismetStringLibrary.Len // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e142b0
	struct FString STATIC_LeftPad(struct FString SourceString, int32_t ChCount); // Function Engine.KismetStringLibrary.LeftPad // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e14160
	struct FString STATIC_LeftChop(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.LeftChop // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e14010
	struct FString STATIC_Left(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.Left // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e13ec0
	struct FString STATIC_JoinStringArray(struct TArray<struct FString>& SourceArray, struct FString Separator); // Function Engine.KismetStringLibrary.JoinStringArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e13cd0
	bool STATIC_IsNumeric(struct FString SourceString); // Function Engine.KismetStringLibrary.IsNumeric // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e13c10
	struct FString STATIC_GetSubstring(struct FString SourceString, int32_t StartIndex, int32_t Length); // Function Engine.KismetStringLibrary.GetSubstring // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e13500
	int32_t STATIC_GetCharacterAsNumber(struct FString SourceString, int32_t Index); // Function Engine.KismetStringLibrary.GetCharacterAsNumber // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e12f90
	struct TArray<struct FString> STATIC_GetCharacterArrayFromString(struct FString SourceString); // Function Engine.KismetStringLibrary.GetCharacterArrayFromString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e12e30
	int32_t STATIC_FindSubstring(struct FString SearchIn, struct FString SubString, bool bUseCase, bool bSearchFromEnd, int32_t StartPosition); // Function Engine.KismetStringLibrary.FindSubstring // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e12c30
	bool STATIC_EqualEqual_StrStr(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.EqualEqual_StrStr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e12670
	bool STATIC_EqualEqual_StriStri(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.EqualEqual_StriStri // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e127b0
	bool STATIC_EndsWith(struct FString SourceString, struct FString InSuffix, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.EndsWith // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e124f0
	int32_t STATIC_CullArray(struct FString SourceString, struct TArray<struct FString>& inArray); // Function Engine.KismetStringLibrary.CullArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e12020
	struct FString STATIC_Conv_VectorToString(struct FVector InVec); // Function Engine.KismetStringLibrary.Conv_VectorToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e11b20
	struct FString STATIC_Conv_Vector2dToString(struct FVector2D InVec); // Function Engine.KismetStringLibrary.Conv_Vector2dToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e11a60
	struct FString STATIC_Conv_TransformToString(struct FTransform& InTrans); // Function Engine.KismetStringLibrary.Conv_TransformToString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e11940
	void STATIC_Conv_StringToVector2D(struct FString inString, struct FVector2D& OutConvertedVector2D, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToVector2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e11680
	void STATIC_Conv_StringToVector(struct FString inString, struct FVector& OutConvertedVector, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e117e0
	void STATIC_Conv_StringToRotator(struct FString inString, struct FRotator& OutConvertedRotator, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e11520
	struct FName STATIC_Conv_StringToName(struct FString inString); // Function Engine.KismetStringLibrary.Conv_StringToName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e11450
	int32_t STATIC_Conv_StringToInt(struct FString inString); // Function Engine.KismetStringLibrary.Conv_StringToInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e11390
	float STATIC_Conv_StringToFloat(struct FString inString); // Function Engine.KismetStringLibrary.Conv_StringToFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e112d0
	void STATIC_Conv_StringToColor(struct FString inString, struct FLinearColor& OutConvertedColor, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToColor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e11170
	struct FString STATIC_Conv_RotatorToString(struct FRotator InRot); // Function Engine.KismetStringLibrary.Conv_RotatorToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e110a0
	struct FString STATIC_Conv_ObjectToString(struct UObject* InObj); // Function Engine.KismetStringLibrary.Conv_ObjectToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e10fd0
	struct FString STATIC_Conv_NameToString(struct FName InName); // Function Engine.KismetStringLibrary.Conv_NameToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x90e30f0
	struct FString STATIC_Conv_MatrixToString(struct FMatrix& InMatrix); // Function Engine.KismetStringLibrary.Conv_MatrixToString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e10ef0
	struct FString STATIC_Conv_IntVectorToString(struct FIntVector InIntVec); // Function Engine.KismetStringLibrary.Conv_IntVectorToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e10e20
	struct FString STATIC_Conv_IntToString(int32_t inInt); // Function Engine.KismetStringLibrary.Conv_IntToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e10d50
	struct FString STATIC_Conv_FloatToString(float InFloat); // Function Engine.KismetStringLibrary.Conv_FloatToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e10c80
	struct FString STATIC_Conv_ColorToString(struct FLinearColor InColor); // Function Engine.KismetStringLibrary.Conv_ColorToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e10bb0
	struct FString STATIC_Conv_ByteToString(char InByte); // Function Engine.KismetStringLibrary.Conv_ByteToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e10af0
	struct FString STATIC_Conv_BoolToString(bool InBool); // Function Engine.KismetStringLibrary.Conv_BoolToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e10a20
	bool STATIC_Contains(struct FString SearchIn, struct FString SubString, bool bUseCase, bool bSearchFromEnd); // Function Engine.KismetStringLibrary.Contains // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e10860
	struct FString STATIC_Concat_StrStr(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.Concat_StrStr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e106e0
	struct FString STATIC_BuildString_Vector2d(struct FString AppendTo, struct FString Prefix, struct FVector2D InVector2D, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Vector2d // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e10010
	struct FString STATIC_BuildString_Vector(struct FString AppendTo, struct FString Prefix, struct FVector InVector, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Vector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e10240
	struct FString STATIC_BuildString_Rotator(struct FString AppendTo, struct FString Prefix, struct FRotator InRot, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Rotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0fdc0
	struct FString STATIC_BuildString_Object(struct FString AppendTo, struct FString Prefix, struct UObject* InObj, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Object // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e0fb90
	struct FString STATIC_BuildString_Name(struct FString AppendTo, struct FString Prefix, struct FName InName, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Name // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e0f960
	struct FString STATIC_BuildString_IntVector(struct FString AppendTo, struct FString Prefix, struct FIntVector InIntVector, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_IntVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0f710
	struct FString STATIC_BuildString_Int(struct FString AppendTo, struct FString Prefix, int32_t inInt, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Int // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e0f4e0
	struct FString STATIC_BuildString_Float(struct FString AppendTo, struct FString Prefix, float InFloat, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e0f2b0
	struct FString STATIC_BuildString_Color(struct FString AppendTo, struct FString Prefix, struct FLinearColor InColor, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Color // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e0f070
	struct FString STATIC_BuildString_Bool(struct FString AppendTo, struct FString Prefix, bool InBool, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Bool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e0ee30
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.KismetStringTableLibrary
// Size: 0x30 (Inherited: 0x30)
class UKismetStringTableLibrary : public UBlueprintFunctionLibrary {
public:


	bool STATIC_IsRegisteredTableId(struct FName TableId); // Function Engine.KismetStringTableLibrary.IsRegisteredTableId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e24820
	bool STATIC_IsRegisteredTableEntry(struct FName TableId, struct FString Key); // Function Engine.KismetStringTableLibrary.IsRegisteredTableEntry // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e24720
	struct FString STATIC_GetTableNamespace(struct FName TableId); // Function Engine.KismetStringTableLibrary.GetTableNamespace // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e24450
	struct FString STATIC_GetTableEntrySourceString(struct FName TableId, struct FString Key); // Function Engine.KismetStringTableLibrary.GetTableEntrySourceString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e24300
	struct FString STATIC_GetTableEntryMetaData(struct FName TableId, struct FString Key, struct FName MetaDataId); // Function Engine.KismetStringTableLibrary.GetTableEntryMetaData // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e24190
	struct TArray<struct FName> STATIC_GetRegisteredStringTables(); // Function Engine.KismetStringTableLibrary.GetRegisteredStringTables // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e23dc0
	struct TArray<struct FName> STATIC_GetMetaDataIdsFromStringTableEntry(struct FName TableId, struct FString Key); // Function Engine.KismetStringTableLibrary.GetMetaDataIdsFromStringTableEntry // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e23020
	struct TArray<struct FString> STATIC_GetKeysFromStringTable(struct FName TableId); // Function Engine.KismetStringTableLibrary.GetKeysFromStringTable // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e22e90
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.KismetSystemLibrary
// Size: 0x30 (Inherited: 0x30)
class UKismetSystemLibrary : public UBlueprintFunctionLibrary {
public:


	void STATIC_UnregisterForRemoteNotifications(); // Function Engine.KismetSystemLibrary.UnregisterForRemoteNotifications // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e29b90
	void STATIC_UnloadPrimaryAssetList(struct TArray<struct FPrimaryAssetId>& PrimaryAssetIdList); // Function Engine.KismetSystemLibrary.UnloadPrimaryAssetList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e2d740
	void STATIC_UnloadPrimaryAsset(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.UnloadPrimaryAsset // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e2d6c0
	void STATIC_TransactObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.TransactObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x922270
	void STATIC_StackTrace(); // Function Engine.KismetSystemLibrary.StackTrace // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e2d6a0
	bool STATIC_SphereTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float radius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceSingleForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e2d1e0
	bool STATIC_SphereTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float radius, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceSingleByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e2cd70
	bool STATIC_SphereTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float radius, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceSingle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e2c900
	bool STATIC_SphereTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float radius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceMultiForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e2c440
	bool STATIC_SphereTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float radius, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceMultiByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e2bfd0
	bool STATIC_SphereTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float radius, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceMulti // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e2bb60
	bool STATIC_SphereOverlapComponents(struct UObject* WorldContextObject, struct FVector SpherePos, float SphereRadius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UClass* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.SphereOverlapComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e2b870
	bool STATIC_SphereOverlapActors(struct UObject* WorldContextObject, struct FVector SpherePos, float SphereRadius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UClass* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.SphereOverlapActors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e2b580
	void STATIC_SnapshotObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.SnapshotObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x922270
	void STATIC_ShowPlatformSpecificLeaderboardScreen(struct FString CategoryName); // Function Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e2b4d0
	void STATIC_ShowPlatformSpecificAchievementsScreen(struct APlayerController* SpecificPlayer); // Function Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e2b460
	void STATIC_ShowInterstitialAd(); // Function Engine.KismetSystemLibrary.ShowInterstitialAd // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e2b440
	void STATIC_ShowAdBanner(int32_t AdIdIndex, bool bShowOnBottomOfScreen); // Function Engine.KismetSystemLibrary.ShowAdBanner // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e2b390
	void STATIC_SetWindowTitle(struct FText& Title); // Function Engine.KismetSystemLibrary.SetWindowTitle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e2b2d0
	void STATIC_SetVolumeButtonsHandledBySystem(bool bEnabled); // Function Engine.KismetSystemLibrary.SetVolumeButtonsHandledBySystem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e1eed0
	void STATIC_SetVectorPropertyByName(struct UObject* Object, struct FName PropertyName, struct FVector& Value); // Function Engine.KismetSystemLibrary.SetVectorPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e2b1d0
	void STATIC_SetUserActivity(struct FUserActivity& UserActivity); // Function Engine.KismetSystemLibrary.SetUserActivity // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e2b100
	void STATIC_SetTransformPropertyByName(struct UObject* Object, struct FName PropertyName, struct FTransform& Value); // Function Engine.KismetSystemLibrary.SetTransformPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e2afb0
	void STATIC_SetTextPropertyByName(struct UObject* Object, struct FName PropertyName, struct FText& Value); // Function Engine.KismetSystemLibrary.SetTextPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e2ae70
	void STATIC_SetSuppressViewportTransitionMessage(struct UObject* WorldContextObject, bool bState); // Function Engine.KismetSystemLibrary.SetSuppressViewportTransitionMessage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e2adb0
	void STATIC_SetStructurePropertyByName(struct UObject* Object, struct FName PropertyName, struct FGenericStruct& Value); // Function Engine.KismetSystemLibrary.SetStructurePropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e29fb0
	void STATIC_SetStringPropertyByName(struct UObject* Object, struct FName PropertyName, struct FString Value); // Function Engine.KismetSystemLibrary.SetStringPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e2ac80
	void STATIC_SetSoftObjectPropertyByName(/*struct UObject* Object, struct FName PropertyName, struct TSoftObjectPtr<UObject>& Value*/); // Function Engine.KismetSystemLibrary.SetSoftObjectPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e2ab20
	void STATIC_SetSoftClassPropertyByName(/*struct UObject* Object, struct FName PropertyName, struct TSoftClassPtr<UObject>& Value*/); // Function Engine.KismetSystemLibrary.SetSoftClassPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e2a9c0
	void STATIC_SetRotatorPropertyByName(struct UObject* Object, struct FName PropertyName, struct FRotator& Value); // Function Engine.KismetSystemLibrary.SetRotatorPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e2a8c0
	void STATIC_SetObjectPropertyByName(struct UObject* Object, struct FName PropertyName, struct UObject* Value); // Function Engine.KismetSystemLibrary.SetObjectPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e2a7d0
	void STATIC_SetNamePropertyByName(struct UObject* Object, struct FName PropertyName, struct FName& Value); // Function Engine.KismetSystemLibrary.SetNamePropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e2a6d0
	void STATIC_SetLinearColorPropertyByName(struct UObject* Object, struct FName PropertyName, struct FLinearColor& Value); // Function Engine.KismetSystemLibrary.SetLinearColorPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e2a5d0
	void STATIC_SetIntPropertyByName(struct UObject* Object, struct FName PropertyName, int32_t Value); // Function Engine.KismetSystemLibrary.SetIntPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e2a3d0
	void STATIC_SetInterfacePropertyByName(/*struct UObject* Object, struct FName PropertyName, struct TScriptInterface<IInterface>& Value*/); // Function Engine.KismetSystemLibrary.SetInterfacePropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e2a4c0
	void STATIC_SetInt64PropertyByName(struct UObject* Object, struct FName PropertyName, int64_t Value); // Function Engine.KismetSystemLibrary.SetInt64PropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e2a2e0
	void STATIC_SetFloatPropertyByName(struct UObject* Object, struct FName PropertyName, float Value); // Function Engine.KismetSystemLibrary.SetFloatPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e2a1f0
	void STATIC_SetFieldPathPropertyByName(/*struct UObject* Object, struct FName PropertyName, struct TFieldPath<FNone>& Value*/); // Function Engine.KismetSystemLibrary.SetFieldPathPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e2a0a0
	void STATIC_SetCollisionProfileNameProperty(struct UObject* Object, struct FName PropertyName, struct FCollisionProfileName& Value); // Function Engine.KismetSystemLibrary.SetCollisionProfileNameProperty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e29fb0
	void STATIC_SetClassPropertyByName(struct UObject* Object, struct FName PropertyName, struct UClass* Value); // Function Engine.KismetSystemLibrary.SetClassPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e29ec0
	void STATIC_SetBytePropertyByName(struct UObject* Object, struct FName PropertyName, char Value); // Function Engine.KismetSystemLibrary.SetBytePropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e29dd0
	void STATIC_SetBoolPropertyByName(struct UObject* Object, struct FName PropertyName, bool Value); // Function Engine.KismetSystemLibrary.SetBoolPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e29cd0
	void STATIC_RetriggerableDelay(struct UObject* WorldContextObject, float Duration, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.RetriggerableDelay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e29bb0
	void STATIC_ResetGamepadAssignmentToController(int32_t ControllerId); // Function Engine.KismetSystemLibrary.ResetGamepadAssignmentToController // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x995f80
	void STATIC_ResetGamepadAssignments(); // Function Engine.KismetSystemLibrary.ResetGamepadAssignments // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x995e80
	void STATIC_RegisterForRemoteNotifications(); // Function Engine.KismetSystemLibrary.RegisterForRemoteNotifications // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e29b90
	void STATIC_QuitGame(struct UObject* WorldContextObject, struct APlayerController* SpecificPlayer, enum class EQuitPreference QuitPreference, bool bIgnorePlatformRestrictions); // Function Engine.KismetSystemLibrary.QuitGame // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e29a50
	void STATIC_PrintWarning(struct FString inString); // Function Engine.KismetSystemLibrary.PrintWarning // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e299a0
	void STATIC_PrintText(struct UObject* WorldContextObject, struct FText InText, bool bPrintToScreen, bool bPrintToLog, struct FLinearColor TextColor, float Duration); // Function Engine.KismetSystemLibrary.PrintText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e29770
	void STATIC_PrintString(struct UObject* WorldContextObject, struct FString inString, bool bPrintToScreen, bool bPrintToLog, struct FLinearColor TextColor, float Duration); // Function Engine.KismetSystemLibrary.PrintString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e29570
	void OnAssetLoaded__DelegateSignature(struct UObject* Loaded); // DelegateFunction Engine.KismetSystemLibrary.OnAssetLoaded__DelegateSignature // (Public|Delegate) // @ game+0x7ed88c0
	void OnAssetClassLoaded__DelegateSignature(struct UClass* Loaded); // DelegateFunction Engine.KismetSystemLibrary.OnAssetClassLoaded__DelegateSignature // (Public|Delegate) // @ game+0x7ed88c0
	bool STATIC_NotEqual_SoftObjectReference(/*struct TSoftObjectPtr<UObject>& A, struct TSoftObjectPtr<UObject>& B*/); // Function Engine.KismetSystemLibrary.NotEqual_SoftObjectReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e293d0
	bool STATIC_NotEqual_SoftClassReference(/*struct TSoftClassPtr<UObject>& A, struct TSoftClassPtr<UObject>& B*/); // Function Engine.KismetSystemLibrary.NotEqual_SoftClassReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e293d0
	bool STATIC_NotEqual_PrimaryAssetType(struct FPrimaryAssetType A, struct FPrimaryAssetType B); // Function Engine.KismetSystemLibrary.NotEqual_PrimaryAssetType // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x90e4500
	bool STATIC_NotEqual_PrimaryAssetId(struct FPrimaryAssetId A, struct FPrimaryAssetId B); // Function Engine.KismetSystemLibrary.NotEqual_PrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e292f0
	struct FString STATIC_NormalizeFilename(struct FString InFilename); // Function Engine.KismetSystemLibrary.NormalizeFilename // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e291e0
	void STATIC_MoveComponentTo(struct USceneComponent* Component, struct FVector TargetRelativeLocation, struct FRotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, enum class EMoveComponentAction MoveAction, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.MoveComponentTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e28f20
	struct FSoftObjectPath STATIC_MakeSoftObjectPath(struct FString PathString); // Function Engine.KismetSystemLibrary.MakeSoftObjectPath // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e28e50
	struct FSoftClassPath STATIC_MakeSoftClassPath(struct FString PathString); // Function Engine.KismetSystemLibrary.MakeSoftClassPath // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e28d30
	struct FText STATIC_MakeLiteralText(struct FText Value); // Function Engine.KismetSystemLibrary.MakeLiteralText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e28be0
	struct FString STATIC_MakeLiteralString(struct FString Value); // Function Engine.KismetSystemLibrary.MakeLiteralString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e28a00
	struct FName STATIC_MakeLiteralName(struct FName Value); // Function Engine.KismetSystemLibrary.MakeLiteralName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e28980
	int32_t STATIC_MakeLiteralInt(int32_t Value); // Function Engine.KismetSystemLibrary.MakeLiteralInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x210f490
	float STATIC_MakeLiteralFloat(float Value); // Function Engine.KismetSystemLibrary.MakeLiteralFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x7a6f300
	char STATIC_MakeLiteralByte(char Value); // Function Engine.KismetSystemLibrary.MakeLiteralByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e28910
	bool STATIC_MakeLiteralBool(bool Value); // Function Engine.KismetSystemLibrary.MakeLiteralBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9de7aa0
	void STATIC_LoadInterstitialAd(int32_t AdIdIndex); // Function Engine.KismetSystemLibrary.LoadInterstitialAd // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e288a0
	struct UClass* STATIC_LoadClassAsset_Blocking(/*struct TSoftClassPtr<UObject> AssetClass*/); // Function Engine.KismetSystemLibrary.LoadClassAsset_Blocking // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e28710
	void STATIC_LoadAssetClass(/*struct UObject* WorldContextObject, struct TSoftClassPtr<UObject> AssetClass, struct FDelegate OnLoaded, struct FLatentActionInfo LatentInfo*/); // Function Engine.KismetSystemLibrary.LoadAssetClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e28320
	struct UObject* STATIC_LoadAsset_Blocking(/*struct TSoftObjectPtr<UObject> Asset*/); // Function Engine.KismetSystemLibrary.LoadAsset_Blocking // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e28580
	void STATIC_LoadAsset(/*struct UObject* WorldContextObject, struct TSoftObjectPtr<UObject> Asset, struct FDelegate OnLoaded, struct FLatentActionInfo LatentInfo*/); // Function Engine.KismetSystemLibrary.LoadAsset // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e280c0
	bool STATIC_LineTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceSingleForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e27c40
	bool STATIC_LineTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceSingleByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e27810
	bool STATIC_LineTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceSingle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e273e0
	bool STATIC_LineTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceMultiForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e26f70
	bool STATIC_LineTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceMultiByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e26b60
	bool STATIC_LineTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceMulti // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e26740
	void STATIC_LaunchURL(struct FString URL); // Function Engine.KismetSystemLibrary.LaunchURL // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e26690
	void STATIC_K2_UnPauseTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_UnPauseTimerHandle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e265e0
	void STATIC_K2_UnPauseTimerDelegate(/*struct FDelegate Delegate*/); // Function Engine.KismetSystemLibrary.K2_UnPauseTimerDelegate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e26550
	void STATIC_K2_UnPauseTimer(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_UnPauseTimer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e26400
	bool STATIC_K2_TimerExistsHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_TimerExistsHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e26340
	bool STATIC_K2_TimerExistsDelegate(/*struct FDelegate Delegate*/); // Function Engine.KismetSystemLibrary.K2_TimerExistsDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e262a0
	bool STATIC_K2_TimerExists(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_TimerExists // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e26140
	struct FTimerHandle STATIC_K2_SetTimerDelegate(/*struct FDelegate Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance*/); // Function Engine.KismetSystemLibrary.K2_SetTimerDelegate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e25fb0
	struct FTimerHandle STATIC_K2_SetTimer(struct UObject* Object, struct FString FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance); // Function Engine.KismetSystemLibrary.K2_SetTimer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e25d50
	void STATIC_K2_PauseTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_PauseTimerHandle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e25ca0
	void STATIC_K2_PauseTimerDelegate(/*struct FDelegate Delegate*/); // Function Engine.KismetSystemLibrary.K2_PauseTimerDelegate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e25c10
	void STATIC_K2_PauseTimer(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_PauseTimer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e25ac0
	bool STATIC_K2_IsValidTimerHandle(struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_IsValidTimerHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e25a40
	bool STATIC_K2_IsTimerPausedHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_IsTimerPausedHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e25980
	bool STATIC_K2_IsTimerPausedDelegate(/*struct FDelegate Delegate*/); // Function Engine.KismetSystemLibrary.K2_IsTimerPausedDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e258e0
	bool STATIC_K2_IsTimerPaused(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_IsTimerPaused // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e25780
	bool STATIC_K2_IsTimerActiveHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_IsTimerActiveHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e256c0
	bool STATIC_K2_IsTimerActiveDelegate(/*struct FDelegate Delegate*/); // Function Engine.KismetSystemLibrary.K2_IsTimerActiveDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e25620
	bool STATIC_K2_IsTimerActive(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_IsTimerActive // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e254c0
	struct FTimerHandle STATIC_K2_InvalidateTimerHandle(struct FTimerHandle& Handle); // Function Engine.KismetSystemLibrary.K2_InvalidateTimerHandle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e25420
	float STATIC_K2_GetTimerRemainingTimeHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e25360
	float STATIC_K2_GetTimerRemainingTimeDelegate(/*struct FDelegate Delegate*/); // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e252c0
	float STATIC_K2_GetTimerRemainingTime(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e25160
	float STATIC_K2_GetTimerElapsedTimeHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e250a0
	float STATIC_K2_GetTimerElapsedTimeDelegate(/*struct FDelegate Delegate*/); // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e25000
	float STATIC_K2_GetTimerElapsedTime(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e24ea0
	void STATIC_K2_ClearTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_ClearTimerHandle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e24df0
	void STATIC_K2_ClearTimerDelegate(/*struct FDelegate Delegate*/); // Function Engine.KismetSystemLibrary.K2_ClearTimerDelegate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e24d60
	void STATIC_K2_ClearTimer(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_ClearTimer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e24c10
	void STATIC_K2_ClearAndInvalidateTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle& Handle); // Function Engine.KismetSystemLibrary.K2_ClearAndInvalidateTimerHandle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e24b50
	bool STATIC_IsValidSoftObjectReference(/*struct TSoftObjectPtr<UObject>& SoftObjectReference*/); // Function Engine.KismetSystemLibrary.IsValidSoftObjectReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e24a60
	bool STATIC_IsValidSoftClassReference(/*struct TSoftClassPtr<UObject>& SoftClassReference*/); // Function Engine.KismetSystemLibrary.IsValidSoftClassReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e24a60
	bool STATIC_IsValidPrimaryAssetType(struct FPrimaryAssetType PrimaryAssetType); // Function Engine.KismetSystemLibrary.IsValidPrimaryAssetType // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x90e3c10
	bool STATIC_IsValidPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.IsValidPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e249d0
	bool STATIC_IsValidClass(struct UClass* Class); // Function Engine.KismetSystemLibrary.IsValidClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x7a71690
	bool STATIC_IsValid(struct UObject* Object); // Function Engine.KismetSystemLibrary.IsValid // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x7a71690
	bool STATIC_IsUnattended(); // Function Engine.KismetSystemLibrary.IsUnattended // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e249a0
	bool STATIC_IsStandalone(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.IsStandalone // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e24920
	bool STATIC_IsServer(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.IsServer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e248a0
	bool STATIC_IsScreensaverEnabled(); // Function Engine.KismetSystemLibrary.IsScreensaverEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1bb5f80
	bool STATIC_IsPackagedForDistribution(); // Function Engine.KismetSystemLibrary.IsPackagedForDistribution // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xd777a0
	bool STATIC_IsLoggedIn(struct APlayerController* SpecificPlayer); // Function Engine.KismetSystemLibrary.IsLoggedIn // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e246a0
	bool STATIC_IsInterstitialAdRequested(); // Function Engine.KismetSystemLibrary.IsInterstitialAdRequested // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e24670
	bool STATIC_IsInterstitialAdAvailable(); // Function Engine.KismetSystemLibrary.IsInterstitialAdAvailable // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e24640
	bool STATIC_IsDedicatedServer(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.IsDedicatedServer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e245c0
	bool STATIC_IsControllerAssignedToGamepad(int32_t ControllerId); // Function Engine.KismetSystemLibrary.IsControllerAssignedToGamepad // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e24540
	void STATIC_HideAdBanner(); // Function Engine.KismetSystemLibrary.HideAdBanner // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e24520
	bool STATIC_GetVolumeButtonsHandledBySystem(); // Function Engine.KismetSystemLibrary.GetVolumeButtonsHandledBySystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xd777a0
	struct FString STATIC_GetUniqueDeviceId(); // Function Engine.KismetSystemLibrary.GetUniqueDeviceId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e22b40
	bool STATIC_GetSupportedFullscreenResolutions(struct TArray<struct FIntPoint>& Resolutions); // Function Engine.KismetSystemLibrary.GetSupportedFullscreenResolutions // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e240c0
	void STATIC_GetSoftObjectReferenceFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetSoftObjectReferenceFromPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e23fb0
	void STATIC_GetSoftClassReferenceFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetSoftClassReferenceFromPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e23ea0
	int32_t STATIC_GetRenderingMaterialQualityLevel(); // Function Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e23e70
	int32_t STATIC_GetRenderingDetailMode(); // Function Engine.KismetSystemLibrary.GetRenderingDetailMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e23e40
	struct FString STATIC_GetProjectSavedDirectory(); // Function Engine.KismetSystemLibrary.GetProjectSavedDirectory // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e23d40
	struct FString STATIC_GetProjectDirectory(); // Function Engine.KismetSystemLibrary.GetProjectDirectory // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e23cc0
	struct FString STATIC_GetProjectContentDirectory(); // Function Engine.KismetSystemLibrary.GetProjectContentDirectory // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e23c40
	void STATIC_GetPrimaryAssetsWithBundleState(struct TArray<struct FName>& RequiredBundles, struct TArray<struct FName>& ExcludedBundles, struct TArray<struct FPrimaryAssetType>& ValidTypes, bool bForceCurrentState, struct TArray<struct FPrimaryAssetId>& OutPrimaryAssetIdList); // Function Engine.KismetSystemLibrary.GetPrimaryAssetsWithBundleState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e23990
	void STATIC_GetPrimaryAssetIdList(struct FPrimaryAssetType PrimaryAssetType, struct TArray<struct FPrimaryAssetId>& OutPrimaryAssetIdList); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdList // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e23890
	struct FPrimaryAssetId STATIC_GetPrimaryAssetIdFromSoftObjectReference(/*struct TSoftObjectPtr<UObject> SoftObjectReference*/); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftObjectReference // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e236f0
	struct FPrimaryAssetId STATIC_GetPrimaryAssetIdFromSoftClassReference(/*struct TSoftClassPtr<UObject> SoftClassReference*/); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftClassReference // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e236f0
	struct FPrimaryAssetId STATIC_GetPrimaryAssetIdFromObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromObject // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e23660
	struct FPrimaryAssetId STATIC_GetPrimaryAssetIdFromClass(struct UClass* Class); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromClass // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e235d0
	struct TArray<struct FString> STATIC_GetPreferredLanguages(); // Function Engine.KismetSystemLibrary.GetPreferredLanguages // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e23500
	struct FString STATIC_GetPlatformUserName(); // Function Engine.KismetSystemLibrary.GetPlatformUserName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e23480
	struct FString STATIC_GetPathName(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetPathName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e233b0
	struct UObject* STATIC_GetOuterObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetOuterObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e23330
	struct FString STATIC_GetObjectName(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetObjectName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e23260
	struct UObject* STATIC_GetObjectFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetObjectFromPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e231d0
	int32_t STATIC_GetMinYResolutionForUI(); // Function Engine.KismetSystemLibrary.GetMinYResolutionForUI // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e231a0
	int32_t STATIC_GetMinYResolutionFor3DView(); // Function Engine.KismetSystemLibrary.GetMinYResolutionFor3DView // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e23170
	struct FString STATIC_GetLocalCurrencySymbol(); // Function Engine.KismetSystemLibrary.GetLocalCurrencySymbol // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e22fa0
	struct FString STATIC_GetLocalCurrencyCode(); // Function Engine.KismetSystemLibrary.GetLocalCurrencyCode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e22fa0
	float STATIC_GetGameTimeInSeconds(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.GetGameTimeInSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbd6b0
	struct FString STATIC_GetGamepadControllerName(int32_t ControllerId); // Function Engine.KismetSystemLibrary.GetGamepadControllerName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e22dc0
	struct FString STATIC_GetGameName(); // Function Engine.KismetSystemLibrary.GetGameName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1794d60
	struct FString STATIC_GetGameBundleId(); // Function Engine.KismetSystemLibrary.GetGameBundleId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e22d40
	int64_t STATIC_GetFrameCount(); // Function Engine.KismetSystemLibrary.GetFrameCount // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e22d10
	struct FString STATIC_GetEngineVersion(); // Function Engine.KismetSystemLibrary.GetEngineVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e22c90
	struct FString STATIC_GetDisplayName(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetDisplayName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e22bc0
	struct FString STATIC_GetDeviceID(); // Function Engine.KismetSystemLibrary.GetDeviceID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e22b40
	struct FString STATIC_GetDefaultLocale(); // Function Engine.KismetSystemLibrary.GetDefaultLocale // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e22ac0
	struct FString STATIC_GetDefaultLanguage(); // Function Engine.KismetSystemLibrary.GetDefaultLanguage // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e22a40
	bool STATIC_GetCurrentBundleState(struct FPrimaryAssetId PrimaryAssetId, bool bForceCurrentState, struct TArray<struct FName>& OutBundles); // Function Engine.KismetSystemLibrary.GetCurrentBundleState // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e228d0
	bool STATIC_GetConvenientWindowedResolutions(struct TArray<struct FIntPoint>& Resolutions); // Function Engine.KismetSystemLibrary.GetConvenientWindowedResolutions // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e22800
	int32_t STATIC_GetConsoleVariableIntValue(struct FString VariableName); // Function Engine.KismetSystemLibrary.GetConsoleVariableIntValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e22740
	float STATIC_GetConsoleVariableFloatValue(struct FString VariableName); // Function Engine.KismetSystemLibrary.GetConsoleVariableFloatValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e22680
	bool STATIC_GetConsoleVariableBoolValue(struct FString VariableName); // Function Engine.KismetSystemLibrary.GetConsoleVariableBoolValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e225c0
	void STATIC_GetComponentBounds(struct USceneComponent* Component, struct FVector& Origin, struct FVector& BoxExtent, float& SphereRadius); // Function Engine.KismetSystemLibrary.GetComponentBounds // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e22460
	struct FString STATIC_GetCommandLine(); // Function Engine.KismetSystemLibrary.GetCommandLine // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e223e0
	struct UClass* STATIC_GetClassFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetClassFromPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e22340
	struct FString STATIC_GetClassDisplayName(struct UClass* Class); // Function Engine.KismetSystemLibrary.GetClassDisplayName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e22270
	int32_t STATIC_GetAdIDCount(); // Function Engine.KismetSystemLibrary.GetAdIDCount // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e22240
	void STATIC_GetActorListFromComponentList(struct TArray<struct UPrimitiveComponent*>& ComponentList, struct UClass* ActorClassFilter, struct TArray<struct AActor*>& OutActorList); // Function Engine.KismetSystemLibrary.GetActorListFromComponentList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e220b0
	void STATIC_GetActorBounds(struct AActor* Actor, struct FVector& Origin, struct FVector& BoxExtent); // Function Engine.KismetSystemLibrary.GetActorBounds // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e21fa0
	void STATIC_ForceCloseAdBanner(); // Function Engine.KismetSystemLibrary.ForceCloseAdBanner // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e21f80
	void STATIC_FlushPersistentDebugLines(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.FlushPersistentDebugLines // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x922270
	void STATIC_FlushDebugStrings(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.FlushDebugStrings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x922270
	void STATIC_ExecuteConsoleCommand(struct UObject* WorldContextObject, struct FString Command, struct APlayerController* SpecificPlayer); // Function Engine.KismetSystemLibrary.ExecuteConsoleCommand // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e21e50
	bool STATIC_EqualEqual_SoftObjectReference(/*struct TSoftObjectPtr<UObject>& A, struct TSoftObjectPtr<UObject>& B*/); // Function Engine.KismetSystemLibrary.EqualEqual_SoftObjectReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e21cb0
	bool STATIC_EqualEqual_SoftClassReference(/*struct TSoftClassPtr<UObject>& A, struct TSoftClassPtr<UObject>& B*/); // Function Engine.KismetSystemLibrary.EqualEqual_SoftClassReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e21cb0
	bool STATIC_EqualEqual_PrimaryAssetType(struct FPrimaryAssetType A, struct FPrimaryAssetType B); // Function Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetType // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x90e2c90
	bool STATIC_EqualEqual_PrimaryAssetId(struct FPrimaryAssetId A, struct FPrimaryAssetId B); // Function Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e21bd0
	int32_t STATIC_EndTransaction(); // Function Engine.KismetSystemLibrary.EndTransaction // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e21ba0
	void STATIC_DrawDebugString(struct UObject* WorldContextObject, struct FVector TextLocation, struct FString Text, struct AActor* TestBaseActor, struct FLinearColor TextColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e219a0
	void STATIC_DrawDebugSphere(struct UObject* WorldContextObject, struct FVector Center, float radius, int32_t Segments, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugSphere // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e21790
	void STATIC_DrawDebugPoint(struct UObject* WorldContextObject, struct FVector Position, float size, struct FLinearColor PointColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e21600
	void STATIC_DrawDebugPlane(struct UObject* WorldContextObject, struct FPlane& PlaneCoordinates, struct FVector Location, float size, struct FLinearColor PlaneColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e21430
	void STATIC_DrawDebugLine(struct UObject* WorldContextObject, struct FVector LineStart, struct FVector LineEnd, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugLine // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e21250
	void STATIC_DrawDebugFrustum(struct UObject* WorldContextObject, struct FTransform& FrustumTransform, struct FLinearColor FrustumColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugFrustum // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e21060
	void STATIC_DrawDebugFloatHistoryTransform(struct UObject* WorldContextObject, struct FDebugFloatHistory& FloatHistory, struct FTransform& DrawTransform, struct FVector2D DrawSize, struct FLinearColor DrawColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e20df0
	void STATIC_DrawDebugFloatHistoryLocation(struct UObject* WorldContextObject, struct FDebugFloatHistory& FloatHistory, struct FVector DrawLocation, struct FVector2D DrawSize, struct FLinearColor DrawColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e20bd0
	void STATIC_DrawDebugCylinder(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float radius, int32_t Segments, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCylinder // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e20980
	void STATIC_DrawDebugCoordinateSystem(struct UObject* WorldContextObject, struct FVector AxisLoc, struct FRotator AxisRot, float Scale, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCoordinateSystem // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e207b0
	void STATIC_DrawDebugConeInDegrees(struct UObject* WorldContextObject, struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugConeInDegrees // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e204d0
	void STATIC_DrawDebugCone(struct UObject* WorldContextObject, struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCone // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e204d0
	void STATIC_DrawDebugCircle(struct UObject* WorldContextObject, struct FVector Center, float radius, int32_t NumSegments, struct FLinearColor LineColor, float Duration, float Thickness, struct FVector YAxis, struct FVector ZAxis, bool bDrawAxis); // Function Engine.KismetSystemLibrary.DrawDebugCircle // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e201f0
	void STATIC_DrawDebugCapsule(struct UObject* WorldContextObject, struct FVector Center, float HalfHeight, float radius, struct FRotator Rotation, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCapsule // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e1ff90
	void STATIC_DrawDebugCamera(struct ACameraActor* CameraActor, struct FLinearColor CameraColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugCamera // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e1fe90
	void STATIC_DrawDebugBox(struct UObject* WorldContextObject, struct FVector Center, struct FVector Extent, struct FLinearColor LineColor, struct FRotator Rotation, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e1fc70
	void STATIC_DrawDebugArrow(struct UObject* WorldContextObject, struct FVector LineStart, struct FVector LineEnd, float ArrowSize, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugArrow // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9e1fa50
	bool STATIC_DoesImplementInterface(struct UObject* TestObject, struct UClass* Interface); // Function Engine.KismetSystemLibrary.DoesImplementInterface // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e1f990
	void STATIC_Delay(struct UObject* WorldContextObject, float Duration, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.Delay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e1f870
	void STATIC_CreateCopyForUndoBuffer(struct UObject* ObjectToModify); // Function Engine.KismetSystemLibrary.CreateCopyForUndoBuffer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x922270
	struct FString STATIC_ConvertToRelativePath(struct FString Filename); // Function Engine.KismetSystemLibrary.ConvertToRelativePath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x7a83d50
	struct FString STATIC_ConvertToAbsolutePath(struct FString Filename); // Function Engine.KismetSystemLibrary.ConvertToAbsolutePath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x7a83a20
	void STATIC_Conv_SoftObjPathToSoftObjRef(struct FSoftObjectPath& SoftObjectPath); // Function Engine.KismetSystemLibrary.Conv_SoftObjPathToSoftObjRef // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e1f630
	struct FString STATIC_Conv_SoftObjectReferenceToString(/*struct TSoftObjectPtr<UObject>& SoftObjectReference*/); // Function Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e1f500
	struct UObject* STATIC_Conv_SoftObjectReferenceToObject(/*struct TSoftObjectPtr<UObject>& SoftObject*/); // Function Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToObject // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e1f780
	struct FString STATIC_Conv_SoftClassReferenceToString(/*struct TSoftClassPtr<UObject>& SoftClassReference*/); // Function Engine.KismetSystemLibrary.Conv_SoftClassReferenceToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e1f500
	struct UClass* STATIC_Conv_SoftClassReferenceToClass(/*struct TSoftClassPtr<UObject>& SoftClass*/); // Function Engine.KismetSystemLibrary.Conv_SoftClassReferenceToClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e1f410
	void STATIC_Conv_SoftClassPathToSoftClassRef(struct FSoftClassPath& SoftClassPath); // Function Engine.KismetSystemLibrary.Conv_SoftClassPathToSoftClassRef // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e1f2c0
	struct FString STATIC_Conv_PrimaryAssetTypeToString(struct FPrimaryAssetType PrimaryAssetType); // Function Engine.KismetSystemLibrary.Conv_PrimaryAssetTypeToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x90e30f0
	struct FString STATIC_Conv_PrimaryAssetIdToString(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.Conv_PrimaryAssetIdToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e1f1e0
	void STATIC_Conv_ObjectToSoftObjectReference(struct UObject* Object); // Function Engine.KismetSystemLibrary.Conv_ObjectToSoftObjectReference // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e1f0f0
	struct UObject* STATIC_Conv_InterfaceToObject(/*struct TScriptInterface<IInterface>& Interface*/); // Function Engine.KismetSystemLibrary.Conv_InterfaceToObject // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e1f050
	void STATIC_Conv_ClassToSoftClassReference(struct UClass*& Class); // Function Engine.KismetSystemLibrary.Conv_ClassToSoftClassReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e1ef50
	void STATIC_ControlScreensaver(bool bAllowScreenSaver); // Function Engine.KismetSystemLibrary.ControlScreensaver // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e1eed0
	bool STATIC_ComponentOverlapComponents(struct UPrimitiveComponent* Component, struct FTransform& ComponentTransform, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UClass* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.ComponentOverlapComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e1ebd0
	bool STATIC_ComponentOverlapActors(struct UPrimitiveComponent* Component, struct FTransform& ComponentTransform, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UClass* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.ComponentOverlapActors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e1e8d0
	void STATIC_CollectGarbage(); // Function Engine.KismetSystemLibrary.CollectGarbage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e1e8b0
	bool STATIC_CapsuleTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e1e3b0
	bool STATIC_CapsuleTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float radius, float HalfHeight, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceSingleByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e1df00
	bool STATIC_CapsuleTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float radius, float HalfHeight, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceSingle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e1da50
	bool STATIC_CapsuleTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e1d550
	bool STATIC_CapsuleTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float radius, float HalfHeight, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceMultiByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e1d0a0
	bool STATIC_CapsuleTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float radius, float HalfHeight, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceMulti // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e1cbf0
	bool STATIC_CapsuleOverlapComponents(struct UObject* WorldContextObject, struct FVector CapsulePos, float radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UClass* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.CapsuleOverlapComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e1c8c0
	bool STATIC_CapsuleOverlapActors(struct UObject* WorldContextObject, struct FVector CapsulePos, float radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UClass* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.CapsuleOverlapActors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e1c590
	bool STATIC_CanLaunchURL(struct FString URL); // Function Engine.KismetSystemLibrary.CanLaunchURL // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e1c4d0
	void STATIC_CancelTransaction(int32_t Index); // Function Engine.KismetSystemLibrary.CancelTransaction // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x995f80
	void STATIC_BreakSoftObjectPath(struct FSoftObjectPath InSoftObjectPath, struct FString& PathString); // Function Engine.KismetSystemLibrary.BreakSoftObjectPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e1c320
	void STATIC_BreakSoftClassPath(struct FSoftClassPath InSoftClassPath, struct FString& PathString); // Function Engine.KismetSystemLibrary.BreakSoftClassPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e1c320
	bool STATIC_BoxTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceSingleForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e1be00
	bool STATIC_BoxTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceSingleByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e1b930
	bool STATIC_BoxTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceSingle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e1b460
	bool STATIC_BoxTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceMultiForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e1af50
	bool STATIC_BoxTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceMultiByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e1aa80
	bool STATIC_BoxTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceMulti // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e1a5b0
	bool STATIC_BoxOverlapComponents(struct UObject* WorldContextObject, struct FVector BoxPos, struct FVector Extent, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UClass* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.BoxOverlapComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e1a2b0
	bool STATIC_BoxOverlapActors(struct UObject* WorldContextObject, struct FVector BoxPos, struct FVector BoxExtent, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UClass* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.BoxOverlapActors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e19fb0
	int32_t STATIC_BeginTransaction(struct FString Context, struct FText Description, struct UObject* PrimaryObject); // Function Engine.KismetSystemLibrary.BeginTransaction // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e19e20
	struct FDebugFloatHistory STATIC_AddFloatHistorySample(float Value, struct FDebugFloatHistory& FloatHistory); // Function Engine.KismetSystemLibrary.AddFloatHistorySample // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9e19c40
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.KismetTextLibrary
// Size: 0x30 (Inherited: 0x30)
class UKismetTextLibrary : public UBlueprintFunctionLibrary {
public:


	struct FText STATIC_TextTrimTrailing(struct FText& InText); // Function Engine.KismetTextLibrary.TextTrimTrailing // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e33040
	struct FText STATIC_TextTrimPrecedingAndTrailing(struct FText& InText); // Function Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e32f10
	struct FText STATIC_TextTrimPreceding(struct FText& InText); // Function Engine.KismetTextLibrary.TextTrimPreceding // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e32de0
	struct FText STATIC_TextToUpper(struct FText& InText); // Function Engine.KismetTextLibrary.TextToUpper // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e32cb0
	struct FText STATIC_TextToLower(struct FText& InText); // Function Engine.KismetTextLibrary.TextToLower // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e32b80
	bool STATIC_TextIsTransient(struct FText& InText); // Function Engine.KismetTextLibrary.TextIsTransient // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e32ab0
	bool STATIC_TextIsFromStringTable(struct FText& Text); // Function Engine.KismetTextLibrary.TextIsFromStringTable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e329e0
	bool STATIC_TextIsEmpty(struct FText& InText); // Function Engine.KismetTextLibrary.TextIsEmpty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e32910
	bool STATIC_TextIsCultureInvariant(struct FText& InText); // Function Engine.KismetTextLibrary.TextIsCultureInvariant // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e32840
	struct FText STATIC_TextFromStringTable(struct FName TableId, struct FString Key); // Function Engine.KismetTextLibrary.TextFromStringTable // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e326e0
	bool STATIC_StringTableIdAndKeyFromText(struct FText Text, struct FName& OutTableId, struct FString& OutKey); // Function Engine.KismetTextLibrary.StringTableIdAndKeyFromText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e32520
	struct FText STATIC_PolyglotDataToText(struct FPolyglotTextData& PolyglotData); // Function Engine.KismetTextLibrary.PolyglotDataToText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e323b0
	bool STATIC_NotEqual_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.NotEqual_TextText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e32240
	bool STATIC_NotEqual_IgnoreCase_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e320d0
	void STATIC_IsPolyglotDataValid(struct FPolyglotTextData& PolyglotData, bool& IsValid, struct FText& ErrorMessage); // Function Engine.KismetTextLibrary.IsPolyglotDataValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e31ed0
	struct FText STATIC_GetEmptyText(); // Function Engine.KismetTextLibrary.GetEmptyText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e31e40
	struct FText STATIC_Format(struct FText InPattern, struct TArray<struct FFormatArgumentData> InArgs); // Function Engine.KismetTextLibrary.Format // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e31be0
	bool STATIC_FindTextInLocalizationTable(struct FString Namespace, struct FString Key, struct FText& OutText); // Function Engine.KismetTextLibrary.FindTextInLocalizationTable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e31a20
	bool STATIC_EqualEqual_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.EqualEqual_TextText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e318b0
	bool STATIC_EqualEqual_IgnoreCase_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e31740
	struct FText STATIC_Conv_VectorToText(struct FVector InVec); // Function Engine.KismetTextLibrary.Conv_VectorToText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e31650
	struct FText STATIC_Conv_Vector2dToText(struct FVector2D InVec); // Function Engine.KismetTextLibrary.Conv_Vector2dToText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e31580
	struct FText STATIC_Conv_TransformToText(struct FTransform& InTrans); // Function Engine.KismetTextLibrary.Conv_TransformToText // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e31440
	struct FString STATIC_Conv_TextToString(struct FText& InText); // Function Engine.KismetTextLibrary.Conv_TextToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9e312d0
	struct FText STATIC_Conv_StringToText(struct FString inString); // Function Engine.KismetTextLibrary.Conv_StringToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e311b0
	struct FText STATIC_Conv_RotatorToText(struct FRotator InRot); // Function Engine.KismetTextLibrary.Conv_RotatorToText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e310c0
	struct FText STATIC_Conv_ObjectToText(struct UObject* InObj); // Function Engine.KismetTextLibrary.Conv_ObjectToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e30fe0
	struct FText STATIC_Conv_NameToText(struct FName InName); // Function Engine.KismetTextLibrary.Conv_NameToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e30f00
	struct FText STATIC_Conv_IntToText(int32_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // Function Engine.KismetTextLibrary.Conv_IntToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e30cf0
	struct FText STATIC_Conv_Int64ToText(int64_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // Function Engine.KismetTextLibrary.Conv_Int64ToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e30ae0
	struct FText STATIC_Conv_FloatToText(float Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // Function Engine.KismetTextLibrary.Conv_FloatToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e30840
	struct FText STATIC_Conv_ColorToText(struct FLinearColor InColor); // Function Engine.KismetTextLibrary.Conv_ColorToText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e30760
	struct FText STATIC_Conv_ByteToText(char Value); // Function Engine.KismetTextLibrary.Conv_ByteToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e30680
	struct FText STATIC_Conv_BoolToText(bool InBool); // Function Engine.KismetTextLibrary.Conv_BoolToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e305a0
	struct FText STATIC_AsTimeZoneTime_DateTime(struct FDateTime& InDateTime, struct FString InTimeZone); // Function Engine.KismetTextLibrary.AsTimeZoneTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e30250
	struct FText STATIC_AsTimeZoneDateTime_DateTime(struct FDateTime& InDateTime, struct FString InTimeZone); // Function Engine.KismetTextLibrary.AsTimeZoneDateTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e2ff70
	struct FText STATIC_AsTimeZoneDate_DateTime(struct FDateTime& InDateTime, struct FString InTimeZone); // Function Engine.KismetTextLibrary.AsTimeZoneDate_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e300e0
	struct FText STATIC_AsTimespan_Timespan(struct FTimespan& InTimespan); // Function Engine.KismetTextLibrary.AsTimespan_Timespan // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e304b0
	struct FText STATIC_AsTime_DateTime(struct FDateTime& In); // Function Engine.KismetTextLibrary.AsTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e303c0
	struct FText STATIC_AsPercent_Float(float Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // Function Engine.KismetTextLibrary.AsPercent_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e2fcd0
	struct FText STATIC_AsDateTime_DateTime(struct FDateTime& In); // Function Engine.KismetTextLibrary.AsDateTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e2faf0
	struct FText STATIC_AsDate_DateTime(struct FDateTime& InDateTime); // Function Engine.KismetTextLibrary.AsDate_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9e2fbe0
	struct FText STATIC_AsCurrencyBase(int32_t BaseValue, struct FString CurrencyCode); // Function Engine.KismetTextLibrary.AsCurrencyBase // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e2f350
	struct FText STATIC_AsCurrency_Integer(int32_t Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, struct FString CurrencyCode); // Function Engine.KismetTextLibrary.AsCurrency_Integer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e2f7d0
	struct FText STATIC_AsCurrency_Float(float Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, struct FString CurrencyCode); // Function Engine.KismetTextLibrary.AsCurrency_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e2f4b0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MeshVertexPainterKismetLibrary
// Size: 0x30 (Inherited: 0x30)
class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary {
public:


	void STATIC_RemovePaintedVertices(struct UStaticMeshComponent* StaticMeshComponent); // Function Engine.MeshVertexPainterKismetLibrary.RemovePaintedVertices // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e520e0
	void STATIC_PaintVerticesSingleColor(struct UStaticMeshComponent* StaticMeshComponent, struct FLinearColor& FillColor, bool bConvertToSRGB); // Function Engine.MeshVertexPainterKismetLibrary.PaintVerticesSingleColor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e51ec0
	void STATIC_PaintVerticesLerpAlongAxis(struct UStaticMeshComponent* StaticMeshComponent, struct FLinearColor& StartColor, struct FLinearColor& EndColor, enum class EVertexPaintAxis Axis, bool bConvertToSRGB); // Function Engine.MeshVertexPainterKismetLibrary.PaintVerticesLerpAlongAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e51d10
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.StereoLayerFunctionLibrary
// Size: 0x30 (Inherited: 0x30)
class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary {
public:


	void STATIC_ShowSplashScreen(); // Function Engine.StereoLayerFunctionLibrary.ShowSplashScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x8ada920
	void STATIC_SetSplashScreen(struct UTexture* Texture, struct FVector2D Scale, struct FVector offset, bool bShowLoadingMovie, bool bShowOnSet); // Function Engine.StereoLayerFunctionLibrary.SetSplashScreen // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9ebf370
	void STATIC_HideSplashScreen(); // Function Engine.StereoLayerFunctionLibrary.HideSplashScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x8ad9a40
	void STATIC_EnableAutoLoadingSplashScreen(bool InAutoShowEnabled); // Function Engine.StereoLayerFunctionLibrary.EnableAutoLoadingSplashScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9ebea20
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SubsystemBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary {
public:


	struct UWorldSubsystem* STATIC_GetWorldSubsystem(struct UObject* ContextObject, struct UClass* Class); // Function Engine.SubsystemBlueprintLibrary.GetWorldSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9ec2320
	struct ULocalPlayerSubsystem* STATIC_GetLocalPlayerSubSystemFromPlayerController(struct APlayerController* PlayerController, struct UClass* Class); // Function Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubSystemFromPlayerController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9ec2120
	struct ULocalPlayerSubsystem* STATIC_GetLocalPlayerSubsystem(struct UObject* ContextObject, struct UClass* Class); // Function Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9ec21e0
	struct UGameInstanceSubsystem* STATIC_GetGameInstanceSubsystem(struct UObject* ContextObject, struct UClass* Class); // Function Engine.SubsystemBlueprintLibrary.GetGameInstanceSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9ec2060
	struct UEngineSubsystem* STATIC_GetEngineSubsystem(struct UClass* Class); // Function Engine.SubsystemBlueprintLibrary.GetEngineSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9ec1fe0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.VisualLoggerKismetLibrary
// Size: 0x30 (Inherited: 0x30)
class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary {
public:


	void STATIC_RedirectVislog(struct UObject* SourceOwner, struct UObject* DestinationOwner); // Function Engine.VisualLoggerKismetLibrary.RedirectVislog // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xe53f50
	void STATIC_LogText(struct UObject* WorldContextObject, struct FString Text, struct FName LogCategory, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9ece8e0
	void STATIC_LogSegment(struct UObject* WorldContextObject, struct FVector SegmentStart, struct FVector SegmentEnd, struct FString Text, struct FLinearColor ObjectColor, float Thickness, struct FName CategoryName, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogSegment // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9ece5f0
	void STATIC_LogLocation(struct UObject* WorldContextObject, struct FVector Location, struct FString Text, struct FLinearColor ObjectColor, float radius, struct FName LogCategory, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9ece350
	void STATIC_LogBox(struct UObject* WorldContextObject, struct FBox BoxShape, struct FString Text, struct FLinearColor ObjectColor, struct FName LogCategory, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9ece0f0
	void STATIC_EnableRecording(bool bEnabled); // Function Engine.VisualLoggerKismetLibrary.EnableRecording // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9e1eed0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.VOIPStatics
// Size: 0x30 (Inherited: 0x30)
class UVOIPStatics : public UBlueprintFunctionLibrary {
public:


	void STATIC_SetMicThreshold(float InThreshold); // Function Engine.VOIPStatics.SetMicThreshold // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9ecec70
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimNotify_PlayParticleEffect
// Size: 0x90 (Inherited: 0x40)
class UAnimNotify_PlayParticleEffect : public UAnimNotify {
public:

	struct UParticleSystem* PSTemplate; // 0x40(0x08)
	struct FVector LocationOffset; // 0x48(0x0c)
	struct FRotator RotationOffset; // 0x54(0x0c)
	struct FVector Scale; // 0x60(0x0c)
	char pad_6C[0x14]; // 0x6c(0x14)
	char Attached : 1; // 0x80(0x01)
	char pad_80_1 : 7; // 0x80(0x01)
	char pad_81[0x3]; // 0x81(0x03)
	struct FName SocketName; // 0x84(0x08)
	char pad_8C[0x4]; // 0x8c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimNotify_PauseClothingSimulation
// Size: 0x40 (Inherited: 0x40)
class UAnimNotify_PauseClothingSimulation : public UAnimNotify {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimNotify_PlaySound
// Size: 0x60 (Inherited: 0x40)
class UAnimNotify_PlaySound : public UAnimNotify {
public:

	struct USoundBase* Sound; // 0x40(0x08)
	float VolumeMultiplier; // 0x48(0x04)
	float PitchMultiplier; // 0x4c(0x04)
	char bFollow : 1; // 0x50(0x01)
	char pad_50_1 : 7; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	struct FName AttachName; // 0x54(0x08)
	char pad_5C[0x4]; // 0x5c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimNotify_ResetClothingSimulation
// Size: 0x40 (Inherited: 0x40)
class UAnimNotify_ResetClothingSimulation : public UAnimNotify {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimNotify_ResetDynamics
// Size: 0x40 (Inherited: 0x40)
class UAnimNotify_ResetDynamics : public UAnimNotify {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimNotify_ResumeClothingSimulation
// Size: 0x40 (Inherited: 0x40)
class UAnimNotify_ResumeClothingSimulation : public UAnimNotify {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PlatformGameInstance
// Size: 0x278 (Inherited: 0x1a8)
class UPlatformGameInstance : public UGameInstance {
public:

	/*struct FMulticastInlineDelegate*/char ApplicationWillDeactivateDelegate[0x10]; // 0x1a8(0x10)
	/*struct FMulticastInlineDelegate*/char ApplicationHasReactivatedDelegate[0x10]; // 0x1b8(0x10)
	/*struct FMulticastInlineDelegate*/char ApplicationWillEnterBackgroundDelegate[0x10]; // 0x1c8(0x10)
	/*struct FMulticastInlineDelegate*/char ApplicationHasEnteredForegroundDelegate[0x10]; // 0x1d8(0x10)
	/*struct FMulticastInlineDelegate*/char ApplicationWillTerminateDelegate[0x10]; // 0x1e8(0x10)
	/*struct FMulticastInlineDelegate*/char ApplicationShouldUnloadResourcesDelegate[0x10]; // 0x1f8(0x10)
	/*struct FMulticastInlineDelegate*/char ApplicationReceivedStartupArgumentsDelegate[0x10]; // 0x208(0x10)
	/*struct FMulticastInlineDelegate*/char ApplicationRegisteredForRemoteNotificationsDelegate[0x10]; // 0x218(0x10)
	/*struct FMulticastInlineDelegate*/char ApplicationRegisteredForUserNotificationsDelegate[0x10]; // 0x228(0x10)
	/*struct FMulticastInlineDelegate*/char ApplicationFailedToRegisterForRemoteNotificationsDelegate[0x10]; // 0x238(0x10)
	/*struct FMulticastInlineDelegate*/char ApplicationReceivedRemoteNotificationDelegate[0x10]; // 0x248(0x10)
	/*struct FMulticastInlineDelegate*/char ApplicationReceivedLocalNotificationDelegate[0x10]; // 0x258(0x10)
	/*struct FMulticastInlineDelegate*/char ApplicationReceivedScreenOrientationChangedNotificationDelegate[0x10]; // 0x268(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.GameInstanceSubsystem
// Size: 0x38 (Inherited: 0x38)
class UGameInstanceSubsystem : public USubsystem {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DynamicSubsystem
// Size: 0x38 (Inherited: 0x38)
class UDynamicSubsystem : public USubsystem {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.WorldSubsystem
// Size: 0x38 (Inherited: 0x38)
class UWorldSubsystem : public USubsystem {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LocalPlayerSubsystem
// Size: 0x38 (Inherited: 0x38)
class ULocalPlayerSubsystem : public USubsystem {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Info
// Size: 0x378 (Inherited: 0x378)
class AInfo : public AActor {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Brush
// Size: 0x3b0 (Inherited: 0x378)
class ABrush : public AActor {
public:

	enum class EBrushType BrushType; // 0x378(0x01)
	char pad_379[0x3]; // 0x379(0x03)
	struct FColor BrushColor; // 0x37c(0x04)
	int32_t PolyFlags; // 0x380(0x04)
	char bColored : 1; // 0x384(0x01)
	char bSolidWhenSelected : 1; // 0x384(0x01)
	char bPlaceableFromClassBrowser : 1; // 0x384(0x01)
	char bNotForClientOrServer : 1; // 0x384(0x01)
	char pad_384_4 : 4; // 0x384(0x01)
	char pad_385[0x3]; // 0x385(0x03)
	struct UModel* Brush; // 0x388(0x08)
	struct UBrushComponent* BrushComponent; // 0x390(0x08)
	char bInManipulation : 1; // 0x398(0x01)
	char pad_398_1 : 7; // 0x398(0x01)
	char pad_399[0x7]; // 0x399(0x07)
	struct TArray<struct FGeomSelection> SavedSelections; // 0x3a0(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Pawn
// Size: 0x3d8 (Inherited: 0x378)
class APawn : public AActor {
public:

	char pad_378[0x8]; // 0x378(0x08)
	char bUseControllerRotationPitch : 1; // 0x380(0x01)
	char bUseControllerRotationYaw : 1; // 0x380(0x01)
	char bUseControllerRotationRoll : 1; // 0x380(0x01)
	char bCanAffectNavigationGeneration : 1; // 0x380(0x01)
	char pad_380_4 : 4; // 0x380(0x01)
	char pad_381[0x3]; // 0x381(0x03)
	float BaseEyeHeight; // 0x384(0x04)
	enum class EAutoReceiveInput AutoPossessPlayer; // 0x388(0x01)
	enum class EAutoPossessAI AutoPossessAI; // 0x389(0x01)
	char RemoteViewPitch; // 0x38a(0x01)
	char pad_38B[0x5]; // 0x38b(0x05)
	struct UClass* AIControllerClass; // 0x390(0x08)
	struct APlayerState* PlayerState; // 0x398(0x08)
	char pad_3A0[0x8]; // 0x3a0(0x08)
	struct AController* LastHitBy; // 0x3a8(0x08)
	struct AController* Controller; // 0x3b0(0x08)
	char pad_3B8[0x4]; // 0x3b8(0x04)
	struct FVector ControlInputVector; // 0x3bc(0x0c)
	struct FVector LastControlInputVector; // 0x3c8(0x0c)
	char pad_3D4[0x4]; // 0x3d4(0x04)

	void SpawnDefaultController(); // Function Engine.Pawn.SpawnDefaultController // (Native|Public|BlueprintCallable) // @ game+0x364e490
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate); // Function Engine.Pawn.SetCanAffectNavigationGeneration // (Final|Native|Public|BlueprintCallable) // @ game+0x9e6c6f0
	void ReceiveUnpossessed(struct AController* OldController); // Function Engine.Pawn.ReceiveUnpossessed // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void ReceivePossessed(struct AController* NewController); // Function Engine.Pawn.ReceivePossessed // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void PawnMakeNoise(float Loudness, struct FVector NoiseLocation, bool bUseNoiseMakerLocation, struct AActor* NoiseMaker); // Function Engine.Pawn.PawnMakeNoise // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e6c580
	void OnRep_PlayerState(); // Function Engine.Pawn.OnRep_PlayerState // (Native|Public) // @ game+0x12a7870
	void OnRep_Controller(); // Function Engine.Pawn.OnRep_Controller // (Native|Public) // @ game+0x128b750
	void LaunchPawn(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Function Engine.Pawn.LaunchPawn // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e6c350
	struct FVector K2_GetMovementInputVector(); // Function Engine.Pawn.K2_GetMovementInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e6c250
	bool IsPlayerControlled(); // Function Engine.Pawn.IsPlayerControlled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dbdf60
	bool IsPawnControlled(); // Function Engine.Pawn.IsPawnControlled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e6c320
	bool IsMoveInputIgnored(); // Function Engine.Pawn.IsMoveInputIgnored // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x364e460
	bool IsLocallyControlled(); // Function Engine.Pawn.IsLocallyControlled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e6c2c0
	bool IsControlled(); // Function Engine.Pawn.IsControlled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e6c290
	bool IsBotControlled(); // Function Engine.Pawn.IsBotControlled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x405f390
	struct FVector GetPendingMovementInputVector(); // Function Engine.Pawn.GetPendingMovementInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e6c250
	struct FVector GetNavAgentLocation(); // Function Engine.Pawn.GetNavAgentLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e6c190
	struct UPawnMovementComponent* GetMovementComponent(); // Function Engine.Pawn.GetMovementComponent // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x61e6a30
	struct AActor* STATIC_GetMovementBaseActor(struct APawn* Pawn); // Function Engine.Pawn.GetMovementBaseActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e6c110
	struct FVector GetLastMovementInputVector(); // Function Engine.Pawn.GetLastMovementInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e6c0d0
	struct FRotator GetControlRotation(); // Function Engine.Pawn.GetControlRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e6c050
	struct AController* GetController(); // Function Engine.Pawn.GetController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x61d2220
	struct FRotator GetBaseAimRotation(); // Function Engine.Pawn.GetBaseAimRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e6c010
	void DetachFromControllerPendingDestroy(); // Function Engine.Pawn.DetachFromControllerPendingDestroy // (Native|Public|BlueprintCallable) // @ game+0xbcc8c0
	struct FVector ConsumeMovementInputVector(); // Function Engine.Pawn.ConsumeMovementInputVector // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e6bfd0
	void AddMovementInput(struct FVector WorldDirection, float ScaleValue, bool bForce); // Function Engine.Pawn.AddMovementInput // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e6be70
	void AddControllerYawInput(float Val); // Function Engine.Pawn.AddControllerYawInput // (Native|Public|BlueprintCallable) // @ game+0x9e6bd10
	void AddControllerRollInput(float Val); // Function Engine.Pawn.AddControllerRollInput // (Native|Public|BlueprintCallable) // @ game+0x9e6bc90
	void AddControllerPitchInput(float Val); // Function Engine.Pawn.AddControllerPitchInput // (Native|Public|BlueprintCallable) // @ game+0x63e1dc0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Controller
// Size: 0x3f0 (Inherited: 0x378)
class AController : public AActor {
public:

	char pad_378[0x8]; // 0x378(0x08)
	struct APlayerState* PlayerState; // 0x380(0x08)
	char pad_388[0x8]; // 0x388(0x08)
	/*struct FMulticastInlineDelegate*/char OnInstigatedAnyDamage[0x10]; // 0x390(0x10)
	struct FName StateName; // 0x3a0(0x08)
	struct APawn* Pawn; // 0x3a8(0x08)
	char pad_3B0[0x8]; // 0x3b0(0x08)
	struct ACHARACTER* CHARACTER; // 0x3b8(0x08)
	struct USceneComponent* TransformComponent; // 0x3c0(0x08)
	char pad_3C8[0x18]; // 0x3c8(0x18)
	struct FRotator ControlRotation; // 0x3e0(0x0c)
	char bAttachToPawn : 1; // 0x3ec(0x01)
	char pad_3EC_1 : 7; // 0x3ec(0x01)
	char pad_3ED[0x3]; // 0x3ed(0x03)

	void UnPossess(); // Function Engine.Controller.UnPossess // (Final|Native|Public|BlueprintCallable) // @ game+0x9d9cb10
	void StopMovement(); // Function Engine.Controller.StopMovement // (Native|Public|BlueprintCallable) // @ game+0x364e490
	void SetInitialLocationAndRotation(struct FVector& NewLocation, struct FRotator& NewRotation); // Function Engine.Controller.SetInitialLocationAndRotation // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9d9ca20
	void SetIgnoreMoveInput(bool bNewMoveInput); // Function Engine.Controller.SetIgnoreMoveInput // (Native|Public|BlueprintCallable) // @ game+0x9d9c990
	void SetIgnoreLookInput(bool bNewLookInput); // Function Engine.Controller.SetIgnoreLookInput // (Native|Public|BlueprintCallable) // @ game+0x9d9c900
	void SetControlRotation(struct FRotator& NewRotation); // Function Engine.Controller.SetControlRotation // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9d9c870
	void ResetIgnoreMoveInput(); // Function Engine.Controller.ResetIgnoreMoveInput // (Native|Public|BlueprintCallable) // @ game+0x364e770
	void ResetIgnoreLookInput(); // Function Engine.Controller.ResetIgnoreLookInput // (Native|Public|BlueprintCallable) // @ game+0x364e730
	void ResetIgnoreInputFlags(); // Function Engine.Controller.ResetIgnoreInputFlags // (Native|Public|BlueprintCallable) // @ game+0x364e4b0
	void ReceiveUnPossess(struct APawn* UnpossessedPawn); // Function Engine.Controller.ReceiveUnPossess // (Event|Protected|BlueprintEvent) // @ game+0x7ed88c0
	void ReceivePossess(struct APawn* PossessedPawn); // Function Engine.Controller.ReceivePossess // (Event|Protected|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveInstigatedAnyDamage(float Damage, struct UDamageType* DamageType, struct AActor* DamagedActor, struct AActor* DamageCauser); // Function Engine.Controller.ReceiveInstigatedAnyDamage // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // @ game+0x7ed88c0
	void Possess(struct APawn* InPawn); // Function Engine.Controller.Possess // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x9d9c7f0
	void OnRep_PlayerState(); // Function Engine.Controller.OnRep_PlayerState // (Native|Public) // @ game+0x632ccb0
	void OnRep_Pawn(); // Function Engine.Controller.OnRep_Pawn // (Native|Public) // @ game+0x12a7870
	bool LineOfSightTo(struct AActor* Other, struct FVector ViewPoint, bool bAlternateChecks); // Function Engine.Controller.LineOfSightTo // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d9c6d0
	struct APawn* K2_GetPawn(); // Function Engine.Controller.K2_GetPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d9c6a0
	bool IsPlayerController(); // Function Engine.Controller.IsPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d9c670
	bool IsMoveInputIgnored(); // Function Engine.Controller.IsMoveInputIgnored // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d9c640
	bool IsLookInputIgnored(); // Function Engine.Controller.IsLookInputIgnored // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d9c610
	bool IsLocalPlayerController(); // Function Engine.Controller.IsLocalPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d9c5c0
	bool IsLocalController(); // Function Engine.Controller.IsLocalController // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d9c590
	struct AActor* GetViewTarget(); // Function Engine.Controller.GetViewTarget // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d9c560
	struct FRotator GetDesiredRotation(); // Function Engine.Controller.GetDesiredRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d9c2d0
	struct FRotator GetControlRotation(); // Function Engine.Controller.GetControlRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d9c290
	void ClientSetRotation(struct FRotator NewRotation, bool bResetCamera); // Function Engine.Controller.ClientSetRotation // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x9d9c1b0
	void ClientSetLocation(struct FVector NewLocation, struct FRotator NewRotation); // Function Engine.Controller.ClientSetLocation // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x9d9c0d0
	struct APlayerController* CastToPlayerController(); // Function Engine.Controller.CastToPlayerController // (Final|Native|Public|BlueprintCallable) // @ game+0x9d9c0a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.HUD
// Size: 0x468 (Inherited: 0x378)
class AHUD : public AActor {
public:

	struct APlayerController* PlayerOwner; // 0x378(0x08)
	char bLostFocusPaused : 1; // 0x380(0x01)
	char bShowHUD : 1; // 0x380(0x01)
	char bShowDebugInfo : 1; // 0x380(0x01)
	char pad_380_3 : 5; // 0x380(0x01)
	char pad_381[0x3]; // 0x381(0x03)
	int32_t CurrentTargetIndex; // 0x384(0x04)
	char bShowHitBoxDebugInfo : 1; // 0x388(0x01)
	char bShowOverlays : 1; // 0x388(0x01)
	char bEnableDebugTextShadow : 1; // 0x388(0x01)
	char pad_388_3 : 5; // 0x388(0x01)
	char pad_389[0x7]; // 0x389(0x07)
	struct TArray<struct AActor*> PostRenderedActors; // 0x390(0x10)
	char pad_3A0[0x8]; // 0x3a0(0x08)
	struct TArray<struct FName> DebugDisplay; // 0x3a8(0x10)
	struct TArray<struct FName> ToggledDebugCategories; // 0x3b8(0x10)
	struct UCanvas* Canvas; // 0x3c8(0x08)
	struct UCanvas* DebugCanvas; // 0x3d0(0x08)
	struct TArray<struct FDebugTextInfo> DebugTextList; // 0x3d8(0x10)
	struct UClass* ShowDebugTargetDesiredClass; // 0x3e8(0x08)
	struct AActor* ShowDebugTargetActor; // 0x3f0(0x08)
	char pad_3F8[0x70]; // 0x3f8(0x70)

	void ShowHud(); // Function Engine.HUD.ShowHud // (Exec|Native|Public) // @ game+0xbd2900
	void ShowDebugToggleSubCategory(struct FName Category); // Function Engine.HUD.ShowDebugToggleSubCategory // (Final|Exec|Native|Public) // @ game+0x9dccae0
	void ShowDebugForReticleTargetToggle(struct UClass* DesiredClass); // Function Engine.HUD.ShowDebugForReticleTargetToggle // (Final|Exec|Native|Public) // @ game+0x9dcca60
	void ShowDebug(struct FName DebugType); // Function Engine.HUD.ShowDebug // (Exec|Native|Public) // @ game+0xbd5a30
	void RemoveDebugText(struct AActor* SrcActor, bool bLeaveDurationText); // Function Engine.HUD.RemoveDebugText // (Final|Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9dcc870
	void RemoveAllDebugStrings(); // Function Engine.HUD.RemoveAllDebugStrings // (Final|Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9dcc850
	void ReceiveHitBoxRelease(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxRelease // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveHitBoxEndCursorOver(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxEndCursorOver // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveHitBoxClick(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxClick // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveHitBoxBeginCursorOver(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxBeginCursorOver // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveDrawHUD(int32_t SizeX, int32_t SizeY); // Function Engine.HUD.ReceiveDrawHUD // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	struct FVector Project(struct FVector Location); // Function Engine.HUD.Project // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dcc3e0
	void PreviousDebugTarget(); // Function Engine.HUD.PreviousDebugTarget // (Exec|Native|Public) // @ game+0xbcc5c0
	void NextDebugTarget(); // Function Engine.HUD.NextDebugTarget // (Exec|Native|Public) // @ game+0x1d21120
	void GetTextSize(struct FString Text, float& OutWidth, float& OutHeight, struct UFont* Font, float Scale); // Function Engine.HUD.GetTextSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dcb930
	struct APlayerController* GetOwningPlayerController(); // Function Engine.HUD.GetOwningPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x203ba30
	struct APawn* GetOwningPawn(); // Function Engine.HUD.GetOwningPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dcb900
	void GetActorsInSelectionRectangle(struct UClass* ClassFilter, struct FVector2D& FirstPoint, struct FVector2D& SecondPoint, struct TArray<struct AActor*>& OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed); // Function Engine.HUD.GetActorsInSelectionRectangle // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9dcb6d0
	void DrawTextureSimple(struct UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition); // Function Engine.HUD.DrawTextureSimple // (Final|Native|Public|BlueprintCallable) // @ game+0x9dcb540
	void DrawTexture(struct UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, struct FLinearColor TintColor, enum class EBlendMode BlendMode, float Scale, bool bScalePosition, float Rotation, struct FVector2D RotPivot); // Function Engine.HUD.DrawTexture // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9dcb120
	void DrawText(struct FString Text, struct FLinearColor TextColor, float ScreenX, float ScreenY, struct UFont* Font, float Scale, bool bScalePosition); // Function Engine.HUD.DrawText // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9dcaee0
	void DrawRect(struct FLinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH); // Function Engine.HUD.DrawRect // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9dcad30
	void DrawMaterialTriangle(struct UMaterialInterface* Material, struct FVector2D V0_Pos, struct FVector2D V1_Pos, struct FVector2D V2_Pos, struct FVector2D V0_UV, struct FVector2D V1_UV, struct FVector2D V2_UV, struct FLinearColor V0_Color, struct FLinearColor V1_Color, struct FLinearColor V2_Color); // Function Engine.HUD.DrawMaterialTriangle // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9dcaa70
	void DrawMaterialSimple(struct UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition); // Function Engine.HUD.DrawMaterialSimple // (Final|Native|Public|BlueprintCallable) // @ game+0x9dca870
	void DrawMaterial(struct UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, struct FVector2D RotPivot); // Function Engine.HUD.DrawMaterial // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9dca4e0
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, struct FLinearColor LineColor, float LineThickness); // Function Engine.HUD.DrawLine // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9dca300
	void Deproject(float ScreenX, float ScreenY, struct FVector& WorldPosition, struct FVector& WorldDirection); // Function Engine.HUD.Deproject // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dca190
	void AddHitBox(struct FVector2D Position, struct FVector2D size, struct FName InName, bool bConsumesInput, int32_t Priority); // Function Engine.HUD.AddHitBox // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9dc9ea0
	void AddDebugText(struct FString DebugText, struct AActor* SrcActor, float Duration, struct FVector offset, struct FVector DesiredOffset, struct FColor TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, struct UFont* InFont, float FontScale, bool bDrawShadow); // Function Engine.HUD.AddDebugText // (Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x9dc9af0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CameraActor
// Size: 0xd00 (Inherited: 0x378)
class ACameraActor : public AActor {
public:

	enum class EAutoReceiveInput AutoActivateForPlayer; // 0x378(0x01)
	char pad_379[0x7]; // 0x379(0x07)
	struct UCameraComponent* CameraComponent; // 0x380(0x08)
	struct USceneComponent* SceneComponent; // 0x388(0x08)
	char pad_390[0x8]; // 0x390(0x08)
	char bConstrainAspectRatio : 1; // 0x398(0x01)
	char pad_398_1 : 7; // 0x398(0x01)
	char pad_399[0x3]; // 0x399(0x03)
	float AspectRatio; // 0x39c(0x04)
	float FOVAngle; // 0x3a0(0x04)
	float PostProcessBlendWeight; // 0x3a4(0x04)
	char pad_3A8[0x8]; // 0x3a8(0x08)
	struct FPostProcessSettings PostProcessSettings; // 0x3b0(0x950)

	int32_t GetAutoActivatePlayerIndex(); // Function Engine.CameraActor.GetAutoActivatePlayerIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d8c700
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.StaticMeshActor
// Size: 0x388 (Inherited: 0x378)
class AStaticMeshActor : public AActor {
public:

	struct UStaticMeshComponent* StaticMeshComponent; // 0x378(0x08)
	bool bStaticMeshReplicateMovement; // 0x380(0x01)
	enum class ENavDataGatheringMode NavigationGeometryGatheringMode; // 0x381(0x01)
	char pad_382[0x6]; // 0x382(0x06)

	void SetMobility(enum class EComponentMobility InMobility); // Function Engine.StaticMeshActor.SetMobility // (Final|Native|Public|BlueprintCallable) // @ game+0x9ebf160
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PlayerCameraManager
// Size: 0x40e8 (Inherited: 0x378)
class APlayerCameraManager : public AActor {
public:

	char pad_378[0x8]; // 0x378(0x08)
	struct APlayerController* PCOwner; // 0x380(0x08)
	struct USceneComponent* TransformComponent; // 0x388(0x08)
	char pad_390[0x8]; // 0x390(0x08)
	float DefaultFOV; // 0x398(0x04)
	char pad_39C[0x4]; // 0x39c(0x04)
	float DefaultOrthoWidth; // 0x3a0(0x04)
	char pad_3A4[0x4]; // 0x3a4(0x04)
	float DefaultAspectRatio; // 0x3a8(0x04)
	char pad_3AC[0x44]; // 0x3ac(0x44)
	struct FCameraCacheEntry CameraCache; // 0x3f0(0x9f0)
	struct FCameraCacheEntry LastFrameCameraCache; // 0xde0(0x9f0)
	struct FTViewTarget ViewTarget; // 0x17d0(0xa00)
	struct FTViewTarget PendingViewTarget; // 0x21d0(0xa00)
	char pad_2BD0[0x20]; // 0x2bd0(0x20)
	struct FCameraCacheEntry CameraCachePrivate; // 0x2bf0(0x9f0)
	struct FCameraCacheEntry LastFrameCameraCachePrivate; // 0x35e0(0x9f0)
	struct TArray<struct UCameraModifier*> ModifierList; // 0x3fd0(0x10)
	struct TArray<struct UClass*> DefaultModifiers; // 0x3fe0(0x10)
	float FreeCamDistance; // 0x3ff0(0x04)
	struct FVector FreeCamOffset; // 0x3ff4(0x0c)
	struct FVector ViewTargetOffset; // 0x4000(0x0c)
	char pad_400C[0x14]; // 0x400c(0x14)
	struct TArray<struct AEmitterCameraLensEffectBase*> CameraLensEffects; // 0x4020(0x10)
	struct UCameraModifier_CameraShake* CachedCameraShakeMod; // 0x4030(0x08)
	struct UCameraAnimInst* AnimInstPool[0x8]; // 0x4038(0x40)
	struct TArray<struct FPostProcessSettings> PostProcessBlendCache; // 0x4078(0x10)
	char pad_4088[0x10]; // 0x4088(0x10)
	struct TArray<struct UCameraAnimInst*> ActiveAnims; // 0x4098(0x10)
	struct TArray<struct UCameraAnimInst*> FreeAnims; // 0x40a8(0x10)
	struct ACameraActor* AnimCameraActor; // 0x40b8(0x08)
	char bIsOrthographic : 1; // 0x40c0(0x01)
	char bDefaultConstrainAspectRatio : 1; // 0x40c0(0x01)
	char pad_40C0_2 : 4; // 0x40c0(0x01)
	char bClientSimulatingViewTarget : 1; // 0x40c0(0x01)
	char bUseClientSideCameraUpdates : 1; // 0x40c0(0x01)
	char pad_40C1_0 : 2; // 0x40c1(0x01)
	char bGameCameraCutThisFrame : 1; // 0x40c1(0x01)
	char pad_40C1_3 : 5; // 0x40c1(0x01)
	char pad_40C2[0x2]; // 0x40c2(0x02)
	float ViewPitchMin; // 0x40c4(0x04)
	float ViewPitchMax; // 0x40c8(0x04)
	float ViewYawMin; // 0x40cc(0x04)
	float ViewYawMax; // 0x40d0(0x04)
	float ViewRollMin; // 0x40d4(0x04)
	float ViewRollMax; // 0x40d8(0x04)
	char pad_40DC[0x4]; // 0x40dc(0x04)
	float ServerUpdateCameraTimeout; // 0x40e0(0x04)
	char pad_40E4[0x4]; // 0x40e4(0x04)

	void StopCameraShake(struct UCameraShake* ShakeInstance, bool bImmediately); // Function Engine.PlayerCameraManager.StopCameraShake // (Native|Public|BlueprintCallable) // @ game+0x9e748e0
	void StopCameraFade(); // Function Engine.PlayerCameraManager.StopCameraFade // (Native|Public|BlueprintCallable) // @ game+0x361d940
	void StopCameraAnimInst(struct UCameraAnimInst* AnimInst, bool bImmediate); // Function Engine.PlayerCameraManager.StopCameraAnimInst // (Native|Public|BlueprintCallable) // @ game+0x9e74810
	void StopAllInstancesOfCameraShake(struct UClass* Shake, bool bImmediately); // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShake // (Native|Public|BlueprintCallable) // @ game+0x9e74740
	void StopAllInstancesOfCameraAnim(struct UCameraAnim* Anim, bool bImmediate); // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim // (Native|Public|BlueprintCallable) // @ game+0x9e74670
	void StopAllCameraShakes(bool bImmediately); // Function Engine.PlayerCameraManager.StopAllCameraShakes // (Native|Public|BlueprintCallable) // @ game+0x364ec40
	void StopAllCameraAnims(bool bImmediate); // Function Engine.PlayerCameraManager.StopAllCameraAnims // (Native|Public|BlueprintCallable) // @ game+0x367f870
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, struct FLinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished); // Function Engine.PlayerCameraManager.StartCameraFade // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e744a0
	void SetManualCameraFade(float InFadeAmount, struct FLinearColor Color, bool bInFadeAudio); // Function Engine.PlayerCameraManager.SetManualCameraFade // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e74380
	void SetGameCameraCutThisFrame(); // Function Engine.PlayerCameraManager.SetGameCameraCutThisFrame // (Final|Native|Public|BlueprintCallable) // @ game+0x9e74360
	bool RemoveCameraModifier(struct UCameraModifier* ModifierToRemove); // Function Engine.PlayerCameraManager.RemoveCameraModifier // (Native|Public|BlueprintCallable) // @ game+0x40663f0
	void RemoveCameraLensEffect(struct AEmitterCameraLensEffectBase* Emitter); // Function Engine.PlayerCameraManager.RemoveCameraLensEffect // (Native|Public|BlueprintCallable) // @ game+0x63bb610
	struct UCameraShake* PlayCameraShake(struct UClass* ShakeClass, float Scale, enum class ECameraAnimPlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerCameraManager.PlayCameraShake // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e741f0
	struct UCameraAnimInst* PlayCameraAnim(struct UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum class ECameraAnimPlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerCameraManager.PlayCameraAnim // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e73f10
	void PhotographyCameraModify(struct FVector NewCameraLocation, struct FVector PreviousCameraLocation, struct FVector OriginalCameraLocation, struct FVector& ResultCameraLocation); // Function Engine.PlayerCameraManager.PhotographyCameraModify // (BlueprintCosmetic|Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x9e73d90
	void OnPhotographySessionStart(); // Function Engine.PlayerCameraManager.OnPhotographySessionStart // (BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // @ game+0xbcb880
	void OnPhotographySessionEnd(); // Function Engine.PlayerCameraManager.OnPhotographySessionEnd // (BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // @ game+0xbcb8a0
	void OnPhotographyMultiPartCaptureStart(); // Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart // (BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // @ game+0xbcc1a0
	void OnPhotographyMultiPartCaptureEnd(); // Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd // (BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // @ game+0xbd2900
	struct APlayerController* GetOwningPlayerController(); // Function Engine.PlayerCameraManager.GetOwningPlayerController // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e73bb0
	float GetFOVAngle(); // Function Engine.PlayerCameraManager.GetFOVAngle // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e73800
	struct FRotator GetCameraRotation(); // Function Engine.PlayerCameraManager.GetCameraRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e737c0
	struct FVector GetCameraLocation(); // Function Engine.PlayerCameraManager.GetCameraLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e73780
	struct UCameraModifier* FindCameraModifierByClass(struct UClass* ModifierClass); // Function Engine.PlayerCameraManager.FindCameraModifierByClass // (Native|Public|BlueprintCallable) // @ game+0x9e736e0
	void ClearCameraLensEffects(); // Function Engine.PlayerCameraManager.ClearCameraLensEffects // (Native|Public|BlueprintCallable) // @ game+0x4077990
	bool BlueprintUpdateCamera(struct AActor* CameraTarget, struct FVector& NewCameraLocation, struct FRotator& NewCameraRotation, float& NewCameraFOV); // Function Engine.PlayerCameraManager.BlueprintUpdateCamera // (BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x7ed88c0
	struct UCameraModifier* AddNewCameraModifier(struct UClass* ModifierClass); // Function Engine.PlayerCameraManager.AddNewCameraModifier // (Native|Public|BlueprintCallable) // @ game+0x9e73640
	struct AEmitterCameraLensEffectBase* AddCameraLensEffect(struct UClass* LensEffectEmitterClass); // Function Engine.PlayerCameraManager.AddCameraLensEffect // (Native|Public|BlueprintCallable) // @ game+0x9e735a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SkeletalMeshActor
// Size: 0x400 (Inherited: 0x378)
class ASkeletalMeshActor : public AActor {
public:

	char pad_378[0x8]; // 0x378(0x08)
	char bShouldDoAnimNotifies : 1; // 0x380(0x01)
	char bWakeOnLevelStart : 1; // 0x380(0x01)
	char pad_380_2 : 6; // 0x380(0x01)
	char pad_381[0x7]; // 0x381(0x07)
	struct USkeletalMeshComponent* SkeletalMeshComponent; // 0x388(0x08)
	struct USkeletalMesh* ReplicatedMesh; // 0x390(0x08)
	struct UPhysicsAsset* ReplicatedPhysAsset; // 0x398(0x08)
	struct UMaterialInterface* ReplicatedMaterial0; // 0x3a0(0x08)
	struct UMaterialInterface* ReplicatedMaterial1; // 0x3a8(0x08)
	char pad_3B0[0x50]; // 0x3b0(0x50)

	void OnRep_ReplicatedPhysAsset(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset // (Native|Public) // @ game+0xbcc1a0
	void OnRep_ReplicatedMesh(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMesh // (Native|Public) // @ game+0xbd2900
	void OnRep_ReplicatedMaterial1(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1 // (Native|Public) // @ game+0xbcb880
	void OnRep_ReplicatedMaterial0(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0 // (Native|Public) // @ game+0xbcb8a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TriggerBase
// Size: 0x380 (Inherited: 0x378)
class ATriggerBase : public AActor {
public:

	struct UShapeComponent* CollisionComponent; // 0x378(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Emitter
// Size: 0x3c8 (Inherited: 0x378)
class AEmitter : public AActor {
public:

	struct UParticleSystemComponent* ParticleSystemComponent; // 0x378(0x08)
	char bDestroyOnSystemFinish : 1; // 0x380(0x01)
	char bPostUpdateTickGroup : 1; // 0x380(0x01)
	char bCurrentlyActive : 1; // 0x380(0x01)
	char pad_380_3 : 5; // 0x380(0x01)
	char pad_381[0x7]; // 0x381(0x07)
	/*struct FMulticastInlineDelegate*/char OnParticleSpawn[0x10]; // 0x388(0x10)
	/*struct FMulticastInlineDelegate*/char OnParticleBurst[0x10]; // 0x398(0x10)
	/*struct FMulticastInlineDelegate*/char OnParticleDeath[0x10]; // 0x3a8(0x10)
	/*struct FMulticastInlineDelegate*/char OnParticleCollide[0x10]; // 0x3b8(0x10)

	void ToggleActive(); // Function Engine.Emitter.ToggleActive // (Final|Native|Public|BlueprintCallable) // @ game+0x9da7de0
	void SetVectorParameter(struct FName ParameterName, struct FVector Param); // Function Engine.Emitter.SetVectorParameter // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9da7d10
	void SetTemplate(struct UParticleSystem* NewTemplate); // Function Engine.Emitter.SetTemplate // (Native|Public|BlueprintCallable) // @ game+0xc37860
	void SetMaterialParameter(struct FName ParameterName, struct UMaterialInterface* Param); // Function Engine.Emitter.SetMaterialParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x9da7c50
	void SetFloatParameter(struct FName ParameterName, float Param); // Function Engine.Emitter.SetFloatParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x9da7b90
	void SetColorParameter(struct FName ParameterName, struct FLinearColor Param); // Function Engine.Emitter.SetColorParameter // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9da7ac0
	void SetActorParameter(struct FName ParameterName, struct AActor* Param); // Function Engine.Emitter.SetActorParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x9da7a00
	void OnRep_bCurrentlyActive(); // Function Engine.Emitter.OnRep_bCurrentlyActive // (Native|Public) // @ game+0xbcc1a0
	void OnParticleSystemFinished(struct UParticleSystemComponent* FinishedComponent); // Function Engine.Emitter.OnParticleSystemFinished // (Native|Public) // @ game+0x61daa40
	bool IsActive(); // Function Engine.Emitter.IsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9da79d0
	void Deactivate(); // Function Engine.Emitter.Deactivate // (Final|Native|Public|BlueprintCallable) // @ game+0x9da79b0
	void Activate(); // Function Engine.Emitter.Activate // (Final|Native|Public|BlueprintCallable) // @ game+0x9da7990
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.NavigationObjectBase
// Size: 0x3a0 (Inherited: 0x378)
class ANavigationObjectBase : public AActor {
public:

	char pad_378[0x8]; // 0x378(0x08)
	struct UCapsuleComponent* CapsuleComponent; // 0x380(0x08)
	struct UBillboardComponent* GoodSprite; // 0x388(0x08)
	struct UBillboardComponent* BadSprite; // 0x390(0x08)
	char bIsPIEPlayerStart : 1; // 0x398(0x01)
	char pad_398_1 : 7; // 0x398(0x01)
	char pad_399[0x7]; // 0x399(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DecalActor
// Size: 0x380 (Inherited: 0x378)
class ADecalActor : public AActor {
public:

	struct UDecalComponent* Decal; // 0x378(0x08)

	void SetDecalMaterial(struct UMaterialInterface* NewDecalMaterial); // Function Engine.DecalActor.SetDecalMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x9da0860
	struct UMaterialInterface* GetDecalMaterial(); // Function Engine.DecalActor.GetDecalMaterial // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9da05d0
	struct UMaterialInstanceDynamic* CreateDynamicMaterialInstance(); // Function Engine.DecalActor.CreateDynamicMaterialInstance // (Native|Public|BlueprintCallable) // @ game+0x61e6a30
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AmbientSound
// Size: 0x380 (Inherited: 0x378)
class AAmbientSound : public AActor {
public:

	struct UAudioComponent* AudioComponent; // 0x378(0x08)

	void Stop(); // Function Engine.AmbientSound.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x9d603c0
	void Play(float StartTime); // Function Engine.AmbientSound.Play // (Final|Native|Public|BlueprintCallable) // @ game+0x9d5fea0
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel); // Function Engine.AmbientSound.FadeOut // (Final|Native|Public|BlueprintCallable) // @ game+0x9d5fc80
	void FadeIn(float FadeInDuration, float FadeVolumeLevel); // Function Engine.AmbientSound.FadeIn // (Final|Native|Public|BlueprintCallable) // @ game+0x9d5fbc0
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel); // Function Engine.AmbientSound.AdjustVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x9d5fa70
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BandwidthTestActor
// Size: 0x398 (Inherited: 0x378)
class ABandwidthTestActor : public AActor {
public:

	struct FBandwidthTestGenerator BandwidthGenerator; // 0x378(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ReflectionCapture
// Size: 0x388 (Inherited: 0x378)
class AReflectionCapture : public AActor {
public:

	struct UReflectionCaptureComponent* CaptureComponent; // 0x378(0x08)
	char pad_380[0x8]; // 0x380(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CDLODClipRectVolume
// Size: 0x380 (Inherited: 0x378)
class ACDLODClipRectVolume : public AActor {
public:

	struct UCDLODClipRectComponent* CDLODClipRectComponent; // 0x378(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ClipmapActor
// Size: 0x4a8 (Inherited: 0x378)
class AClipmapActor : public AActor {
public:

	struct TArray<struct UClipmap*> Clipmaps; // 0x378(0x10)
	uint32_t AsyncLoadPriority; // 0x388(0x04)
	int32_t VTDirtyMaxMip; // 0x38c(0x04)
	struct FVector2D LeftTopWorldPosition; // 0x390(0x08)
	char pad_398[0x8]; // 0x398(0x08)
	float PatchSizeInWorldSpace; // 0x3a0(0x04)
	int32_t PatchSize; // 0x3a4(0x04)
	int32_t PatchCount; // 0x3a8(0x04)
	struct FIntPoint OriginTextureSize; // 0x3ac(0x08)
	int32_t MipCount; // 0x3b4(0x04)
	struct TArray<struct FIntPoint> SizeInPatchs; // 0x3b8(0x10)
	int32_t ReservedPatchCount; // 0x3c8(0x04)
	char pad_3CC[0xdc]; // 0x3cc(0xdc)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Light
// Size: 0x388 (Inherited: 0x378)
class ALight : public AActor {
public:

	struct ULightComponent* LightComponent; // 0x378(0x08)
	char bEnabled : 1; // 0x380(0x01)
	char pad_380_1 : 7; // 0x380(0x01)
	char pad_381[0x7]; // 0x381(0x07)

	void ToggleEnabled(); // Function Engine.Light.ToggleEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x9e37120
	void SetLightFunctionScale(struct FVector NewLightFunctionScale); // Function Engine.Light.SetLightFunctionScale // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e368d0
	void SetLightFunctionMaterial(struct UMaterialInterface* NewLightFunctionMaterial); // Function Engine.Light.SetLightFunctionMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x9e367d0
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance); // Function Engine.Light.SetLightFunctionFadeDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x9e366d0
	void SetLightColor(struct FLinearColor NewLightColor); // Function Engine.Light.SetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e36500
	void SetEnabled(bool bSetEnabled); // Function Engine.Light.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x9e360d0
	void SetCastShadows(bool bNewValue); // Function Engine.Light.SetCastShadows // (Final|Native|Public|BlueprintCallable) // @ game+0x9e35df0
	void SetBrightness(float NewBrightness); // Function Engine.Light.SetBrightness // (Final|Native|Public|BlueprintCallable) // @ game+0x9e35d70
	void SetAffectTranslucentLighting(bool bNewValue); // Function Engine.Light.SetAffectTranslucentLighting // (Final|Native|Public|BlueprintCallable) // @ game+0x9e35840
	void OnRep_bEnabled(); // Function Engine.Light.OnRep_bEnabled // (Native|Public) // @ game+0xbd2900
	bool IsEnabled(); // Function Engine.Light.IsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e351a0
	struct FLinearColor GetLightColor(); // Function Engine.Light.GetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e350f0
	float GetBrightness(); // Function Engine.Light.GetBrightness // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e35090
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DocumentationActor
// Size: 0x380 (Inherited: 0x378)
class ADocumentationActor : public AActor {
public:

	char pad_378[0x8]; // 0x378(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LevelBounds
// Size: 0x398 (Inherited: 0x378)
class ALevelBounds : public AActor {
public:

	bool bAutoUpdateBounds; // 0x378(0x01)
	char pad_379[0x3]; // 0x379(0x03)
	struct FVector DefaultLevelBoundSize; // 0x37c(0x0c)
	/*struct TArray<struct TSoftClassPtr<UObject>>*/char IrrelevantActorTypes[0x10]; // 0x388(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LevelScriptActor
// Size: 0x380 (Inherited: 0x378)
class ALevelScriptActor : public AActor {
public:

	char bInputEnabled : 1; // 0x378(0x01)
	char pad_378_1 : 7; // 0x378(0x01)
	char pad_379[0x7]; // 0x379(0x07)

	void WorldOriginLocationChanged(struct FIntVector OldOriginLocation, struct FIntVector NewOriginLocation); // Function Engine.LevelScriptActor.WorldOriginLocationChanged // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x7ed88c0
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // Function Engine.LevelScriptActor.SetCinematicMode // (Native|Public|BlueprintCallable) // @ game+0x9e35e80
	bool RemoteEvent(struct FName EventName); // Function Engine.LevelScriptActor.RemoteEvent // (Native|Public|BlueprintCallable) // @ game+0xbd7b40
	void LevelReset(); // Function Engine.LevelScriptActor.LevelReset // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LightmassPortal
// Size: 0x380 (Inherited: 0x378)
class ALightmassPortal : public AActor {
public:

	struct ULightmassPortalComponent* PortalComponent; // 0x378(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LODActor
// Size: 0x400 (Inherited: 0x378)
class ALODActor : public AActor {
public:

	struct UStaticMeshComponent* StaticMeshComponent; // 0x378(0x08)
	struct TMap<struct UMaterialInterface*, struct UInstancedStaticMeshComponent*> ImpostersStaticMeshComponents; // 0x380(0x50)
	struct UHLODProxy* Proxy; // 0x3d0(0x08)
	struct FName Key; // 0x3d8(0x08)
	float LODDrawDistance; // 0x3e0(0x04)
	int32_t LODLevel; // 0x3e4(0x04)
	struct TArray<struct AActor*> SubActors; // 0x3e8(0x10)
	char CachedNumHLODLevels; // 0x3f8(0x01)
	char pad_3F9[0x7]; // 0x3f9(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialInstanceActor
// Size: 0x388 (Inherited: 0x378)
class AMaterialInstanceActor : public AActor {
public:

	struct TArray<struct AActor*> TargetActors; // 0x378(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MatineeActor
// Size: 0x420 (Inherited: 0x378)
class AMatineeActor : public AActor {
public:

	struct UInterpData* MatineeData; // 0x378(0x08)
	struct FName MatineeControllerName; // 0x380(0x08)
	float PlayRate; // 0x388(0x04)
	char bPlayOnLevelLoad : 1; // 0x38c(0x01)
	char bForceStartPos : 1; // 0x38c(0x01)
	char pad_38C_2 : 6; // 0x38c(0x01)
	char pad_38D[0x3]; // 0x38d(0x03)
	float ForceStartPosition; // 0x390(0x04)
	char bLooping : 1; // 0x394(0x01)
	char bRewindOnPlay : 1; // 0x394(0x01)
	char bNoResetOnRewind : 1; // 0x394(0x01)
	char bRewindIfAlreadyPlaying : 1; // 0x394(0x01)
	char bDisableRadioFilter : 1; // 0x394(0x01)
	char bClientSideOnly : 1; // 0x394(0x01)
	char bSkipUpdateIfNotVisible : 1; // 0x394(0x01)
	char bIsSkippable : 1; // 0x394(0x01)
	char pad_395[0x3]; // 0x395(0x03)
	int32_t PreferredSplitScreenNum; // 0x398(0x04)
	char bDisableMovementInput : 1; // 0x39c(0x01)
	char bDisableLookAtInput : 1; // 0x39c(0x01)
	char bHidePlayer : 1; // 0x39c(0x01)
	char bHideHud : 1; // 0x39c(0x01)
	char pad_39C_4 : 4; // 0x39c(0x01)
	char pad_39D[0x3]; // 0x39d(0x03)
	struct TArray<struct FInterpGroupActorInfo> GroupActorInfos; // 0x3a0(0x10)
	char bShouldShowGore : 1; // 0x3b0(0x01)
	char pad_3B0_1 : 7; // 0x3b0(0x01)
	char pad_3B1[0x7]; // 0x3b1(0x07)
	struct TArray<struct UInterpGroupInst*> GroupInst; // 0x3b8(0x10)
	struct TArray<struct FCameraCutInfo> CameraCuts; // 0x3c8(0x10)
	char bIsPlaying : 1; // 0x3d8(0x01)
	char bReversePlayback : 1; // 0x3d8(0x01)
	char bPaused : 1; // 0x3d8(0x01)
	char bPendingStop : 1; // 0x3d8(0x01)
	char pad_3D8_4 : 4; // 0x3d8(0x01)
	char pad_3D9[0x3]; // 0x3d9(0x03)
	float InterpPosition; // 0x3dc(0x04)
	char pad_3E0[0x4]; // 0x3e0(0x04)
	char ReplicationForceIsPlaying; // 0x3e4(0x01)
	char pad_3E5[0x3]; // 0x3e5(0x03)
	/*struct FMulticastInlineDelegate*/char OnPlay[0x10]; // 0x3e8(0x10)
	/*struct FMulticastInlineDelegate*/char OnStop[0x10]; // 0x3f8(0x10)
	/*struct FMulticastInlineDelegate*/char OnPause[0x10]; // 0x408(0x10)
	char pad_418[0x8]; // 0x418(0x08)

	void Stop(); // Function Engine.MatineeActor.Stop // (Native|Public|BlueprintCallable) // @ game+0xbcb8a0
	void SetPosition(float NewPosition, bool bJump); // Function Engine.MatineeActor.SetPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x9e52150
	void SetLoopingState(bool bNewLooping); // Function Engine.MatineeActor.SetLoopingState // (Native|Public|BlueprintCallable) // @ game+0x62f6390
	void Reverse(); // Function Engine.MatineeActor.Reverse // (Native|Public|BlueprintCallable) // @ game+0xbcb880
	void Play(); // Function Engine.MatineeActor.Play // (Native|Public|BlueprintCallable) // @ game+0xbcc1a0
	void Pause(); // Function Engine.MatineeActor.Pause // (Native|Public|BlueprintCallable) // @ game+0xbd5ba0
	void EnableGroupByName(struct FString GroupName, bool bEnable); // Function Engine.MatineeActor.EnableGroupByName // (Final|Native|Public|BlueprintCallable) // @ game+0x9e518a0
	void ChangePlaybackDirection(); // Function Engine.MatineeActor.ChangePlaybackDirection // (Native|Public|BlueprintCallable) // @ game+0xbcb8c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Note
// Size: 0x378 (Inherited: 0x378)
class ANote : public AActor {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.NZSkyBoxActor
// Size: 0x388 (Inherited: 0x378)
class ANZSkyBoxActor : public AActor {
public:

	struct UNZSkyBoxComponent* Component; // 0x378(0x08)
	char bEnabled : 1; // 0x380(0x01)
	char pad_380_1 : 7; // 0x380(0x01)
	char pad_381[0x7]; // 0x381(0x07)

	void SetSuspension(bool bSuspended); // Function Engine.NZSkyBoxActor.SetSuspension // (Final|Native|Public|BlueprintCallable) // @ game+0x9e59b70
	void OnRep_bEnabled(); // Function Engine.NZSkyBoxActor.OnRep_bEnabled // (Native|Public) // @ game+0xbd2900
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleEventManager
// Size: 0x378 (Inherited: 0x378)
class AParticleEventManager : public AActor {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.RigidBodyBase
// Size: 0x378 (Inherited: 0x378)
class ARigidBodyBase : public AActor {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PhysicsStaticScene
// Size: 0x3f0 (Inherited: 0x378)
class APhysicsStaticScene : public AActor {
public:

	struct TArray<struct FName> StreamingLevels; // 0x378(0x10)
	struct TMap<uint64_t, struct UPhysicalMaterial*> PhysicalMaterials; // 0x388(0x50)
	char pad_3D8[0x18]; // 0x3d8(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SceneCapture
// Size: 0x388 (Inherited: 0x378)
class ASceneCapture : public AActor {
public:

	struct UStaticMeshComponent* MeshComp; // 0x378(0x08)
	struct USceneComponent* SceneComponent; // 0x380(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ReflectionRange
// Size: 0x380 (Inherited: 0x378)
class AReflectionRange : public AActor {
public:

	struct UReflectionRangeComponent* CaptureRangeComponent; // 0x378(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.RuntimeShadowMaskVolume
// Size: 0x380 (Inherited: 0x378)
class ARuntimeShadowMaskVolume : public AActor {
public:

	struct URuntimeShadowMaskComponent* ShadowMaskComponent; // 0x378(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.RuntimeVirtualTextureVolume
// Size: 0x380 (Inherited: 0x378)
class ARuntimeVirtualTextureVolume : public AActor {
public:

	struct URuntimeVirtualTextureComponent* VirtualTextureComponent; // 0x378(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SplineMeshActor
// Size: 0x380 (Inherited: 0x378)
class ASplineMeshActor : public AActor {
public:

	struct USplineMeshComponent* SplineMeshComponent; // 0x378(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TargetPoint
// Size: 0x378 (Inherited: 0x378)
class ATargetPoint : public AActor {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TextRenderActor
// Size: 0x380 (Inherited: 0x378)
class ATextRenderActor : public AActor {
public:

	struct UTextRenderComponent* TextRender; // 0x378(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.VectorFieldVolume
// Size: 0x380 (Inherited: 0x378)
class AVectorFieldVolume : public AActor {
public:

	struct UVectorFieldComponent* VectorFieldComponent; // 0x378(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PrimaryDataAsset
// Size: 0x38 (Inherited: 0x38)
class UPrimaryDataAsset : public UDataAsset {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.KojimaRuntimeData
// Size: 0x60 (Inherited: 0x38)
class UKojimaRuntimeData : public UDataAsset {
public:

	struct TArray<struct FVector> TransmittanceStore; // 0x38(0x10)
	int32_t TransWidth; // 0x48(0x04)
	int32_t TransHeight; // 0x4c(0x04)
	struct TArray<struct FVector> Lsky; // 0x50(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LightImportanceAsset
// Size: 0x70 (Inherited: 0x38)
class ULightImportanceAsset : public UDataAsset {
public:

	struct TArray<struct FLightImportanceSampleAssetData> ImportanceSamples; // 0x38(0x10)
	struct FVector VolumePosition; // 0x48(0x0c)
	struct FVector VolumeExtent; // 0x54(0x0c)
	struct FVector CellSize; // 0x60(0x0c)
	char pad_6C[0x4]; // 0x6c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PreviewMeshCollection
// Size: 0x58 (Inherited: 0x38)
class UPreviewMeshCollection : public UDataAsset {
public:

	char pad_38[0x8]; // 0x38(0x08)
	struct USkeleton* Skeleton; // 0x40(0x08)
	struct TArray<struct FPreviewMeshCollectionEntry> SkeletalMeshes; // 0x48(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SkeletalMeshLODSettings
// Size: 0x58 (Inherited: 0x38)
class USkeletalMeshLODSettings : public UDataAsset {
public:

	struct FPerPlatformInt MinLOD; // 0x38(0x04)
	struct FPerPlatformBool DisableBelowMinLodStripping; // 0x3c(0x01)
	struct FPerPlatformBool bSupportLODStreaming; // 0x3d(0x01)
	char pad_3E[0x2]; // 0x3e(0x02)
	struct FPerPlatformInt MaxNumStreamedLODs; // 0x40(0x04)
	struct FPerPlatformInt MaxNumOptionalLODs; // 0x44(0x04)
	struct TArray<struct FSkeletalMeshLODGroupSettings> LODGroups; // 0x48(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TireType
// Size: 0x40 (Inherited: 0x38)
class UTireType : public UDataAsset {
public:

	float FrictionScale; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ABCNatrualLightInterpHelperObj
// Size: 0x80 (Inherited: 0x38)
class UABCNatrualLightInterpHelperObj : public UDataAsset {
public:

	int32_t tileid; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct TArray<float> ProbeAmbientCubeData_SkyVis_GroundTruth; // 0x40(0x10)
	struct TArray<float> DenseBounceSkyvis_GroundTruth; // 0x50(0x10)
	struct TArray<bool> IsAwayFromMesh; // 0x60(0x10)
	struct TArray<bool> IsRouge; // 0x70(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ABCNatrualLightObj
// Size: 0x58 (Inherited: 0x38)
class UABCNatrualLightObj : public UDataAsset {
public:

	int32_t tileid; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct TArray<uint16_t> ProbeAmbientCubeData_SkyVis; // 0x40(0x10)
	char pad_50[0x8]; // 0x50(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PRTScriptObj
// Size: 0x348 (Inherited: 0x38)
class UPRTScriptObj : public UDataAsset {
public:

	int32_t BakeTimeSky360; // 0x38(0x04)
	int32_t BakeTimeLatitude; // 0x3c(0x04)
	int32_t BakeTimeLowestTime; // 0x40(0x04)
	int32_t tileid; // 0x44(0x04)
	int32_t SubID; // 0x48(0x04)
	int32_t IsNewton; // 0x4c(0x04)
	struct TArray<char> DenseSkyVis_RGB_16to8; // 0x50(0x10)
	struct TArray<int16_t> DVF; // 0x60(0x10)
	struct FVector AABBMin; // 0x70(0x0c)
	struct FVector AABBMax; // 0x7c(0x0c)
	float MinZ; // 0x88(0x04)
	float MaxZ; // 0x8c(0x04)
	struct FIntVector DVFSize; // 0x90(0x0c)
	char pad_9C[0x4]; // 0x9c(0x04)
	struct TArray<int32_t> DenseBounds; // 0xa0(0x10)
	struct TArray<uint16_t> ProbeAraaRangeStartIndexZX; // 0xb0(0x10)
	struct TArray<int8_t> ProbeAraaRangeNum; // 0xc0(0x10)
	struct TArray<int8_t> ProbeAreaRangePerZX; // 0xd0(0x10)
	struct TArray<uint32_t> VxTree_ChildMask_0_32_Natural; // 0xe0(0x10)
	struct TArray<uint32_t> VxTree_ChildMask_32_64_Natural; // 0xf0(0x10)
	struct TArray<uint32_t> VxTree_ChildBlockOffset_Natural; // 0x100(0x10)
	struct TArray<uint32_t> VxTree_ChildRougeMask_0_32_Natural; // 0x110(0x10)
	struct TArray<uint32_t> VxTree_ChildRougeMask_32_64_Natural; // 0x120(0x10)
	struct FIntVector TreeDimensionL0_Natural; // 0x130(0x0c)
	int32_t NonBakeNumOfNatural; // 0x13c(0x04)
	struct TArray<uint32_t> VxTree_ChildMask_0_32_Artificial; // 0x140(0x10)
	struct TArray<uint32_t> VxTree_ChildMask_32_64_Artificial; // 0x150(0x10)
	struct TArray<uint32_t> VxTree_ChildBlockOffset_Artificial; // 0x160(0x10)
	struct FIntVector TreeDimensionL0_Artificial; // 0x170(0x0c)
	int32_t NonBakeNumOfArtificial; // 0x17c(0x04)
	struct TArray<struct FVector> FadeOrientBox; // 0x180(0x10)
	struct TArray<float> PolyPointDotNormal_World; // 0x190(0x10)
	struct TArray<uint16_t> PolyNormalX_World; // 0x1a0(0x10)
	struct TArray<uint16_t> PolyNormalY_World; // 0x1b0(0x10)
	struct TArray<uint16_t> PolyNormalZ_World; // 0x1c0(0x10)
	struct TArray<int32_t> PolyPointNumPerSection; // 0x1d0(0x10)
	struct TArray<struct FVector> PolyMinMaxBox_World; // 0x1e0(0x10)
	struct TArray<float> LeakPlanePointDotNormal_World; // 0x1f0(0x10)
	struct TArray<uint16_t> LeakPlaneNormalX_World; // 0x200(0x10)
	struct TArray<uint16_t> LeakPlaneNormalY_World; // 0x210(0x10)
	struct TArray<uint16_t> LeakPlaneNormalZ_World; // 0x220(0x10)
	struct TArray<int16_t> Voxel2LeakPlaneIndices; // 0x230(0x10)
	struct TArray<int32_t> AtfCountForDense; // 0x240(0x10)
	struct TArray<int32_t> AtfBounds; // 0x250(0x10)
	struct TArray<char> DenseAtfLightData_16to8; // 0x260(0x10)
	struct TArray<int16_t> ProbeIndices1234; // 0x270(0x10)
	struct TArray<uint16_t> ProbeWeights; // 0x280(0x10)
	int32_t NormalNumOfNaturalVoxels; // 0x290(0x04)
	char pad_294[0x4]; // 0x294(0x04)
	struct TArray<char> DebandingSkyVis_RGB_16to8; // 0x298(0x10)
	struct TArray<int16_t> DebandingProbeIndices1234; // 0x2a8(0x10)
	struct TArray<uint16_t> DebandingProbeWeights; // 0x2b8(0x10)
	struct TArray<uint16_t> DebandingNormal; // 0x2c8(0x10)
	struct TArray<int16_t> DebandingYIdices; // 0x2d8(0x10)
	struct TArray<int16_t> DebandingPerZXIdxOfY; // 0x2e8(0x10)
	struct TArray<uint16_t> LocalProbePositions; // 0x2f8(0x10)
	struct TArray<int16_t> DirAdjArray; // 0x308(0x10)
	struct TArray<uint16_t> ProbeAmbientCubeData_SkyVis; // 0x318(0x10)
	int32_t SavedTodNum; // 0x328(0x04)
	float SavedTime[0x6]; // 0x32c(0x18)
	char pad_344[0x4]; // 0x344(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TodRangedScriptObj
// Size: 0xc0 (Inherited: 0x38)
class UTodRangedScriptObj : public UDataAsset {
public:

	int32_t tileid; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct TArray<float> ProbeAtfData_SkyVis; // 0x40(0x10)
	struct TArray<uint16_t> ProbeAtfData_SkyVis_MaxRgbUpMax_Uint16; // 0x50(0x10)
	struct TArray<float> PositionsX; // 0x60(0x10)
	struct TArray<float> PositionsY; // 0x70(0x10)
	struct TArray<float> PositionsZ; // 0x80(0x10)
	struct TArray<int32_t> InternalBlockIndexL; // 0x90(0x10)
	struct TArray<int32_t> InternalBlockIndexR; // 0xa0(0x10)
	struct FVector MinBx; // 0xb0(0x0c)
	char pad_BC[0x4]; // 0xbc(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TodSaveMarker
// Size: 0x40 (Inherited: 0x38)
class UTodSaveMarker : public UDataAsset {
public:

	bool IsPinned; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SceneComponent
// Size: 0x240 (Inherited: 0x100)
class USceneComponent : public UActorComponent {
public:

	char pad_100[0x8]; // 0x100(0x08)
	struct TWeakObjectPtr<struct APhysicsVolume> PhysicsVolume; // 0x108(0x08)
	struct USceneComponent* AttachParent; // 0x110(0x08)
	struct FName AttachSocketName; // 0x118(0x08)
	struct TArray<struct USceneComponent*> AttachChildren; // 0x120(0x10)
	struct TArray<struct USceneComponent*> ClientAttachedChildren; // 0x130(0x10)
	char pad_140[0x2c]; // 0x140(0x2c)
	struct FVector RelativeLocation; // 0x16c(0x0c)
	struct FRotator RelativeRotation; // 0x178(0x0c)
	struct FVector RelativeScale3D; // 0x184(0x0c)
	struct FVector ComponentVelocity; // 0x190(0x0c)
	char bComponentToWorldUpdated : 1; // 0x19c(0x01)
	char pad_19C_1 : 1; // 0x19c(0x01)
	char bAbsoluteLocation : 1; // 0x19c(0x01)
	char bAbsoluteRotation : 1; // 0x19c(0x01)
	char bAbsoluteScale : 1; // 0x19c(0x01)
	char bVisible : 1; // 0x19c(0x01)
	char bHiddenInGame : 1; // 0x19c(0x01)
	char bSkipUpdateTransformsWhenHidden : 1; // 0x19c(0x01)
	char bShouldBeAttached : 1; // 0x19d(0x01)
	char bShouldSnapLocationWhenAttached : 1; // 0x19d(0x01)
	char bShouldSnapRotationWhenAttached : 1; // 0x19d(0x01)
	char bShouldUpdatePhysicsVolume : 1; // 0x19d(0x01)
	char bBoundsChangeTriggersStreamingDataRebuild : 1; // 0x19d(0x01)
	char bUseAttachParentBound : 1; // 0x19d(0x01)
	char pad_19D_6 : 2; // 0x19d(0x01)
	char pad_19E[0x1]; // 0x19e(0x01)
	enum class EComponentMobility Mobility; // 0x19f(0x01)
	enum class EDetailMode DetailMode; // 0x1a0(0x01)
	struct FMulticastSparseDelegate PhysicsVolumeChangedDelegate; // 0x1a1(0x01)
	char pad_1A2[0x9e]; // 0x1a2(0x9e)

	void ToggleVisibility(bool bPropagateToChildren); // Function Engine.SceneComponent.ToggleVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x9e9bec0
	bool SnapTo(struct USceneComponent* InParent, struct FName InSocketName); // Function Engine.SceneComponent.SnapTo // (Final|Native|Public|BlueprintCallable) // @ game+0x9e9be00
	void SetWorldScale3D(struct FVector NewScale); // Function Engine.SceneComponent.SetWorldScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e9bbd0
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren); // Function Engine.SceneComponent.SetVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x9e9bb00
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume); // Function Engine.SceneComponent.SetShouldUpdatePhysicsVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x9e9b9e0
	void SetRelativeScale3D(struct FVector NewScale3D); // Function Engine.SceneComponent.SetRelativeScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e9b950
	void SetMobility(enum class EComponentMobility NewMobility); // Function Engine.SceneComponent.SetMobility // (Native|Public|BlueprintCallable) // @ game+0x9e9b8d0
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren); // Function Engine.SceneComponent.SetHiddenInGame // (Final|Native|Public|BlueprintCallable) // @ game+0x9e9b800
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale); // Function Engine.SceneComponent.SetAbsolute // (Final|Native|Public|BlueprintCallable) // @ game+0x9e9b660
	void ResetRelativeTransform(); // Function Engine.SceneComponent.ResetRelativeTransform // (Final|Native|Public|BlueprintCallable) // @ game+0x9e9b640
	void OnRep_Visibility(bool OldValue); // Function Engine.SceneComponent.OnRep_Visibility // (Final|Native|Private) // @ game+0x9e9b4b0
	void OnRep_Transform(); // Function Engine.SceneComponent.OnRep_Transform // (Final|Native|Private) // @ game+0x9e9b490
	void OnRep_AttachSocketName(); // Function Engine.SceneComponent.OnRep_AttachSocketName // (Final|Native|Private) // @ game+0x9e9b470
	void OnRep_AttachParent(); // Function Engine.SceneComponent.OnRep_AttachParent // (Final|Native|Private) // @ game+0x9e9b470
	void OnRep_AttachChildren(); // Function Engine.SceneComponent.OnRep_AttachChildren // (Final|Native|Private) // @ game+0x9e9b450
	void K2_SetWorldTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e9b250
	void K2_SetWorldRotation(struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e9b0b0
	void K2_SetWorldLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldLocationAndRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e9aec0
	void K2_SetWorldLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e9ad20
	void K2_SetRelativeTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e9ab20
	void K2_SetRelativeRotation(struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e9a980
	void K2_SetRelativeLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeLocationAndRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e9a790
	void K2_SetRelativeLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e9a5f0
	struct FTransform K2_GetComponentToWorld(); // Function Engine.SceneComponent.K2_GetComponentToWorld // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e9a590
	struct FVector K2_GetComponentScale(); // Function Engine.SceneComponent.K2_GetComponentScale // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e9a550
	struct FRotator K2_GetComponentRotation(); // Function Engine.SceneComponent.K2_GetComponentRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e9a510
	struct FVector K2_GetComponentLocation(); // Function Engine.SceneComponent.K2_GetComponentLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e9a4d0
	void K2_DetachFromComponent(enum class EDetachmentRule LocationRule, enum class EDetachmentRule RotationRule, enum class EDetachmentRule ScaleRule, bool bCallModify); // Function Engine.SceneComponent.K2_DetachFromComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x9e9a380
	bool K2_AttachToComponent(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Function Engine.SceneComponent.K2_AttachToComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x9e9a1d0
	bool K2_AttachTo(struct USceneComponent* InParent, struct FName InSocketName, enum class EAttachLocation AttachType, bool bWeldSimulatedBodies); // Function Engine.SceneComponent.K2_AttachTo // (Final|Native|Public|BlueprintCallable) // @ game+0x9e9a080
	void K2_AddWorldTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e99e80
	void K2_AddWorldRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e99ce0
	void K2_AddWorldOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e99b40
	void K2_AddRelativeRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddRelativeRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e999a0
	void K2_AddRelativeLocation(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddRelativeLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e99800
	void K2_AddLocalTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddLocalTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e99600
	void K2_AddLocalRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddLocalRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e99460
	void K2_AddLocalOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddLocalOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e992c0
	bool IsVisible(); // Function Engine.SceneComponent.IsVisible // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e99290
	bool IsSimulatingPhysics(struct FName BoneName); // Function Engine.SceneComponent.IsSimulatingPhysics // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x143ed20
	bool IsAnySimulatingPhysics(); // Function Engine.SceneComponent.IsAnySimulatingPhysics // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e99260
	struct FVector GetUpVector(); // Function Engine.SceneComponent.GetUpVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e99120
	struct FTransform GetSocketTransform(struct FName InSocketName, enum class ERelativeTransformSpace TransformSpace); // Function Engine.SceneComponent.GetSocketTransform // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e99020
	struct FRotator GetSocketRotation(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e98f70
	struct FQuat GetSocketQuaternion(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketQuaternion // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e98ed0
	struct FVector GetSocketLocation(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e98e20
	bool GetShouldUpdatePhysicsVolume(); // Function Engine.SceneComponent.GetShouldUpdatePhysicsVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e98df0
	struct FVector GetRightVector(); // Function Engine.SceneComponent.GetRightVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e98db0
	struct FTransform GetRelativeTransform(); // Function Engine.SceneComponent.GetRelativeTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e98d50
	struct APhysicsVolume* GetPhysicsVolume(); // Function Engine.SceneComponent.GetPhysicsVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e98d20
	void GetParentComponents(struct TArray<struct USceneComponent*>& Parents); // Function Engine.SceneComponent.GetParentComponents // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e98c50
	int32_t GetNumChildrenComponents(); // Function Engine.SceneComponent.GetNumChildrenComponents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e98c20
	struct FVector GetForwardVector(); // Function Engine.SceneComponent.GetForwardVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e98be0
	struct FVector GetComponentVelocity(); // Function Engine.SceneComponent.GetComponentVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e98ba0
	void GetChildrenComponents(bool bIncludeAllDescendants, struct TArray<struct USceneComponent*>& Children); // Function Engine.SceneComponent.GetChildrenComponents // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e98a80
	struct USceneComponent* GetChildComponent(int32_t ChildIndex); // Function Engine.SceneComponent.GetChildComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e989f0
	struct FName GetAttachSocketName(); // Function Engine.SceneComponent.GetAttachSocketName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x8ac6bf0
	struct USceneComponent* GetAttachParent(); // Function Engine.SceneComponent.GetAttachParent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x63056e0
	struct TArray<struct FName> GetAllSocketNames(); // Function Engine.SceneComponent.GetAllSocketNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e98910
	bool DoesSocketExist(struct FName InSocketName); // Function Engine.SceneComponent.DoesSocketExist // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e98870
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify); // Function Engine.SceneComponent.DetachFromParent // (Native|Public|BlueprintCallable) // @ game+0x9e987a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MovementComponent
// Size: 0x140 (Inherited: 0x100)
class UMovementComponent : public UActorComponent {
public:

	struct USceneComponent* UpdatedComponent; // 0x100(0x08)
	struct UPrimitiveComponent* UpdatedPrimitive; // 0x108(0x08)
	char pad_110[0x4]; // 0x110(0x04)
	struct FVector Velocity; // 0x114(0x0c)
	struct FVector PlaneConstraintNormal; // 0x120(0x0c)
	struct FVector PlaneConstraintOrigin; // 0x12c(0x0c)
	char bUpdateOnlyIfRendered : 1; // 0x138(0x01)
	char bAutoUpdateTickRegistration : 1; // 0x138(0x01)
	char bTickBeforeOwner : 1; // 0x138(0x01)
	char bAutoRegisterUpdatedComponent : 1; // 0x138(0x01)
	char bConstrainToPlane : 1; // 0x138(0x01)
	char bSnapToPlaneAtStart : 1; // 0x138(0x01)
	char bAutoRegisterPhysicsVolumeUpdates : 1; // 0x138(0x01)
	char bComponentShouldUpdatePhysicsVolume : 1; // 0x138(0x01)
	char pad_139[0x2]; // 0x139(0x02)
	enum class EPlaneConstraintAxisSetting PlaneConstraintAxisSetting; // 0x13b(0x01)
	char pad_13C[0x4]; // 0x13c(0x04)

	void StopMovementImmediately(); // Function Engine.MovementComponent.StopMovementImmediately // (Native|Public|BlueprintCallable) // @ game+0x361c8e0
	void SnapUpdatedComponentToPlane(); // Function Engine.MovementComponent.SnapUpdatedComponentToPlane // (Native|Public|BlueprintCallable) // @ game+0x9e55900
	void SetUpdatedComponent(struct USceneComponent* NewUpdatedComponent); // Function Engine.MovementComponent.SetUpdatedComponent // (Native|Public|BlueprintCallable) // @ game+0x366f970
	void SetPlaneConstraintOrigin(struct FVector PlaneOrigin); // Function Engine.MovementComponent.SetPlaneConstraintOrigin // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e55870
	void SetPlaneConstraintNormal(struct FVector PlaneNormal); // Function Engine.MovementComponent.SetPlaneConstraintNormal // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e557e0
	void SetPlaneConstraintFromVectors(struct FVector Forward, struct FVector Up); // Function Engine.MovementComponent.SetPlaneConstraintFromVectors // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e55700
	void SetPlaneConstraintEnabled(bool bEnabled); // Function Engine.MovementComponent.SetPlaneConstraintEnabled // (Native|Public|BlueprintCallable) // @ game+0x63799b0
	void SetPlaneConstraintAxisSetting(enum class EPlaneConstraintAxisSetting NewAxisSetting); // Function Engine.MovementComponent.SetPlaneConstraintAxisSetting // (Native|Public|BlueprintCallable) // @ game+0x9e55680
	void PhysicsVolumeChanged(struct APhysicsVolume* NewVolume); // Function Engine.MovementComponent.PhysicsVolumeChanged // (Native|Public) // @ game+0x3625fd0
	bool K2_MoveUpdatedComponent(struct FVector Delta, struct FRotator NewRotation, struct FHitResult& OutHit, bool bSweep, bool bTeleport); // Function Engine.MovementComponent.K2_MoveUpdatedComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e55480
	float K2_GetModifiedMaxSpeed(); // Function Engine.MovementComponent.K2_GetModifiedMaxSpeed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e55440
	float K2_GetMaxSpeedModifier(); // Function Engine.MovementComponent.K2_GetMaxSpeedModifier // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e55400
	bool IsExceedingMaxSpeed(float MaxSpeed); // Function Engine.MovementComponent.IsExceedingMaxSpeed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e55370
	struct FVector GetPlaneConstraintOrigin(); // Function Engine.MovementComponent.GetPlaneConstraintOrigin // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e55330
	struct FVector GetPlaneConstraintNormal(); // Function Engine.MovementComponent.GetPlaneConstraintNormal // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e552f0
	enum class EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting(); // Function Engine.MovementComponent.GetPlaneConstraintAxisSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e552d0
	struct APhysicsVolume* GetPhysicsVolume(); // Function Engine.MovementComponent.GetPhysicsVolume // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e552a0
	float GetMaxSpeed(); // Function Engine.MovementComponent.GetMaxSpeed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e55260
	float GetGravityZ(); // Function Engine.MovementComponent.GetGravityZ // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x7483e60
	struct FVector ConstrainNormalToPlane(struct FVector Normal); // Function Engine.MovementComponent.ConstrainNormalToPlane // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e551b0
	struct FVector ConstrainLocationToPlane(struct FVector Location); // Function Engine.MovementComponent.ConstrainLocationToPlane // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e55100
	struct FVector ConstrainDirectionToPlane(struct FVector Direction); // Function Engine.MovementComponent.ConstrainDirectionToPlane // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e55050
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PhysicalAnimationComponent
// Size: 0x140 (Inherited: 0x100)
class UPhysicalAnimationComponent : public UActorComponent {
public:

	float StrengthMultiplyer; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)
	struct USkeletalMeshComponent* SkeletalMeshComponent; // 0x108(0x08)
	char pad_110[0x30]; // 0x110(0x30)

	void SetStrengthMultiplyer(float InStrengthMultiplyer); // Function Engine.PhysicalAnimationComponent.SetStrengthMultiplyer // (Final|Native|Public|BlueprintCallable) // @ game+0x9e70830
	void SetSkeletalMeshComponent(struct USkeletalMeshComponent* InSkeletalMeshComponent); // Function Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x9e707b0
	struct FTransform GetBodyTargetTransform(struct FName BodyName); // Function Engine.PhysicalAnimationComponent.GetBodyTargetTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e6e770
	void ApplyPhysicalAnimationSettingsBelow(struct FName BodyName, struct FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9e6e620
	void ApplyPhysicalAnimationSettings(struct FName BodyName, struct FPhysicalAnimationData& PhysicalAnimationData); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9e6e540
	void ApplyPhysicalAnimationProfileBelow(struct FName BodyName, struct FName ProfileName, bool bIncludeSelf, bool bClearNotFound); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow // (Final|Native|Public|BlueprintCallable) // @ game+0x9e6e3f0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ApplicationLifecycleComponent
// Size: 0x190 (Inherited: 0x100)
class UApplicationLifecycleComponent : public UActorComponent {
public:

	/*struct FMulticastInlineDelegate*/char ApplicationWillDeactivateDelegate[0x10]; // 0x100(0x10)
	/*struct FMulticastInlineDelegate*/char ApplicationHasReactivatedDelegate[0x10]; // 0x110(0x10)
	/*struct FMulticastInlineDelegate*/char ApplicationWillEnterBackgroundDelegate[0x10]; // 0x120(0x10)
	/*struct FMulticastInlineDelegate*/char ApplicationHasEnteredForegroundDelegate[0x10]; // 0x130(0x10)
	/*struct FMulticastInlineDelegate*/char ApplicationWillTerminateDelegate[0x10]; // 0x140(0x10)
	/*struct FMulticastInlineDelegate*/char ApplicationShouldUnloadResourcesDelegate[0x10]; // 0x150(0x10)
	/*struct FMulticastInlineDelegate*/char ApplicationReceivedStartupArgumentsDelegate[0x10]; // 0x160(0x10)
	/*struct FMulticastInlineDelegate*/char OnTemperatureChangeDelegate[0x10]; // 0x170(0x10)
	/*struct FMulticastInlineDelegate*/char OnLowPowerModeDelegate[0x10]; // 0x180(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InputComponent
// Size: 0x188 (Inherited: 0x100)
class UInputComponent : public UActorComponent {
public:

	char pad_100[0x70]; // 0x100(0x70)
	struct TArray<struct FCachedKeyToActionInfo> CachedKeyToActionInfo; // 0x170(0x10)
	char pad_180[0x8]; // 0x180(0x08)

	bool WasControllerKeyJustReleased(struct FKey Key); // Function Engine.InputComponent.WasControllerKeyJustReleased // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dd1900
	bool WasControllerKeyJustPressed(struct FKey Key); // Function Engine.InputComponent.WasControllerKeyJustPressed // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dd1900
	bool IsControllerKeyDown(struct FKey Key); // Function Engine.InputComponent.IsControllerKeyDown // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dd1900
	void GetTouchState(int32_t FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // Function Engine.InputComponent.GetTouchState // (Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dd1780
	struct FVector GetControllerVectorKeyState(struct FKey Key); // Function Engine.InputComponent.GetControllerVectorKeyState // (Final|Native|Private|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dd1220
	void GetControllerMouseDelta(float& DeltaX, float& DeltaY); // Function Engine.InputComponent.GetControllerMouseDelta // (Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dd1140
	float GetControllerKeyTimeDown(struct FKey Key); // Function Engine.InputComponent.GetControllerKeyTimeDown // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dd0f30
	void GetControllerAnalogStickState(enum class EControllerAnalogStick WhichStick, float& StickX, float& StickY); // Function Engine.InputComponent.GetControllerAnalogStickState // (Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dd1020
	float GetControllerAnalogKeyState(struct FKey Key); // Function Engine.InputComponent.GetControllerAnalogKeyState // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dd0f30
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PawnNoiseEmitterComponent
// Size: 0x128 (Inherited: 0x100)
class UPawnNoiseEmitterComponent : public UActorComponent {
public:

	char bAIPerceptionSystemCompatibilityMode : 1; // 0x100(0x01)
	char pad_100_1 : 7; // 0x100(0x01)
	char pad_101[0x3]; // 0x101(0x03)
	struct FVector LastRemoteNoisePosition; // 0x104(0x0c)
	float NoiseLifetime; // 0x110(0x04)
	float LastRemoteNoiseVolume; // 0x114(0x04)
	float LastRemoteNoiseTime; // 0x118(0x04)
	float LastLocalNoiseVolume; // 0x11c(0x04)
	float LastLocalNoiseTime; // 0x120(0x04)
	char pad_124[0x4]; // 0x124(0x04)

	void MakeNoise(struct AActor* NoiseMaker, float Loudness, struct FVector& NoiseLocation); // Function Engine.PawnNoiseEmitterComponent.MakeNoise // (BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e6c470
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PhysicsHandleComponent
// Size: 0x1b0 (Inherited: 0x100)
class UPhysicsHandleComponent : public UActorComponent {
public:

	struct UPrimitiveComponent* GrabbedComponent; // 0x100(0x08)
	char pad_108[0x8]; // 0x108(0x08)
	char pad_110_0 : 1; // 0x110(0x01)
	char bSoftAngularConstraint : 1; // 0x110(0x01)
	char bSoftLinearConstraint : 1; // 0x110(0x01)
	char bInterpolateTarget : 1; // 0x110(0x01)
	char pad_110_4 : 4; // 0x110(0x01)
	char pad_111[0x3]; // 0x111(0x03)
	float LinearDamping; // 0x114(0x04)
	float LinearStiffness; // 0x118(0x04)
	float AngularDamping; // 0x11c(0x04)
	float AngularStiffness; // 0x120(0x04)
	char pad_124[0x6c]; // 0x124(0x6c)
	float InterpolationSpeed; // 0x190(0x04)
	char pad_194[0x1c]; // 0x194(0x1c)

	void SetTargetRotation(struct FRotator NewRotation); // Function Engine.PhysicsHandleComponent.SetTargetRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e70a20
	void SetTargetLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation); // Function Engine.PhysicsHandleComponent.SetTargetLocationAndRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e70940
	void SetTargetLocation(struct FVector NewLocation); // Function Engine.PhysicsHandleComponent.SetTargetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e708b0
	void SetLinearStiffness(float NewLinearStiffness); // Function Engine.PhysicsHandleComponent.SetLinearStiffness // (Final|Native|Public|BlueprintCallable) // @ game+0x9e701e0
	void SetLinearDamping(float NewLinearDamping); // Function Engine.PhysicsHandleComponent.SetLinearDamping // (Final|Native|Public|BlueprintCallable) // @ game+0x9e6fea0
	void SetInterpolationSpeed(float NewInterpolationSpeed); // Function Engine.PhysicsHandleComponent.SetInterpolationSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x9e6fd60
	void SetAngularStiffness(float NewAngularStiffness); // Function Engine.PhysicsHandleComponent.SetAngularStiffness // (Final|Native|Public|BlueprintCallable) // @ game+0x9e6f2f0
	void SetAngularDamping(float NewAngularDamping); // Function Engine.PhysicsHandleComponent.SetAngularDamping // (Final|Native|Public|BlueprintCallable) // @ game+0x9e6ef80
	void ReleaseComponent(); // Function Engine.PhysicsHandleComponent.ReleaseComponent // (Native|Public|BlueprintCallable) // @ game+0x1e377d0
	void GrabComponentAtLocationWithRotation(struct UPrimitiveComponent* Component, struct FName InBoneName, struct FVector Location, struct FRotator Rotation); // Function Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e6ed10
	void GrabComponentAtLocation(struct UPrimitiveComponent* Component, struct FName InBoneName, struct FVector GrabLocation); // Function Engine.PhysicsHandleComponent.GrabComponentAtLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e6ec00
	void GrabComponent(struct UPrimitiveComponent* Component, struct FName InBoneName, struct FVector GrabLocation, bool bConstrainRotation); // Function Engine.PhysicsHandleComponent.GrabComponent // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e6eab0
	void GetTargetLocationAndRotation(struct FVector& TargetLocation, struct FRotator& TargetRotation); // Function Engine.PhysicsHandleComponent.GetTargetLocationAndRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e6e9d0
	struct UPrimitiveComponent* GetGrabbedComponent(); // Function Engine.PhysicsHandleComponent.GetGrabbedComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e6e9a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PlatformEventsComponent
// Size: 0x120 (Inherited: 0x100)
class UPlatformEventsComponent : public UActorComponent {
public:

	/*struct FMulticastInlineDelegate*/char PlatformChangedToLaptopModeDelegate[0x10]; // 0x100(0x10)
	/*struct FMulticastInlineDelegate*/char PlatformChangedToTabletModeDelegate[0x10]; // 0x110(0x10)

	bool SupportsConvertibleLaptops(); // Function Engine.PlatformEventsComponent.SupportsConvertibleLaptops // (Final|Native|Public|BlueprintCallable) // @ game+0x9e749b0
	void PlatformEventDelegate__DelegateSignature(); // DelegateFunction Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x7ed88c0
	bool IsInTabletMode(); // Function Engine.PlatformEventsComponent.IsInTabletMode // (Final|Native|Public|BlueprintCallable) // @ game+0x9e73cd0
	bool IsInLaptopMode(); // Function Engine.PlatformEventsComponent.IsInLaptopMode // (Final|Native|Public|BlueprintCallable) // @ game+0x9e73ca0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TimelineComponent
// Size: 0x1a0 (Inherited: 0x100)
class UTimelineComponent : public UActorComponent {
public:

	struct FTimeline TheTimeline; // 0x100(0x98)
	char bIgnoreTimeDilation : 1; // 0x198(0x01)
	char pad_198_1 : 7; // 0x198(0x01)
	char pad_199[0x7]; // 0x199(0x07)

	void Stop(); // Function Engine.TimelineComponent.Stop // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9ec65a0
	void SetVectorCurve(struct UCurveVector* NewVectorCurve, struct FName VectorTrackName); // Function Engine.TimelineComponent.SetVectorCurve // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9ec64e0
	void SetTimelineLengthMode(enum class ETimelineLengthMode NewLengthMode); // Function Engine.TimelineComponent.SetTimelineLengthMode // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9ec6460
	void SetTimelineLength(float NewLength); // Function Engine.TimelineComponent.SetTimelineLength // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9ec63e0
	void SetPlayRate(float NewRate); // Function Engine.TimelineComponent.SetPlayRate // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9ec6250
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate); // Function Engine.TimelineComponent.SetPlaybackPosition // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9ec62d0
	void SetNewTime(float NewTime); // Function Engine.TimelineComponent.SetNewTime // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9ec61d0
	void SetLooping(bool bNewLooping); // Function Engine.TimelineComponent.SetLooping // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9ec6140
	void SetLinearColorCurve(struct UCurveLinearColor* NewLinearColorCurve, struct FName LinearColorTrackName); // Function Engine.TimelineComponent.SetLinearColorCurve // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9ec6080
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation); // Function Engine.TimelineComponent.SetIgnoreTimeDilation // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9ec5ff0
	void SetFloatCurve(struct UCurveFloat* NewFloatCurve, struct FName FloatTrackName); // Function Engine.TimelineComponent.SetFloatCurve // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9ec5f30
	void ReverseFromEnd(); // Function Engine.TimelineComponent.ReverseFromEnd // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9ec5f10
	void Reverse(); // Function Engine.TimelineComponent.Reverse // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9ec5ef0
	void PlayFromStart(); // Function Engine.TimelineComponent.PlayFromStart // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9ec5ed0
	void Play(); // Function Engine.TimelineComponent.Play // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9ec5eb0
	void OnRep_Timeline(); // Function Engine.TimelineComponent.OnRep_Timeline // (Final|Native|Public) // @ game+0x9ec5e90
	bool IsReversing(); // Function Engine.TimelineComponent.IsReversing // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ec5e60
	bool IsPlaying(); // Function Engine.TimelineComponent.IsPlaying // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ec5e30
	bool IsLooping(); // Function Engine.TimelineComponent.IsLooping // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ec5e00
	float GetTimelineLength(); // Function Engine.TimelineComponent.GetTimelineLength // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ec5dd0
	float GetPlayRate(); // Function Engine.TimelineComponent.GetPlayRate // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ec5d00
	float GetPlaybackPosition(); // Function Engine.TimelineComponent.GetPlaybackPosition // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ec5d30
	bool GetIgnoreTimeDilation(); // Function Engine.TimelineComponent.GetIgnoreTimeDilation // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ec5cd0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.VOIPTalker
// Size: 0x138 (Inherited: 0x100)
class UVOIPTalker : public UActorComponent {
public:

	struct FVoiceSettings Settings; // 0x100(0x18)
	char pad_118[0x20]; // 0x118(0x20)

	void RegisterWithPlayerState(struct APlayerState* OwningState); // Function Engine.VOIPTalker.RegisterWithPlayerState // (Final|Native|Public|BlueprintCallable) // @ game+0x9eceab0
	float GetVoiceLevel(); // Function Engine.VOIPTalker.GetVoiceLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x9ece040
	struct UVOIPTalker* STATIC_CreateTalkerForPlayer(struct APlayerState* OwningState); // Function Engine.VOIPTalker.CreateTalkerForPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9ecdf90
	void BPOnTalkingEnd(); // Function Engine.VOIPTalker.BPOnTalkingEnd // (Native|Event|Protected|BlueprintEvent) // @ game+0x1e36270
	void BPOnTalkingBegin(struct UAudioComponent* AudioComponent); // Function Engine.VOIPTalker.BPOnTalkingBegin // (Native|Event|Protected|BlueprintEvent) // @ game+0xbd8ba0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimationSettings
// Size: 0x78 (Inherited: 0x40)
class UAnimationSettings : public UDeveloperSettings {
public:

	int32_t CompressCommandletVersion; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct TArray<struct FString> KeyEndEffectorsMatchNameArray; // 0x48(0x10)
	struct UClass* DefaultCompressionAlgorithm; // 0x58(0x08)
	enum class AnimationCompressionFormat RotationCompressionFormat; // 0x60(0x01)
	enum class AnimationCompressionFormat TranslationCompressionFormat; // 0x61(0x01)
	char pad_62[0x2]; // 0x62(0x02)
	float MaxCurveError; // 0x64(0x04)
	float AlternativeCompressionThreshold; // 0x68(0x04)
	bool ForceRecompression; // 0x6c(0x01)
	bool bOnlyCheckForMissingSkeletalMeshes; // 0x6d(0x01)
	bool bForceBelowThreshold; // 0x6e(0x01)
	bool bFirstRecompressUsingCurrentOrDefault; // 0x6f(0x01)
	bool bRaiseMaxErrorToExisting; // 0x70(0x01)
	bool bTryExhaustiveSearch; // 0x71(0x01)
	bool bEnableSegmenting; // 0x72(0x01)
	bool bEnablePerformanceLog; // 0x73(0x01)
	bool bStripAnimationDataOnDedicatedServer; // 0x74(0x01)
	bool bTickAnimationOnSkeletalMeshInit; // 0x75(0x01)
	char pad_76[0x2]; // 0x76(0x02)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AssetManagerSettings
// Size: 0x108 (Inherited: 0x40)
class UAssetManagerSettings : public UDeveloperSettings {
public:

	struct TArray<struct FPrimaryAssetTypeInfo> PrimaryAssetTypesToScan; // 0x40(0x10)
	struct TArray<struct FDirectoryPath> DirectoriesToExclude; // 0x50(0x10)
	struct TArray<struct FPrimaryAssetRulesOverride> PrimaryAssetRules; // 0x60(0x10)
	struct TArray<struct FPrimaryAssetRulesCustomOverride> CustomPrimaryAssetRules; // 0x70(0x10)
	bool bOnlyCookProductionAssets; // 0x80(0x01)
	bool bShouldManagerDetermineTypeAndName; // 0x81(0x01)
	bool bShouldGuessTypeAndNameInEditor; // 0x82(0x01)
	bool bShouldAcquireMissingChunksOnLoad; // 0x83(0x01)
	bool bShouldChunksRemoveRedundancy; // 0x84(0x01)
	char pad_85[0x3]; // 0x85(0x03)
	struct TArray<struct FAssetManagerRedirect> PrimaryAssetIdRedirects; // 0x88(0x10)
	struct TArray<struct FAssetManagerRedirect> PrimaryAssetTypeRedirects; // 0x98(0x10)
	struct TArray<struct FAssetManagerRedirect> AssetPathRedirects; // 0xa8(0x10)
	/*struct TSet<struct FName>*/char MetaDataTagsForAssetRegistry[0x50]; // 0xb8(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AudioSettings
// Size: 0x110 (Inherited: 0x40)
class UAudioSettings : public UDeveloperSettings {
public:

	struct FSoftObjectPath DefaultSoundClassName; // 0x40(0x18)
	struct FSoftObjectPath DefaultMediaSoundClassName; // 0x58(0x18)
	struct FSoftObjectPath DefaultSoundConcurrencyName; // 0x70(0x18)
	struct FSoftObjectPath DefaultBaseSoundMix; // 0x88(0x18)
	struct FSoftObjectPath VoiPSoundClass; // 0xa0(0x18)
	enum class EVoiceSampleRate VoiPSampleRate; // 0xb8(0x04)
	float VoipBufferingDelay; // 0xbc(0x04)
	float DefaultReverbSendLevel; // 0xc0(0x04)
	char bEnableLegacyReverb : 1; // 0xc4(0x01)
	char pad_C4_1 : 7; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
	int32_t MaximumConcurrentStreams; // 0xc8(0x04)
	float GlobalMinPitchScale; // 0xcc(0x04)
	float GlobalMaxPitchScale; // 0xd0(0x04)
	char pad_D4[0x4]; // 0xd4(0x04)
	struct TArray<struct FAudioQualitySettings> QualityLevels; // 0xd8(0x10)
	char bAllowPlayWhenSilent : 1; // 0xe8(0x01)
	char bDisableMasterEQ : 1; // 0xe8(0x01)
	char bAllowCenterChannel3DPanning : 1; // 0xe8(0x01)
	char pad_E8_3 : 5; // 0xe8(0x01)
	char pad_E9[0x3]; // 0xe9(0x03)
	uint32_t NumStoppingSources; // 0xec(0x04)
	enum class EPanningMethod PanningMethod; // 0xf0(0x01)
	enum class EMonoChannelUpmixMethod MonoChannelUpmixMethod; // 0xf1(0x01)
	char pad_F2[0x6]; // 0xf2(0x06)
	struct FString DialogueFilenameFormat; // 0xf8(0x10)
	char pad_108[0x8]; // 0x108(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CollisionProfile
// Size: 0x180 (Inherited: 0x40)
class UCollisionProfile : public UDeveloperSettings {
public:

	struct TArray<struct FCollisionResponseTemplate> Profiles; // 0x40(0x10)
	struct TArray<struct FCustomChannelSetup> DefaultChannelResponses; // 0x50(0x10)
	struct TArray<struct FCustomProfile> EditProfiles; // 0x60(0x10)
	struct TArray<struct FRedirector> ProfileRedirects; // 0x70(0x10)
	struct TArray<struct FRedirector> CollisionChannelRedirects; // 0x80(0x10)
	struct TArray<struct FCustomTraceMaskFilterName> TraceMaskFilterReNames; // 0x90(0x10)
	char pad_A0[0xe0]; // 0xa0(0xe0)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.StreamingSettings
// Size: 0x90 (Inherited: 0x40)
class UStreamingSettings : public UDeveloperSettings {
public:

	char AsyncLoadingThreadEnabled : 1; // 0x40(0x01)
	char WarnIfTimeLimitExceeded : 1; // 0x40(0x01)
	char pad_40_2 : 6; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	float TimeLimitExceededMultiplier; // 0x44(0x04)
	float TimeLimitExceededMinTime; // 0x48(0x04)
	int32_t MinBulkDataSizeForAsyncLoading; // 0x4c(0x04)
	char UseBackgroundLevelStreaming : 1; // 0x50(0x01)
	char AsyncLoadingUseFullTimeLimit : 1; // 0x50(0x01)
	char pad_50_2 : 6; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	float AsyncLoadingTimeLimit; // 0x54(0x04)
	float PriorityAsyncLoadingExtraTime; // 0x58(0x04)
	float LevelStreamingActorsUpdateTimeLimit; // 0x5c(0x04)
	float PriorityLevelStreamingActorsUpdateExtraTime; // 0x60(0x04)
	int32_t LevelStreamingComponentsRegistrationGranularity; // 0x64(0x04)
	int32_t LevelStreamingRouteActorInitializationGranularity; // 0x68(0x04)
	int32_t LevelStreamingRouteActorFinalizationGranularity; // 0x6c(0x04)
	float LevelStreamingUnregisterComponentsTimeLimit; // 0x70(0x04)
	int32_t LevelStreamingComponentsUnregistrationGranularity; // 0x74(0x04)
	int32_t LevelStreamingComponentsRegistrationLimit; // 0x78(0x04)
	int32_t LevelStreamingComponentsUnregistrationLimit; // 0x7c(0x04)
	char EventDrivenLoaderEnabled : 1; // 0x80(0x01)
	char FlushStreamingOnExit : 1; // 0x80(0x01)
	char pad_80_2 : 6; // 0x80(0x01)
	char pad_81[0x3]; // 0x81(0x03)
	float RenderThreadPrimitiveSceneInfosUpdateTimeLimit; // 0x84(0x04)
	int32_t RenderThreadPrimitiveSceneInfosUpdateGranularity; // 0x88(0x04)
	bool bLogStreamingGranularity; // 0x8c(0x01)
	char pad_8D[0x3]; // 0x8d(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.GarbageCollectionSettings
// Size: 0x60 (Inherited: 0x40)
class UGarbageCollectionSettings : public UDeveloperSettings {
public:

	float TimeBetweenPurgingPendingKillObjects; // 0x40(0x04)
	char FlushStreamingOnGC : 1; // 0x44(0x01)
	char AllowParallelGC : 1; // 0x44(0x01)
	char IncrementalBeginDestroyEnabled : 1; // 0x44(0x01)
	char MultithreadedDestructionEnabled : 1; // 0x44(0x01)
	char CreateGCClusters : 1; // 0x44(0x01)
	char ActorClusteringEnabled : 1; // 0x44(0x01)
	char BlueprintClusteringEnabled : 1; // 0x44(0x01)
	char UseDisregardForGCOnDedicatedServers : 1; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	int32_t MinGCClusterSize; // 0x48(0x04)
	int32_t NumRetriesBeforeForcingGC; // 0x4c(0x04)
	int32_t MaxObjectsNotConsideredByGC; // 0x50(0x04)
	int32_t SizeOfPermanentObjectPool; // 0x54(0x04)
	int32_t MaxObjectsInGame; // 0x58(0x04)
	int32_t MaxObjectsInEditor; // 0x5c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DebugCameraControllerSettings
// Size: 0x50 (Inherited: 0x40)
class UDebugCameraControllerSettings : public UDeveloperSettings {
public:

	struct TArray<struct FDebugCameraControllerSettingsViewModeIndex> CycleViewModes; // 0x40(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DetActorWhiteList
// Size: 0xa8 (Inherited: 0x40)
class UDetActorWhiteList : public UDeveloperSettings {
public:

	struct TArray<struct FString> ClassList; // 0x40(0x10)
	char pad_50[0x58]; // 0x50(0x58)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MeshGroupSettingsConfig
// Size: 0x50 (Inherited: 0x40)
class UMeshGroupSettingsConfig : public UDeveloperSettings {
public:

	struct TArray<struct FMeshGroupSettings> MeshGroupSettings; // 0x40(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MeshSimplificationSettings
// Size: 0x48 (Inherited: 0x40)
class UMeshSimplificationSettings : public UDeveloperSettings {
public:

	struct FName MeshReductionModuleName; // 0x40(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.NetworkSettings
// Size: 0x60 (Inherited: 0x40)
class UNetworkSettings : public UDeveloperSettings {
public:

	char bVerifyPeer : 1; // 0x40(0x01)
	char bEnableMultiplayerWorldOriginRebasing : 1; // 0x40(0x01)
	char pad_40_2 : 6; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	int32_t MaxRepArraySize; // 0x44(0x04)
	int32_t MaxRepArrayMemory; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct TArray<struct FNetworkEmulationProfileDescription> NetworkEmulationProfiles; // 0x50(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PhysicsSettings
// Size: 0x150 (Inherited: 0x40)
class UPhysicsSettings : public UDeveloperSettings {
public:

	float DefaultGravityZ; // 0x40(0x04)
	float DefaultTerminalVelocity; // 0x44(0x04)
	float DefaultFluidFriction; // 0x48(0x04)
	int32_t SimulateScratchMemorySize; // 0x4c(0x04)
	int32_t RagdollAggregateThreshold; // 0x50(0x04)
	float TriangleMeshTriangleMinAreaThreshold; // 0x54(0x04)
	bool bEnableShapeSharing; // 0x58(0x01)
	bool bEnablePCM; // 0x59(0x01)
	bool bEnableStabilization; // 0x5a(0x01)
	bool bWarnMissingLocks; // 0x5b(0x01)
	bool bEnable2DPhysics; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
	struct FRigidBodyErrorCorrection PhysicErrorCorrection; // 0x60(0x34)
	enum class ESettingsLockedAxis LockedAxis; // 0x94(0x01)
	enum class ESettingsDOF DefaultDegreesOfFreedom; // 0x95(0x01)
	char pad_96[0x2]; // 0x96(0x02)
	float BounceThresholdVelocity; // 0x98(0x04)
	enum class EFrictionCombineMode FrictionCombineMode; // 0x9c(0x01)
	enum class EFrictionCombineMode RestitutionCombineMode; // 0x9d(0x01)
	char pad_9E[0x2]; // 0x9e(0x02)
	float MaxAngularVelocity; // 0xa0(0x04)
	float MaxDepenetrationVelocity; // 0xa4(0x04)
	float ContactOffsetMultiplier; // 0xa8(0x04)
	float MinContactOffset; // 0xac(0x04)
	float MaxContactOffset; // 0xb0(0x04)
	bool bSimulateSkeletalMeshOnDedicatedServer; // 0xb4(0x01)
	enum class ECollisionTraceFlag DefaultShapeComplexity; // 0xb5(0x01)
	bool bDefaultHasComplexCollision; // 0xb6(0x01)
	bool bSuppressFaceRemapTable; // 0xb7(0x01)
	bool bSupportUVFromHitResults; // 0xb8(0x01)
	bool bDisableActiveActors; // 0xb9(0x01)
	bool bDisableKinematicStaticPairs; // 0xba(0x01)
	bool bDisableKinematicKinematicPairs; // 0xbb(0x01)
	bool bEnableOverlapUsingTrigger; // 0xbc(0x01)
	bool bGenerateOverlapEventsBeforeBeginPlay; // 0xbd(0x01)
	bool bDefaultAggregateSelfCollision; // 0xbe(0x01)
	bool bDefaultCreatePhysicsMeshes; // 0xbf(0x01)
	float NavWalkingUpdateCD; // 0xc0(0x04)
	bool bDisableCCD; // 0xc4(0x01)
	bool bEnableEnhancedDeterminism; // 0xc5(0x01)
	char pad_C6[0x2]; // 0xc6(0x02)
	float AnimPhysicsMinDeltaTime; // 0xc8(0x04)
	bool bSimulateAnimPhysicsAfterReset; // 0xcc(0x01)
	char pad_CD[0x3]; // 0xcd(0x03)
	float MaxPhysicsDeltaTime; // 0xd0(0x04)
	bool bSubstepping; // 0xd4(0x01)
	bool bSubsteppingAsync; // 0xd5(0x01)
	char pad_D6[0x2]; // 0xd6(0x02)
	float MaxSubstepDeltaTime; // 0xd8(0x04)
	int32_t MaxSubsteps; // 0xdc(0x04)
	float SyncSceneSmoothingFactor; // 0xe0(0x04)
	float InitialAverageFrameRate; // 0xe4(0x04)
	int32_t PhysXTreeRebuildRate; // 0xe8(0x04)
	int32_t PhysXFetchResultsRate; // 0xec(0x04)
	int32_t TriggerSceneTickDivider; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
	struct TArray<struct FPhysicalSurfaceName> PhysicalSurfaces; // 0xf8(0x10)
	struct FBroadphaseSettings DefaultBroadphaseSettings; // 0x108(0x40)
	struct FChaosPhysicsSettings ChaosSettings; // 0x148(0x03)
	char pad_14B[0x5]; // 0x14b(0x05)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ProxyLODMeshSimplificationSettings
// Size: 0x48 (Inherited: 0x40)
class UProxyLODMeshSimplificationSettings : public UDeveloperSettings {
public:

	struct FName ProxyLODMeshReductionModuleName; // 0x40(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.RendererSettings
// Size: 0x138 (Inherited: 0x40)
class URendererSettings : public UDeveloperSettings {
public:

	char bMobileHDR : 1; // 0x40(0x01)
	char pad_40_1 : 7; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	uint32_t MobileShadingPath; // 0x44(0x04)
	char bMobileEnableSubpass : 1; // 0x48(0x01)
	char bMobileBlendReflection : 1; // 0x48(0x01)
	char bMobileParallaxBlendCubemap : 1; // 0x48(0x01)
	char pad_48_3 : 5; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	uint32_t bMobileBlendCubemapMode; // 0x4c(0x04)
	uint32_t MobileSceneCaptureRTSize; // 0x50(0x04)
	char bMobileDisableVertexFog : 1; // 0x54(0x01)
	char pad_54_1 : 7; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
	int32_t MaxMobileCascades; // 0x58(0x04)
	enum class EMobileMSAASampleCount MobileMSAASampleCount; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
	char bMobileUseLegacyShadingModel : 1; // 0x60(0x01)
	char bMobileUseHWsRGBEncoding : 1; // 0x60(0x01)
	char bMobileAllowDitheredLODTransition : 1; // 0x60(0x01)
	char bMobileAllowSoftwareOcclusionCulling : 1; // 0x60(0x01)
	char bMobileVirtualTextures : 1; // 0x60(0x01)
	char pad_60_5 : 3; // 0x60(0x01)
	char pad_61[0x3]; // 0x61(0x03)
	enum class EMobilePlanarReflectionMode MobilePlanarReflectionMode; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
	char bDiscardUnusedQualityLevels : 1; // 0x68(0x01)
	char bOcclusionCulling : 1; // 0x68(0x01)
	char pad_68_2 : 6; // 0x68(0x01)
	char pad_69[0x3]; // 0x69(0x03)
	float MinScreenRadiusForLights; // 0x6c(0x04)
	float MinScreenRadiusForEarlyZPass; // 0x70(0x04)
	float MinScreenRadiusForCSMdepth; // 0x74(0x04)
	char bPrecomputedVisibilityWarning : 1; // 0x78(0x01)
	char bTextureStreaming : 1; // 0x78(0x01)
	char bUseDXT5NormalMaps : 1; // 0x78(0x01)
	char bVirtualTextures : 1; // 0x78(0x01)
	char bVirtualTexturedLightmaps : 1; // 0x78(0x01)
	char pad_78_5 : 3; // 0x78(0x01)
	char pad_79[0x3]; // 0x79(0x03)
	uint32_t VirtualTextureTileSize; // 0x7c(0x04)
	uint32_t VirtualTextureTileBorderSize; // 0x80(0x04)
	uint32_t VirtualTextureFeedbackFactor; // 0x84(0x04)
	char bVirtualTextureEnableCompressZlib : 1; // 0x88(0x01)
	char bVirtualTextureEnableCompressCrunch : 1; // 0x88(0x01)
	char bClearCoatEnableSecondNormal : 1; // 0x88(0x01)
	char pad_88_3 : 5; // 0x88(0x01)
	char pad_89[0x3]; // 0x89(0x03)
	int32_t ReflectionCaptureResolution; // 0x8c(0x04)
	int32_t MobileReflectionCaptureResolution; // 0x90(0x04)
	char ReflectionEnvironmentLightmapMixBasedOnRoughness : 1; // 0x94(0x01)
	char bForwardShading : 1; // 0x94(0x01)
	char bVertexFoggingForOpaque : 1; // 0x94(0x01)
	char bAllowStaticLighting : 1; // 0x94(0x01)
	char bUseNormalMapsForStaticLighting : 1; // 0x94(0x01)
	char bGenerateMeshDistanceFields : 1; // 0x94(0x01)
	char bEightBitMeshDistanceFields : 1; // 0x94(0x01)
	char bGenerateLandscapeGIData : 1; // 0x94(0x01)
	char bCompressMeshDistanceFields : 1; // 0x95(0x01)
	char pad_95_1 : 7; // 0x95(0x01)
	char pad_96[0x2]; // 0x96(0x02)
	float TessellationAdaptivePixelsPerTriangle; // 0x98(0x04)
	char bSeparateTranslucency : 1; // 0x9c(0x01)
	char bMobileSeparateTranslucency : 1; // 0x9c(0x01)
	char pad_9C_2 : 6; // 0x9c(0x01)
	char pad_9D[0x3]; // 0x9d(0x03)
	enum class ETranslucentSortPolicy TranslucentSortPolicy; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	struct FVector TranslucentSortAxis; // 0xa4(0x0c)
	enum class ECustomDepthStencil CustomDepthStencil; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	char bCustomDepthTaaJitter : 1; // 0xb4(0x01)
	char pad_B4_1 : 7; // 0xb4(0x01)
	char pad_B5[0x3]; // 0xb5(0x03)
	enum class EAlphaChannelMode bEnableAlphaChannelInPostProcessing; // 0xb8(0x01)
	char pad_B9[0x7]; // 0xb9(0x07)
	struct FString NGXAppId; // 0xc0(0x10)
	char bDefaultFeatureBloom : 1; // 0xd0(0x01)
	char bDefaultFeatureAmbientOcclusion : 1; // 0xd0(0x01)
	char bDefaultFeatureAmbientOcclusionStaticFraction : 1; // 0xd0(0x01)
	char bDefaultFeatureAutoExposure : 1; // 0xd0(0x01)
	char pad_D0_4 : 4; // 0xd0(0x01)
	char pad_D1[0x3]; // 0xd1(0x03)
	enum class EAutoExposureMethodUI DefaultFeatureAutoExposure; // 0xd4(0x01)
	char pad_D5[0x3]; // 0xd5(0x03)
	char bExtendDefaultLuminanceRangeInAutoExposureSettings : 1; // 0xd8(0x01)
	char bUsePreExposure : 1; // 0xd8(0x01)
	char bEnablePreExposureOnlyInTheEditor : 1; // 0xd8(0x01)
	char bDefaultFeatureMotionBlur : 1; // 0xd8(0x01)
	char bDefaultFeatureLensFlare : 1; // 0xd8(0x01)
	char bTemporalUpsampling : 1; // 0xd8(0x01)
	char bSSGI : 1; // 0xd8(0x01)
	char bSSRTAO : 1; // 0xd8(0x01)
	char pad_D9[0x3]; // 0xd9(0x03)
	enum class EAntiAliasingMethod DefaultFeatureAntiAliasing; // 0xdc(0x01)
	enum class ELightUnits DefaultLightUnits; // 0xdd(0x01)
	enum class EDefaultBackBufferPixelFormat DefaultBackBufferPixelFormat; // 0xde(0x01)
	char pad_DF[0x1]; // 0xdf(0x01)
	char bRenderUnbuiltPreviewShadowsInGame : 1; // 0xe0(0x01)
	char bStencilForLODDither : 1; // 0xe0(0x01)
	char pad_E0_2 : 6; // 0xe0(0x01)
	char pad_E1[0x3]; // 0xe1(0x03)
	enum class EEarlyZPass EarlyZPass; // 0xe4(0x01)
	char pad_E5[0x3]; // 0xe5(0x03)
	char bEarlyZPassOnlyMaterialMasking : 1; // 0xe8(0x01)
	char bDBuffer : 1; // 0xe8(0x01)
	char pad_E8_2 : 6; // 0xe8(0x01)
	char pad_E9[0x3]; // 0xe9(0x03)
	enum class EClearSceneOptions ClearSceneMethod; // 0xec(0x01)
	enum class EVelocityOutputPass VelocityPass; // 0xed(0x01)
	char pad_EE[0x2]; // 0xee(0x02)
	char bSelectiveBasePassOutputs : 1; // 0xf0(0x01)
	char bDefaultParticleCutouts : 1; // 0xf0(0x01)
	char pad_F0_2 : 6; // 0xf0(0x01)
	char pad_F1[0x3]; // 0xf1(0x03)
	int32_t GPUSimulationTextureSizeX; // 0xf4(0x04)
	int32_t GPUSimulationTextureSizeY; // 0xf8(0x04)
	char bGlobalClipPlane : 1; // 0xfc(0x01)
	char pad_FC_1 : 7; // 0xfc(0x01)
	char pad_FD[0x3]; // 0xfd(0x03)
	enum class EGBufferFormat GBufferFormat; // 0x100(0x01)
	char pad_101[0x3]; // 0x101(0x03)
	char bUseGPUMorphTargets : 1; // 0x104(0x01)
	char bNvidiaAftermathEnabled : 1; // 0x104(0x01)
	char bInstancedStereo : 1; // 0x104(0x01)
	char bMultiView : 1; // 0x104(0x01)
	char bMobileMultiView : 1; // 0x104(0x01)
	char bMobileMultiViewDirect : 1; // 0x104(0x01)
	char bRoundRobinOcclusion : 1; // 0x104(0x01)
	char bODSCapture : 1; // 0x104(0x01)
	char bMeshStreaming : 1; // 0x105(0x01)
	char pad_105_1 : 7; // 0x105(0x01)
	char pad_106[0x2]; // 0x106(0x02)
	float WireframeCullThreshold; // 0x108(0x04)
	char bEnableRayTracing : 1; // 0x10c(0x01)
	char bEnableRayTracingTextureLOD : 1; // 0x10c(0x01)
	char bEnableHybridTranslucency : 1; // 0x10c(0x01)
	char bSupportStationarySkylight : 1; // 0x10c(0x01)
	char bForceUseStationaryAreaShadow : 1; // 0x10c(0x01)
	char bEnableForceUsePRT : 1; // 0x10c(0x01)
	char bSupportLowQualityLightmaps : 1; // 0x10c(0x01)
	char bSupportPointLightWholeSceneShadows : 1; // 0x10c(0x01)
	char bMobileSupportPointLightWholeSceneShadows : 1; // 0x10d(0x01)
	char bSupportAtmosphericFog : 1; // 0x10d(0x01)
	char bSupportSkyAtmosphere : 1; // 0x10d(0x01)
	char bSupportSkyAtmosphereAffectsHeightFog : 1; // 0x10d(0x01)
	char pad_10D_4 : 1; // 0x10d(0x01)
	char bMobileEnableStaticAndCSMShadowReceivers : 1; // 0x10d(0x01)
	char bMobileEnableMovableLightCSMShaderCulling : 1; // 0x10d(0x01)
	char bMobileAllowDistanceFieldShadows : 1; // 0x10d(0x01)
	char bMobileAllowMovableDirectionalLights : 1; // 0x10e(0x01)
	char bPackDeferredShader : 1; // 0x10e(0x01)
	char bPackForwardShader : 1; // 0x10e(0x01)
	char pad_10E_3 : 5; // 0x10e(0x01)
	char pad_10F[0x1]; // 0x10f(0x01)
	uint32_t MobileNumDynamicPointLights; // 0x110(0x04)
	char bMobileDynamicPointLightsUseStaticBranch : 1; // 0x114(0x01)
	char bMobileAllowMovableSpotlights : 1; // 0x114(0x01)
	char pad_114_2 : 6; // 0x114(0x01)
	char pad_115[0x3]; // 0x115(0x03)
	float SkinCacheSceneMemoryLimitInMB; // 0x118(0x04)
	char bGPUSkinLimit2BoneInfluences : 1; // 0x11c(0x01)
	char bSupportDepthOnlyIndexBuffers : 1; // 0x11c(0x01)
	char bSupportReversedIndexBuffers : 1; // 0x11c(0x01)
	char bSupportMaterialLayers : 1; // 0x11c(0x01)
	char bLPV : 1; // 0x11c(0x01)
	char bLightmapGroupingByRenderState : 1; // 0x11c(0x01)
	char bGlobalLightmapShareLOD : 1; // 0x11c(0x01)
	char bMobileCombineShadowSDF2Alpha : 1; // 0x11c(0x01)
	char bMobileCombineSkyLightAO2Alpha : 1; // 0x11d(0x01)
	char bSupportMobileTiledCullLight : 1; // 0x11d(0x01)
	char bSupportMobileTiledCullLight_DepthSlice : 1; // 0x11d(0x01)
	char bHDHQlightmapUseBC6H : 1; // 0x11d(0x01)
	char MobileUseSHDirectional : 1; // 0x11d(0x01)
	char bMobileGlobalDynamicLighting : 1; // 0x11d(0x01)
	char pad_11D_6 : 2; // 0x11d(0x01)
	char pad_11E[0x2]; // 0x11e(0x02)
	float DynamicLocalLightCullingDistance; // 0x120(0x04)
	uint32_t MobileNumDynamicShadowLights; // 0x124(0x04)
	char bEnableShaderIncrementalCompile : 1; // 0x128(0x01)
	char bPCUseSkyOcclusionTexture : 1; // 0x128(0x01)
	char ForceRenderVolumeBoundary : 1; // 0x128(0x01)
	char pad_128_3 : 5; // 0x128(0x01)
	char pad_129[0x3]; // 0x129(0x03)
	struct FColor ExteriorBoxBoundaryColor; // 0x12c(0x04)
	struct FColor InnerBoxBoundaryColor; // 0x130(0x04)
	char pad_134[0x4]; // 0x134(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.RendererOverrideSettings
// Size: 0x48 (Inherited: 0x40)
class URendererOverrideSettings : public UDeveloperSettings {
public:

	char bSupportAllShaderPermutations : 1; // 0x40(0x01)
	char bForceRecomputeTangents : 1; // 0x40(0x01)
	char pad_40_2 : 6; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SkeletalMeshSimplificationSettings
// Size: 0x48 (Inherited: 0x40)
class USkeletalMeshSimplificationSettings : public UDeveloperSettings {
public:

	struct FName SkeletalMeshReductionModuleName; // 0x40(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TextureGroupSettingsConfig
// Size: 0xb0 (Inherited: 0x40)
class UTextureGroupSettingsConfig : public UDeveloperSettings {
public:

	struct TMap<enum class TextureGroup, struct FTextureGroupStreamingPriorityBias> StreamingPriorityBiasSettings; // 0x40(0x50)
	struct TArray<struct FTextureGroupSettings> TextureGroupSettings; // 0x90(0x10)
	struct TArray<struct FTextureGroupSettings> TextureArrayGroupSettings; // 0xa0(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TickTaskWhiteList
// Size: 0xa8 (Inherited: 0x40)
class UTickTaskWhiteList : public UDeveloperSettings {
public:

	struct TArray<struct FString> ServerAllowedTickClasses; // 0x40(0x10)
	char pad_50[0x58]; // 0x50(0x58)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.UserInterfaceSettings
// Size: 0x288 (Inherited: 0x40)
class UUserInterfaceSettings : public UDeveloperSettings {
public:

	enum class ERenderFocusRule RenderFocusRule; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
	struct TMap<enum class EMouseCursor, struct FHardwareCursorReference> HardwareCursors; // 0x48(0x50)
	struct TMap<enum class EMouseCursor, struct FSoftClassPath> SoftwareCursors; // 0x98(0x50)
	struct FSoftClassPath DefaultCursor; // 0xe8(0x18)
	struct FSoftClassPath TextEditBeamCursor; // 0x100(0x18)
	struct FSoftClassPath CrosshairsCursor; // 0x118(0x18)
	struct FSoftClassPath HandCursor; // 0x130(0x18)
	struct FSoftClassPath GrabHandCursor; // 0x148(0x18)
	struct FSoftClassPath GrabHandClosedCursor; // 0x160(0x18)
	struct FSoftClassPath SlashedCircleCursor; // 0x178(0x18)
	float ApplicationScale; // 0x190(0x04)
	enum class EUIScalingRule UIScaleRule; // 0x194(0x01)
	char pad_195[0x3]; // 0x195(0x03)
	struct FSoftClassPath CustomScalingRuleClass; // 0x198(0x18)
	struct FRuntimeFloatCurve UIScaleCurve; // 0x1b0(0xa0)
	bool bAllowHighDPIInGameMode; // 0x250(0x01)
	bool bLoadWidgetsOnDedicatedServer; // 0x251(0x01)
	char pad_252[0x6]; // 0x252(0x06)
	struct TArray<struct UObject*> CursorClasses; // 0x258(0x10)
	struct UClass* CustomScalingRuleClassInstance; // 0x268(0x08)
	struct UDPICustomScalingRule* CustomScalingRule; // 0x270(0x08)
	char pad_278[0x10]; // 0x278(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Blueprint
// Size: 0xa8 (Inherited: 0x58)
class UBlueprint : public UBlueprintCore {
public:

	struct UClass* ParentClass; // 0x58(0x08)
	enum class EBlueprintType BlueprintType; // 0x60(0x01)
	char bRecompileOnLoad : 1; // 0x61(0x01)
	char bHasBeenRegenerated : 1; // 0x61(0x01)
	char bIsRegeneratingOnLoad : 1; // 0x61(0x01)
	char pad_61_3 : 5; // 0x61(0x01)
	char pad_62[0x2]; // 0x62(0x02)
	int32_t BlueprintSystemVersion; // 0x64(0x04)
	/*struct USimpleConstructionScript**/char SimpleConstructionScript[0x8]; // 0x68(0x08)
	struct TArray<struct UActorComponent*> ComponentTemplates; // 0x70(0x10)
	struct TArray<struct UTimelineTemplate*> Timelines; // 0x80(0x10)
	struct TArray<struct FBPComponentClassOverride> ComponentClassOverrides; // 0x90(0x10)
	struct UInheritableComponentHandler* InheritableComponentHandler; // 0xa0(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimBlueprintGeneratedClass
// Size: 0x580 (Inherited: 0x370)
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass {
public:

	char pad_370[0x8]; // 0x370(0x08)
	struct TArray<struct FBakedAnimationStateMachine> BakedStateMachines; // 0x378(0x10)
	struct USkeleton* TargetSkeleton; // 0x388(0x08)
	struct TArray<struct FAnimNotifyEvent> AnimNotifies; // 0x390(0x10)
	struct TMap<struct FName, struct FCachedPoseIndices> OrderedSavedPoseIndicesMap; // 0x3a0(0x50)
	char pad_3F0[0xd0]; // 0x3f0(0xd0)
	struct TArray<struct FName> SyncGroupNames; // 0x4c0(0x10)
	struct TArray<struct FExposedValueHandler> EvaluateGraphExposedInputs; // 0x4d0(0x10)
	struct TMap<struct FName, struct FGraphAssetPlayerInformation> GraphAssetPlayerInformation; // 0x4e0(0x50)
	struct TMap<struct FName, struct FAnimGraphBlendOptions> GraphBlendOptions; // 0x530(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AsyncActionHandleSaveGame
// Size: 0x70 (Inherited: 0x38)
class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase {
public:

	/*struct FMulticastInlineDelegate*/char Completed[0x10]; // 0x38(0x10)
	char pad_48[0x20]; // 0x48(0x20)
	struct USaveGame* SaveGameObject; // 0x68(0x08)

	struct UAsyncActionHandleSaveGame* STATIC_AsyncSaveGameToSlot(struct UObject* WorldContextObject, struct USaveGame* SaveGameObject, struct FString SlotName, int32_t UserIndex); // Function Engine.AsyncActionHandleSaveGame.AsyncSaveGameToSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9d74cb0
	struct UAsyncActionHandleSaveGame* STATIC_AsyncLoadGameFromSlot(struct UObject* WorldContextObject, struct FString SlotName, int32_t UserIndex); // Function Engine.AsyncActionHandleSaveGame.AsyncLoadGameFromSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9d74b70
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AsyncActionLoadPrimaryAssetBase
// Size: 0x80 (Inherited: 0x38)
class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase {
public:

	char pad_38[0x48]; // 0x38(0x48)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Texture
// Size: 0x140 (Inherited: 0x48)
class UTexture : public UStreamableRenderAsset {
public:

	char pad_48[0x8]; // 0x48(0x08)
	struct FGuid LightingGuid; // 0x50(0x10)
	int32_t LODBias; // 0x60(0x04)
	enum class TextureCompressionSettings CompressionSettings; // 0x64(0x01)
	enum class TextureFilter Filter; // 0x65(0x01)
	enum class ETextureMipLoadOptions MipLoadOptions; // 0x66(0x01)
	enum class TextureGroup LODGroup; // 0x67(0x01)
	struct TArray<struct FName> TextureTags; // 0x68(0x10)
	char SRGB : 1; // 0x78(0x01)
	char bImportAsIBL : 1; // 0x78(0x01)
	char bIBLNormalization : 1; // 0x78(0x01)
	char bOutdoorReflection : 1; // 0x78(0x01)
	char bMobileResource : 1; // 0x78(0x01)
	char pad_78_5 : 3; // 0x78(0x01)
	char pad_79[0x3]; // 0x79(0x03)
	float IBLRotation; // 0x7c(0x04)
	char bSHUseCubemapping : 1; // 0x80(0x01)
	char bSHCopyUpperHalf : 1; // 0x80(0x01)
	char pad_80_2 : 6; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
	struct TMap<struct FString, struct FPlatformCustomSettings> ForcePlatformSettings; // 0x88(0x50)
	char bDisableDownscaleBeforeCompress : 1; // 0xd8(0x01)
	char pad_D8_1 : 7; // 0xd8(0x01)
	enum class ETextureDownSampleAmount DownSampleAmountForMobile; // 0xd9(0x01)
	char bNoTiling : 1; // 0xda(0x01)
	char VirtualTextureStreaming : 1; // 0xda(0x01)
	char CompressionYCoCg : 1; // 0xda(0x01)
	char bAsyncResourceReleaseHasBeenStarted : 1; // 0xda(0x01)
	char pad_DA_4 : 4; // 0xda(0x01)
	char pad_DB[0x5]; // 0xdb(0x05)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0xe0(0x10)
	char pad_F0[0x50]; // 0xf0(0x50)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.StaticMesh
// Size: 0x188 (Inherited: 0x48)
class UStaticMesh : public UStreamableRenderAsset {
public:

	char pad_48[0x20]; // 0x48(0x20)
	enum class EMaterialErrorType EPreviewStateTpye; // 0x68(0x01)
	char pad_69[0x3]; // 0x69(0x03)
	struct FPerPlatformInt MinLOD; // 0x6c(0x04)
	float CullingDistance; // 0x70(0x04)
	float CullingScreenSize; // 0x74(0x04)
	struct FName MeshGroup; // 0x78(0x08)
	bool bCastShadow; // 0x80(0x01)
	bool bThin; // 0x81(0x01)
	bool bForceUsePrtForHD; // 0x82(0x01)
	bool bForceUsePrtForMobile; // 0x83(0x01)
	float LpvBiasMultiplier; // 0x84(0x04)
	struct TArray<struct FStaticMaterial> StaticMaterials; // 0x88(0x10)
	float LightmapUVDensity; // 0x98(0x04)
	int32_t LightMapResolution; // 0x9c(0x04)
	int32_t LightMapCoordinateIndex; // 0xa0(0x04)
	float DistanceFieldSelfShadowBias; // 0xa4(0x04)
	struct UBodySetup* BodySetup; // 0xa8(0x08)
	int32_t LODForCollision; // 0xb0(0x04)
	char RenderToVTPriority; // 0xb4(0x01)
	char bGenerateMeshDistanceField : 1; // 0xb5(0x01)
	char bFarShadow : 1; // 0xb5(0x01)
	char bLODShadowBias : 1; // 0xb5(0x01)
	char pad_B5_3 : 5; // 0xb5(0x01)
	char pad_B6[0x2]; // 0xb6(0x02)
	float LODShadowBiasScale; // 0xb8(0x04)
	char bStripComplexCollisionForConsole : 1; // 0xbc(0x01)
	char bHasNavigationData : 1; // 0xbc(0x01)
	char bSupportUniformlyDistributedSampling : 1; // 0xbc(0x01)
	char bSupportRayTracing : 1; // 0xbc(0x01)
	char bCreateBodySetup : 1; // 0xbc(0x01)
	char bIndexBufferAllowCPUAccess : 1; // 0xbc(0x01)
	char bIsBuiltAtRuntime : 1; // 0xbc(0x01)
	char pad_BC_7 : 1; // 0xbc(0x01)
	char bAllowCPUAccess : 1; // 0xbd(0x01)
	char bSupportGpuUniformlyDistributedSampling : 1; // 0xbd(0x01)
	char pad_BD_2 : 6; // 0xbd(0x01)
	char pad_BE[0x22]; // 0xbe(0x22)
	struct TArray<struct UStaticMeshSocket*> Sockets; // 0xe0(0x10)
	char pad_F0[0x10]; // 0xf0(0x10)
	struct FVector PositiveBoundsExtension; // 0x100(0x0c)
	struct FVector NegativeBoundsExtension; // 0x10c(0x0c)
	struct FBoxSphereBounds ExtendedBounds; // 0x118(0x1c)
	int32_t ElementToIgnoreForTexFactor; // 0x134(0x04)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x138(0x10)
	char pad_148[0x8]; // 0x148(0x08)
	struct UObject* EditableMesh; // 0x150(0x08)
	struct TArray<struct UPhysicalMaterial*> ComplexCollisionMaterials; // 0x158(0x10)
	struct TArray<struct UPhysicalMaterial*> ComplexCollisionMaterials_PC; // 0x168(0x10)
	bool bAffectDistanceFieldShadowing; // 0x178(0x01)
	char pad_179[0x7]; // 0x179(0x07)
	struct UNavCollisionBase* NavCollision; // 0x180(0x08)

	void SetStaticMaterials(struct TArray<struct FStaticMaterial>& InStaticMaterials); // Function Engine.StaticMesh.SetStaticMaterials // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9ebc340
	void RemoveSocket(struct UStaticMeshSocket* Socket); // Function Engine.StaticMesh.RemoveSocket // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9ebb390
	struct TArray<struct FStaticMaterial> GetStaticMaterials(); // Function Engine.StaticMesh.GetStaticMaterials // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebb2b0
	int32_t GetNumSections(int32_t inLOD); // Function Engine.StaticMesh.GetNumSections // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebb0b0
	int32_t GetNumLODs(); // Function Engine.StaticMesh.GetNumLODs // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebb080
	void GetMinimumLODForPlatforms(struct TMap<struct FName, int32_t>& PlatformMinimumLODs); // Function Engine.StaticMesh.GetMinimumLODForPlatforms // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebaf90
	int32_t GetMinimumLODForPlatform(struct FName& PlatformName); // Function Engine.StaticMesh.GetMinimumLODForPlatform // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebaf10
	int32_t GetMaterialIndex(struct FName MaterialSlotName); // Function Engine.StaticMesh.GetMaterialIndex // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebae80
	struct UMaterialInterface* GetMaterial(int32_t MaterialIndex); // Function Engine.StaticMesh.GetMaterial // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebadf0
	struct FBoxSphereBounds GetBounds(); // Function Engine.StaticMesh.GetBounds // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebac40
	struct FBox GetBoundingBox(); // Function Engine.StaticMesh.GetBoundingBox // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebabf0
	struct UStaticMeshSocket* FindSocket(struct FName InSocketName); // Function Engine.StaticMesh.FindSocket // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebab00
	struct UStaticMeshDescription* STATIC_CreateStaticMeshDescription(struct UObject* Outer); // Function Engine.StaticMesh.CreateStaticMeshDescription // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x9ebaa80
	void BuildFromStaticMeshDescriptions(struct TArray<struct UStaticMeshDescription*>& StaticMeshDescriptions); // Function Engine.StaticMesh.BuildFromStaticMeshDescriptions // (Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9eba9b0
	void AddSocket(struct UStaticMeshSocket* Socket); // Function Engine.StaticMesh.AddSocket // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9eba930
	struct FName AddMaterial(struct UMaterialInterface* Material); // Function Engine.StaticMesh.AddMaterial // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9eba8a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SkeletalMesh
// Size: 0x3b8 (Inherited: 0x48)
class USkeletalMesh : public UStreamableRenderAsset {
public:

	char pad_48[0x20]; // 0x48(0x20)
	struct USkeleton* Skeleton; // 0x68(0x08)
	struct FBoxSphereBounds ImportedBounds; // 0x70(0x1c)
	struct FBoxSphereBounds ExtendedBounds; // 0x8c(0x1c)
	struct FVector PositiveBoundsExtension; // 0xa8(0x0c)
	struct FVector NegativeBoundsExtension; // 0xb4(0x0c)
	struct TArray<struct FSkeletalMaterial> Materials; // 0xc0(0x10)
	struct TArray<struct FBoneMirrorInfo> SkelMirrorTable; // 0xd0(0x10)
	struct TArray<struct FSkeletalMeshLODInfo> LODInfo; // 0xe0(0x10)
	char pad_F0[0x50]; // 0xf0(0x50)
	struct FPerPlatformInt MinLOD; // 0x140(0x04)
	struct FPerPlatformBool DisableBelowMinLodStripping; // 0x144(0x01)
	char pad_145[0x3]; // 0x145(0x03)
	struct FName MeshGroup; // 0x148(0x08)
	enum class EAxis SkelMirrorAxis; // 0x150(0x01)
	enum class EAxis SkelMirrorFlipAxis; // 0x151(0x01)
	char bUseFullPrecisionUVs : 1; // 0x152(0x01)
	char bUseHighPrecisionTangentBasis : 1; // 0x152(0x01)
	char bHasBeenSimplified : 1; // 0x152(0x01)
	char bHasVertexColors : 1; // 0x152(0x01)
	char pad_152_4 : 1; // 0x152(0x01)
	char bEnablePerPolyCollision : 1; // 0x152(0x01)
	char pad_152_6 : 2; // 0x152(0x01)
	char pad_153[0x5]; // 0x153(0x05)
	struct UBodySetup* BodySetup; // 0x158(0x08)
	struct UPhysicsAsset* PhysicsAsset; // 0x160(0x08)
	struct UPhysicsAsset* ShadowPhysicsAsset; // 0x168(0x08)
	struct TArray<struct UNodeMappingContainer*> NodeMappingData; // 0x170(0x10)
	float CullingDistance; // 0x180(0x04)
	float CullingScreenSize; // 0x184(0x04)
	struct TArray<struct UMorphTarget*> MorphTargets; // 0x188(0x10)
	char pad_198[0x178]; // 0x198(0x178)
	struct UClass* PostProcessAnimBlueprint; // 0x310(0x08)
	struct TArray<struct FName> AssetsTags; // 0x318(0x10)
	struct TArray<struct UClothingAssetBase*> MeshClothingAssets; // 0x328(0x10)
	struct FSkeletalMeshSamplingInfo SamplingInfo; // 0x338(0x30)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x368(0x10)
	char pad_378[0x8]; // 0x378(0x08)
	struct TArray<struct USkeletalMeshSocket*> Sockets; // 0x380(0x10)
	char pad_390[0x10]; // 0x390(0x10)
	char bSupportRayTracing : 1; // 0x3a0(0x01)
	char pad_3A0_1 : 7; // 0x3a0(0x01)
	char pad_3A1[0x7]; // 0x3a1(0x07)
	struct TArray<struct FSkinWeightProfileInfo> SkinWeightProfiles; // 0x3a8(0x10)

	void SetLODSettings(struct USkeletalMeshLODSettings* InLODSettings); // Function Engine.SkeletalMesh.SetLODSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x895130
	int32_t NumSockets(); // Function Engine.SkeletalMesh.NumSockets // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e9e860
	struct TArray<struct FString> K2_GetAllMorphTargetNames(); // Function Engine.SkeletalMesh.K2_GetAllMorphTargetNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e9e6e0
	bool IsSectionUsingCloth(int32_t InSectionIndex, bool bCheckCorrespondingSections); // Function Engine.SkeletalMesh.IsSectionUsingCloth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e9e620
	struct USkeletalMeshSocket* GetSocketByIndex(int32_t Index); // Function Engine.SkeletalMesh.GetSocketByIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e9e590
	struct UNodeMappingContainer* GetNodeMappingContainer(struct UBlueprint* SourceAsset); // Function Engine.SkeletalMesh.GetNodeMappingContainer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e9e500
	struct FBoxSphereBounds GetImportedBounds(); // Function Engine.SkeletalMesh.GetImportedBounds // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e9e4b0
	struct FBoxSphereBounds GetBounds(); // Function Engine.SkeletalMesh.GetBounds // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e9e460
	struct USkeletalMeshSocket* FindSocketInfo(struct FName InSocketName, struct FTransform& OutTransform, int32_t& OutBoneIndex, int32_t& OutIndex); // Function Engine.SkeletalMesh.FindSocketInfo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e9e290
	struct USkeletalMeshSocket* FindSocketAndIndex(struct FName InSocketName, int32_t& OutIndex); // Function Engine.SkeletalMesh.FindSocketAndIndex // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e9e1c0
	struct USkeletalMeshSocket* FindSocket(struct FName InSocketName); // Function Engine.SkeletalMesh.FindSocket // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e9e130
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimCompress
// Size: 0x48 (Inherited: 0x40)
class UAnimCompress : public UAnimBoneCompressionCodec {
public:

	char bNeedsSkeleton : 1; // 0x40(0x01)
	char pad_40_1 : 7; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	enum class AnimationCompressionFormat TranslationCompressionFormat; // 0x44(0x01)
	enum class AnimationCompressionFormat RotationCompressionFormat; // 0x45(0x01)
	enum class AnimationCompressionFormat ScaleCompressionFormat; // 0x46(0x01)
	char pad_47[0x1]; // 0x47(0x01)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimCurveCompressionCodec_CompressedRichCurve
// Size: 0x30 (Inherited: 0x30)
class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimCurveCompressionCodec_UniformIndexable
// Size: 0x30 (Inherited: 0x30)
class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimCurveCompressionCodec_UniformlySampled
// Size: 0x30 (Inherited: 0x30)
class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialInstance
// Size: 0x2c8 (Inherited: 0x90)
class UMaterialInstance : public UMaterialInterface {
public:

	struct UPhysicalMaterial* PhysMaterial; // 0x90(0x08)
	struct UMaterialInterface* Parent; // 0x98(0x08)
	char bHasStaticPermutationResource : 1; // 0xa0(0x01)
	char bOverrideSubsurfaceProfile : 1; // 0xa0(0x01)
	char pad_A0_2 : 6; // 0xa0(0x01)
	char pad_A1[0x1f]; // 0xa1(0x1f)
	struct TArray<struct FScalarParameterValue> ScalarParameterValues; // 0xc0(0x10)
	struct TArray<struct FVectorParameterValue> VectorParameterValues; // 0xd0(0x10)
	struct TArray<struct FTextureParameterValue> TextureParameterValues; // 0xe0(0x10)
	struct TArray<struct FSpriteTextureParameterValue> SpriteTextureParameterValues; // 0xf0(0x10)
	struct TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues; // 0x100(0x10)
	struct TArray<struct FFontParameterValue> FontParameterValues; // 0x110(0x10)
	struct TArray<struct FLinearColor> AtlasBatchNumericArgumentValues; // 0x120(0x10)
	struct TArray<struct FAtlasMapRegionArray> AtlasMapRegionArrayValues; // 0x130(0x10)
	struct TArray<struct FVector4> AtlasBatchIndexerLayersValues; // 0x140(0x10)
	struct TArray<struct FVector4> AtlasDimensions; // 0x150(0x10)
	struct TArray<struct FLandscapeLayerTillingsValue> LandscapeLayerTillingsArray; // 0x160(0x10)
	struct FMaterialInstanceBasePropertyOverrides BasePropertyOverrides; // 0x170(0x28)
	char pad_198[0x8]; // 0x198(0x08)
	int32_t NumResourcesLoaded; // 0x1a0(0x04)
	char pad_1A4[0x14]; // 0x1a4(0x14)
	struct TArray<struct UObject*> PermutationTextureReferences; // 0x1b8(0x10)
	struct FStaticParameterSet StaticParameters; // 0x1c8(0x40)
	char pad_208[0xc0]; // 0x208(0xc0)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Material
// Size: 0x380 (Inherited: 0x90)
class UMaterial : public UMaterialInterface {
public:

	struct UPhysicalMaterial* PhysMaterial; // 0x90(0x08)
	struct FScalarMaterialInput Metallic; // 0x98(0x0c)
	char pad_A4[0x8]; // 0xa4(0x08)
	struct FScalarMaterialInput Specular; // 0xac(0x0c)
	char pad_B8[0x8]; // 0xb8(0x08)
	struct FVectorMaterialInput Normal; // 0xc0(0x0c)
	char pad_CC[0x8]; // 0xcc(0x08)
	struct FColorMaterialInput EmissiveColor; // 0xd4(0x0c)
	char pad_E0[0x8]; // 0xe0(0x08)
	enum class EMaterialDomain MaterialDomain; // 0xe8(0x01)
	enum class EBlendMode BlendMode; // 0xe9(0x01)
	enum class EDecalBlendMode DecalBlendMode; // 0xea(0x01)
	enum class EMaterialCategory MaterialCategory; // 0xeb(0x01)
	enum class EMaterialDecalResponse MaterialDecalResponse; // 0xec(0x01)
	enum class EMaterialShadingModel ShadingModel; // 0xed(0x01)
	enum class EMaterialLightingChannelMask LightingChannelMask; // 0xee(0x01)
	char bUsingFullCameraVector : 1; // 0xef(0x01)
	char bUsingFullWorldNormal : 1; // 0xef(0x01)
	char bUsingFullParticelRelativeTime : 1; // 0xef(0x01)
	char bCastDynamicShadowAsMasked : 1; // 0xef(0x01)
	char bAllowAsMaskedInEarlyPass : 1; // 0xef(0x01)
	char pad_EF_5 : 3; // 0xef(0x01)
	bool UseCustomShadingSettings; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
	struct FString CustomShadingSettings; // 0xf8(0x10)
	struct FMaterialShadingModelField ShadingModels; // 0x108(0x02)
	char pad_10A[0x2]; // 0x10a(0x02)
	uint32_t MaterialDebugModeColorType; // 0x10c(0x04)
	float OpacityMaskClipValue; // 0x110(0x04)
	float SoftDepthOffsetValue; // 0x114(0x04)
	char bMobileMaskPreZRender : 1; // 0x118(0x01)
	char bEnableFoliageBillboardBatching : 1; // 0x118(0x01)
	char bIsBatchedFoliageBillboard : 1; // 0x118(0x01)
	char bIsSimpleEFXLit : 1; // 0x118(0x01)
	char pad_118_4 : 4; // 0x118(0x01)
	char pad_119[0x3]; // 0x119(0x03)
	int32_t SimpleEFXLitSubShadingModels; // 0x11c(0x04)
	char bIsDisableWritingToSceneDepthAux : 1; // 0x120(0x01)
	char bEnableCustomVertexPosition : 1; // 0x120(0x01)
	char bNeedDrawcallBarrier : 1; // 0x120(0x01)
	char bAddEffectPass : 1; // 0x120(0x01)
	char bTranslucentDrawDepth : 1; // 0x120(0x01)
	char pad_120_5 : 3; // 0x120(0x01)
	char pad_121[0x3]; // 0x121(0x03)
	char bUseForDynamicFallback : 1; // 0x124(0x01)
	char pad_124_1 : 7; // 0x124(0x01)
	char pad_125[0x3]; // 0x125(0x03)
	uint32_t bHairBlendRender; // 0x128(0x04)
	char bMobileEnableAlphaWriteMask : 1; // 0x12c(0x01)
	char pad_12C_1 : 7; // 0x12c(0x01)
	char pad_12D[0x3]; // 0x12d(0x03)
	char bMobileInstanceLocalTransformIdentity : 1; // 0x130(0x01)
	char bMobileInstanceUniformScale : 1; // 0x130(0x01)
	char bMobileInstanceNoNeedPerInstanceFade : 1; // 0x130(0x01)
	char bMobileCDLODLocalTransformIdentityRotation : 1; // 0x130(0x01)
	char bMobileForceToCalculateCSM : 1; // 0x130(0x01)
	char bMobileEnableOptPosComputeVSInterp : 1; // 0x130(0x01)
	char bMobileEnableSkySHComputeVSInterp : 1; // 0x130(0x01)
	char SlateUIVSInterpolatePS : 1; // 0x130(0x01)
	char bMobileSupportDynamicVertexFog : 1; // 0x131(0x01)
	char bMobileSupportDynamicNearCSMShadow : 1; // 0x131(0x01)
	char bUseForSlatePreDepth : 1; // 0x131(0x01)
	char bUseForFullScreenQuadMesh : 1; // 0x131(0x01)
	char bUseFragmentFog : 1; // 0x131(0x01)
	char bHasCompatibilityVersion : 1; // 0x131(0x01)
	char pad_131_6 : 2; // 0x131(0x01)
	char pad_132[0x2]; // 0x132(0x02)
	char bMobileCustomDistortion : 1; // 0x134(0x01)
	char bTranslucencyRenderLast : 1; // 0x134(0x01)
	char bTranslucencyRenderFullPercentageLast : 1; // 0x134(0x01)
	char pad_134_3 : 5; // 0x134(0x01)
	char pad_135[0x3]; // 0x135(0x03)
	char bMobileAllowCasterShadow : 1; // 0x138(0x01)
	char bIsScreenEffectMaterial : 1; // 0x138(0x01)
	char bIsFontMaterial : 1; // 0x138(0x01)
	char bUsedWith3DUI : 1; // 0x138(0x01)
	char bUsedWithLightMap : 1; // 0x138(0x01)
	char bIsNeedExtraBone : 1; // 0x138(0x01)
	char bForceNeedLocalVertexFactory : 1; // 0x138(0x01)
	char pad_138_7 : 1; // 0x138(0x01)
	char pad_139[0x3]; // 0x139(0x03)
	char bMobileSeperateFlashLight : 1; // 0x13c(0x01)
	char pad_13C_1 : 7; // 0x13c(0x01)
	char pad_13D[0x3]; // 0x13d(0x03)
	char bDrawTile : 1; // 0x140(0x01)
	char bPreZDepthNoColorWrite : 1; // 0x140(0x01)
	char pad_140_2 : 6; // 0x140(0x01)
	char pad_141[0x3]; // 0x141(0x03)
	char bMaterialOpaqueRenderLast : 1; // 0x144(0x01)
	char bDisableShadowPassDitheredTransition : 1; // 0x144(0x01)
	char pad_144_2 : 6; // 0x144(0x01)
	char pad_145[0x3]; // 0x145(0x03)
	char bTranslucencyWriteCustomData : 1; // 0x148(0x01)
	char bSupportDynamicSwitchNoVelocity : 1; // 0x148(0x01)
	char bMaterialDisableDepthWrite : 1; // 0x148(0x01)
	char bMaterialEnableStencilWrite : 1; // 0x148(0x01)
	char bMaterialDisableColorWrite : 1; // 0x148(0x01)
	char pad_148_5 : 3; // 0x148(0x01)
	char pad_149[0x3]; // 0x149(0x03)
	enum class EMaterialStencilOpType MaterialStencilOpType; // 0x14c(0x01)
	char pad_14D[0x3]; // 0x14d(0x03)
	uint32_t MaterialStencilRefValue; // 0x150(0x04)
	uint32_t MaterialStencilSortOrderValue; // 0x154(0x04)
	struct FVectorMaterialInput WorldPositionOffset; // 0x158(0x0c)
	char pad_164[0x8]; // 0x164(0x08)
	struct FScalarMaterialInput Refraction; // 0x16c(0x0c)
	char pad_178[0x8]; // 0x178(0x08)
	struct FMaterialAttributesInput MaterialAttributes; // 0x180(0x10)
	char pad_190[0x8]; // 0x190(0x08)
	struct FScalarMaterialInput PixelDepthOffset; // 0x198(0x0c)
	char pad_1A4[0x8]; // 0x1a4(0x08)
	struct FShadingModelMaterialInput ShadingModelFromMaterialExpression; // 0x1ac(0x0c)
	char pad_1B8[0x8]; // 0x1b8(0x08)
	char bEnableSeparateTranslucency : 1; // 0x1c0(0x01)
	char bOutputTranslucencyDepth : 1; // 0x1c0(0x01)
	char bEnableResponsiveAA : 1; // 0x1c0(0x01)
	char bScreenSpaceReflections : 1; // 0x1c0(0x01)
	char bReflectionCaustics : 1; // 0x1c0(0x01)
	char bRefractionCaustics : 1; // 0x1c0(0x01)
	char pad_1C0_6 : 2; // 0x1c0(0x01)
	char pad_1C1[0x3]; // 0x1c1(0x03)
	uint32_t CausticsNormalMapResolution; // 0x1c4(0x04)
	float DispersionAmount; // 0x1c8(0x04)
	char bUseRefractionAsDispersionAmount : 1; // 0x1cc(0x01)
	char bDispersionJitter : 1; // 0x1cc(0x01)
	char bSingleLayerWaterCaustics : 1; // 0x1cc(0x01)
	char bRayTracingLightFunction : 1; // 0x1cc(0x01)
	char bContactShadows : 1; // 0x1cc(0x01)
	char TwoSided : 1; // 0x1cc(0x01)
	char UseLandscapeShadowmask : 1; // 0x1cc(0x01)
	char UseGBufferCustomDataAlphaSaveDepthOffset : 1; // 0x1cc(0x01)
	char UseLandscapeLocalHeightmap : 1; // 0x1cd(0x01)
	char bMiniWorldShadingType : 1; // 0x1cd(0x01)
	char DitheredLODTransition : 1; // 0x1cd(0x01)
	char DitherOpacityMask : 1; // 0x1cd(0x01)
	char bAllowNegativeEmissiveColor : 1; // 0x1cd(0x01)
	char pad_1CD_5 : 3; // 0x1cd(0x01)
	enum class ETranslucencyLightingMode TranslucencyLightingMode; // 0x1ce(0x01)
	char bEnableMobileSeparateTranslucency : 1; // 0x1cf(0x01)
	char pad_1CF_1 : 7; // 0x1cf(0x01)
	int32_t NumCustomizedUVs; // 0x1d0(0x04)
	float TranslucencyDirectionalLightingIntensity; // 0x1d4(0x04)
	float TranslucentShadowDensityScale; // 0x1d8(0x04)
	float TranslucentSelfShadowDensityScale; // 0x1dc(0x04)
	float TranslucentSelfShadowSecondDensityScale; // 0x1e0(0x04)
	float TranslucentSelfShadowSecondOpacity; // 0x1e4(0x04)
	float TranslucentBackscatteringExponent; // 0x1e8(0x04)
	struct FLinearColor TranslucentMultipleScatteringExtinction; // 0x1ec(0x10)
	float TranslucentShadowStartOffset; // 0x1fc(0x04)
	char bDisableDepthTest : 1; // 0x200(0x01)
	char bWriteOnlyAlpha : 1; // 0x200(0x01)
	char bGenerateSphericalParticleNormals : 1; // 0x200(0x01)
	char bTangentSpaceNormal : 1; // 0x200(0x01)
	char bUseEmissiveForDynamicAreaLighting : 1; // 0x200(0x01)
	char bBlockGI : 1; // 0x200(0x01)
	char bUsedAsSpecialEngineMaterial : 1; // 0x200(0x01)
	char bUsedWithSkeletalMesh : 1; // 0x200(0x01)
	char bUsedWithEditorCompositing : 1; // 0x201(0x01)
	char bUsedWithParticleSprites : 1; // 0x201(0x01)
	char bUsedWithBeamTrails : 1; // 0x201(0x01)
	char bUsedWithMeshParticles : 1; // 0x201(0x01)
	char pad_201_4 : 4; // 0x201(0x01)
	char pad_202[0x2]; // 0x202(0x02)
	char bUsedWithMobileDynamicInstancedStaticMeshes : 1; // 0x204(0x01)
	char bUsedWithMatIDLandscape : 1; // 0x204(0x01)
	char pad_204_2 : 6; // 0x204(0x01)
	char pad_205[0x3]; // 0x205(0x03)
	char bUsedWithNiagaraSprites : 1; // 0x208(0x01)
	char bUsedWithNiagaraRibbons : 1; // 0x208(0x01)
	char bUsedWithNiagaraMeshParticles : 1; // 0x208(0x01)
	char bUsedWithGeometryCache : 1; // 0x208(0x01)
	char bUsedWithStaticLighting : 1; // 0x208(0x01)
	char bUsedWithMorphTargets : 1; // 0x208(0x01)
	char bUsedWithSplineMeshes : 1; // 0x208(0x01)
	char bUsedWithInstancedStaticMeshes : 1; // 0x208(0x01)
	char bUsedWithGeometryCollections : 1; // 0x209(0x01)
	char bUsesDistortion : 1; // 0x209(0x01)
	char bUsedWithClothing : 1; // 0x209(0x01)
	char pad_209_3 : 5; // 0x209(0x01)
	char pad_20A[0x2]; // 0x20a(0x02)
	char bUsedWithWater : 1; // 0x20c(0x01)
	char bUsedWithWaterCaustics : 1; // 0x20c(0x01)
	char bUsedWithHairStrands : 1; // 0x20c(0x01)
	char pad_20C_3 : 5; // 0x20c(0x01)
	char pad_20D[0x3]; // 0x20d(0x03)
	char bUsedWithUI : 1; // 0x210(0x01)
	char bAutomaticallySetUsageInEditor : 1; // 0x210(0x01)
	char pad_210_2 : 6; // 0x210(0x01)
	char pad_211[0x3]; // 0x211(0x03)
	char bDisableManualVertexFetch : 1; // 0x214(0x01)
	char pad_214_1 : 7; // 0x214(0x01)
	char pad_215[0x3]; // 0x215(0x03)
	char bFullyRough : 1; // 0x218(0x01)
	char bUseFullPrecision : 1; // 0x218(0x01)
	char bDisableCSEShaderCompile : 1; // 0x218(0x01)
	char bUseLightmapDirectionality : 1; // 0x218(0x01)
	char bUseAlphaToCoverage : 1; // 0x218(0x01)
	char bUseHQForwardReflections : 1; // 0x218(0x01)
	char bUsingBlendCubemapReflections : 1; // 0x218(0x01)
	char bUsingParaboloidBlendCubemaps : 1; // 0x218(0x01)
	char bUsingOctahedralBlendCubemaps : 1; // 0x219(0x01)
	char bUsePlanarForwardReflections : 1; // 0x219(0x01)
	char bUseMobilePPR : 1; // 0x219(0x01)
	char bReceiveLocalLight : 1; // 0x219(0x01)
	char bForceFlattenGI : 1; // 0x219(0x01)
	char bNormalCurvatureToRoughness : 1; // 0x219(0x01)
	char pad_219_6 : 2; // 0x219(0x01)
	enum class EMaterialTessellationMode D3D11TessellationMode; // 0x21a(0x01)
	char bEnableCrackFreeDisplacement : 1; // 0x21b(0x01)
	char bEnableAdaptiveTessellation : 1; // 0x21b(0x01)
	char AllowTranslucentCustomDepthWrites : 1; // 0x21b(0x01)
	char Wireframe : 1; // 0x21b(0x01)
	char pad_21B_4 : 4; // 0x21b(0x01)
	enum class EMaterialShadingRate ShadingRate; // 0x21c(0x01)
	char bOutputsVelocity : 1; // 0x21d(0x01)
	char pad_21D_1 : 7; // 0x21d(0x01)
	char pad_21E[0x2]; // 0x21e(0x02)
	char bMaterialDeprecated : 1; // 0x220(0x01)
	char pad_220_1 : 7; // 0x220(0x01)
	char pad_221[0x3]; // 0x221(0x03)
	char bRefreshWhenFastTrans : 1; // 0x224(0x01)
	char pad_224_1 : 7; // 0x224(0x01)
	enum class EMaterialVertexColorBlendWeightChannels VertexColorBlendWeightChannels; // 0x225(0x01)
	char pad_226[0x2]; // 0x226(0x02)
	struct TArray<struct UMaterialExpression*> Expressions; // 0x228(0x10)
	struct TArray<struct FMaterialFunctionInfo> MaterialFunctionInfos; // 0x238(0x10)
	struct TArray<struct FMaterialParameterCollectionInfo> MaterialParameterCollectionInfos; // 0x248(0x10)
	char bCanMaskedBeAssumedOpaque : 1; // 0x258(0x01)
	char bIsMasked : 1; // 0x258(0x01)
	char bIsPreviewMaterial : 1; // 0x258(0x01)
	char bIsFunctionPreviewMaterial : 1; // 0x258(0x01)
	char bUseMaterialAttributes : 1; // 0x258(0x01)
	char bCastRayTracedShadows : 1; // 0x258(0x01)
	char bUseTranslucencyVertexFog : 1; // 0x258(0x01)
	char pad_258_7 : 1; // 0x258(0x01)
	char pad_259[0x3]; // 0x259(0x03)
	float TranslucentFogDensity; // 0x25c(0x04)
	char bRayTracedTranslucencyAbsorption : 1; // 0x260(0x01)
	char bIsSky : 1; // 0x260(0x01)
	char bComputeFogPerPixel : 1; // 0x260(0x01)
	char bOutputTranslucentVelocity : 1; // 0x260(0x01)
	char bAllowDevelopmentShaderCompile : 1; // 0x260(0x01)
	char bIsMaterialEditorStatsMaterial : 1; // 0x260(0x01)
	char pad_260_6 : 2; // 0x260(0x01)
	enum class EBlendableLocation BlendableLocation; // 0x261(0x01)
	char BlendableOutputAlpha : 1; // 0x262(0x01)
	char bEnableStencilTest : 1; // 0x262(0x01)
	char pad_262_2 : 6; // 0x262(0x01)
	enum class EMaterialStencilCompare StencilCompare; // 0x263(0x01)
	char StencilRefValue; // 0x264(0x01)
	char bCanBeAddToCluster : 1; // 0x265(0x01)
	char pad_265_1 : 7; // 0x265(0x01)
	enum class ERefractionMode RefractionMode; // 0x266(0x01)
	char pad_267[0x1]; // 0x267(0x01)
	int32_t BlendablePriority; // 0x268(0x04)
	uint32_t UsageFlagWarnings; // 0x26c(0x04)
	float RefractionDepthBias; // 0x270(0x04)
	struct FGuid StateId; // 0x274(0x10)
	float MaxDisplacement; // 0x284(0x04)
	char pad_288[0x10]; // 0x288(0x10)
	struct TArray<bool> CachedQualityLevelsUsed; // 0x298(0x10)
	char pad_2A8[0xc0]; // 0x2a8(0xc0)
	struct TArray<struct UObject*> ExpressionTextureReferences; // 0x368(0x10)
	char bBasic : 1; // 0x378(0x01)
	char pad_378_1 : 7; // 0x378(0x01)
	char pad_379[0x7]; // 0x379(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LevelStreamingDynamic
// Size: 0x150 (Inherited: 0x148)
class ULevelStreamingDynamic : public ULevelStreaming {
public:

	char bInitiallyLoaded : 1; // 0x148(0x01)
	char bInitiallyVisible : 1; // 0x148(0x01)
	char pad_148_2 : 6; // 0x148(0x01)
	char pad_149[0x7]; // 0x149(0x07)

	struct ULevelStreamingDynamic* STATIC_LoadLevelInstanceBySoftObjectPtr(/*struct UObject* WorldContextObject, struct TSoftObjectPtr<UWorld> Level, struct FVector Location, struct FRotator Rotation, bool& bOutSuccess*/); // Function Engine.LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e35490
	struct ULevelStreamingDynamic* STATIC_LoadLevelInstance(struct UObject* WorldContextObject, struct FString LevelName, struct FVector Location, struct FRotator Rotation, bool& bOutSuccess); // Function Engine.LevelStreamingDynamic.LoadLevelInstance // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e35260
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LevelStreamingAlwaysLoaded
// Size: 0x150 (Inherited: 0x148)
class ULevelStreamingAlwaysLoaded : public ULevelStreaming {
public:

	char pad_148[0x8]; // 0x148(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LevelStreamingPersistent
// Size: 0x150 (Inherited: 0x148)
class ULevelStreamingPersistent : public ULevelStreaming {
public:

	char pad_148[0x8]; // 0x148(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimNotifyState_TimedParticleEffect
// Size: 0x68 (Inherited: 0x38)
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState {
public:

	struct UParticleSystem* PSTemplate; // 0x38(0x08)
	struct FName SocketName; // 0x40(0x08)
	struct FVector LocationOffset; // 0x48(0x0c)
	struct FRotator RotationOffset; // 0x54(0x0c)
	bool bDestroyAtEnd; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimNotifyState_DisableRootMotion
// Size: 0x38 (Inherited: 0x38)
class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimNotifyState_Trail
// Size: 0x60 (Inherited: 0x38)
class UAnimNotifyState_Trail : public UAnimNotifyState {
public:

	struct UParticleSystem* PSTemplate; // 0x38(0x08)
	struct FName FirstSocketName; // 0x40(0x08)
	struct FName SecondSocketName; // 0x48(0x08)
	enum class ETrailWidthMode WidthScaleMode; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	struct FName WidthScaleCurve; // 0x54(0x08)
	char bRecycleSpawnedSystems : 1; // 0x5c(0x01)
	char pad_5C_1 : 7; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)

	struct UParticleSystem* OverridePSTemplate(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Engine.AnimNotifyState_Trail.OverridePSTemplate // (Event|Public|BlueprintEvent|Const) // @ game+0x7ed88c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackVectorBase
// Size: 0x98 (Inherited: 0x78)
class UInterpTrackVectorBase : public UInterpTrack {
public:

	struct FInterpCurveVector VectorTrack; // 0x78(0x18)
	float CurveTension; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackFloatBase
// Size: 0x98 (Inherited: 0x78)
class UInterpTrackFloatBase : public UInterpTrack {
public:

	struct FInterpCurveFloat FloatTrack; // 0x78(0x18)
	float CurveTension; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackBoolProp
// Size: 0x90 (Inherited: 0x78)
class UInterpTrackBoolProp : public UInterpTrack {
public:

	struct TArray<struct FBoolTrackKey> BoolTrack; // 0x78(0x10)
	struct FName PropertyName; // 0x88(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackDirector
// Size: 0x90 (Inherited: 0x78)
class UInterpTrackDirector : public UInterpTrack {
public:

	struct TArray<struct FDirectorTrackCut> CutTrack; // 0x78(0x10)
	char bSimulateCameraCutsOnClients : 1; // 0x88(0x01)
	char pad_88_1 : 7; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackEvent
// Size: 0x90 (Inherited: 0x78)
class UInterpTrackEvent : public UInterpTrack {
public:

	struct TArray<struct FEventTrackKey> EventTrack; // 0x78(0x10)
	char bFireEventsWhenForwards : 1; // 0x88(0x01)
	char bFireEventsWhenBackwards : 1; // 0x88(0x01)
	char bFireEventsWhenJumpingForwards : 1; // 0x88(0x01)
	char bUseCustomEventName : 1; // 0x88(0x01)
	char pad_88_4 : 4; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackLinearColorBase
// Size: 0x98 (Inherited: 0x78)
class UInterpTrackLinearColorBase : public UInterpTrack {
public:

	struct FInterpCurveLinearColor LinearColorTrack; // 0x78(0x18)
	float CurveTension; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackMove
// Size: 0xd0 (Inherited: 0x78)
class UInterpTrackMove : public UInterpTrack {
public:

	struct FInterpCurveVector PosTrack; // 0x78(0x18)
	struct FInterpCurveVector EulerTrack; // 0x90(0x18)
	struct FInterpLookupTrack LookupTrack; // 0xa8(0x10)
	struct FName LookAtGroupName; // 0xb8(0x08)
	float LinCurveTension; // 0xc0(0x04)
	float AngCurveTension; // 0xc4(0x04)
	char bUseQuatInterpolation : 1; // 0xc8(0x01)
	char bShowArrowAtKeys : 1; // 0xc8(0x01)
	char bDisableMovement : 1; // 0xc8(0x01)
	char bShowTranslationOnCurveEd : 1; // 0xc8(0x01)
	char bShowRotationOnCurveEd : 1; // 0xc8(0x01)
	char bHide3DTrack : 1; // 0xc8(0x01)
	char pad_C8_6 : 2; // 0xc8(0x01)
	char pad_C9[0x3]; // 0xc9(0x03)
	enum class EInterpTrackMoveRotMode RotMode; // 0xcc(0x01)
	char pad_CD[0x3]; // 0xcd(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackParticleReplay
// Size: 0x88 (Inherited: 0x78)
class UInterpTrackParticleReplay : public UInterpTrack {
public:

	struct TArray<struct FParticleReplayTrackKey> TrackKeys; // 0x78(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackToggle
// Size: 0x90 (Inherited: 0x78)
class UInterpTrackToggle : public UInterpTrack {
public:

	struct TArray<struct FToggleTrackKey> ToggleTrack; // 0x78(0x10)
	char bActivateSystemEachUpdate : 1; // 0x88(0x01)
	char bActivateWithJustAttachedFlag : 1; // 0x88(0x01)
	char bFireEventsWhenForwards : 1; // 0x88(0x01)
	char bFireEventsWhenBackwards : 1; // 0x88(0x01)
	char bFireEventsWhenJumpingForwards : 1; // 0x88(0x01)
	char pad_88_5 : 3; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackVisibility
// Size: 0x90 (Inherited: 0x78)
class UInterpTrackVisibility : public UInterpTrack {
public:

	struct TArray<struct FVisibilityTrackKey> VisibilityTrack; // 0x78(0x10)
	char bFireEventsWhenForwards : 1; // 0x88(0x01)
	char bFireEventsWhenBackwards : 1; // 0x88(0x01)
	char bFireEventsWhenJumpingForwards : 1; // 0x88(0x01)
	char pad_88_3 : 5; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackInstAnimControl
// Size: 0x38 (Inherited: 0x30)
class UInterpTrackInstAnimControl : public UInterpTrackInst {
public:

	float LastUpdatePosition; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackInstAudioMaster
// Size: 0x30 (Inherited: 0x30)
class UInterpTrackInstAudioMaster : public UInterpTrackInst {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackInstProperty
// Size: 0x58 (Inherited: 0x30)
class UInterpTrackInstProperty : public UInterpTrackInst {
public:

	/*struct TFieldPath<FNone>*/char InterpProperty[0x20]; // 0x30(0x20)
	struct UObject* PropertyOuterObjectInst; // 0x50(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackInstColorScale
// Size: 0x30 (Inherited: 0x30)
class UInterpTrackInstColorScale : public UInterpTrackInst {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackInstDirector
// Size: 0x38 (Inherited: 0x30)
class UInterpTrackInstDirector : public UInterpTrackInst {
public:

	struct AActor* OldViewTarget; // 0x30(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackInstEvent
// Size: 0x38 (Inherited: 0x30)
class UInterpTrackInstEvent : public UInterpTrackInst {
public:

	float LastUpdatePosition; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackInstFade
// Size: 0x30 (Inherited: 0x30)
class UInterpTrackInstFade : public UInterpTrackInst {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackInstFloatAnimBPParam
// Size: 0x48 (Inherited: 0x30)
class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst {
public:

	struct UAnimInstance* AnimScriptInstance; // 0x30(0x08)
	float ResetFloat; // 0x38(0x04)
	char pad_3C[0xc]; // 0x3c(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackInstFloatMaterialParam
// Size: 0x68 (Inherited: 0x30)
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst {
public:

	struct TArray<struct UMaterialInstanceDynamic*> MaterialInstances; // 0x30(0x10)
	struct TArray<float> ResetFloats; // 0x40(0x10)
	struct TArray<struct FPrimitiveMaterialRef> PrimitiveMaterialRefs; // 0x50(0x10)
	struct UInterpTrackFloatMaterialParam* InstancedTrack; // 0x60(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackInstFloatParticleParam
// Size: 0x38 (Inherited: 0x30)
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst {
public:

	float ResetFloat; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackInstMove
// Size: 0x48 (Inherited: 0x30)
class UInterpTrackInstMove : public UInterpTrackInst {
public:

	struct FVector ResetLocation; // 0x30(0x0c)
	struct FRotator ResetRotation; // 0x3c(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackInstParticleReplay
// Size: 0x38 (Inherited: 0x30)
class UInterpTrackInstParticleReplay : public UInterpTrackInst {
public:

	float LastUpdatePosition; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackInstSlomo
// Size: 0x38 (Inherited: 0x30)
class UInterpTrackInstSlomo : public UInterpTrackInst {
public:

	float OldTimeDilation; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackInstSound
// Size: 0x40 (Inherited: 0x30)
class UInterpTrackInstSound : public UInterpTrackInst {
public:

	float LastUpdatePosition; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct UAudioComponent* PlayAudioComp; // 0x38(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackInstToggle
// Size: 0x40 (Inherited: 0x30)
class UInterpTrackInstToggle : public UInterpTrackInst {
public:

	enum class ETrackToggleAction Action; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float LastUpdatePosition; // 0x34(0x04)
	char bSavedActiveState : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackInstVectorMaterialParam
// Size: 0x68 (Inherited: 0x30)
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst {
public:

	struct TArray<struct UMaterialInstanceDynamic*> MaterialInstances; // 0x30(0x10)
	struct TArray<struct FVector> ResetVectors; // 0x40(0x10)
	struct TArray<struct FPrimitiveMaterialRef> PrimitiveMaterialRefs; // 0x50(0x10)
	struct UInterpTrackVectorMaterialParam* InstancedTrack; // 0x60(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackInstVisibility
// Size: 0x38 (Inherited: 0x30)
class UInterpTrackInstVisibility : public UInterpTrackInst {
public:

	enum class EVisibilityTrackAction Action; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float LastUpdatePosition; // 0x34(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PluginCommandlet
// Size: 0xa8 (Inherited: 0x88)
class UPluginCommandlet : public UCommandlet {
public:

	char pad_88[0x20]; // 0x88(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SmokeTestCommandlet
// Size: 0x88 (Inherited: 0x88)
class USmokeTestCommandlet : public UCommandlet {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ActorChannel
// Size: 0x298 (Inherited: 0x78)
class UActorChannel : public UChannel {
public:

	struct AActor* Actor; // 0x78(0x08)
	char pad_80[0xd8]; // 0x80(0xd8)
	struct TArray<struct UObject*> CreateSubObjects; // 0x158(0x10)
	char pad_168[0x130]; // 0x168(0x130)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ControlChannel
// Size: 0x90 (Inherited: 0x78)
class UControlChannel : public UChannel {
public:

	char pad_78[0x18]; // 0x78(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.VoiceChannel
// Size: 0x88 (Inherited: 0x78)
class UVoiceChannel : public UChannel {
public:

	char pad_78[0x10]; // 0x78(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.NetConnection
// Size: 0x1d80 (Inherited: 0x50)
class UNetConnection : public UPlayer {
public:

	struct TArray<struct UChildConnection*> Children; // 0x50(0x10)
	struct UNetDriver* Driver; // 0x60(0x08)
	struct UClass* PackageMapClass; // 0x68(0x08)
	struct UPackageMap* PackageMap; // 0x70(0x08)
	struct TArray<struct UChannel*> OpenChannels; // 0x78(0x10)
	struct TArray<struct AActor*> SentTemporaries; // 0x88(0x10)
	struct AActor* ViewTarget; // 0x98(0x08)
	struct TArray<struct AActor*> FocusTargets; // 0xa0(0x10)
	struct AActor* OwningActor; // 0xb0(0x08)
	int32_t MaxPacket; // 0xb8(0x04)
	char InternalAck : 1; // 0xbc(0x01)
	char pad_BC_1 : 7; // 0xbc(0x01)
	char pad_BD[0xc3]; // 0xbd(0xc3)
	struct FUniqueNetIdRepl PlayerId; // 0x180(0x28)
	char pad_1A8[0x48]; // 0x1a8(0x48)
	double LastReceiveTime; // 0x1f0(0x08)
	char pad_1F8[0x1500]; // 0x1f8(0x1500)
	struct TArray<struct UChannel*> ChannelsToTick; // 0x16f8(0x10)
	char pad_1708[0x678]; // 0x1708(0x678)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LocalPlayer
// Size: 0x278 (Inherited: 0x50)
class ULocalPlayer : public UPlayer {
public:

	char pad_50[0x28]; // 0x50(0x28)
	struct UGameViewportClient* ViewportClient; // 0x78(0x08)
	char pad_80[0x1c]; // 0x80(0x1c)
	enum class EAspectRatioAxisConstraint AspectRatioAxisConstraint; // 0x9c(0x01)
	char pad_9D[0x3]; // 0x9d(0x03)
	struct UClass* PendingLevelPlayerControllerClass; // 0xa0(0x08)
	char bSentSplitJoin : 1; // 0xa8(0x01)
	char pad_A8_1 : 7; // 0xa8(0x01)
	char pad_A9[0x17]; // 0xa9(0x17)
	int32_t ControllerId; // 0xc0(0x04)
	char pad_C4[0x1b4]; // 0xc4(0x1b4)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DemoNetDriver
// Size: 0x1118 (Inherited: 0x7b8)
class UDemoNetDriver : public UNetDriver {
public:

	char pad_7B8[0xf8]; // 0x7b8(0xf8)
	struct TMap<struct FString, struct FRollbackNetStartupActorInfo> RollbackNetStartupActors; // 0x8b0(0x50)
	char pad_900[0x3cc]; // 0x900(0x3cc)
	float CheckpointSaveMaxMSPerFrame; // 0xccc(0x04)
	char pad_CD0[0x30]; // 0xcd0(0x30)
	struct TArray<struct FMulticastRecordOptions> MulticastRecordOptions; // 0xd00(0x10)
	bool bIsLocalReplay; // 0xd10(0x01)
	char pad_D11[0x7]; // 0xd11(0x07)
	struct TArray<struct APlayerController*> SpectatorControllers; // 0xd18(0x10)
	char pad_D28[0x3f0]; // 0xd28(0x3f0)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionTextureBase
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionTextureBase : public UMaterialExpression {
public:

	struct UObject* TextureResObject; // 0x48(0x08)
	struct UTexture* Texture; // 0x50(0x08)
	enum class EMaterialSamplerType SamplerType; // 0x58(0x01)
	char IsDefaultMeshpaintTexture : 1; // 0x59(0x01)
	char pad_59_1 : 7; // 0x59(0x01)
	char pad_5A[0x6]; // 0x5a(0x06)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionCustomOutput
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionCustomOutput : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionAbs
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionAbs : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionActorPositionWS
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionActorPositionWS : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionAdd
// Size: 0x78 (Inherited: 0x48)
class UMaterialExpressionAdd : public UMaterialExpression {
public:

	struct FExpressionInput A; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput B; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	float ConstA; // 0x70(0x04)
	float ConstB; // 0x74(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionAppendVector
// Size: 0x70 (Inherited: 0x48)
class UMaterialExpressionAppendVector : public UMaterialExpression {
public:

	struct FExpressionInput A; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput B; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionArccosine
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionArccosine : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionArccosineFast
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionArccosineFast : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionArcsine
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionArcsine : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionArcsineFast
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionArcsineFast : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionArctangent
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionArctangent : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionArctangent2
// Size: 0x70 (Inherited: 0x48)
class UMaterialExpressionArctangent2 : public UMaterialExpression {
public:

	struct FExpressionInput Y; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput X; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionArctangent2Fast
// Size: 0x70 (Inherited: 0x48)
class UMaterialExpressionArctangent2Fast : public UMaterialExpression {
public:

	struct FExpressionInput Y; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput X; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionArctangentFast
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionArctangentFast : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionAtlasBatchNumericArgument
// Size: 0x50 (Inherited: 0x48)
class UMaterialExpressionAtlasBatchNumericArgument : public UMaterialExpression {
public:

	int32_t MaterialLayerIndex; // 0x48(0x04)
	int32_t ArgumentLocalVectorIndex; // 0x4c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionAtmosphericFogColor
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression {
public:

	struct FExpressionInput WorldPosition; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionAtmosphericLightColor
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionAtmosphericLightVector
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionBlackBody
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionBlackBody : public UMaterialExpression {
public:

	struct FExpressionInput Temp; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionBlendMaterialAttributes
// Size: 0x90 (Inherited: 0x48)
class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression {
public:

	struct FMaterialAttributesInput A; // 0x48(0x10)
	char pad_58[0x8]; // 0x58(0x08)
	struct FMaterialAttributesInput B; // 0x60(0x10)
	char pad_70[0x8]; // 0x70(0x08)
	struct FExpressionInput Alpha; // 0x78(0x0c)
	char pad_84[0x8]; // 0x84(0x08)
	enum class EMaterialAttributeBlend PixelAttributeBlendType; // 0x8c(0x01)
	enum class EMaterialAttributeBlend VertexAttributeBlendType; // 0x8d(0x01)
	char pad_8E[0x2]; // 0x8e(0x02)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionBreakMaterialAttributes
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression {
public:

	struct FMaterialAttributesInput MaterialAttributes; // 0x48(0x10)
	char pad_58[0x8]; // 0x58(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionBumpOffset
// Size: 0x90 (Inherited: 0x48)
class UMaterialExpressionBumpOffset : public UMaterialExpression {
public:

	struct FExpressionInput Coordinate; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput Height; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	struct FExpressionInput HeightRatioInput; // 0x70(0x0c)
	char pad_7C[0x8]; // 0x7c(0x08)
	float HeightRatio; // 0x84(0x04)
	float ReferencePlane; // 0x88(0x04)
	uint32_t ConstCoordinate; // 0x8c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionCameraPositionWS
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionCameraPositionWS : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionCameraVectorWS
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionCameraVectorWS : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionCeil
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionCeil : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionParameter
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionParameter : public UMaterialExpression {
public:

	struct FName ParameterName; // 0x48(0x08)
	struct FGuid ExpressionGUID; // 0x50(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionClamp
// Size: 0x90 (Inherited: 0x48)
class UMaterialExpressionClamp : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput Min; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	struct FExpressionInput Max; // 0x70(0x0c)
	char pad_7C[0x8]; // 0x7c(0x08)
	enum class EClampMode ClampMode; // 0x84(0x01)
	char pad_85[0x3]; // 0x85(0x03)
	float MinDefault; // 0x88(0x04)
	float MaxDefault; // 0x8c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionCollectionParameter
// Size: 0x68 (Inherited: 0x48)
class UMaterialExpressionCollectionParameter : public UMaterialExpression {
public:

	struct UMaterialParameterCollection* Collection; // 0x48(0x08)
	struct FName ParameterName; // 0x50(0x08)
	struct FGuid ParameterId; // 0x58(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionComment
// Size: 0x78 (Inherited: 0x48)
class UMaterialExpressionComment : public UMaterialExpression {
public:

	int32_t SizeX; // 0x48(0x04)
	int32_t SizeY; // 0x4c(0x04)
	struct FString Text; // 0x50(0x10)
	struct FLinearColor CommentColor; // 0x60(0x10)
	int32_t FontSize; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionComponentMask
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionComponentMask : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	char R : 1; // 0x5c(0x01)
	char G : 1; // 0x5c(0x01)
	char B : 1; // 0x5c(0x01)
	char A : 1; // 0x5c(0x01)
	char pad_5C_4 : 4; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionConstant
// Size: 0x50 (Inherited: 0x48)
class UMaterialExpressionConstant : public UMaterialExpression {
public:

	float R; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionConstant2Vector
// Size: 0x50 (Inherited: 0x48)
class UMaterialExpressionConstant2Vector : public UMaterialExpression {
public:

	float R; // 0x48(0x04)
	float G; // 0x4c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionConstant3Vector
// Size: 0x58 (Inherited: 0x48)
class UMaterialExpressionConstant3Vector : public UMaterialExpression {
public:

	struct FLinearColor Constant; // 0x48(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionConstant4Vector
// Size: 0x58 (Inherited: 0x48)
class UMaterialExpressionConstant4Vector : public UMaterialExpression {
public:

	struct FLinearColor Constant; // 0x48(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionConstantBiasScale
// Size: 0x68 (Inherited: 0x48)
class UMaterialExpressionConstantBiasScale : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	float Bias; // 0x5c(0x04)
	float Scale; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionCosine
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionCosine : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	float Period; // 0x5c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionCrossProduct
// Size: 0x70 (Inherited: 0x48)
class UMaterialExpressionCrossProduct : public UMaterialExpression {
public:

	struct FExpressionInput A; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput B; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionCustom
// Size: 0xb0 (Inherited: 0x48)
class UMaterialExpressionCustom : public UMaterialExpression {
public:

	struct FString Code; // 0x48(0x10)
	enum class ECustomMaterialOutputType OutputType; // 0x58(0x01)
	bool UseFloatPrecision; // 0x59(0x01)
	bool ForVertexShader; // 0x5a(0x01)
	enum class EVertexPhase VertexPhase; // 0x5b(0x01)
	enum class EShadingPhase ShadingPhase; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
	struct FString Description; // 0x60(0x10)
	struct TArray<struct FCustomInput> Inputs; // 0x70(0x10)
	struct TArray<struct FCustomOutput> AdditionalOutputs; // 0x80(0x10)
	struct TArray<struct FCustomDefine> AdditionalDefines; // 0x90(0x10)
	struct TArray<struct FString> IncludeFilePaths; // 0xa0(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionDDX
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionDDX : public UMaterialExpression {
public:

	struct FExpressionInput Value; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionDDY
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionDDY : public UMaterialExpression {
public:

	struct FExpressionInput Value; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionDecalDerivative
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionDecalDerivative : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionDecalLifetimeOpacity
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionDecalMipmapLevel
// Size: 0x68 (Inherited: 0x48)
class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression {
public:

	struct FExpressionInput TextureSize; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	float ConstWidth; // 0x5c(0x04)
	float ConstHeight; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionDeltaTime
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionDeltaTime : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionDepthFade
// Size: 0x78 (Inherited: 0x48)
class UMaterialExpressionDepthFade : public UMaterialExpression {
public:

	struct FExpressionInput InOpacity; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput FadeDistance; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	float OpacityDefault; // 0x70(0x04)
	float FadeDistanceDefault; // 0x74(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionDepthOfFieldFunction
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression {
public:

	enum class EDepthOfFieldFunctionValue FunctionValue; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	struct FExpressionInput Depth; // 0x4c(0x0c)
	char pad_58[0x8]; // 0x58(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionDeriveNormalZ
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression {
public:

	struct FExpressionInput InXY; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionDesaturation
// Size: 0x80 (Inherited: 0x48)
class UMaterialExpressionDesaturation : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput Fraction; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	struct FLinearColor LuminanceFactors; // 0x70(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionDistance
// Size: 0x70 (Inherited: 0x48)
class UMaterialExpressionDistance : public UMaterialExpression {
public:

	struct FExpressionInput A; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput B; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionDistanceCullFade
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionDistanceCullFade : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionDistanceFieldGradient
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression {
public:

	struct FExpressionInput Position; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionDistanceToNearestSurface
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression {
public:

	struct FExpressionInput Position; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionDivide
// Size: 0x78 (Inherited: 0x48)
class UMaterialExpressionDivide : public UMaterialExpression {
public:

	struct FExpressionInput A; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput B; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	float ConstA; // 0x70(0x04)
	float ConstB; // 0x74(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionDotProduct
// Size: 0x70 (Inherited: 0x48)
class UMaterialExpressionDotProduct : public UMaterialExpression {
public:

	struct FExpressionInput A; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput B; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionDynamicParameter
// Size: 0x70 (Inherited: 0x48)
class UMaterialExpressionDynamicParameter : public UMaterialExpression {
public:

	struct TArray<struct FString> ParamNames; // 0x48(0x10)
	struct FLinearColor DefaultValue; // 0x58(0x10)
	uint32_t ParameterIndex; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionEnableCustomVertexPosition
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionEnableCustomVertexPosition : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionEyeAdaptation
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionEyeAdaptation : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionFeatureLevelSwitch
// Size: 0xb0 (Inherited: 0x48)
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression {
public:

	struct FExpressionInput Default; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput Inputs[0x4]; // 0x5c(0x30)
	char pad_8C[0x24]; // 0x8c(0x24)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionFloor
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionFloor : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionFmod
// Size: 0x70 (Inherited: 0x48)
class UMaterialExpressionFmod : public UMaterialExpression {
public:

	struct FExpressionInput A; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput B; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionFontSample
// Size: 0x58 (Inherited: 0x48)
class UMaterialExpressionFontSample : public UMaterialExpression {
public:

	struct UFont* Font; // 0x48(0x08)
	int32_t FontTexturePage; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionFrac
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionFrac : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionFresnel
// Size: 0x90 (Inherited: 0x48)
class UMaterialExpressionFresnel : public UMaterialExpression {
public:

	struct FExpressionInput ExponentIn; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	float Exponent; // 0x5c(0x04)
	struct FExpressionInput BaseReflectFractionIn; // 0x60(0x0c)
	char pad_6C[0x8]; // 0x6c(0x08)
	float BaseReflectFraction; // 0x74(0x04)
	struct FExpressionInput Normal; // 0x78(0x0c)
	char pad_84[0xc]; // 0x84(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionFunctionInput
// Size: 0xc0 (Inherited: 0x48)
class UMaterialExpressionFunctionInput : public UMaterialExpression {
public:

	struct FExpressionInput Preview; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FName InputName; // 0x5c(0x08)
	char pad_64[0x4]; // 0x64(0x04)
	struct FString Description; // 0x68(0x10)
	struct FGuid ID; // 0x78(0x10)
	enum class EFunctionInputType InputType; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
	struct FVector4 PreviewValue; // 0x90(0x10)
	char bUsePreviewValueAsDefault : 1; // 0xa0(0x01)
	char pad_A0_1 : 7; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	int32_t SortPriority; // 0xa4(0x04)
	char bCompilingFunctionPreview : 1; // 0xa8(0x01)
	char pad_A8_1 : 7; // 0xa8(0x01)
	char pad_A9[0x17]; // 0xa9(0x17)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionFunctionOutput
// Size: 0x90 (Inherited: 0x48)
class UMaterialExpressionFunctionOutput : public UMaterialExpression {
public:

	struct FName OutputName; // 0x48(0x08)
	struct FString Description; // 0x50(0x10)
	int32_t SortPriority; // 0x60(0x04)
	struct FExpressionInput A; // 0x64(0x0c)
	char pad_70[0x8]; // 0x70(0x08)
	char bLastPreviewed : 1; // 0x78(0x01)
	char pad_78_1 : 7; // 0x78(0x01)
	char pad_79[0x3]; // 0x79(0x03)
	struct FGuid ID; // 0x7c(0x10)
	char pad_8C[0x4]; // 0x8c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionGetMaterialAttributes
// Size: 0x70 (Inherited: 0x48)
class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression {
public:

	struct FMaterialAttributesInput MaterialAttributes; // 0x48(0x10)
	char pad_58[0x8]; // 0x58(0x08)
	struct TArray<struct FGuid> AttributeGetTypes; // 0x60(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionGetMobileSceneColorDistortion
// Size: 0x78 (Inherited: 0x48)
class UMaterialExpressionGetMobileSceneColorDistortion : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput OffsetFraction; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	struct FVector2D ConstInput; // 0x70(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionGIReplace
// Size: 0x88 (Inherited: 0x48)
class UMaterialExpressionGIReplace : public UMaterialExpression {
public:

	struct FExpressionInput Default; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput StaticIndirect; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	struct FExpressionInput DynamicIndirect; // 0x70(0x0c)
	char pad_7C[0xc]; // 0x7c(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionHairAttributes
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionHairAttributes : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionIf
// Size: 0xb8 (Inherited: 0x48)
class UMaterialExpressionIf : public UMaterialExpression {
public:

	struct FExpressionInput A; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput B; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	struct FExpressionInput AGreaterThanB; // 0x70(0x0c)
	char pad_7C[0x8]; // 0x7c(0x08)
	struct FExpressionInput AEqualsB; // 0x84(0x0c)
	char pad_90[0x8]; // 0x90(0x08)
	struct FExpressionInput ALessThanB; // 0x98(0x0c)
	char pad_A4[0x8]; // 0xa4(0x08)
	float EqualsThreshold; // 0xac(0x04)
	float ConstB; // 0xb0(0x04)
	float ConstAEqualsB; // 0xb4(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionIfBranch
// Size: 0xc0 (Inherited: 0x48)
class UMaterialExpressionIfBranch : public UMaterialExpression {
public:

	struct FExpressionInput A; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput B; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	struct FExpressionInput AGreaterThanB; // 0x70(0x0c)
	char pad_7C[0x8]; // 0x7c(0x08)
	struct FExpressionInput AEqualsB; // 0x84(0x0c)
	char pad_90[0x8]; // 0x90(0x08)
	struct FExpressionInput ALessThanB; // 0x98(0x0c)
	char pad_A4[0x1c]; // 0xa4(0x1c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionLightmapUVs
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionLightmapUVs : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionLightmassReplace
// Size: 0x70 (Inherited: 0x48)
class UMaterialExpressionLightmassReplace : public UMaterialExpression {
public:

	struct FExpressionInput Realtime; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput Lightmass; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionLightVector
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionLightVector : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionLinearInterpolate
// Size: 0x90 (Inherited: 0x48)
class UMaterialExpressionLinearInterpolate : public UMaterialExpression {
public:

	struct FExpressionInput A; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput B; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	struct FExpressionInput Alpha; // 0x70(0x0c)
	char pad_7C[0x8]; // 0x7c(0x08)
	float ConstA; // 0x84(0x04)
	float ConstB; // 0x88(0x04)
	float ConstAlpha; // 0x8c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionLiteHDREnableColorAdjust
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionLiteHDREnableColorAdjust : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionLiteHDRShaderStage
// Size: 0x70 (Inherited: 0x48)
class UMaterialExpressionLiteHDRShaderStage : public UMaterialExpression {
public:

	struct FExpressionInput Default; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput LiteHDRInput; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionRerouteBase
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionRerouteBase : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionLogarithm10
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionLogarithm10 : public UMaterialExpression {
public:

	struct FExpressionInput X; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionLogarithm2
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionLogarithm2 : public UMaterialExpression {
public:

	struct FExpressionInput X; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionMakeMaterialAttributes
// Size: 0x250 (Inherited: 0x48)
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression {
public:

	struct FExpressionInput BaseColor; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput Metallic; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	struct FExpressionInput Specular; // 0x70(0x0c)
	char pad_7C[0x8]; // 0x7c(0x08)
	struct FExpressionInput Roughness; // 0x84(0x0c)
	char pad_90[0x8]; // 0x90(0x08)
	struct FExpressionInput EmissiveColor; // 0x98(0x0c)
	char pad_A4[0x8]; // 0xa4(0x08)
	struct FExpressionInput Opacity; // 0xac(0x0c)
	char pad_B8[0x8]; // 0xb8(0x08)
	struct FExpressionInput OpacityMask; // 0xc0(0x0c)
	char pad_CC[0x8]; // 0xcc(0x08)
	struct FExpressionInput Normal; // 0xd4(0x0c)
	char pad_E0[0x8]; // 0xe0(0x08)
	struct FExpressionInput WorldPositionOffset; // 0xe8(0x0c)
	char pad_F4[0x8]; // 0xf4(0x08)
	struct FExpressionInput WorldDisplacement; // 0xfc(0x0c)
	char pad_108[0x8]; // 0x108(0x08)
	struct FExpressionInput TessellationMultiplier; // 0x110(0x0c)
	char pad_11C[0x8]; // 0x11c(0x08)
	struct FExpressionInput SubsurfaceColor; // 0x124(0x0c)
	char pad_130[0x8]; // 0x130(0x08)
	struct FExpressionInput ClearCoat; // 0x138(0x0c)
	char pad_144[0x8]; // 0x144(0x08)
	struct FExpressionInput ClearCoatRoughness; // 0x14c(0x0c)
	char pad_158[0x8]; // 0x158(0x08)
	struct FExpressionInput AmbientOcclusion; // 0x160(0x0c)
	char pad_16C[0x8]; // 0x16c(0x08)
	struct FExpressionInput Refraction; // 0x174(0x0c)
	char pad_180[0x8]; // 0x180(0x08)
	struct FExpressionInput CustomizedUVs[0x8]; // 0x188(0x60)
	char pad_1E8[0x40]; // 0x1e8(0x40)
	struct FExpressionInput PixelDepthOffset; // 0x228(0x0c)
	char pad_234[0x8]; // 0x234(0x08)
	struct FExpressionInput ShadingModel; // 0x23c(0x0c)
	char pad_248[0x8]; // 0x248(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionMapARPassthroughCameraUV
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression {
public:

	struct FExpressionInput Coordinates; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionMaterialAttributeLayers
// Size: 0xf0 (Inherited: 0x48)
class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression {
public:

	struct FName ParameterName; // 0x48(0x08)
	struct FGuid ExpressionGUID; // 0x50(0x10)
	struct FMaterialAttributesInput Input; // 0x60(0x10)
	char pad_70[0x8]; // 0x70(0x08)
	struct FMaterialLayersFunctions DefaultLayers; // 0x78(0x40)
	struct TArray<struct UMaterialExpressionMaterialFunctionCall*> LayerCallers; // 0xb8(0x10)
	int32_t NumActiveLayerCallers; // 0xc8(0x04)
	char pad_CC[0x4]; // 0xcc(0x04)
	struct TArray<struct UMaterialExpressionMaterialFunctionCall*> BlendCallers; // 0xd0(0x10)
	int32_t NumActiveBlendCallers; // 0xe0(0x04)
	bool bIsLayerGraphBuilt; // 0xe4(0x01)
	char pad_E5[0xb]; // 0xe5(0x0b)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionMaterialFunctionCall
// Size: 0x68 (Inherited: 0x48)
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression {
public:

	struct UMaterialFunctionInterface* MaterialFunction; // 0x48(0x08)
	bool UseIfCondition; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	struct FMaterialParameterInfo FunctionParameterInfo; // 0x54(0x10)
	char pad_64[0x4]; // 0x64(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionMaterialProxyReplace
// Size: 0x70 (Inherited: 0x48)
class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression {
public:

	struct FExpressionInput Realtime; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput MaterialProxy; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionMax
// Size: 0x78 (Inherited: 0x48)
class UMaterialExpressionMax : public UMaterialExpression {
public:

	struct FExpressionInput A; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput B; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	float ConstA; // 0x70(0x04)
	float ConstB; // 0x74(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionMin
// Size: 0x78 (Inherited: 0x48)
class UMaterialExpressionMin : public UMaterialExpression {
public:

	struct FExpressionInput A; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput B; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	float ConstA; // 0x70(0x04)
	float ConstB; // 0x74(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionMultiply
// Size: 0x78 (Inherited: 0x48)
class UMaterialExpressionMultiply : public UMaterialExpression {
public:

	struct FExpressionInput A; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput B; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	float ConstA; // 0x70(0x04)
	float ConstB; // 0x74(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionNoise
// Size: 0x98 (Inherited: 0x48)
class UMaterialExpressionNoise : public UMaterialExpression {
public:

	struct FExpressionInput Position; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput FilterWidth; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	float Scale; // 0x70(0x04)
	int32_t Quality; // 0x74(0x04)
	enum class ENoiseFunction NoiseFunction; // 0x78(0x01)
	char pad_79[0x3]; // 0x79(0x03)
	char bTurbulence : 1; // 0x7c(0x01)
	char pad_7C_1 : 7; // 0x7c(0x01)
	char pad_7D[0x3]; // 0x7d(0x03)
	int32_t Levels; // 0x80(0x04)
	float OutputMin; // 0x84(0x04)
	float OutputMax; // 0x88(0x04)
	float LevelScale; // 0x8c(0x04)
	char bTiling : 1; // 0x90(0x01)
	char pad_90_1 : 7; // 0x90(0x01)
	char pad_91[0x3]; // 0x91(0x03)
	uint32_t RepeatSize; // 0x94(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionNormalize
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionNormalize : public UMaterialExpression {
public:

	struct FExpressionInput VectorInput; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionObjectBounds
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionObjectBounds : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionObjectOrientation
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionObjectOrientation : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionObjectPositionWS
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionObjectPositionWS : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionObjectRadius
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionObjectRadius : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionOneMinus
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionOneMinus : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionPanner
// Size: 0x98 (Inherited: 0x48)
class UMaterialExpressionPanner : public UMaterialExpression {
public:

	struct FExpressionInput Coordinate; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput Time; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	struct FExpressionInput Speed; // 0x70(0x0c)
	char pad_7C[0x8]; // 0x7c(0x08)
	float SpeedX; // 0x84(0x04)
	float SpeedY; // 0x88(0x04)
	uint32_t ConstCoordinate; // 0x8c(0x04)
	bool bFractionalPart; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionParticleColor
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionParticleColor : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionParticleDirection
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionParticleDirection : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionParticleMacroUV
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionParticleMacroUV : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionParticleMotionBlurFade
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionParticlePositionWS
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionParticlePositionWS : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionParticleRadius
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionParticleRadius : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionParticleRandom
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionParticleRandom : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionParticleRelativeTime
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionParticleRelativeTime : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionParticleSize
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionParticleSize : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionParticleSpeed
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionParticleSpeed : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionParticleSubUVProperties
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionPerInstanceBillboardLayerID
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionPerInstanceBillboardLayerID : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionPerInstanceFadeAmount
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionPerInstanceLocalToWorldComponent
// Size: 0x50 (Inherited: 0x48)
class UMaterialExpressionPerInstanceLocalToWorldComponent : public UMaterialExpression {
public:

	int32_t ComponentId; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionPerInstanceObjectOrientation
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionPerInstanceObjectOrientation : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionPerInstanceRandom
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionPixelDepth
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionPixelDepth : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionPixelNormalWS
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionPixelNormalWS : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionPower
// Size: 0x78 (Inherited: 0x48)
class UMaterialExpressionPower : public UMaterialExpression {
public:

	struct FExpressionInput Base; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput Exponent; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	float ConstExponent; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionPrecomputedAOMask
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionPreSkinnedLocalBounds
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionPreSkinnedNormal
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionPreSkinnedPosition
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionPreviousFrameSwitch
// Size: 0x70 (Inherited: 0x48)
class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression {
public:

	struct FExpressionInput CurrentFrame; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput PreviousFrame; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionPreviousQuaterSceneColor
// Size: 0x80 (Inherited: 0x48)
class UMaterialExpressionPreviousQuaterSceneColor : public UMaterialExpression {
public:

	enum class EMaterialSceneAttributeInputMode InputMode; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	struct FExpressionInput Input; // 0x4c(0x0c)
	char pad_58[0x8]; // 0x58(0x08)
	struct FExpressionInput OffsetFraction; // 0x60(0x0c)
	char pad_6C[0x8]; // 0x6c(0x08)
	struct FVector2D ConstInput; // 0x74(0x08)
	char pad_7C[0x4]; // 0x7c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionPreZShaderStage
// Size: 0x70 (Inherited: 0x48)
class UMaterialExpressionPreZShaderStage : public UMaterialExpression {
public:

	struct FExpressionInput Default; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput PreZ; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionQualitySwitch
// Size: 0xc0 (Inherited: 0x48)
class UMaterialExpressionQualitySwitch : public UMaterialExpression {
public:

	struct FExpressionInput Default; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput Inputs[0x5]; // 0x5c(0x3c)
	char pad_98[0x28]; // 0x98(0x28)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionRayTracingQualitySwitch
// Size: 0x70 (Inherited: 0x48)
class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression {
public:

	struct FExpressionInput Normal; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput RayTraced; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionReflectionVectorWS
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression {
public:

	struct FExpressionInput CustomWorldNormal; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	char bNormalizeCustomWorldNormal : 1; // 0x5c(0x01)
	char pad_5C_1 : 7; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionRotateAboutAxis
// Size: 0xa0 (Inherited: 0x48)
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression {
public:

	struct FExpressionInput NormalizedRotationAxis; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput RotationAngle; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	struct FExpressionInput PivotPoint; // 0x70(0x0c)
	char pad_7C[0x8]; // 0x7c(0x08)
	struct FExpressionInput Position; // 0x84(0x0c)
	char pad_90[0x8]; // 0x90(0x08)
	float Period; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionRotator
// Size: 0x80 (Inherited: 0x48)
class UMaterialExpressionRotator : public UMaterialExpression {
public:

	struct FExpressionInput Coordinate; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput Time; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	float CenterX; // 0x70(0x04)
	float CenterY; // 0x74(0x04)
	float Speed; // 0x78(0x04)
	uint32_t ConstCoordinate; // 0x7c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionRound
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionRound : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureReplace
// Size: 0x70 (Inherited: 0x48)
class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression {
public:

	struct FExpressionInput Default; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput VirtualTextureOutput; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureSample
// Size: 0x80 (Inherited: 0x48)
class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression {
public:

	struct FExpressionInput Coordinates; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput MipValue; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	struct URuntimeVirtualTexture* VirtualTexture; // 0x70(0x08)
	enum class ERuntimeVirtualTextureMaterialType MaterialType; // 0x78(0x01)
	bool bSinglePhysicalSpace; // 0x79(0x01)
	bool bAdaptive; // 0x7a(0x01)
	enum class ERuntimeVirtualTextureMipValueMode MipValueMode; // 0x7b(0x01)
	char pad_7C[0x4]; // 0x7c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSaturate
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionSaturate : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSceneColor
// Size: 0x80 (Inherited: 0x48)
class UMaterialExpressionSceneColor : public UMaterialExpression {
public:

	enum class EMaterialSceneAttributeInputMode InputMode; // 0x48(0x01)
	bool bUseRawSceneColor; // 0x49(0x01)
	char pad_4A[0x2]; // 0x4a(0x02)
	struct FExpressionInput Input; // 0x4c(0x0c)
	char pad_58[0x8]; // 0x58(0x08)
	struct FExpressionInput OffsetFraction; // 0x60(0x0c)
	char pad_6C[0x8]; // 0x6c(0x08)
	struct FVector2D ConstInput; // 0x74(0x08)
	char pad_7C[0x4]; // 0x7c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSceneDepth
// Size: 0x80 (Inherited: 0x48)
class UMaterialExpressionSceneDepth : public UMaterialExpression {
public:

	enum class EMaterialSceneAttributeInputMode InputMode; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	struct FExpressionInput Input; // 0x4c(0x0c)
	char pad_58[0x8]; // 0x58(0x08)
	struct FExpressionInput Coordinates; // 0x60(0x0c)
	char pad_6C[0x8]; // 0x6c(0x08)
	struct FVector2D ConstInput; // 0x74(0x08)
	char pad_7C[0x4]; // 0x7c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSceneDepthWithoutWater
// Size: 0x70 (Inherited: 0x48)
class UMaterialExpressionSceneDepthWithoutWater : public UMaterialExpression {
public:

	enum class EMaterialSceneAttributeInputMode InputMode; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	struct FExpressionInput Input; // 0x4c(0x0c)
	char pad_58[0x8]; // 0x58(0x08)
	struct FVector2D ConstInput; // 0x60(0x08)
	float FallbackDepth; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSceneTexelSize
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionSceneTexelSize : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSceneTexture
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionSceneTexture : public UMaterialExpression {
public:

	struct FExpressionInput Coordinates; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	enum class ESceneTextureId SceneTextureId; // 0x5c(0x01)
	bool bFiltered; // 0x5d(0x01)
	char pad_5E[0x2]; // 0x5e(0x02)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionScreenPosition
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionScreenPosition : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSetMaterialAttributes
// Size: 0x68 (Inherited: 0x48)
class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression {
public:

	struct TArray<struct FExpressionInput> Inputs; // 0x48(0x10)
	struct TArray<struct FGuid> AttributeSetTypes; // 0x58(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionShaderStageSwitch
// Size: 0x70 (Inherited: 0x48)
class UMaterialExpressionShaderStageSwitch : public UMaterialExpression {
public:

	struct FExpressionInput PixelShader; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput VertexShader; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionShadingModel
// Size: 0x50 (Inherited: 0x48)
class UMaterialExpressionShadingModel : public UMaterialExpression {
public:

	enum class EMaterialShadingModel ShadingModel; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionShadingPathSwitch
// Size: 0x98 (Inherited: 0x48)
class UMaterialExpressionShadingPathSwitch : public UMaterialExpression {
public:

	struct FExpressionInput Default; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput Inputs[0x3]; // 0x5c(0x24)
	char pad_80[0x18]; // 0x80(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionShadowReplace
// Size: 0x70 (Inherited: 0x48)
class UMaterialExpressionShadowReplace : public UMaterialExpression {
public:

	struct FExpressionInput Default; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput Shadow; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSign
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionSign : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSine
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionSine : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	float Period; // 0x5c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSkyAtmosphereLightDirection
// Size: 0x50 (Inherited: 0x48)
class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression {
public:

	int32_t LightIndex; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression {
public:

	int32_t LightIndex; // 0x48(0x04)
	struct FExpressionInput WorldPosition; // 0x4c(0x0c)
	char pad_58[0x8]; // 0x58(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
// Size: 0x50 (Inherited: 0x48)
class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression {
public:

	int32_t LightIndex; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression {
public:

	struct FExpressionInput WorldPosition; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSkyAtmosphereViewLuminance
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSobol
// Size: 0x90 (Inherited: 0x48)
class UMaterialExpressionSobol : public UMaterialExpression {
public:

	struct FExpressionInput Cell; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput Index; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	struct FExpressionInput Seed; // 0x70(0x0c)
	char pad_7C[0x8]; // 0x7c(0x08)
	uint32_t ConstIndex; // 0x84(0x04)
	struct FVector2D ConstSeed; // 0x88(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSpeedTree
// Size: 0xa8 (Inherited: 0x48)
class UMaterialExpressionSpeedTree : public UMaterialExpression {
public:

	struct FExpressionInput GeometryInput; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput WindInput; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	struct FExpressionInput LODInput; // 0x70(0x0c)
	char pad_7C[0x8]; // 0x7c(0x08)
	struct FExpressionInput ExtraBendWS; // 0x84(0x0c)
	char pad_90[0x8]; // 0x90(0x08)
	enum class ESpeedTreeGeometryType GeometryType; // 0x98(0x01)
	enum class ESpeedTreeWindType WindType; // 0x99(0x01)
	enum class ESpeedTreeLODType LODType; // 0x9a(0x01)
	char pad_9B[0x1]; // 0x9b(0x01)
	float BillboardThreshold; // 0x9c(0x04)
	bool bAccurateWindVelocities; // 0xa0(0x01)
	char pad_A1[0x7]; // 0xa1(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSphereMask
// Size: 0xa0 (Inherited: 0x48)
class UMaterialExpressionSphereMask : public UMaterialExpression {
public:

	struct FExpressionInput A; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput B; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	struct FExpressionInput radius; // 0x70(0x0c)
	char pad_7C[0x8]; // 0x7c(0x08)
	struct FExpressionInput Hardness; // 0x84(0x0c)
	char pad_90[0x8]; // 0x90(0x08)
	float AttenuationRadius; // 0x98(0x04)
	float HardnessPercent; // 0x9c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSphericalParticleOpacity
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression {
public:

	struct FExpressionInput Density; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	float ConstantDensity; // 0x5c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSpriteTextureObject
// Size: 0xe0 (Inherited: 0x48)
class UMaterialExpressionSpriteTextureObject : public UMaterialExpression {
public:

	struct FExpressionInput Coordinates; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput TextureObject; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	struct FExpressionInput MipValue; // 0x70(0x0c)
	char pad_7C[0x8]; // 0x7c(0x08)
	struct FExpressionInput CoordinatesDX; // 0x84(0x0c)
	char pad_90[0x8]; // 0x90(0x08)
	struct FExpressionInput CoordinatesDY; // 0x98(0x0c)
	char pad_A4[0x8]; // 0xa4(0x08)
	struct FExpressionInput AutomaticViewMipBiasValue; // 0xac(0x0c)
	char pad_B8[0x8]; // 0xb8(0x08)
	enum class ESamplerSourceMode SamplerSource; // 0xc0(0x01)
	char AutomaticViewMipBias : 1; // 0xc1(0x01)
	char pad_C1_1 : 7; // 0xc1(0x01)
	char ConstCoordinate; // 0xc2(0x01)
	char pad_C3[0x1]; // 0xc3(0x01)
	int32_t ConstMipValue; // 0xc4(0x04)
	struct UObject* TextureResObject; // 0xc8(0x08)
	enum class EMaterialSamplerType SamplerType; // 0xd0(0x01)
	char IsDefaultMeshpaintTexture : 1; // 0xd1(0x01)
	char pad_D1_1 : 7; // 0xd1(0x01)
	char pad_D2[0x6]; // 0xd2(0x06)
	struct UTexture* Texture; // 0xd8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSquareRoot
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionSquareRoot : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionStaticBool
// Size: 0x50 (Inherited: 0x48)
class UMaterialExpressionStaticBool : public UMaterialExpression {
public:

	char Value : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionStaticSwitch
// Size: 0x88 (Inherited: 0x48)
class UMaterialExpressionStaticSwitch : public UMaterialExpression {
public:

	char DefaultValue : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	struct FExpressionInput A; // 0x4c(0x0c)
	char pad_58[0x8]; // 0x58(0x08)
	struct FExpressionInput B; // 0x60(0x0c)
	char pad_6C[0x8]; // 0x6c(0x08)
	struct FExpressionInput Value; // 0x74(0x0c)
	char pad_80[0x8]; // 0x80(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSubtract
// Size: 0x78 (Inherited: 0x48)
class UMaterialExpressionSubtract : public UMaterialExpression {
public:

	struct FExpressionInput A; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput B; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	float ConstA; // 0x70(0x04)
	float ConstB; // 0x74(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionTangent
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionTangent : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	float Period; // 0x5c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionTemporalSobol
// Size: 0x80 (Inherited: 0x48)
class UMaterialExpressionTemporalSobol : public UMaterialExpression {
public:

	struct FExpressionInput Index; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput Seed; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	uint32_t ConstIndex; // 0x70(0x04)
	struct FVector2D ConstSeed; // 0x74(0x08)
	char pad_7C[0x4]; // 0x7c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionTextureCoordinate
// Size: 0x58 (Inherited: 0x48)
class UMaterialExpressionTextureCoordinate : public UMaterialExpression {
public:

	int32_t CoordinateIndex; // 0x48(0x04)
	float UTiling; // 0x4c(0x04)
	float VTiling; // 0x50(0x04)
	char UnMirrorU : 1; // 0x54(0x01)
	char UnMirrorV : 1; // 0x54(0x01)
	char pad_54_2 : 6; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionTextureProperty
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionTextureProperty : public UMaterialExpression {
public:

	struct FExpressionInput TextureObject; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	enum class EMaterialExposedTextureProperty Property; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionTime
// Size: 0x50 (Inherited: 0x48)
class UMaterialExpressionTime : public UMaterialExpression {
public:

	char bIgnorePause : 1; // 0x48(0x01)
	char bOverride_Period : 1; // 0x48(0x01)
	char pad_48_2 : 6; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	float Period; // 0x4c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionTransform
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionTransform : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	enum class EMaterialVectorCoordTransformSource TransformSourceType; // 0x5c(0x01)
	enum class EMaterialVectorCoordTransform TransformType; // 0x5d(0x01)
	char pad_5E[0x2]; // 0x5e(0x02)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionTransformPosition
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionTransformPosition : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	enum class EMaterialPositionTransformSource TransformSourceType; // 0x5c(0x01)
	enum class EMaterialPositionTransformSource TransformType; // 0x5d(0x01)
	char pad_5E[0x2]; // 0x5e(0x02)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionTruncate
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionTruncate : public UMaterialExpression {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionTwoSidedSign
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionTwoSidedSign : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionUIFetchBackBuffer
// Size: 0x68 (Inherited: 0x48)
class UMaterialExpressionUIFetchBackBuffer : public UMaterialExpression {
public:

	enum class EMaterialSceneAttributeInputMode InputMode; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	struct FExpressionInput Coordinates; // 0x4c(0x0c)
	char pad_58[0x8]; // 0x58(0x08)
	struct FVector2D ConstInput; // 0x60(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionVectorNoise
// Size: 0x70 (Inherited: 0x48)
class UMaterialExpressionVectorNoise : public UMaterialExpression {
public:

	struct FExpressionInput Position; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	enum class EVectorNoiseFunction NoiseFunction; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
	int32_t Quality; // 0x60(0x04)
	char bTiling : 1; // 0x64(0x01)
	char pad_64_1 : 7; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
	uint32_t TileSize; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionVertexColor
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionVertexColor : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionVertexNormalWS
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionVertexNormalWS : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionViewProperty
// Size: 0x50 (Inherited: 0x48)
class UMaterialExpressionViewProperty : public UMaterialExpression {
public:

	enum class EMaterialExposedViewProperty Property; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionViewSize
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionViewSize : public UMaterialExpression {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionVirtualTextureFeatureSwitch
// Size: 0x70 (Inherited: 0x48)
class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression {
public:

	struct FExpressionInput No; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput Yes; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionWindParams
// Size: 0x50 (Inherited: 0x48)
class UMaterialExpressionWindParams : public UMaterialExpression {
public:

	bool bForceUsePrevData; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionWorldPosition
// Size: 0x50 (Inherited: 0x48)
class UMaterialExpressionWorldPosition : public UMaterialExpression {
public:

	enum class EWorldPositionIncludedOffsets WorldPositionShaderOffset; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimSingleNodeInstance
// Size: 0x2a0 (Inherited: 0x280)
class UAnimSingleNodeInstance : public UAnimInstance {
public:

	struct UAnimationAsset* CurrentAsset; // 0x280(0x08)
	/*struct FDelegate*/char PostEvaluateAnimEvent[0x10]; // 0x288(0x10)
	char pad_298[0x8]; // 0x298(0x08)

	void StopAnim(); // Function Engine.AnimSingleNodeInstance.StopAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x9d71c00
	void SetReverse(bool bInReverse); // Function Engine.AnimSingleNodeInstance.SetReverse // (Final|Native|Public|BlueprintCallable) // @ game+0x9d71b70
	void SetPreviewCurveOverride(struct FName& PoseName, float Value, bool bRemoveIfZero); // Function Engine.AnimSingleNodeInstance.SetPreviewCurveOverride // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9d71a60
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies); // Function Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime // (Final|Native|Public|BlueprintCallable) // @ game+0x9d71950
	void SetPosition(float InPosition, bool bFireNotifies); // Function Engine.AnimSingleNodeInstance.SetPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x9d71880
	void SetPlayRate(float InPlayRate); // Function Engine.AnimSingleNodeInstance.SetPlayRate // (Final|Native|Public|BlueprintCallable) // @ game+0x9d71770
	void SetPlaying(bool bIsPlaying); // Function Engine.AnimSingleNodeInstance.SetPlaying // (Final|Native|Public|BlueprintCallable) // @ game+0x9d717f0
	void SetLooping(bool bIsLooping); // Function Engine.AnimSingleNodeInstance.SetLooping // (Final|Native|Public|BlueprintCallable) // @ game+0x9d716e0
	void SetBlendSpaceInput(struct FVector& InBlendInput); // Function Engine.AnimSingleNodeInstance.SetBlendSpaceInput // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9d71650
	void SetAnimationAsset(struct UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate); // Function Engine.AnimSingleNodeInstance.SetAnimationAsset // (Native|Public|BlueprintCallable) // @ game+0x9d71540
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition); // Function Engine.AnimSingleNodeInstance.PlayAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x9d71440
	float GetLength(); // Function Engine.AnimSingleNodeInstance.GetLength // (Final|Native|Public|BlueprintCallable) // @ game+0x9d71390
	struct UAnimationAsset* GetAnimationAsset(); // Function Engine.AnimSingleNodeInstance.GetAnimationAsset // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d71360
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.GameEngine
// Size: 0xfb0 (Inherited: 0xf60)
class UGameEngine : public UEngine {
public:

	float MaxDeltaTime; // 0xf60(0x04)
	float ServerFlushLogInterval; // 0xf64(0x04)
	struct UGameInstance* GameInstance; // 0xf68(0x08)
	char pad_F70[0x40]; // 0xf70(0x40)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.GameViewportClient
// Size: 0x2f0 (Inherited: 0x40)
class UGameViewportClient : public UScriptViewportClient {
public:

	char pad_40[0x8]; // 0x40(0x08)
	struct UConsole* ViewportConsole; // 0x48(0x08)
	struct TArray<struct FDebugDisplayProperty> DebugProperties; // 0x50(0x10)
	char pad_60[0x20]; // 0x60(0x20)
	struct UWorld* World; // 0x80(0x08)
	struct UGameInstance* GameInstance; // 0x88(0x08)
	char pad_90[0x260]; // 0x90(0x260)

	void SSSwapControllers(); // Function Engine.GameViewportClient.SSSwapControllers // (Exec|Native|Public) // @ game+0x8951b0
	void ShowTitleSafeArea(); // Function Engine.GameViewportClient.ShowTitleSafeArea // (Exec|Native|Public) // @ game+0x895c00
	void SetConsoleTarget(int32_t PlayerIndex); // Function Engine.GameViewportClient.SetConsoleTarget // (Exec|Native|Public) // @ game+0x359abf0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CameraModifier_CameraShake
// Size: 0xb8 (Inherited: 0x50)
class UCameraModifier_CameraShake : public UCameraModifier {
public:

	struct TArray<struct UCameraShake*> ActiveShakes; // 0x50(0x10)
	struct TMap<struct UClass*, struct FPooledCameraShakes> ExpiredPooledShakesMap; // 0x60(0x50)
	float SplitScreenShakeScale; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ComponentDelegateBinding
// Size: 0x40 (Inherited: 0x30)
class UComponentDelegateBinding : public UDynamicBlueprintBinding {
public:

	struct TArray<struct FBlueprintComponentDelegateBinding> ComponentDelegateBindings; // 0x30(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InputDelegateBinding
// Size: 0x30 (Inherited: 0x30)
class UInputDelegateBinding : public UDynamicBlueprintBinding {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundEffectSubmixPreset
// Size: 0x48 (Inherited: 0x48)
class USoundEffectSubmixPreset : public USoundEffectPreset {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundEffectSourcePreset
// Size: 0x48 (Inherited: 0x48)
class USoundEffectSourcePreset : public USoundEffectPreset {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundWave
// Size: 0x388 (Inherited: 0x168)
class USoundWave : public USoundBase {
public:

	int32_t CompressionQuality; // 0x168(0x04)
	int32_t StreamingPriority; // 0x16c(0x04)
	enum class ESoundwaveSampleRateSettings SampleRateQuality; // 0x170(0x01)
	char pad_171[0x1]; // 0x171(0x01)
	enum class ESoundGroup SoundGroup; // 0x172(0x01)
	char bLooping : 1; // 0x173(0x01)
	char bStreaming : 1; // 0x173(0x01)
	char bSeekableStreaming : 1; // 0x173(0x01)
	char pad_173_3 : 5; // 0x173(0x01)
	enum class ESoundWaveLoadingBehavior LoadingBehavior; // 0x174(0x01)
	char pad_175_0 : 4; // 0x175(0x01)
	char bMature : 1; // 0x175(0x01)
	char bManualWordWrap : 1; // 0x175(0x01)
	char bSingleLine : 1; // 0x175(0x01)
	char bIsAmbisonics : 1; // 0x175(0x01)
	char pad_176[0x2]; // 0x176(0x02)
	struct TArray<float> FrequenciesToAnalyze; // 0x178(0x10)
	struct TArray<struct FSoundWaveSpectralTimeData> CookedSpectralTimeData; // 0x188(0x10)
	struct TArray<struct FSoundWaveEnvelopeTimeData> CookedEnvelopeTimeData; // 0x198(0x10)
	int32_t InitialChunkSize; // 0x1a8(0x04)
	char pad_1AC[0x44]; // 0x1ac(0x44)
	struct FString SpokenText; // 0x1f0(0x10)
	float SubtitlePriority; // 0x200(0x04)
	float Volume; // 0x204(0x04)
	float Pitch; // 0x208(0x04)
	int32_t NumChannels; // 0x20c(0x04)
	int32_t SampleRate; // 0x210(0x04)
	char pad_214[0xc]; // 0x214(0x0c)
	struct TArray<struct FSubtitleCue> Subtitles; // 0x220(0x10)
	struct UCurveTable* Curves; // 0x230(0x08)
	struct UCurveTable* InternalCurves; // 0x238(0x08)
	char pad_240[0x148]; // 0x240(0x148)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DialogueSoundWaveProxy
// Size: 0x180 (Inherited: 0x168)
class UDialogueSoundWaveProxy : public USoundBase {
public:

	char pad_168[0x18]; // 0x168(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundCue
// Size: 0x4e8 (Inherited: 0x168)
class USoundCue : public USoundBase {
public:

	char bPrimeOnLoad : 1; // 0x168(0x01)
	char pad_168_1 : 7; // 0x168(0x01)
	char pad_169[0x7]; // 0x169(0x07)
	struct USoundNode* FirstNode; // 0x170(0x08)
	float VolumeMultiplier; // 0x178(0x04)
	float PitchMultiplier; // 0x17c(0x04)
	struct FSoundAttenuationSettings AttenuationOverrides; // 0x180(0x350)
	float SubtitlePriority; // 0x4d0(0x04)
	char pad_4D4[0x4]; // 0x4d4(0x04)
	char bOverrideAttenuation : 1; // 0x4d8(0x01)
	char bExcludeFromRandomNodeBranchCulling : 1; // 0x4d8(0x01)
	char bHasPlayWhenSilent : 1; // 0x4d8(0x01)
	char pad_4D8_3 : 5; // 0x4d8(0x01)
	char pad_4D9[0xf]; // 0x4d9(0x0f)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BlendSpaceBase
// Size: 0x150 (Inherited: 0x88)
class UBlendSpaceBase : public UAnimationAsset {
public:

	char pad_88[0x8]; // 0x88(0x08)
	bool bRotationBlendInMeshSpace; // 0x90(0x01)
	char pad_91[0x3]; // 0x91(0x03)
	float AnimLength; // 0x94(0x04)
	struct FInterpolationParameter InterpolationParam[0x3]; // 0x98(0x18)
	float TargetWeightInterpolationSpeedPerSec; // 0xb0(0x04)
	enum class ENotifyTriggerMode NotifyTriggerMode; // 0xb4(0x01)
	char pad_B5[0x3]; // 0xb5(0x03)
	struct TArray<struct FPerBoneInterpolation> PerBoneBlend; // 0xb8(0x10)
	int32_t SampleIndexWithMarkers; // 0xc8(0x04)
	char pad_CC[0x4]; // 0xcc(0x04)
	struct TArray<struct FBlendSample> SampleData; // 0xd0(0x10)
	struct TArray<struct FEditorElement> GridSamples; // 0xe0(0x10)
	struct FBlendParameter BlendParameters[0x3]; // 0xf0(0x60)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimSequenceBase
// Size: 0xb0 (Inherited: 0x88)
class UAnimSequenceBase : public UAnimationAsset {
public:

	struct TArray<struct FAnimNotifyEvent> Notifies; // 0x88(0x10)
	float SequenceLength; // 0x98(0x04)
	float RateScale; // 0x9c(0x04)
	struct FRawCurveTracks RawCurveData; // 0xa0(0x10)

	float GetPlayLength(); // Function Engine.AnimSequenceBase.GetPlayLength // (Native|Public|BlueprintCallable) // @ game+0xaa7530
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PoseAsset
// Size: 0x128 (Inherited: 0x88)
class UPoseAsset : public UAnimationAsset {
public:

	struct FPoseDataContainer PoseContainer; // 0x88(0x90)
	bool bAdditivePose; // 0x118(0x01)
	char pad_119[0x3]; // 0x119(0x03)
	int32_t BasePoseIndex; // 0x11c(0x04)
	struct FName RetargetSource; // 0x120(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.RuntimeMergedSkeleton
// Size: 0x5f8 (Inherited: 0x378)
class URuntimeMergedSkeleton : public USkeleton {
public:

	char pad_378[0x280]; // 0x378(0x280)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SkeletalBodySetup
// Size: 0x270 (Inherited: 0x258)
class USkeletalBodySetup : public UBodySetup {
public:

	bool bSkipScaleFromAnimation; // 0x258(0x01)
	char pad_259[0x7]; // 0x259(0x07)
	struct TArray<struct FPhysicalAnimationProfile> PhysicalAnimationData; // 0x260(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BookMark
// Size: 0x58 (Inherited: 0x30)
class UBookMark : public UBookmarkBase {
public:

	struct FVector Location; // 0x30(0x0c)
	struct FRotator Rotation; // 0x3c(0x0c)
	struct TArray<struct FString> HiddenLevels; // 0x48(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BookMark2D
// Size: 0x40 (Inherited: 0x30)
class UBookMark2D : public UBookmarkBase {
public:

	float Zoom2D; // 0x30(0x04)
	struct FIntPoint Location; // 0x34(0x08)
	char pad_3C[0x4]; // 0x3c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CloudStorageBase
// Size: 0x58 (Inherited: 0x40)
class UCloudStorageBase : public UPlatformInterfaceBase {
public:

	struct TArray<struct FString> LocalCloudFiles; // 0x40(0x10)
	char bSuppressDelegateCalls : 1; // 0x50(0x01)
	char pad_50_1 : 7; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InGameAdManager
// Size: 0x68 (Inherited: 0x40)
class UInGameAdManager : public UPlatformInterfaceBase {
public:

	char bShouldPauseWhileAdOpen : 1; // 0x40(0x01)
	char pad_40_1 : 7; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
	/*struct TArray<struct FDelegate>*/char ClickedBannerDelegates[0x10]; // 0x48(0x10)
	/*struct TArray<struct FDelegate>*/char ClosedAdDelegates[0x10]; // 0x58(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MicroTransactionBase
// Size: 0x70 (Inherited: 0x40)
class UMicroTransactionBase : public UPlatformInterfaceBase {
public:

	struct TArray<struct FPurchaseInfo> AvailableProducts; // 0x40(0x10)
	struct FString LastError; // 0x50(0x10)
	struct FString LastErrorSolution; // 0x60(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TwitterIntegrationBase
// Size: 0x40 (Inherited: 0x40)
class UTwitterIntegrationBase : public UPlatformInterfaceBase {
public:


	bool TwitterRequest(struct FString URL, struct TArray<struct FString>& ParamKeysAndValues, enum class ETwitterRequestMethod RequestMethod, int32_t AccountIndex); // Function Engine.TwitterIntegrationBase.TwitterRequest // (Native|Public|HasOutParms) // @ game+0x9ecabc0
	bool ShowTweetUI(struct FString InitialMessage, struct FString URL, struct FString Picture); // Function Engine.TwitterIntegrationBase.ShowTweetUI // (Native|Public) // @ game+0x9eca9f0
	void Init(); // Function Engine.TwitterIntegrationBase.Init // (Native|Public) // @ game+0x8964b0
	int32_t GetNumAccounts(); // Function Engine.TwitterIntegrationBase.GetNumAccounts // (Native|Public) // @ game+0x9eca9c0
	struct FString GetAccountName(int32_t AccountIndex); // Function Engine.TwitterIntegrationBase.GetAccountName // (Native|Public) // @ game+0x9eca890
	bool CanShowTweetUI(); // Function Engine.TwitterIntegrationBase.CanShowTweetUI // (Native|Public) // @ game+0x17602c0
	bool AuthorizeAccounts(); // Function Engine.TwitterIntegrationBase.AuthorizeAccounts // (Native|Public) // @ game+0xaa7690
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CompositeCurveTable
// Size: 0xd0 (Inherited: 0xa8)
class UCompositeCurveTable : public UCurveTable {
public:

	struct TArray<struct UCurveTable*> ParentTables; // 0xa8(0x10)
	struct TArray<struct UCurveTable*> OldParentTables; // 0xb8(0x10)
	char pad_C8[0x8]; // 0xc8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CompositeDataTable
// Size: 0x170 (Inherited: 0x148)
class UCompositeDataTable : public UDataTable {
public:

	struct TArray<struct UDataTable*> ParentTables; // 0x148(0x10)
	struct TArray<struct UDataTable*> OldParentTables; // 0x158(0x10)
	char pad_168[0x8]; // 0x168(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CurveFloat
// Size: 0xd8 (Inherited: 0x38)
class UCurveFloat : public UCurveBase {
public:

	struct FRichCurve FloatCurve; // 0x38(0x98)
	bool bIsEventCurve; // 0xd0(0x01)
	char pad_D1[0x7]; // 0xd1(0x07)

	float GetFloatValue(float InTime); // Function Engine.CurveFloat.GetFloatValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d9c310
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CurveLinearColor
// Size: 0x2b8 (Inherited: 0x38)
class UCurveLinearColor : public UCurveBase {
public:

	struct FRichCurve FloatCurves[0x4]; // 0x38(0x260)
	float AdjustHue; // 0x298(0x04)
	float AdjustSaturation; // 0x29c(0x04)
	float AdjustBrightness; // 0x2a0(0x04)
	float AdjustBrightnessCurve; // 0x2a4(0x04)
	float AdjustVibrance; // 0x2a8(0x04)
	float AdjustMinAlpha; // 0x2ac(0x04)
	float AdjustMaxAlpha; // 0x2b0(0x04)
	char pad_2B4[0x4]; // 0x2b4(0x04)

	struct FLinearColor GetLinearColorValue(float InTime); // Function Engine.CurveLinearColor.GetLinearColorValue // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9da06f0
	struct FLinearColor GetClampedLinearColorValue(float InTime); // Function Engine.CurveLinearColor.GetClampedLinearColorValue // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d9fd70
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CurveVector
// Size: 0x200 (Inherited: 0x38)
class UCurveVector : public UCurveBase {
public:

	struct FRichCurve FloatCurves[0x3]; // 0x38(0x1c8)

	struct FVector GetVectorValue(float InTime); // Function Engine.CurveVector.GetVectorValue // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9da07c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DemoPendingNetGame
// Size: 0xc8 (Inherited: 0xc8)
class UDemoPendingNetGame : public UPendingNetGame {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DeviceProfile
// Size: 0xa0 (Inherited: 0x40)
class UDeviceProfile : public UTextureLODSettings {
public:

	struct FString DeviceType; // 0x40(0x10)
	struct FString BaseProfileName; // 0x50(0x10)
	struct UObject* Parent; // 0x60(0x08)
	char pad_68[0x18]; // 0x68(0x18)
	struct TArray<struct FString> CVars; // 0x80(0x10)
	char pad_90[0x10]; // 0x90(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DistributionFloat
// Size: 0x40 (Inherited: 0x38)
class UDistributionFloat : public UDistribution {
public:

	char bCanBeBaked : 1; // 0x38(0x01)
	char pad_38_1 : 1; // 0x38(0x01)
	char bBakedDataSuccesfully : 1; // 0x38(0x01)
	char pad_38_3 : 5; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DistributionVector
// Size: 0x40 (Inherited: 0x38)
class UDistributionVector : public UDistribution {
public:

	char bCanBeBaked : 1; // 0x38(0x01)
	char bIsDirty : 1; // 0x38(0x01)
	char bBakedDataSuccesfully : 1; // 0x38(0x01)
	char pad_38_3 : 5; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.EdGraphNode_Documentation
// Size: 0xc0 (Inherited: 0xa0)
class UEdGraphNode_Documentation : public UEdGraphNode {
public:

	struct FString link; // 0xa0(0x10)
	struct FString Excerpt; // 0xb0(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.EngineMessage
// Size: 0xb0 (Inherited: 0x30)
class UEngineMessage : public ULocalMessage {
public:

	struct FString FailedPlaceMessage; // 0x30(0x10)
	struct FString MaxedOutMessage; // 0x40(0x10)
	struct FString EnteredMessage; // 0x50(0x10)
	struct FString LeftMessage; // 0x60(0x10)
	struct FString GlobalNameChange; // 0x70(0x10)
	struct FString SpecEnteredMessage; // 0x80(0x10)
	struct FString NewPlayerMessage; // 0x90(0x10)
	struct FString NewSpecMessage; // 0xa0(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.HapticFeedbackEffect_Buffer
// Size: 0x70 (Inherited: 0x30)
class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base {
public:

	struct TArray<char> Amplitudes; // 0x30(0x10)
	int32_t SampleRate; // 0x40(0x04)
	char pad_44[0x2c]; // 0x44(0x2c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.HapticFeedbackEffect_Curve
// Size: 0x170 (Inherited: 0x30)
class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base {
public:

	struct FHapticFeedbackDetails_Curve HapticDetails; // 0x30(0x140)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.HapticFeedbackEffect_SoundWave
// Size: 0x68 (Inherited: 0x30)
class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base {
public:

	struct USoundWave* SoundWave; // 0x30(0x08)
	char pad_38[0x30]; // 0x38(0x30)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpFilter_Classes
// Size: 0x40 (Inherited: 0x40)
class UInterpFilter_Classes : public UInterpFilter {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpFilter_Custom
// Size: 0x40 (Inherited: 0x40)
class UInterpFilter_Custom : public UInterpFilter {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpGroupCamera
// Size: 0x68 (Inherited: 0x58)
class UInterpGroupCamera : public UInterpGroup {
public:

	struct UCameraAnim* CameraAnimInst; // 0x58(0x08)
	float CompressTolerance; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpGroupDirector
// Size: 0x58 (Inherited: 0x58)
class UInterpGroupDirector : public UInterpGroup {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpGroupInstCamera
// Size: 0x50 (Inherited: 0x50)
class UInterpGroupInstCamera : public UInterpGroupInst {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpGroupInstDirector
// Size: 0x50 (Inherited: 0x50)
class UInterpGroupInstDirector : public UInterpGroupInst {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialFunction
// Size: 0x70 (Inherited: 0x48)
class UMaterialFunction : public UMaterialFunctionInterface {
public:

	struct FString Description; // 0x48(0x10)
	struct TArray<struct UMaterialExpression*> FunctionExpressions; // 0x58(0x10)
	char bExposeToLibrary : 1; // 0x68(0x01)
	char bPrefixParameterNames : 1; // 0x68(0x01)
	char bUsedCustomVertexPosition : 1; // 0x68(0x01)
	char bReentrantFlag : 1; // 0x68(0x01)
	char pad_68_4 : 4; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialFunctionInstance
// Size: 0xd8 (Inherited: 0x48)
class UMaterialFunctionInstance : public UMaterialFunctionInterface {
public:

	struct UMaterialFunctionInterface* Parent; // 0x48(0x08)
	struct UMaterialFunctionInterface* Base; // 0x50(0x08)
	struct TArray<struct FScalarParameterValue> ScalarParameterValues; // 0x58(0x10)
	struct TArray<struct FVectorParameterValue> VectorParameterValues; // 0x68(0x10)
	struct TArray<struct FTextureParameterValue> TextureParameterValues; // 0x78(0x10)
	struct TArray<struct FSpriteTextureParameterValue> SpriteTextureParameterValues; // 0x88(0x10)
	struct TArray<struct FFontParameterValue> FontParameterValues; // 0x98(0x10)
	struct TArray<struct FStaticSwitchParameter> StaticSwitchParameterValues; // 0xa8(0x10)
	struct TArray<struct FStaticComponentMaskParameter> StaticComponentMaskParameterValues; // 0xb8(0x10)
	struct TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues; // 0xc8(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.NullNavSysConfig
// Size: 0x58 (Inherited: 0x58)
class UNullNavSysConfig : public UNavigationSystemConfig {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleSpriteEmitter
// Size: 0x1c0 (Inherited: 0x1c0)
class UParticleSpriteEmitter : public UParticleEmitter {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleAccelerationBase
// Size: 0x40 (Inherited: 0x38)
class UParticleModuleAccelerationBase : public UParticleModule {
public:

	char bAlwaysInWorldSpace : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleAttractorBase
// Size: 0x38 (Inherited: 0x38)
class UParticleModuleAttractorBase : public UParticleModule {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleBeamBase
// Size: 0x38 (Inherited: 0x38)
class UParticleModuleBeamBase : public UParticleModule {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleCameraBase
// Size: 0x38 (Inherited: 0x38)
class UParticleModuleCameraBase : public UParticleModule {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleCollisionBase
// Size: 0x38 (Inherited: 0x38)
class UParticleModuleCollisionBase : public UParticleModule {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleColorBase
// Size: 0x38 (Inherited: 0x38)
class UParticleModuleColorBase : public UParticleModule {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleEventBase
// Size: 0x38 (Inherited: 0x38)
class UParticleModuleEventBase : public UParticleModule {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleKillBase
// Size: 0x38 (Inherited: 0x38)
class UParticleModuleKillBase : public UParticleModule {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleLifetimeBase
// Size: 0x38 (Inherited: 0x38)
class UParticleModuleLifetimeBase : public UParticleModule {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleLightBase
// Size: 0x38 (Inherited: 0x38)
class UParticleModuleLightBase : public UParticleModule {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleLocationBase
// Size: 0x38 (Inherited: 0x38)
class UParticleModuleLocationBase : public UParticleModule {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleMaterialBase
// Size: 0x38 (Inherited: 0x38)
class UParticleModuleMaterialBase : public UParticleModule {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleRotationBase
// Size: 0x38 (Inherited: 0x38)
class UParticleModuleRotationBase : public UParticleModule {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleRotationRateBase
// Size: 0x38 (Inherited: 0x38)
class UParticleModuleRotationRateBase : public UParticleModule {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleOrbitBase
// Size: 0x40 (Inherited: 0x38)
class UParticleModuleOrbitBase : public UParticleModule {
public:

	char bUseEmitterTime : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleOrientationBase
// Size: 0x38 (Inherited: 0x38)
class UParticleModuleOrientationBase : public UParticleModule {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleParameterBase
// Size: 0x38 (Inherited: 0x38)
class UParticleModuleParameterBase : public UParticleModule {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleRequired
// Size: 0x148 (Inherited: 0x38)
class UParticleModuleRequired : public UParticleModule {
public:

	struct UMaterialInterface* Material; // 0x38(0x08)
	float MinFacingCameraBlendDistance; // 0x40(0x04)
	float MaxFacingCameraBlendDistance; // 0x44(0x04)
	struct FVector EmitterOrigin; // 0x48(0x0c)
	struct FRotator EmitterRotation; // 0x54(0x0c)
	enum class EParticleScreenAlignment ScreenAlignment; // 0x60(0x01)
	char bUseInLocalSpace : 1; // 0x61(0x01)
	char pad_61_1 : 1; // 0x61(0x01)
	char bUseFPPCamera : 1; // 0x61(0x01)
	char bKillOnDeactivate : 1; // 0x61(0x01)
	char bKillOnCompleted : 1; // 0x61(0x01)
	char pad_61_5 : 3; // 0x61(0x01)
	enum class EParticleSortMode SortMode; // 0x62(0x01)
	char bUseLegacyEmitterTime : 1; // 0x63(0x01)
	char bRemoveHMDRoll : 1; // 0x63(0x01)
	char bEmitterDurationUseRange : 1; // 0x63(0x01)
	char pad_63_3 : 5; // 0x63(0x01)
	float EmitterDuration; // 0x64(0x04)
	struct FRawDistributionFloat SpawnRate; // 0x68(0x30)
	struct TArray<struct FParticleBurst> BurstList; // 0x98(0x10)
	float EmitterDelay; // 0xa8(0x04)
	float EmitterDelayLow; // 0xac(0x04)
	char bDelayFirstLoopOnly : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	enum class EParticleSubUVInterpMethod InterpolationMethod; // 0xb1(0x01)
	char bScaleUV : 1; // 0xb2(0x01)
	char bEmitterDelayUseRange : 1; // 0xb2(0x01)
	char pad_B2_2 : 6; // 0xb2(0x01)
	enum class EParticleBurstMethod ParticleBurstMethod; // 0xb3(0x01)
	char bOverrideSystemMacroUV : 1; // 0xb4(0x01)
	char bUseMaxDrawCount : 1; // 0xb4(0x01)
	char pad_B4_2 : 6; // 0xb4(0x01)
	enum class EOpacitySourceMode OpacitySourceMode; // 0xb5(0x01)
	enum class EEmitterNormalsMode EmitterNormalsMode; // 0xb6(0x01)
	char bOrbitModuleAffectsVelocityAlignment : 1; // 0xb7(0x01)
	char pad_B7_1 : 7; // 0xb7(0x01)
	int32_t SubImages_Horizontal; // 0xb8(0x04)
	int32_t SubImages_Vertical; // 0xbc(0x04)
	float RandomImageTime; // 0xc0(0x04)
	int32_t RandomImageChanges; // 0xc4(0x04)
	struct FVector MacroUVPosition; // 0xc8(0x0c)
	float MacroUVRadius; // 0xd4(0x04)
	enum class EParticleUVFlipMode UVFlippingMode; // 0xd8(0x01)
	enum class ESubUVBoundingVertexCount BoundingMode; // 0xd9(0x01)
	char bDurationRecalcEachLoop : 1; // 0xda(0x01)
	char pad_DA_1 : 7; // 0xda(0x01)
	char pad_DB[0x1]; // 0xdb(0x01)
	struct FVector NormalsSphereCenter; // 0xdc(0x0c)
	float AlphaThreshold; // 0xe8(0x04)
	int32_t EmitterLoops; // 0xec(0x04)
	struct UTexture2D* CutoutTexture; // 0xf0(0x08)
	int32_t MaxDrawCount; // 0xf8(0x04)
	float EmitterDurationLow; // 0xfc(0x04)
	struct FVector NormalsCylinderDirection; // 0x100(0x0c)
	char pad_10C[0x4]; // 0x10c(0x04)
	struct TArray<struct FName> NamedMaterialOverrides; // 0x110(0x10)
	char pad_120[0x28]; // 0x120(0x28)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleSizeBase
// Size: 0x38 (Inherited: 0x38)
class UParticleModuleSizeBase : public UParticleModule {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleSpawnBase
// Size: 0x40 (Inherited: 0x38)
class UParticleModuleSpawnBase : public UParticleModule {
public:

	char bProcessSpawnRate : 1; // 0x38(0x01)
	char bProcessBurstList : 1; // 0x38(0x01)
	char pad_38_2 : 6; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleSubUVBase
// Size: 0x38 (Inherited: 0x38)
class UParticleModuleSubUVBase : public UParticleModule {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleTrailBase
// Size: 0x38 (Inherited: 0x38)
class UParticleModuleTrailBase : public UParticleModule {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleTypeDataBase
// Size: 0x38 (Inherited: 0x38)
class UParticleModuleTypeDataBase : public UParticleModule {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleVectorFieldBase
// Size: 0x38 (Inherited: 0x38)
class UParticleModuleVectorFieldBase : public UParticleModule {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleVelocityBase
// Size: 0x40 (Inherited: 0x38)
class UParticleModuleVelocityBase : public UParticleModule {
public:

	char bInWorldSpace : 1; // 0x38(0x01)
	char bApplyOwnerScale : 1; // 0x38(0x01)
	char pad_38_2 : 6; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleWindBase
// Size: 0x38 (Inherited: 0x38)
class UParticleModuleWindBase : public UParticleModule {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleSystem
// Size: 0x150 (Inherited: 0x38)
class UParticleSystem : public UFXSystemAsset {
public:

	float UpdateTime_FPS; // 0x38(0x04)
	float UpdateTime_Delta; // 0x3c(0x04)
	float WarmupTime; // 0x40(0x04)
	float WarmupTickRate; // 0x44(0x04)
	struct TArray<struct UParticleEmitter*> Emitters; // 0x48(0x10)
	struct UParticleSystemComponent* PreviewComponent; // 0x58(0x08)
	struct UInterpCurveEdSetup* CurveEdSetup; // 0x60(0x08)
	float LODDistanceCheckTime; // 0x68(0x04)
	float MacroUVRadius; // 0x6c(0x04)
	struct TArray<float> LODDistances; // 0x70(0x10)
	float CullingDistance; // 0x80(0x04)
	float CullingScreenSize; // 0x84(0x04)
	struct TArray<struct FParticleSystemLOD> LODSettings; // 0x88(0x10)
	struct FBox FixedRelativeBoundingBox; // 0x98(0x1c)
	struct FBox RenderOrderBoundingBox; // 0xb4(0x1c)
	float SecondsBeforeInactive; // 0xd0(0x04)
	float Delay; // 0xd4(0x04)
	float DelayLow; // 0xd8(0x04)
	char bOrientZAxisTowardCamera : 1; // 0xdc(0x01)
	char bUseFixedRelativeBoundingBox : 1; // 0xdc(0x01)
	char bUseRenderingOrderBoundingBox : 1; // 0xdc(0x01)
	char bShouldResetPeakCounts : 1; // 0xdc(0x01)
	char bHasPhysics : 1; // 0xdc(0x01)
	char bUseRealtimeThumbnail : 1; // 0xdc(0x01)
	char ThumbnailImageOutOfDate : 1; // 0xdc(0x01)
	char pad_DC_7 : 1; // 0xdc(0x01)
	char pad_DD_0 : 1; // 0xdd(0x01)
	char bUseDelayRange : 1; // 0xdd(0x01)
	char bAllowManagedTicking : 1; // 0xdd(0x01)
	char bAutoDeactivate : 1; // 0xdd(0x01)
	char bRegenerateLODDuplicate : 1; // 0xdd(0x01)
	char pad_DD_5 : 3; // 0xdd(0x01)
	enum class EParticleSystemUpdateMode SystemUpdateMode; // 0xde(0x01)
	char pad_DF[0x1]; // 0xdf(0x01)
	struct TArray<struct FName> AssetsTags; // 0xe0(0x10)
	enum class ParticleSystemLODMethod LODMethod; // 0xf0(0x01)
	enum class EParticleSystemInsignificanceReaction InsignificantReaction; // 0xf1(0x01)
	enum class EParticleSystemOcclusionBoundsMethod OcclusionBoundsMethod; // 0xf2(0x01)
	char pad_F3[0x1]; // 0xf3(0x01)
	enum class EParticleSignificanceLevel MaxSignificanceLevel; // 0xf4(0x01)
	char pad_F5[0x3]; // 0xf5(0x03)
	uint32_t MinTimeBetweenTicks; // 0xf8(0x04)
	float InsignificanceDelay; // 0xfc(0x04)
	struct FVector MacroUVPosition; // 0x100(0x0c)
	struct FBox CustomOcclusionBounds; // 0x10c(0x1c)
	struct TArray<struct FLODSoloTrack> SoloTracking; // 0x128(0x10)
	struct TArray<struct FNamedEmitterMaterial> NamedMaterialSlots; // 0x138(0x10)
	char pad_148[0x2]; // 0x148(0x02)
	char pad_14A_0 : 1; // 0x14a(0x01)
	char bIsImmortal : 1; // 0x14a(0x01)
	char bWillBecomeZombie : 1; // 0x14a(0x01)
	char pad_14A_3 : 5; // 0x14a(0x01)
	char pad_14B[0x5]; // 0x14b(0x05)

	bool WillBecomeZombie(); // Function Engine.ParticleSystem.WillBecomeZombie // (Final|Native|Public|Const) // @ game+0x9e691c0
	bool IsLooping(); // Function Engine.ParticleSystem.IsLooping // (Final|Native|Public|Const) // @ game+0x9e680c0
	bool IsImmortal(); // Function Engine.ParticleSystem.IsImmortal // (Final|Native|Public|Const) // @ game+0x9e68090
	bool ContainsEmitterType(struct UClass* TypeData); // Function Engine.ParticleSystem.ContainsEmitterType // (Final|Native|Public|BlueprintCallable) // @ game+0x9e67530
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PreBakeShadowDepthTileMap
// Size: 0x90 (Inherited: 0x68)
class UPreBakeShadowDepthTileMap : public UPreBakeShadowDepthMap {
public:

	struct FIntPoint TileIndex; // 0x68(0x08)
	struct FBoxSphereBounds ShadowTileBounds; // 0x70(0x1c)
	char pad_8C[0x4]; // 0x8c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ReporterGraph
// Size: 0xb0 (Inherited: 0x38)
class UReporterGraph : public UReporterBase {
public:

	char pad_38[0x78]; // 0x38(0x78)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNodeAssetReferencer
// Size: 0x48 (Inherited: 0x48)
class USoundNodeAssetReferencer : public USoundNode {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNodeAttenuation
// Size: 0x3a8 (Inherited: 0x48)
class USoundNodeAttenuation : public USoundNode {
public:

	struct USoundAttenuation* AttenuationSettings; // 0x48(0x08)
	struct FSoundAttenuationSettings AttenuationOverrides; // 0x50(0x350)
	char bOverrideAttenuation : 1; // 0x3a0(0x01)
	char pad_3A0_1 : 7; // 0x3a0(0x01)
	char pad_3A1[0x7]; // 0x3a1(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNodeBranch
// Size: 0x50 (Inherited: 0x48)
class USoundNodeBranch : public USoundNode {
public:

	struct FName BoolParameterName; // 0x48(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNodeConcatenator
// Size: 0x58 (Inherited: 0x48)
class USoundNodeConcatenator : public USoundNode {
public:

	struct TArray<float> InputVolume; // 0x48(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNodeDelay
// Size: 0x50 (Inherited: 0x48)
class USoundNodeDelay : public USoundNode {
public:

	float DelayMin; // 0x48(0x04)
	float DelayMax; // 0x4c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNodeDialoguePlayer
// Size: 0x70 (Inherited: 0x48)
class USoundNodeDialoguePlayer : public USoundNode {
public:

	struct FDialogueWaveParameter DialogueWaveParameter; // 0x48(0x20)
	char bLooping : 1; // 0x68(0x01)
	char pad_68_1 : 7; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNodeDistanceCrossFade
// Size: 0x58 (Inherited: 0x48)
class USoundNodeDistanceCrossFade : public USoundNode {
public:

	struct TArray<struct FDistanceDatum> CrossFadeInput; // 0x48(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNodeDoppler
// Size: 0x58 (Inherited: 0x48)
class USoundNodeDoppler : public USoundNode {
public:

	float DopplerIntensity; // 0x48(0x04)
	bool bUseSmoothing; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	float SmoothingInterpSpeed; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNodeEnveloper
// Size: 0x1c0 (Inherited: 0x48)
class USoundNodeEnveloper : public USoundNode {
public:

	float LoopStart; // 0x48(0x04)
	float LoopEnd; // 0x4c(0x04)
	float DurationAfterLoop; // 0x50(0x04)
	int32_t LoopCount; // 0x54(0x04)
	char bLoopIndefinitely : 1; // 0x58(0x01)
	char bLoop : 1; // 0x58(0x01)
	char pad_58_2 : 6; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
	struct UDistributionFloatConstantCurve* VolumeInterpCurve; // 0x60(0x08)
	struct UDistributionFloatConstantCurve* PitchInterpCurve; // 0x68(0x08)
	struct FRuntimeFloatCurve VolumeCurve; // 0x70(0xa0)
	struct FRuntimeFloatCurve PitchCurve; // 0x110(0xa0)
	float PitchMin; // 0x1b0(0x04)
	float PitchMax; // 0x1b4(0x04)
	float VolumeMin; // 0x1b8(0x04)
	float VolumeMax; // 0x1bc(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNodeGroupControl
// Size: 0x58 (Inherited: 0x48)
class USoundNodeGroupControl : public USoundNode {
public:

	struct TArray<int32_t> GroupSizes; // 0x48(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNodeLooping
// Size: 0x50 (Inherited: 0x48)
class USoundNodeLooping : public USoundNode {
public:

	int32_t LoopCount; // 0x48(0x04)
	char bLoopIndefinitely : 1; // 0x4c(0x01)
	char pad_4C_1 : 7; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNodeMature
// Size: 0x48 (Inherited: 0x48)
class USoundNodeMature : public USoundNode {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNodeMixer
// Size: 0x58 (Inherited: 0x48)
class USoundNodeMixer : public USoundNode {
public:

	struct TArray<float> InputVolume; // 0x48(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNodeModulator
// Size: 0x58 (Inherited: 0x48)
class USoundNodeModulator : public USoundNode {
public:

	float PitchMin; // 0x48(0x04)
	float PitchMax; // 0x4c(0x04)
	float VolumeMin; // 0x50(0x04)
	float VolumeMax; // 0x54(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNodeModulatorContinuous
// Size: 0x88 (Inherited: 0x48)
class USoundNodeModulatorContinuous : public USoundNode {
public:

	struct FModulatorContinuousParams PitchModulationParams; // 0x48(0x20)
	struct FModulatorContinuousParams VolumeModulationParams; // 0x68(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNodeOscillator
// Size: 0x70 (Inherited: 0x48)
class USoundNodeOscillator : public USoundNode {
public:

	char bModulateVolume : 1; // 0x48(0x01)
	char bModulatePitch : 1; // 0x48(0x01)
	char pad_48_2 : 6; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	float AmplitudeMin; // 0x4c(0x04)
	float AmplitudeMax; // 0x50(0x04)
	float FrequencyMin; // 0x54(0x04)
	float FrequencyMax; // 0x58(0x04)
	float OffsetMin; // 0x5c(0x04)
	float OffsetMax; // 0x60(0x04)
	float CenterMin; // 0x64(0x04)
	float CenterMax; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNodeQualityLevel
// Size: 0x48 (Inherited: 0x48)
class USoundNodeQualityLevel : public USoundNode {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNodeRandom
// Size: 0x78 (Inherited: 0x48)
class USoundNodeRandom : public USoundNode {
public:

	struct TArray<float> Weights; // 0x48(0x10)
	struct TArray<bool> HasBeenUsed; // 0x58(0x10)
	int32_t NumRandomUsed; // 0x68(0x04)
	int32_t PreselectAtLevelLoad; // 0x6c(0x04)
	char bShouldExcludeFromBranchCulling : 1; // 0x70(0x01)
	char bSoundCueExcludedFromBranchCulling : 1; // 0x70(0x01)
	char bRandomizeWithoutReplacement : 1; // 0x70(0x01)
	char pad_70_3 : 5; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNodeSoundClass
// Size: 0x50 (Inherited: 0x48)
class USoundNodeSoundClass : public USoundNode {
public:

	struct USoundClass* SoundClassOverride; // 0x48(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNodeSwitch
// Size: 0x50 (Inherited: 0x48)
class USoundNodeSwitch : public USoundNode {
public:

	struct FName IntParameterName; // 0x48(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNodeWaveParam
// Size: 0x50 (Inherited: 0x48)
class USoundNodeWaveParam : public USoundNode {
public:

	struct FName WaveParameterName; // 0x48(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SystemTimeTimecodeProvider
// Size: 0x48 (Inherited: 0x38)
class USystemTimeTimecodeProvider : public UTimecodeProvider {
public:

	struct FFrameRate FrameRate; // 0x38(0x08)
	char pad_40[0x8]; // 0x40(0x08)

	void SetFrameRate(struct FFrameRate& InFrameRate); // Function Engine.SystemTimeTimecodeProvider.SetFrameRate // (Final|Native|Public|HasOutParms) // @ game+0x9ec2530
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.VectorFieldAnimated
// Size: 0x90 (Inherited: 0x50)
class UVectorFieldAnimated : public UVectorField {
public:

	struct UTexture2D* Texture; // 0x50(0x08)
	/*enum class EVectorFieldConstructionOp*/char ConstructionOp[0x1]; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	int32_t VolumeSizeX; // 0x5c(0x04)
	int32_t VolumeSizeY; // 0x60(0x04)
	int32_t VolumeSizeZ; // 0x64(0x04)
	int32_t SubImagesX; // 0x68(0x04)
	int32_t SubImagesY; // 0x6c(0x04)
	int32_t FrameCount; // 0x70(0x04)
	float FramesPerSecond; // 0x74(0x04)
	char bLoop : 1; // 0x78(0x01)
	char pad_78_1 : 7; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
	struct UVectorFieldStatic* NoiseField; // 0x80(0x08)
	float NoiseScale; // 0x88(0x04)
	float NoiseMax; // 0x8c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.VectorFieldStatic
// Size: 0x110 (Inherited: 0x50)
class UVectorFieldStatic : public UVectorField {
public:

	int32_t SizeX; // 0x50(0x04)
	int32_t SizeY; // 0x54(0x04)
	int32_t SizeZ; // 0x58(0x04)
	bool bAllowCPUAccess; // 0x5c(0x01)
	char pad_5D[0xa3]; // 0x5d(0xa3)
	struct TArray<struct FVector4> CPUData; // 0x100(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LightMapVirtualTexture
// Size: 0x30 (Inherited: 0x30)
class ULightMapVirtualTexture : public UVirtualTexture {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.EngineSubsystem
// Size: 0x38 (Inherited: 0x38)
class UEngineSubsystem : public UDynamicSubsystem {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.GpuMergeTextureTaskManager
// Size: 0x58 (Inherited: 0x38)
class UGpuMergeTextureTaskManager : public UWorldSubsystem {
public:

	char pad_38[0x8]; // 0x38(0x08)
	struct TArray<struct UGpuMergeTextureTask*> TaskQueue; // 0x40(0x10)
	char pad_50[0x8]; // 0x50(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TOD_ReflectionManager
// Size: 0x130 (Inherited: 0x38)
class UTOD_ReflectionManager : public UWorldSubsystem {
public:

	/*struct TSet<struct AReflectionCapture*>*/char ReflectionCaptureActors[0x50]; // 0x38(0x50)
	char pad_88[0xa8]; // 0x88(0xa8)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TODManager
// Size: 0x58 (Inherited: 0x38)
class UTODManager : public UWorldSubsystem {
public:

	struct AActor* TODSequenceActor; // 0x38(0x08)
	struct UNZSkyBoxComponent* SkyBoxComponent; // 0x40(0x08)
	struct UNZSkyBoxComponent* SkyBoxComponentToSwitch; // 0x48(0x08)
	char pad_50[0x8]; // 0x50(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.WorldSettings
// Size: 0x588 (Inherited: 0x378)
class AWorldSettings : public AInfo {
public:

	char pad_378[0x8]; // 0x378(0x08)
	int32_t VisibilityCellSize; // 0x380(0x04)
	enum class EVisibilityAggressiveness VisibilityAggressiveness; // 0x384(0x01)
	char bPrecomputeVisibility : 1; // 0x385(0x01)
	char bPlaceCellsOnlyAlongCameraTracks : 1; // 0x385(0x01)
	char bEnableWorldBoundsChecks : 1; // 0x385(0x01)
	char bDynamicSpecularLighting : 1; // 0x385(0x01)
	char bDynamicSpotLightShadowMap : 1; // 0x385(0x01)
	char bEnableLightmapShareLOD : 1; // 0x385(0x01)
	char pad_385_6 : 2; // 0x385(0x01)
	char pad_386[0x2]; // 0x386(0x02)
	struct FString BakeBlueprintPath; // 0x388(0x10)
	char bEnableNavigationSystem : 1; // 0x398(0x01)
	char pad_398_1 : 7; // 0x398(0x01)
	enum class EWorldScale WorldScale; // 0x399(0x01)
	char bEnableAISystem : 1; // 0x39a(0x01)
	char bForceUseILC : 1; // 0x39a(0x01)
	char bEnableWorldComposition : 1; // 0x39a(0x01)
	char pad_39A_3 : 5; // 0x39a(0x01)
	char pad_39B[0x5]; // 0x39b(0x05)
	struct UClass* WorldCompositionClass; // 0x3a0(0x08)
	char bUseClientSideLevelStreamingVolumes : 1; // 0x3a8(0x01)
	char bEnableWorldOriginRebasing : 1; // 0x3a8(0x01)
	char bWorldGravitySet : 1; // 0x3a8(0x01)
	char bGlobalGravitySet : 1; // 0x3a8(0x01)
	char bMinimizeBSPSections : 1; // 0x3a8(0x01)
	char bForceNoPrecomputedLighting : 1; // 0x3a8(0x01)
	char pad_3A8_6 : 2; // 0x3a8(0x01)
	char pad_3A9[0x3]; // 0x3a9(0x03)
	int32_t SampleNumberForProduction; // 0x3ac(0x04)
	int32_t ResolutionScaleForBaking; // 0x3b0(0x04)
	char bHighPriorityLoading : 1; // 0x3b4(0x01)
	char bHighPriorityLoadingLocal : 1; // 0x3b4(0x01)
	char bOverrideDefaultBroadphaseSettings : 1; // 0x3b4(0x01)
	char pad_3B4_3 : 5; // 0x3b4(0x01)
	enum class EStaticShadowmapScale StaticShadowmapScale; // 0x3b5(0x01)
	enum class EStaticShadowmapScale StaticSHDirectionScale; // 0x3b6(0x01)
	char pad_3B7[0x1]; // 0x3b7(0x01)
	struct UNavigationSystemConfig* NavigationSystemConfig; // 0x3b8(0x08)
	struct UNavigationSystemConfig* NavigationSystemConfigOverride; // 0x3c0(0x08)
	float WorldToMeters; // 0x3c8(0x04)
	float KillZ; // 0x3cc(0x04)
	struct UClass* KillZDamageType; // 0x3d0(0x08)
	float WorldGravityZ; // 0x3d8(0x04)
	float GlobalGravityZ; // 0x3dc(0x04)
	struct UClass* DefaultPhysicsVolumeClass; // 0x3e0(0x08)
	struct UClass* PhysicsCollisionHandlerClass; // 0x3e8(0x08)
	struct UClass* DefaultGameMode; // 0x3f0(0x08)
	struct UClass* GameNetworkManagerClass; // 0x3f8(0x08)
	int32_t PackedLightAndShadowMapTextureSize; // 0x400(0x04)
	struct FVector DefaultColorScale; // 0x404(0x0c)
	float DefaultMaxDistanceFieldOcclusionDistance; // 0x410(0x04)
	float GlobalDistanceFieldViewDistance; // 0x414(0x04)
	float DynamicIndirectShadowsSelfShadowingIntensity; // 0x418(0x04)
	struct FExposureConversion ExposureConversionSettings; // 0x41c(0x20)
	struct FLightmapNormalParameters LightmapNormalParameters; // 0x43c(0x0c)
	struct FReverbSettings DefaultReverbSettings; // 0x448(0x20)
	struct FInteriorSettings DefaultAmbientZoneSettings; // 0x468(0x24)
	float MonoCullingDistance; // 0x48c(0x04)
	struct USoundMix* DefaultBaseSoundMix; // 0x490(0x08)
	float TimeDilation; // 0x498(0x04)
	float MatineeTimeDilation; // 0x49c(0x04)
	float DemoPlayTimeDilation; // 0x4a0(0x04)
	float MinGlobalTimeDilation; // 0x4a4(0x04)
	float MaxGlobalTimeDilation; // 0x4a8(0x04)
	float MinUndilatedFrameTime; // 0x4ac(0x04)
	float MaxUndilatedFrameTime; // 0x4b0(0x04)
	struct FBroadphaseSettings BroadphaseSettings; // 0x4b4(0x40)
	char pad_4F4[0x4]; // 0x4f4(0x04)
	struct APlayerState* Pauser; // 0x4f8(0x08)
	struct TArray<struct FNetViewer> ReplicationViewers; // 0x500(0x10)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x510(0x10)
	struct APlayerState* PauserPlayerState; // 0x520(0x08)
	int32_t MaxNumberOfBookmarks; // 0x528(0x04)
	char pad_52C[0x4]; // 0x52c(0x04)
	struct UClass* DefaultBookmarkClass; // 0x530(0x08)
	struct TArray<struct UBookmarkBase*> BookmarkArray; // 0x538(0x10)
	struct TArray<struct AActor*> DelayBeginPlayArray; // 0x548(0x10)
	char pad_558[0x20]; // 0x558(0x20)
	float BudgetBeginPlayPerFrame; // 0x578(0x04)
	char pad_57C[0x4]; // 0x57c(0x04)
	struct UClass* LastBookmarkClass; // 0x580(0x08)

	void OnRep_WorldGravityZ(); // Function Engine.WorldSettings.OnRep_WorldGravityZ // (Native|Public) // @ game+0xbd2900
	bool IsEnableLightmapShareLOD(); // Function Engine.WorldSettings.IsEnableLightmapShareLOD // (Final|Native|Public|Const) // @ game+0x9ed0f40
	void DoDelayActorBeginPlay(); // Function Engine.WorldSettings.DoDelayActorBeginPlay // (Final|Native|Private) // @ game+0x9ed0f20
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.GameModeBase
// Size: 0x418 (Inherited: 0x378)
class AGameModeBase : public AInfo {
public:

	struct FString OptionsString; // 0x378(0x10)
	struct UClass* GameSessionClass; // 0x388(0x08)
	struct UClass* GameStateClass; // 0x390(0x08)
	struct UClass* PlayerControllerClass; // 0x398(0x08)
	struct UClass* PlayerStateClass; // 0x3a0(0x08)
	struct UClass* HUDClass; // 0x3a8(0x08)
	struct UClass* DefaultPawnClass; // 0x3b0(0x08)
	struct UClass* SpectatorClass; // 0x3b8(0x08)
	struct UClass* ReplaySpectatorPlayerControllerClass; // 0x3c0(0x08)
	struct UClass* ServerStatReplicatorClass; // 0x3c8(0x08)
	struct AGameSession* GameSession; // 0x3d0(0x08)
	struct AGameStateBase* GameState; // 0x3d8(0x08)
	struct AServerStatReplicator* ServerStatReplicator; // 0x3e0(0x08)
	struct FText DefaultPlayerName; // 0x3e8(0x18)
	char bUseSeamlessTravel : 1; // 0x400(0x01)
	char bStartPlayersAsSpectators : 1; // 0x400(0x01)
	char bPauseable : 1; // 0x400(0x01)
	char pad_400_3 : 5; // 0x400(0x01)
	char pad_401[0x17]; // 0x401(0x17)

	void StartPlay(); // Function Engine.GameModeBase.StartPlay // (Native|Public|BlueprintCallable) // @ game+0x2277c70
	struct APawn* SpawnDefaultPawnFor(struct AController* NewPlayer, struct AActor* StartSpot); // Function Engine.GameModeBase.SpawnDefaultPawnFor // (Native|Event|Public|BlueprintEvent) // @ game+0x9dc18b0
	struct APawn* SpawnDefaultPawnAtTransform(struct AController* NewPlayer, struct FTransform& SpawnTransform); // Function Engine.GameModeBase.SpawnDefaultPawnAtTransform // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x9dc1790
	bool ShouldReset(struct AActor* ActorToReset); // Function Engine.GameModeBase.ShouldReset // (Native|Event|Public|BlueprintEvent) // @ game+0x9dc12b0
	void ReturnToMainMenuHost(); // Function Engine.GameModeBase.ReturnToMainMenuHost // (Native|Public|BlueprintCallable) // @ game+0xbcc840
	void RestartPlayerAtTransform(struct AController* NewPlayer, struct FTransform& SpawnTransform); // Function Engine.GameModeBase.RestartPlayerAtTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9dc02b0
	void RestartPlayerAtPlayerStart(struct AController* NewPlayer, struct AActor* StartSpot); // Function Engine.GameModeBase.RestartPlayerAtPlayerStart // (Native|Public|BlueprintCallable) // @ game+0x9dc01e0
	void RestartPlayer(struct AController* NewPlayer); // Function Engine.GameModeBase.RestartPlayer // (Native|Public|BlueprintCallable) // @ game+0x63bb610
	void ResetLevel(); // Function Engine.GameModeBase.ResetLevel // (Native|Public|BlueprintCallable) // @ game+0x128d870
	bool PlayerCanRestart(struct APlayerController* Player); // Function Engine.GameModeBase.PlayerCanRestart // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x36b1e20
	bool MustSpectate(struct APlayerController* NewPlayerController); // Function Engine.GameModeBase.MustSpectate // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x9dbebc0
	void K2_PostLogin(struct APlayerController* NewPlayer); // Function Engine.GameModeBase.K2_PostLogin // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void K2_OnSwapPlayerControllers(struct APlayerController* OldPC, struct APlayerController* NewPC); // Function Engine.GameModeBase.K2_OnSwapPlayerControllers // (Event|Protected|BlueprintEvent) // @ game+0x7ed88c0
	void K2_OnRestartPlayer(struct AController* NewPlayer); // Function Engine.GameModeBase.K2_OnRestartPlayer // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void K2_OnLogout(struct AController* ExitingController); // Function Engine.GameModeBase.K2_OnLogout // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void K2_OnChangeName(struct AController* Other, struct FString NewName, bool bNameChange); // Function Engine.GameModeBase.K2_OnChangeName // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	struct AActor* K2_FindPlayerStart(struct AController* Player, struct FString IncomingName); // Function Engine.GameModeBase.K2_FindPlayerStart // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9dbe2f0
	void InitStartSpot(struct AActor* StartSpot, struct AController* NewPlayer); // Function Engine.GameModeBase.InitStartSpot // (Native|Event|Public|BlueprintEvent) // @ game+0x9dbe120
	void InitializeHUDForPlayer(struct APlayerController* NewPlayer); // Function Engine.GameModeBase.InitializeHUDForPlayer // (Native|Event|Protected|BlueprintEvent) // @ game+0x61daa40
	bool HasMatchStarted(); // Function Engine.GameModeBase.HasMatchStarted // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dbdf60
	void HandleStartingNewPlayer(struct APlayerController* NewPlayer); // Function Engine.GameModeBase.HandleStartingNewPlayer // (Native|Event|Public|BlueprintEvent) // @ game+0x9dbde10
	int32_t GetNumSpectators(); // Function Engine.GameModeBase.GetNumSpectators // (Native|Public|BlueprintCallable) // @ game+0x9dbcf20
	int32_t GetNumPlayers(); // Function Engine.GameModeBase.GetNumPlayers // (Native|Public|BlueprintCallable) // @ game+0x9dbcef0
	struct UClass* GetDefaultPawnClassForController(struct AController* InController); // Function Engine.GameModeBase.GetDefaultPawnClassForController // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x9dbc7d0
	struct AActor* FindPlayerStart(struct AController* Player, struct FString IncomingName); // Function Engine.GameModeBase.FindPlayerStart // (Native|Event|Public|BlueprintEvent) // @ game+0x9dbb950
	struct AActor* ChoosePlayerStart(struct AController* Player); // Function Engine.GameModeBase.ChoosePlayerStart // (Native|Event|Public|BlueprintEvent) // @ game+0x9dbac50
	void ChangeName(struct AController* Controller, struct FString NewName, bool bNameChange); // Function Engine.GameModeBase.ChangeName // (Native|Public|BlueprintCallable) // @ game+0x9dbab00
	bool CanSpectate(struct APlayerController* Viewer, struct APlayerState* ViewTarget); // Function Engine.GameModeBase.CanSpectate // (Native|Event|Public|BlueprintEvent) // @ game+0x9dbaa10
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.GameSession
// Size: 0x390 (Inherited: 0x378)
class AGameSession : public AInfo {
public:

	int32_t MaxSpectators; // 0x378(0x04)
	int32_t MaxPlayers; // 0x37c(0x04)
	int32_t MaxPartySize; // 0x380(0x04)
	char MaxSplitscreensPerConnection; // 0x384(0x01)
	bool bRequiresPushToTalk; // 0x385(0x01)
	char pad_386[0x2]; // 0x386(0x02)
	struct FName SessionName; // 0x388(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.GameStateBase
// Size: 0x3b8 (Inherited: 0x378)
class AGameStateBase : public AInfo {
public:

	struct UClass* GameModeClass; // 0x378(0x08)
	struct AGameModeBase* AuthorityGameMode; // 0x380(0x08)
	struct UClass* SpectatorClass; // 0x388(0x08)
	struct TArray<struct APlayerState*> PlayerArray; // 0x390(0x10)
	bool bReplicatedHasBegunPlay; // 0x3a0(0x01)
	char pad_3A1[0x3]; // 0x3a1(0x03)
	float ReplicatedWorldTimeSeconds; // 0x3a4(0x04)
	float ServerWorldTimeSecondsDelta; // 0x3a8(0x04)
	float ServerWorldTimeSecondsUpdateFrequency; // 0x3ac(0x04)
	char pad_3B0[0x8]; // 0x3b0(0x08)

	void OnRep_SpectatorClass(); // Function Engine.GameStateBase.OnRep_SpectatorClass // (Native|Protected) // @ game+0x48d32b0
	void OnRep_ReplicatedWorldTimeSeconds(); // Function Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds // (Native|Protected) // @ game+0xbcc5c0
	void OnRep_ReplicatedHasBegunPlay(); // Function Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay // (Native|Protected) // @ game+0x632ca20
	void OnRep_GameModeClass(); // Function Engine.GameStateBase.OnRep_GameModeClass // (Native|Protected) // @ game+0x632ccb0
	bool HasMatchStarted(); // Function Engine.GameStateBase.HasMatchStarted // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x78381d0
	bool HasBegunPlay(); // Function Engine.GameStateBase.HasBegunPlay // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc62f0
	float GetServerWorldTimeSeconds(); // Function Engine.GameStateBase.GetServerWorldTimeSeconds // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc6190
	float GetPlayerStartTime(struct AController* Controller); // Function Engine.GameStateBase.GetPlayerStartTime // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc5ca0
	float GetPlayerRespawnDelay(struct AController* Controller); // Function Engine.GameStateBase.GetPlayerRespawnDelay // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dc5c00
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PlayerState
// Size: 0x4a0 (Inherited: 0x378)
class APlayerState : public AInfo {
public:

	float Score; // 0x378(0x04)
	char pad_37C[0x4]; // 0x37c(0x04)
	struct FString PlayerName; // 0x380(0x10)
	char pad_390[0x10]; // 0x390(0x10)
	int32_t PlayerId; // 0x3a0(0x04)
	char Ping; // 0x3a4(0x01)
	char pad_3A5[0x1]; // 0x3a5(0x01)
	char bShouldUpdateReplicatedPing : 1; // 0x3a6(0x01)
	char bIsSpectator : 1; // 0x3a6(0x01)
	char bOnlySpectator : 1; // 0x3a6(0x01)
	char bIsABot : 1; // 0x3a6(0x01)
	char pad_3A6_4 : 1; // 0x3a6(0x01)
	char bIsInactive : 1; // 0x3a6(0x01)
	char bFromPreviousLevel : 1; // 0x3a6(0x01)
	char pad_3A6_7 : 1; // 0x3a6(0x01)
	char pad_3A7[0x1]; // 0x3a7(0x01)
	int32_t StartTime; // 0x3a8(0x04)
	char pad_3AC[0x4]; // 0x3ac(0x04)
	struct UClass* EngineMessageClass; // 0x3b0(0x08)
	char pad_3B8[0x8]; // 0x3b8(0x08)
	struct FString SavedNetworkAddress; // 0x3c0(0x10)
	struct FUniqueNetIdRepl UniqueId; // 0x3d0(0x28)
	char pad_3F8[0x8]; // 0x3f8(0x08)
	struct APawn* PawnPrivate; // 0x400(0x08)
	char pad_408[0x78]; // 0x408(0x78)
	struct FString PlayerNamePrivate; // 0x480(0x10)
	char pad_490[0x10]; // 0x490(0x10)

	void ReceiveOverrideWith(struct APlayerState* OldPlayerState); // Function Engine.PlayerState.ReceiveOverrideWith // (Event|Protected|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveCopyProperties(struct APlayerState* NewPlayerState); // Function Engine.PlayerState.ReceiveCopyProperties // (Event|Protected|BlueprintEvent) // @ game+0x7ed88c0
	void OnRep_UniqueId(); // Function Engine.PlayerState.OnRep_UniqueId // (Native|Public) // @ game+0xbd5ba0
	void OnRep_Score(); // Function Engine.PlayerState.OnRep_Score // (Native|Public) // @ game+0xbd2900
	void OnRep_PlayerName(); // Function Engine.PlayerState.OnRep_PlayerName // (Native|Public) // @ game+0xbcc1a0
	void OnRep_PlayerId(); // Function Engine.PlayerState.OnRep_PlayerId // (Native|Public) // @ game+0xbcb880
	void OnRep_bIsInactive(); // Function Engine.PlayerState.OnRep_bIsInactive // (Native|Public) // @ game+0xbcb8a0
	struct FString GetPlayerName(); // Function Engine.PlayerState.GetPlayerName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e82ea0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SkyLight
// Size: 0x388 (Inherited: 0x378)
class ASkyLight : public AInfo {
public:

	struct USkyLightComponent* LightComponent; // 0x378(0x08)
	char bEnabled : 1; // 0x380(0x01)
	char pad_380_1 : 7; // 0x380(0x01)
	char pad_381[0x7]; // 0x381(0x07)

	void OnRep_bEnabled(); // Function Engine.SkyLight.OnRep_bEnabled // (Native|Public) // @ game+0xbd2900
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AtmosphericFog
// Size: 0x380 (Inherited: 0x378)
class AAtmosphericFog : public AInfo {
public:

	struct UAtmosphericFogComponent* AtmosphericFogComponent; // 0x378(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ExponentialHeightFog
// Size: 0x388 (Inherited: 0x378)
class AExponentialHeightFog : public AInfo {
public:

	struct UExponentialHeightFogComponent* Component; // 0x378(0x08)
	char bEnabled : 1; // 0x380(0x01)
	char pad_380_1 : 7; // 0x380(0x01)
	char pad_381[0x7]; // 0x381(0x07)

	void OnRep_bEnabled(); // Function Engine.ExponentialHeightFog.OnRep_bEnabled // (Native|Public) // @ game+0xbd2900
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.GameNetworkManager
// Size: 0x428 (Inherited: 0x378)
class AGameNetworkManager : public AInfo {
public:

	float BadPacketLossThreshold; // 0x378(0x04)
	float SeverePacketLossThreshold; // 0x37c(0x04)
	int32_t BadPingThreshold; // 0x380(0x04)
	int32_t SeverePingThreshold; // 0x384(0x04)
	int32_t AdjustedNetSpeed; // 0x388(0x04)
	float LastNetSpeedUpdateTime; // 0x38c(0x04)
	int32_t TotalNetBandwidth; // 0x390(0x04)
	int32_t MinDynamicBandwidth; // 0x394(0x04)
	int32_t MaxDynamicBandwidth; // 0x398(0x04)
	char bIsStandbyCheckingEnabled : 1; // 0x39c(0x01)
	char bHasStandbyCheatTriggered : 1; // 0x39c(0x01)
	char pad_39C_2 : 6; // 0x39c(0x01)
	char pad_39D[0x3]; // 0x39d(0x03)
	float StandbyRxCheatTime; // 0x3a0(0x04)
	float StandbyTxCheatTime; // 0x3a4(0x04)
	float PercentMissingForRxStandby; // 0x3a8(0x04)
	float PercentMissingForTxStandby; // 0x3ac(0x04)
	float PercentForBadPing; // 0x3b0(0x04)
	float JoinInProgressStandbyWaitTime; // 0x3b4(0x04)
	float MoveRepSize; // 0x3b8(0x04)
	float MAXPOSITIONERRORSQUARED; // 0x3bc(0x04)
	float MAXNEARZEROVELOCITYSQUARED; // 0x3c0(0x04)
	float CLIENTADJUSTUPDATECOST; // 0x3c4(0x04)
	float MAXCLIENTUPDATEINTERVAL; // 0x3c8(0x04)
	float MaxClientForcedUpdateDuration; // 0x3cc(0x04)
	float ServerForcedUpdateHitchThreshold; // 0x3d0(0x04)
	float ServerForcedUpdateHitchCooldown; // 0x3d4(0x04)
	float MaxMoveDeltaTime; // 0x3d8(0x04)
	float MaxClientSmoothingDeltaTime; // 0x3dc(0x04)
	float ClientNetSendMoveDeltaTime; // 0x3e0(0x04)
	float ClientNetSendMoveDeltaTimeThrottled; // 0x3e4(0x04)
	float ClientNetSendMoveDeltaTimeStationary; // 0x3e8(0x04)
	int32_t ClientNetSendMoveThrottleAtNetSpeed; // 0x3ec(0x04)
	int32_t ClientNetSendMoveThrottleOverPlayerCount; // 0x3f0(0x04)
	bool ClientAuthorativePosition; // 0x3f4(0x01)
	char pad_3F5[0x3]; // 0x3f5(0x03)
	float ClientErrorUpdateRateLimit; // 0x3f8(0x04)
	float ClientNetCamUpdateDeltaTime; // 0x3fc(0x04)
	float ClientNetCamUpdatePositionLimit; // 0x400(0x04)
	bool bMovementTimeDiscrepancyDetection; // 0x404(0x01)
	bool bMovementTimeDiscrepancyResolution; // 0x405(0x01)
	char pad_406[0x2]; // 0x406(0x02)
	float MovementTimeDiscrepancyMaxTimeMargin; // 0x408(0x04)
	float MovementTimeDiscrepancyMinTimeMargin; // 0x40c(0x04)
	float MovementTimeDiscrepancyResolutionRate; // 0x410(0x04)
	float MovementTimeDiscrepancyDriftAllowance; // 0x414(0x04)
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // 0x418(0x01)
	bool bUseDistanceBasedRelevancy; // 0x419(0x01)
	char pad_41A[0xe]; // 0x41a(0x0e)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ServerStatReplicator
// Size: 0x440 (Inherited: 0x378)
class AServerStatReplicator : public AInfo {
public:

	bool bUpdateStatNet; // 0x378(0x01)
	bool bOverwriteClientStats; // 0x379(0x01)
	char pad_37A[0x2]; // 0x37a(0x02)
	uint32_t Channels; // 0x37c(0x04)
	uint32_t InRate; // 0x380(0x04)
	uint32_t OutRate; // 0x384(0x04)
	uint32_t OutSaturation; // 0x388(0x04)
	uint32_t MaxPacketOverhead; // 0x38c(0x04)
	uint32_t InRateClientMax; // 0x390(0x04)
	uint32_t InRateClientMin; // 0x394(0x04)
	uint32_t InRateClientAvg; // 0x398(0x04)
	uint32_t InPacketsClientMax; // 0x39c(0x04)
	uint32_t InPacketsClientMin; // 0x3a0(0x04)
	uint32_t InPacketsClientAvg; // 0x3a4(0x04)
	uint32_t OutRateClientMax; // 0x3a8(0x04)
	uint32_t OutRateClientMin; // 0x3ac(0x04)
	uint32_t OutRateClientAvg; // 0x3b0(0x04)
	uint32_t OutPacketsClientMax; // 0x3b4(0x04)
	uint32_t OutPacketsClientMin; // 0x3b8(0x04)
	uint32_t OutPacketsClientAvg; // 0x3bc(0x04)
	uint32_t NetNumClients; // 0x3c0(0x04)
	uint32_t InPackets; // 0x3c4(0x04)
	uint32_t OutPackets; // 0x3c8(0x04)
	uint32_t InBunches; // 0x3cc(0x04)
	uint32_t OutBunches; // 0x3d0(0x04)
	uint32_t OutLoss; // 0x3d4(0x04)
	uint32_t InLoss; // 0x3d8(0x04)
	uint32_t VoiceBytesSent; // 0x3dc(0x04)
	uint32_t VoiceBytesRecv; // 0x3e0(0x04)
	uint32_t VoicePacketsSent; // 0x3e4(0x04)
	uint32_t VoicePacketsRecv; // 0x3e8(0x04)
	uint32_t PercentInVoice; // 0x3ec(0x04)
	uint32_t PercentOutVoice; // 0x3f0(0x04)
	uint32_t NumActorChannels; // 0x3f4(0x04)
	uint32_t NumConsideredActors; // 0x3f8(0x04)
	uint32_t PrioritizedActors; // 0x3fc(0x04)
	uint32_t NumRelevantActors; // 0x400(0x04)
	uint32_t NumRelevantDeletedActors; // 0x404(0x04)
	uint32_t NumReplicatedActorAttempts; // 0x408(0x04)
	uint32_t NumReplicatedActors; // 0x40c(0x04)
	uint32_t NumActors; // 0x410(0x04)
	uint32_t NumNetActors; // 0x414(0x04)
	uint32_t NumDormantActors; // 0x418(0x04)
	uint32_t NumInitiallyDormantActors; // 0x41c(0x04)
	uint32_t NumNetGUIDsAckd; // 0x420(0x04)
	uint32_t NumNetGUIDsPending; // 0x424(0x04)
	uint32_t NumNetGUIDsUnAckd; // 0x428(0x04)
	uint32_t ObjPathBytes; // 0x42c(0x04)
	uint32_t NetGUIDOutRate; // 0x430(0x04)
	uint32_t NetGUIDInRate; // 0x434(0x04)
	uint32_t NetSaturated; // 0x438(0x04)
	char pad_43C[0x4]; // 0x43c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SkyAtmosphere
// Size: 0x380 (Inherited: 0x378)
class ASkyAtmosphere : public AInfo {
public:

	struct USkyAtmosphereComponent* SkyAtmosphereComponent; // 0x378(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.WindDirectionalSource
// Size: 0x380 (Inherited: 0x378)
class AWindDirectionalSource : public AInfo {
public:

	struct UWindDirectionalSourceComponent* Component; // 0x378(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Volume
// Size: 0x3b0 (Inherited: 0x3b0)
class AVolume : public ABrush {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BrushShape
// Size: 0x3b0 (Inherited: 0x3b0)
class ABrushShape : public ABrush {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CHARACTER
// Size: 0x798 (Inherited: 0x3d8)
class ACHARACTER : public APawn {
public:

	char pad_3D8[0x8]; // 0x3d8(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x3e0(0x08)
	struct UCharacterMovementComponent* CharacterMovement; // 0x3e8(0x08)
	struct UCapsuleComponent* CapsuleComponent; // 0x3f0(0x08)
	struct FBasedMovementInfo BasedMovement; // 0x3f8(0x30)
	struct FBasedMovementInfo ReplicatedBasedMovement; // 0x428(0x30)
	float AnimRootMotionTranslationScale; // 0x458(0x04)
	struct FVector BaseTranslationOffset; // 0x45c(0x0c)
	char pad_468[0x8]; // 0x468(0x08)
	struct FQuat BaseRotationOffset; // 0x470(0x10)
	float ReplicatedServerLastTransformUpdateTimeStamp; // 0x480(0x04)
	float ReplayLastTransformUpdateTimeStamp; // 0x484(0x04)
	char ReplicatedMovementMode; // 0x488(0x01)
	bool bInBaseReplication; // 0x489(0x01)
	char pad_48A[0x2]; // 0x48a(0x02)
	float CrouchedEyeHeight; // 0x48c(0x04)
	char bIsCrouched : 1; // 0x490(0x01)
	char bProxyIsJumpForceApplied : 1; // 0x490(0x01)
	char bPressedJump : 1; // 0x490(0x01)
	char bClientUpdating : 1; // 0x490(0x01)
	char bClientWasFalling : 1; // 0x490(0x01)
	char bClientResimulateRootMotion : 1; // 0x490(0x01)
	char bClientResimulateRootMotionSources : 1; // 0x490(0x01)
	char bSimGravityDisabled : 1; // 0x490(0x01)
	char bClientCheckEncroachmentOnNetUpdate : 1; // 0x491(0x01)
	char bServerMoveIgnoreRootMotion : 1; // 0x491(0x01)
	char bWasJumping : 1; // 0x491(0x01)
	char pad_491_3 : 5; // 0x491(0x01)
	char pad_492[0x2]; // 0x492(0x02)
	float JumpKeyHoldTime; // 0x494(0x04)
	float JumpForceTimeRemaining; // 0x498(0x04)
	float ProxyJumpForceStartedTime; // 0x49c(0x04)
	float JumpMaxHoldTime; // 0x4a0(0x04)
	int32_t JumpMaxCount; // 0x4a4(0x04)
	int32_t JumpCurrentCount; // 0x4a8(0x04)
	char pad_4AC[0x4]; // 0x4ac(0x04)
	/*struct FMulticastInlineDelegate*/char OnReachedJumpApex[0x10]; // 0x4b0(0x10)
	char pad_4C0[0x10]; // 0x4c0(0x10)
	/*struct FMulticastInlineDelegate*/char MovementModeChangedDelegate[0x10]; // 0x4d0(0x10)
	/*struct FMulticastInlineDelegate*/char OnCharacterMovementUpdated[0x10]; // 0x4e0(0x10)
	struct FRootMotionSourceGroup SavedRootMotion; // 0x4f0(0xf8)
	char pad_5E8[0x8]; // 0x5e8(0x08)
	struct FRootMotionMovementParams ClientRootMotionParams; // 0x5f0(0x40)
	struct TArray<struct FSimulatedRootMotionReplicatedMove> RootMotionRepMoves; // 0x630(0x10)
	struct FRepRootMotionMontage RepRootMotion; // 0x640(0x158)

	void UnCrouch(bool bClientSimulation); // Function Engine.CHARACTER.UnCrouch // (Native|Public|BlueprintCallable) // @ game+0x9d943c0
	void StopJumping(); // Function Engine.CHARACTER.StopJumping // (Native|Public|BlueprintCallable) // @ game+0x3608310
	void StopAnimMontage(struct UAnimMontage* AnimMontage); // Function Engine.CHARACTER.StopAnimMontage // (Native|Public|BlueprintCallable) // @ game+0x6f8e430
	void ServerMoveOld(float OldTimeStamp, struct FVector_NetQuantize10 OldAccel, uint32_t OldMoveFlags); // Function Engine.CHARACTER.ServerMoveOld // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x9d93fa0
	void ServerMoveNoBase(float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, uint32_t CompressedMoveFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // Function Engine.CHARACTER.ServerMoveNoBase // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x9d93d20
	void ServerMoveDualNoBase(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, uint32_t PendingFlags, uint32_t View0, float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, uint32_t NewFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // Function Engine.CHARACTER.ServerMoveDualNoBase // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x9d93960
	void ServerMoveDualHybridRootMotion(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, uint32_t PendingFlags, uint32_t View0, float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, uint32_t NewFlags, char ClientRoll, uint32_t View, struct UPrimitiveComponent* ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // Function Engine.CHARACTER.ServerMoveDualHybridRootMotion // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x9d93510
	void ServerMoveDual(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, uint32_t PendingFlags, uint32_t View0, float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, uint32_t NewFlags, char ClientRoll, uint32_t View, struct UPrimitiveComponent* ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // Function Engine.CHARACTER.ServerMoveDual // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x9d930c0
	void ServerMove(float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, uint32_t CompressedMoveFlags, char ClientRoll, uint32_t View, struct UPrimitiveComponent* ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // Function Engine.CHARACTER.ServerMove // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x9d92db0
	void RootMotionDebugClientPrintOnScreen(struct FString inString); // Function Engine.CHARACTER.RootMotionDebugClientPrintOnScreen // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9d92ce0
	float PlayAnimMontage(struct UAnimMontage* AnimMontage, float InPlayRate, struct FName StartSectionName); // Function Engine.CHARACTER.PlayAnimMontage // (Native|Public|BlueprintCallable) // @ game+0x9d92bd0
	void OnWalkingOffLedge(struct FVector& PreviousFloorImpactNormal, struct FVector& PreviousFloorContactNormal, struct FVector& PreviousLocation, float TimeDelta); // Function Engine.CHARACTER.OnWalkingOffLedge // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x9d92a40
	void OnRep_RootMotion(); // Function Engine.CHARACTER.OnRep_RootMotion // (Final|Native|Public) // @ game+0x9d92a20
	void OnRep_ReplicatedBasedMovement(); // Function Engine.CHARACTER.OnRep_ReplicatedBasedMovement // (Native|Public) // @ game+0x406cac0
	void OnRep_ReplayLastTransformUpdateTimeStamp(); // Function Engine.CHARACTER.OnRep_ReplayLastTransformUpdateTimeStamp // (Final|Native|Public) // @ game+0x9d92a00
	void OnRep_IsCrouched(); // Function Engine.CHARACTER.OnRep_IsCrouched // (Native|Public) // @ game+0x128b6d0
	void OnLaunched(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Function Engine.CHARACTER.OnLaunched // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x7ed88c0
	void OnLanded(struct FHitResult& Hit); // Function Engine.CHARACTER.OnLanded // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x7ed88c0
	void OnJumped(); // Function Engine.CHARACTER.OnJumped // (Native|Event|Public|BlueprintEvent) // @ game+0x637da90
	void LaunchCharacter(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Function Engine.CHARACTER.LaunchCharacter // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9d928e0
	void K2_UpdateCustomMovement(float DeltaTime); // Function Engine.CHARACTER.K2_UpdateCustomMovement // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // Function Engine.CHARACTER.K2_OnStartCrouch // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void K2_OnMovementModeChanged(enum class EMovementMode PrevMovementMode, enum class EMovementMode NewMovementMode, char PrevCustomMode, char NewCustomMode); // Function Engine.CHARACTER.K2_OnMovementModeChanged // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // Function Engine.CHARACTER.K2_OnEndCrouch // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void Jump(); // Function Engine.CHARACTER.Jump // (Native|Public|BlueprintCallable) // @ game+0x128b730
	bool IsPlayingRootMotion(); // Function Engine.CHARACTER.IsPlayingRootMotion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d928b0
	bool IsPlayingNetworkedRootMotionMontage(); // Function Engine.CHARACTER.IsPlayingNetworkedRootMotionMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d92880
	bool IsJumpProvidingForce(); // Function Engine.CHARACTER.IsJumpProvidingForce // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x630b420
	bool HasAnyRootMotion(); // Function Engine.CHARACTER.HasAnyRootMotion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d92850
	struct UAnimMontage* GetCurrentMontage(); // Function Engine.CHARACTER.GetCurrentMontage // (Final|Native|Public|BlueprintCallable) // @ game+0x9d921e0
	struct FVector GetBaseTranslationOffset(); // Function Engine.CHARACTER.GetBaseTranslationOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d921b0
	struct FRotator GetBaseRotationOffsetRotator(); // Function Engine.CHARACTER.GetBaseRotationOffsetRotator // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d92160
	float GetAnimRootMotionTranslationScale(); // Function Engine.CHARACTER.GetAnimRootMotionTranslationScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d92130
	void Crouch(bool bClientSimulation); // Function Engine.CHARACTER.Crouch // (Native|Public|BlueprintCallable) // @ game+0x9d920a0
	void ClientVeryShortAdjustPosition(float Timestamp, struct FVector NewLoc, struct UPrimitiveComponent* NewBase, struct FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.CHARACTER.ClientVeryShortAdjustPosition // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x9d91d50
	void ClientCheatWalk(); // Function Engine.CHARACTER.ClientCheatWalk // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x62e59e0
	void ClientCheatGhost(); // Function Engine.CHARACTER.ClientCheatGhost // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x637dad0
	void ClientCheatFly(); // Function Engine.CHARACTER.ClientCheatFly // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x63d6870
	void ClientAdjustRootMotionSourcePosition(float Timestamp, struct FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, struct FVector ServerLoc, struct FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, struct UPrimitiveComponent* ServerBase, struct FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.CHARACTER.ClientAdjustRootMotionSourcePosition // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x9d91960
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, struct FVector ServerLoc, struct FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, struct UPrimitiveComponent* ServerBase, struct FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.CHARACTER.ClientAdjustRootMotionPosition // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x9d91670
	void ClientAdjustPosition(float Timestamp, struct FVector NewLoc, struct FVector NewVel, struct UPrimitiveComponent* NewBase, struct FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.CHARACTER.ClientAdjustPosition // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x9d91400
	void ClientAckGoodMove(float Timestamp, char RecvTimeOffset); // Function Engine.CHARACTER.ClientAckGoodMove // (Net|Native|Event|Public|NetClient) // @ game+0x9d91340
	bool CanJumpInternal(); // Function Engine.CHARACTER.CanJumpInternal // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x364df80
	bool CanJump(); // Function Engine.CHARACTER.CanJump // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d91310
	bool CanCrouch(); // Function Engine.CHARACTER.CanCrouch // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c7360
	void CacheInitialMeshOffset(struct FVector MeshRelativeLocation, struct FRotator MeshRelativeRotation); // Function Engine.CHARACTER.CacheInitialMeshOffset // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9d91230
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DefaultPawn
// Size: 0x400 (Inherited: 0x3d8)
class ADefaultPawn : public APawn {
public:

	float BaseTurnRate; // 0x3d8(0x04)
	float BaseLookUpRate; // 0x3dc(0x04)
	struct UPawnMovementComponent* MovementComponent; // 0x3e0(0x08)
	struct USphereComponent* CollisionComponent; // 0x3e8(0x08)
	struct UStaticMeshComponent* MeshComponent; // 0x3f0(0x08)
	char bAddDefaultMovementBindings : 1; // 0x3f8(0x01)
	char pad_3F8_1 : 7; // 0x3f8(0x01)
	char pad_3F9[0x7]; // 0x3f9(0x07)

	void TurnAtRate(float Rate); // Function Engine.DefaultPawn.TurnAtRate // (Native|Public|BlueprintCallable) // @ game+0x9da4480
	void MoveUp_World(float Val); // Function Engine.DefaultPawn.MoveUp_World // (Native|Public|BlueprintCallable) // @ game+0x63ddf30
	void MoveRight(float Val); // Function Engine.DefaultPawn.MoveRight // (Native|Public|BlueprintCallable) // @ game+0x9da3c90
	void MoveForward(float Val); // Function Engine.DefaultPawn.MoveForward // (Native|Public|BlueprintCallable) // @ game+0x9da3c10
	void LookUpAtRate(float Rate); // Function Engine.DefaultPawn.LookUpAtRate // (Native|Public|BlueprintCallable) // @ game+0x9da3b90
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PlayerController
// Size: 0x6d0 (Inherited: 0x3f0)
class APlayerController : public AController {
public:

	char pad_3F0[0x8]; // 0x3f0(0x08)
	struct UPlayer* Player; // 0x3f8(0x08)
	struct APawn* AcknowledgedPawn; // 0x400(0x08)
	struct UInterpTrackInstDirector* ControllingDirTrackInst; // 0x408(0x08)
	struct AHUD* MyHUD; // 0x410(0x08)
	struct APlayerCameraManager* PlayerCameraManager; // 0x418(0x08)
	struct UClass* PlayerCameraManagerClass; // 0x420(0x08)
	bool bAutoManageActiveCameraTarget; // 0x428(0x01)
	char pad_429[0x3]; // 0x429(0x03)
	struct FRotator TargetViewRotation; // 0x42c(0x0c)
	char pad_438[0xc]; // 0x438(0x0c)
	float SmoothTargetViewRotationSpeed; // 0x444(0x04)
	char pad_448[0x8]; // 0x448(0x08)
	struct TArray<struct AActor*> HiddenActors; // 0x450(0x10)
	struct TArray<struct TWeakObjectPtr<struct UPrimitiveComponent>> HiddenPrimitiveComponents; // 0x460(0x10)
	char pad_470[0x4]; // 0x470(0x04)
	float LastSpectatorStateSynchTime; // 0x474(0x04)
	struct FVector LastSpectatorSyncLocation; // 0x478(0x0c)
	struct FRotator LastSpectatorSyncRotation; // 0x484(0x0c)
	int32_t ClientCap; // 0x490(0x04)
	char pad_494[0x4]; // 0x494(0x04)
	struct UCheatManager* CheatManager; // 0x498(0x08)
	struct UClass* CheatClass; // 0x4a0(0x08)
	struct UPlayerInput* PlayerInput; // 0x4a8(0x08)
	struct TArray<struct FActiveForceFeedbackEffect> ActiveForceFeedbackEffects; // 0x4b0(0x10)
	char pad_4C0[0x70]; // 0x4c0(0x70)
	char pad_530_0 : 4; // 0x530(0x01)
	char bPlayerIsWaiting : 1; // 0x530(0x01)
	char pad_530_5 : 3; // 0x530(0x01)
	char pad_531[0x3]; // 0x531(0x03)
	char NetPlayerIndex; // 0x534(0x01)
	char pad_535[0x3b]; // 0x535(0x3b)
	struct UNetConnection* PendingSwapConnection; // 0x570(0x08)
	struct UNetConnection* NetConnection; // 0x578(0x08)
	char pad_580[0xc]; // 0x580(0x0c)
	float InputYawScale; // 0x58c(0x04)
	float InputPitchScale; // 0x590(0x04)
	float InputRollScale; // 0x594(0x04)
	char bShowMouseCursor : 1; // 0x598(0x01)
	char bEnableClickEvents : 1; // 0x598(0x01)
	char bEnableTouchEvents : 1; // 0x598(0x01)
	char bEnableMouseOverEvents : 1; // 0x598(0x01)
	char bEnableTouchOverEvents : 1; // 0x598(0x01)
	char bForceFeedbackEnabled : 1; // 0x598(0x01)
	char pad_598_6 : 2; // 0x598(0x01)
	char pad_599[0x3]; // 0x599(0x03)
	float ForceFeedbackScale; // 0x59c(0x04)
	struct TArray<struct FKey> ClickEventKeys; // 0x5a0(0x10)
	enum class EMouseCursor DefaultMouseCursor; // 0x5b0(0x01)
	enum class EMouseCursor CurrentMouseCursor; // 0x5b1(0x01)
	enum class ECollisionChannel DefaultClickTraceChannel; // 0x5b2(0x01)
	enum class ECollisionChannel CurrentClickTraceChannel; // 0x5b3(0x01)
	float HitResultTraceDistance; // 0x5b4(0x04)
	uint16_t SeamlessTravelCount; // 0x5b8(0x02)
	uint16_t LastCompletedSeamlessTravelCount; // 0x5ba(0x02)
	char pad_5BC[0x74]; // 0x5bc(0x74)
	struct UInputComponent* InactiveStateInputComponent; // 0x630(0x08)
	char pad_638_0 : 2; // 0x638(0x01)
	char bShouldPerformFullTickWhenPaused : 1; // 0x638(0x01)
	char pad_638_3 : 5; // 0x638(0x01)
	char pad_639[0x17]; // 0x639(0x17)
	struct UTouchInterface* CurrentTouchInterface; // 0x650(0x08)
	char pad_658[0x50]; // 0x658(0x50)
	struct ASpectatorPawn* SpectatorPawn; // 0x6a8(0x08)
	char pad_6B0[0x4]; // 0x6b0(0x04)
	bool bIsLocalPlayerController; // 0x6b4(0x01)
	char pad_6B5[0x3]; // 0x6b5(0x03)
	struct FVector SpawnLocation; // 0x6b8(0x0c)
	char pad_6C4[0xc]; // 0x6c4(0x0c)

	bool WasInputKeyJustReleased(struct FKey Key); // Function Engine.PlayerController.WasInputKeyJustReleased // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7ec60
	bool WasInputKeyJustPressed(struct FKey Key); // Function Engine.PlayerController.WasInputKeyJustPressed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7eb70
	void ToggleSpeaking(bool bInSpeaking); // Function Engine.PlayerController.ToggleSpeaking // (Exec|Native|Public) // @ game+0x9e7eae0
	void TestServerLevelVisibilityChange(struct FName PackageName, struct FName Filename); // Function Engine.PlayerController.TestServerLevelVisibilityChange // (Final|Exec|Native|Private) // @ game+0x367e810
	void SwitchLevel(struct FString URL); // Function Engine.PlayerController.SwitchLevel // (Exec|Native|Public) // @ game+0x9e7ea10
	void StopHapticEffect(enum class EControllerHand Hand); // Function Engine.PlayerController.StopHapticEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x9e7e990
	void StartFire(char FireModeNum); // Function Engine.PlayerController.StartFire // (Exec|Native|Public) // @ game+0x9e7e910
	void SetVirtualJoystickVisibility(bool bVisible); // Function Engine.PlayerController.SetVirtualJoystickVisibility // (Native|Public|BlueprintCallable) // @ game+0x9e7e880
	void SetViewTargetWithBlend(struct AActor* NewViewTarget, float BlendTime, enum class EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing); // Function Engine.PlayerController.SetViewTargetWithBlend // (Native|Public|BlueprintCallable) // @ game+0x9e7e700
	void SetName(struct FString S); // Function Engine.PlayerController.SetName // (Exec|Native|Public) // @ game+0x9e7e630
	void SetMouseLocation(int32_t X, int32_t Y); // Function Engine.PlayerController.SetMouseLocation // (Final|Native|Public|BlueprintCallable) // @ game+0x9e7e570
	void SetMouseCursorWidget(enum class EMouseCursor Cursor, struct UUserWidget* CursorWidget); // Function Engine.PlayerController.SetMouseCursorWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x9e7e4b0
	void SetHapticsByValue(float frequency, float Amplitude, enum class EControllerHand Hand); // Function Engine.PlayerController.SetHapticsByValue // (Final|Native|Public|BlueprintCallable) // @ game+0x9e7e3b0
	void SetDisableHaptics(bool bNewDisabled); // Function Engine.PlayerController.SetDisableHaptics // (Native|Public|BlueprintCallable) // @ game+0x9e7e320
	void SetControllerLightColor(struct FColor Color); // Function Engine.PlayerController.SetControllerLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e7e2b0
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // Function Engine.PlayerController.SetCinematicMode // (Native|Public|BlueprintCallable) // @ game+0x9e7e0f0
	void SetAudioListenerOverride(struct USceneComponent* AttachToComponent, struct FVector Location, struct FRotator Rotation); // Function Engine.PlayerController.SetAudioListenerOverride // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e7dfd0
	void SetAudioListenerAttenuationOverride(struct USceneComponent* AttachToComponent, struct FVector AttenuationLocationOVerride); // Function Engine.PlayerController.SetAudioListenerAttenuationOverride // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e7df00
	void ServerViewSelf(struct FViewTargetTransitionParams TransitionParams); // Function Engine.PlayerController.ServerViewSelf // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x9e7de20
	void ServerViewPrevPlayer(); // Function Engine.PlayerController.ServerViewPrevPlayer // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x9e7ddd0
	void ServerViewNextPlayer(); // Function Engine.PlayerController.ServerViewNextPlayer // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x9e7dd80
	void ServerVerifyViewTarget(); // Function Engine.PlayerController.ServerVerifyViewTarget // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x9e7dd30
	void ServerUpdateMultipleLevelsVisibility(struct TArray<struct FUpdateLevelVisibilityLevelInfo> LevelVisibilities); // Function Engine.PlayerController.ServerUpdateMultipleLevelsVisibility // (Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x9e7dc50
	void ServerUpdateLevelVisibility(struct FUpdateLevelVisibilityLevelInfo LevelVisibility); // Function Engine.PlayerController.ServerUpdateLevelVisibility // (Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x9e7db90
	void ServerUpdateCamera(struct FVector_NetQuantize CamLoc, int32_t CamPitchAndYaw); // Function Engine.PlayerController.ServerUpdateCamera // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x9e7da70
	void ServerUnmutePlayer(struct FUniqueNetIdRepl PlayerId); // Function Engine.PlayerController.ServerUnmutePlayer // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x9e7d8f0
	void ServerToggleAILogging(); // Function Engine.PlayerController.ServerToggleAILogging // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x9e7d8a0
	void ServerShortTimeout(); // Function Engine.PlayerController.ServerShortTimeout // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x9e7d850
	void ServerSetSpectatorWaiting(bool bWaiting); // Function Engine.PlayerController.ServerSetSpectatorWaiting // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x9e7d790
	void ServerSetSpectatorLocation(struct FVector NewLoc, struct FRotator NewRot); // Function Engine.PlayerController.ServerSetSpectatorLocation // (Net|Native|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0x9e7d660
	void ServerRestartPlayer(); // Function Engine.PlayerController.ServerRestartPlayer // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x9e7d610
	void ServerPause(); // Function Engine.PlayerController.ServerPause // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x9e7d5c0
	void ServerNotifyLoadedWorld(struct FName WorldPackageName); // Function Engine.PlayerController.ServerNotifyLoadedWorld // (Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x9e7d510
	void ServerMutePlayer(struct FUniqueNetIdRepl PlayerId); // Function Engine.PlayerController.ServerMutePlayer // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x9e7d390
	void ServerExecRPC(struct FString Msg); // Function Engine.PlayerController.ServerExecRPC // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x9e7d2a0
	void ServerExec(struct FString Msg); // Function Engine.PlayerController.ServerExec // (Final|Exec|Native|Public) // @ game+0x6527f50
	void ServerCheckClientPossessionReliable(); // Function Engine.PlayerController.ServerCheckClientPossessionReliable // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x9e7d250
	void ServerCheckClientPossession(); // Function Engine.PlayerController.ServerCheckClientPossession // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x9e7d200
	void ServerChangeName(struct FString S); // Function Engine.PlayerController.ServerChangeName // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x9e7d110
	void ServerCamera(struct FName NewMode); // Function Engine.PlayerController.ServerCamera // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x9e7d050
	void ServerAcknowledgePossession(struct APawn* P); // Function Engine.PlayerController.ServerAcknowledgePossession // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x9e7cf90
	void SendToConsole(struct FString Command); // Function Engine.PlayerController.SendToConsole // (Exec|Native|Public) // @ game+0x9e7cec0
	void RestartLevel(); // Function Engine.PlayerController.RestartLevel // (Exec|Native|Public) // @ game+0x9e7cea0
	void ResetControllerLightColor(); // Function Engine.PlayerController.ResetControllerLightColor // (Final|Native|Public|BlueprintCallable) // @ game+0x9e7ce80
	bool ProjectWorldLocationToScreen(struct FVector WorldLocation, struct FVector2D& ScreenLocation, bool bPlayerViewportRelative); // Function Engine.PlayerController.ProjectWorldLocationToScreen // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7cd50
	void PlayHapticEffect(struct UHapticFeedbackEffect_Base* HapticEffect, enum class EControllerHand Hand, float Scale, bool bLoop); // Function Engine.PlayerController.PlayHapticEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x9e7cc00
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, enum class EDynamicForceFeedbackAction Action, struct FLatentActionInfo LatentInfo); // Function Engine.PlayerController.PlayDynamicForceFeedback // (Final|Native|Private|BlueprintCallable) // @ game+0x9e7c980
	void Pause(); // Function Engine.PlayerController.Pause // (Exec|Native|Public) // @ game+0x9e7c960
	void OnServerStartedVisualLogger(bool bIsLogging); // Function Engine.PlayerController.OnServerStartedVisualLogger // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e7c8d0
	void LocalTravel(struct FString URL); // Function Engine.PlayerController.LocalTravel // (Exec|Native|Public) // @ game+0x9e7c800
	void K2_ClientPlayForceFeedback(struct UForceFeedbackEffect* ForceFeedbackEffect, struct FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused); // Function Engine.PlayerController.K2_ClientPlayForceFeedback // (Final|Native|Public|BlueprintCallable) // @ game+0x9e7c650
	bool IsInputKeyDown(struct FKey Key); // Function Engine.PlayerController.IsInputKeyDown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7c560
	void GetViewportSize(int32_t& SizeX, int32_t& SizeY); // Function Engine.PlayerController.GetViewportSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7c480
	struct ASpectatorPawn* GetSpectatorPawn(); // Function Engine.PlayerController.GetSpectatorPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7c460
	bool GetMousePosition(float& LocationX, float& LocationY); // Function Engine.PlayerController.GetMousePosition // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7c370
	struct FVector GetInputVectorKeyState(struct FKey Key); // Function Engine.PlayerController.GetInputVectorKeyState // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7c270
	void GetInputTouchState(enum class ETouchIndex FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // Function Engine.PlayerController.GetInputTouchState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7c0f0
	void GetInputMouseDelta(float& DeltaX, float& DeltaY); // Function Engine.PlayerController.GetInputMouseDelta // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7c010
	void GetInputMotionState(struct FVector& Tilt, struct FVector& RotationRate, struct FVector& Gravity, struct FVector& Acceleration); // Function Engine.PlayerController.GetInputMotionState // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7be80
	float GetInputKeyTimeDown(struct FKey Key); // Function Engine.PlayerController.GetInputKeyTimeDown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7bd90
	void GetInputAnalogStickState(enum class EControllerAnalogStick WhichStick, float& StickX, float& StickY); // Function Engine.PlayerController.GetInputAnalogStickState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7bc70
	float GetInputAnalogKeyState(struct FKey Key); // Function Engine.PlayerController.GetInputAnalogKeyState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7bb80
	struct AHUD* GetHUD(); // Function Engine.PlayerController.GetHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7b1a0
	bool GetHitResultUnderFingerForObjects(enum class ETouchIndex FingerIndex, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderFingerForObjects // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7b990
	bool GetHitResultUnderFingerByChannel(enum class ETouchIndex FingerIndex, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderFingerByChannel // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7b800
	bool GetHitResultUnderFinger(enum class ETouchIndex FingerIndex, enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderFinger // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7b670
	bool GetHitResultUnderCursorForObjects(struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursorForObjects // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7b4d0
	bool GetHitResultUnderCursorByChannel(enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursorByChannel // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7b350
	bool GetHitResultUnderCursor(enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursor // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7b1d0
	struct FVector GetFocalLocation(); // Function Engine.PlayerController.GetFocalLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7b160
	void FOV(float NewFOV); // Function Engine.PlayerController.FOV // (Exec|Native|Public) // @ game+0x63dfb10
	void EnableCheats(); // Function Engine.PlayerController.EnableCheats // (Exec|Native|Public) // @ game+0x35d79b0
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector& WorldLocation, struct FVector& WorldDirection, bool bPlayerViewportRelative); // Function Engine.PlayerController.DeprojectScreenPositionToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7af90
	bool DeprojectMousePositionToWorld(struct FVector& WorldLocation, struct FVector& WorldDirection, bool bPlayerViewportRelative); // Function Engine.PlayerController.DeprojectMousePositionToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e7ae50
	void ConsoleKey(struct FKey Key); // Function Engine.PlayerController.ConsoleKey // (Exec|Native|Public) // @ game+0x9e7ad70
	void ClientWasKicked(struct FText KickReason); // Function Engine.PlayerController.ClientWasKicked // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e7acb0
	void ClientVoiceHandshakeComplete(); // Function Engine.PlayerController.ClientVoiceHandshakeComplete // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x35d79d0
	void ClientUpdateMultipleLevelsStreamingStatus(struct TArray<struct FUpdateLevelStreamingLevelStatus> LevelStatuses); // Function Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e7abe0
	void ClientUpdateLevelStreamingStatus(struct FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32_t LodIndex); // Function Engine.PlayerController.ClientUpdateLevelStreamingStatus // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e7aa30
	void ClientUnmutePlayer(struct FUniqueNetIdRepl PlayerId); // Function Engine.PlayerController.ClientUnmutePlayer // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e7a8e0
	void ClientTravelInternal(struct FString URL, enum class ETravelType TravelType, bool bSeamless, struct FGuid MapPackageGuid); // Function Engine.PlayerController.ClientTravelInternal // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x9e7a750
	void ClientTravel(struct FString URL, enum class ETravelType TravelType, bool bSeamless, struct FGuid MapPackageGuid); // Function Engine.PlayerController.ClientTravel // (Final|Native|Public|HasDefaults) // @ game+0x9e7a5c0
	void ClientTeamMessage(struct APlayerState* SenderPlayerState, struct FString S, struct FName Type, float MsgLifeTime); // Function Engine.PlayerController.ClientTeamMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e7a440
	void ClientStopForceFeedback(struct UForceFeedbackEffect* ForceFeedbackEffect, struct FName Tag); // Function Engine.PlayerController.ClientStopForceFeedback // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x9e7a370
	void ClientStopCameraShake(struct UClass* Shake, bool bImmediately); // Function Engine.PlayerController.ClientStopCameraShake // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x9e7a2a0
	void ClientStopCameraAnim(struct UCameraAnim* AnimToStop); // Function Engine.PlayerController.ClientStopCameraAnim // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x40ab730
	void ClientStartOnlineSession(); // Function Engine.PlayerController.ClientStartOnlineSession // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x6240290
	void ClientSpawnCameraLensEffect(struct UClass* LensEffectEmitterClass); // Function Engine.PlayerController.ClientSpawnCameraLensEffect // (Net|Native|Event|Public|NetClient|BlueprintCallable) // @ game+0x637daf0
	void ClientSetViewTarget(struct AActor* A, struct FViewTargetTransitionParams TransitionParams); // Function Engine.PlayerController.ClientSetViewTarget // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e7a1c0
	void ClientSetSpectatorWaiting(bool bWaiting); // Function Engine.PlayerController.ClientSetSpectatorWaiting // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e7a130
	void ClientSetHUD(struct UClass* NewHUDClass); // Function Engine.PlayerController.ClientSetHUD // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x36c7f90
	void ClientSetForceMipLevelsToBeResident(struct UMaterialInterface* Material, float ForceDuration, int32_t CinematicTextureGroups); // Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e7a030
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD); // Function Engine.PlayerController.ClientSetCinematicMode // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e79ec0
	void ClientSetCameraMode(struct FName NewCamMode); // Function Engine.PlayerController.ClientSetCameraMode // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3712c10
	void ClientSetCameraFade(bool bEnableFading, struct FColor FadeColor, struct FVector2D FadeAlpha, float FadeTime, bool bFadeAudio); // Function Engine.PlayerController.ClientSetCameraFade // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x9e79d30
	void ClientSetBlockOnAsyncLoading(); // Function Engine.PlayerController.ClientSetBlockOnAsyncLoading // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x63e46c0
	void ClientReturnToMainMenuWithTextReason(struct FText ReturnReason); // Function Engine.PlayerController.ClientReturnToMainMenuWithTextReason // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e79c70
	void ClientReturnToMainMenu(struct FString ReturnReason); // Function Engine.PlayerController.ClientReturnToMainMenu // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e79ba0
	void ClientRetryClientRestart(struct APawn* NewPawn); // Function Engine.PlayerController.ClientRetryClientRestart // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x62c4b00
	void ClientRestart(struct APawn* NewPawn); // Function Engine.PlayerController.ClientRestart // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e79b10
	void ClientReset(); // Function Engine.PlayerController.ClientReset // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x6250270
	void ClientRepObjRef(struct UObject* Object); // Function Engine.PlayerController.ClientRepObjRef // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e79a80
	void ClientReceiveLocalizedMessage(struct UClass* Message, int32_t Switch, struct APlayerState* RelatedPlayerState_2, struct APlayerState* RelatedPlayerState_3, struct UObject* OptionalObject); // Function Engine.PlayerController.ClientReceiveLocalizedMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e79900
	void ClientPrestreamTextures(struct AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32_t CinematicTextureGroups); // Function Engine.PlayerController.ClientPrestreamTextures // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e797b0
	void ClientPrepareMapChange(struct FName LevelName, bool bFirst, bool bLast); // Function Engine.PlayerController.ClientPrepareMapChange // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e796a0
	void ClientPlaySoundAtLocation(struct USoundBase* Sound, struct FVector Location, float VolumeMultiplier, float PitchMultiplier); // Function Engine.PlayerController.ClientPlaySoundAtLocation // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x9e79550
	void ClientPlaySound(struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier); // Function Engine.PlayerController.ClientPlaySound // (Net|Native|Event|Public|NetClient) // @ game+0x9e79450
	void ClientPlayForceFeedback_Internal(struct UForceFeedbackEffect* ForceFeedbackEffect, struct FForceFeedbackParameters Params); // Function Engine.PlayerController.ClientPlayForceFeedback_Internal // (Final|Net|Native|Event|Private|NetClient) // @ game+0x9e79360
	void ClientPlayCameraShake(struct UClass* Shake, float Scale, enum class ECameraAnimPlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerController.ClientPlayCameraShake // (Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable) // @ game+0x9e79210
	void ClientPlayCameraAnim(struct UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum class ECameraAnimPlaySpace Space, struct FRotator CustomPlaySpace); // Function Engine.PlayerController.ClientPlayCameraAnim // (Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable) // @ game+0x9e78f70
	void ClientMutePlayer(struct FUniqueNetIdRepl PlayerId); // Function Engine.PlayerController.ClientMutePlayer // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e78e20
	void ClientMessage(struct FString S, struct FName Type, float MsgLifeTime); // Function Engine.PlayerController.ClientMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e78cd0
	void ClientIgnoreMoveInput(bool bIgnore); // Function Engine.PlayerController.ClientIgnoreMoveInput // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e78c40
	void ClientIgnoreLookInput(bool bIgnore); // Function Engine.PlayerController.ClientIgnoreLookInput // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e78bb0
	void ClientGotoState(struct FName NewState); // Function Engine.PlayerController.ClientGotoState // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e78b20
	void ClientGameEnded(struct AActor* EndGameFocus, bool bIsWinner); // Function Engine.PlayerController.ClientGameEnded // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e78a50
	void ClientForceGarbageCollection(); // Function Engine.PlayerController.ClientForceGarbageCollection // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e78a30
	void ClientFlushLevelStreaming(); // Function Engine.PlayerController.ClientFlushLevelStreaming // (Final|Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e78a10
	void ClientEndOnlineSession(); // Function Engine.PlayerController.ClientEndOnlineSession // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3689780
	void ClientEnableNetworkVoice(bool bEnable); // Function Engine.PlayerController.ClientEnableNetworkVoice // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e78980
	void ClientCommitMapChange(); // Function Engine.PlayerController.ClientCommitMapChange // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e78960
	void ClientClearCameraLensEffects(); // Function Engine.PlayerController.ClientClearCameraLensEffects // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x3579aa0
	void ClientCapBandwidth(int32_t Cap); // Function Engine.PlayerController.ClientCapBandwidth // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x63daa30
	void ClientCancelPendingMapChange(); // Function Engine.PlayerController.ClientCancelPendingMapChange // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9e78940
	void ClientAddTextureStreamingLoc(struct FVector InLoc, float Duration, bool bOverrideLocation); // Function Engine.PlayerController.ClientAddTextureStreamingLoc // (Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x9e78820
	void ClearAudioListenerOverride(); // Function Engine.PlayerController.ClearAudioListenerOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x9e78800
	void ClearAudioListenerAttenuationOverride(); // Function Engine.PlayerController.ClearAudioListenerAttenuationOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x9e787e0
	bool CanRestartPlayer(); // Function Engine.PlayerController.CanRestartPlayer // (Native|Public|BlueprintCallable) // @ game+0x35d0670
	void Camera(struct FName NewMode); // Function Engine.PlayerController.Camera // (Exec|Native|Public) // @ game+0x9e78750
	void AddYawInput(float Val); // Function Engine.PlayerController.AddYawInput // (Native|Public|BlueprintCallable) // @ game+0x9e786d0
	void AddRollInput(float Val); // Function Engine.PlayerController.AddRollInput // (Native|Public|BlueprintCallable) // @ game+0x9e78650
	void AddPitchInput(float Val); // Function Engine.PlayerController.AddPitchInput // (Native|Public|BlueprintCallable) // @ game+0x9e785d0
	void ActivateTouchInterface(struct UTouchInterface* NewTouchInterface); // Function Engine.PlayerController.ActivateTouchInterface // (Native|Public|BlueprintCallable) // @ game+0x9e78540
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DebugCameraHUD
// Size: 0x468 (Inherited: 0x468)
class ADebugCameraHUD : public AHUD {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DestructibleStaticMeshActor
// Size: 0x388 (Inherited: 0x388)
class ADestructibleStaticMeshActor : public AStaticMeshActor {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TriggerBox
// Size: 0x380 (Inherited: 0x380)
class ATriggerBox : public ATriggerBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TriggerSphere
// Size: 0x380 (Inherited: 0x380)
class ATriggerSphere : public ATriggerBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TriggerCapsule
// Size: 0x380 (Inherited: 0x380)
class ATriggerCapsule : public ATriggerBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.EmitterCameraLensEffectBase
// Size: 0x430 (Inherited: 0x3c8)
class AEmitterCameraLensEffectBase : public AEmitter {
public:

	struct UParticleSystem* PS_CameraEffect; // 0x3c8(0x08)
	struct UParticleSystem* PS_CameraEffectNonExtremeContent; // 0x3d0(0x08)
	struct APlayerCameraManager* BaseCamera; // 0x3d8(0x08)
	struct FTransform RelativeTransform; // 0x3e0(0x30)
	float BaseFOV; // 0x410(0x04)
	char bAllowMultipleInstances : 1; // 0x414(0x01)
	char bResetWhenRetriggered : 1; // 0x414(0x01)
	char pad_414_2 : 6; // 0x414(0x01)
	char pad_415[0x3]; // 0x415(0x03)
	struct TArray<struct UClass*> EmittersToTreatAsSame; // 0x418(0x10)
	float DistFromCamera; // 0x428(0x04)
	char pad_42C[0x4]; // 0x42c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PlayerStart
// Size: 0x3a8 (Inherited: 0x3a0)
class APlayerStart : public ANavigationObjectBase {
public:

	struct FName PlayerStartTag; // 0x3a0(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BoxReflectionCapture
// Size: 0x388 (Inherited: 0x388)
class ABoxReflectionCapture : public AReflectionCapture {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PlaneReflectionCapture
// Size: 0x388 (Inherited: 0x388)
class APlaneReflectionCapture : public AReflectionCapture {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SphereReflectionCapture
// Size: 0x390 (Inherited: 0x388)
class ASphereReflectionCapture : public AReflectionCapture {
public:

	struct UDrawSphereComponent* DrawCaptureRadius; // 0x388(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DirectionalLight
// Size: 0x388 (Inherited: 0x388)
class ADirectionalLight : public ALight {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SpotLight
// Size: 0x390 (Inherited: 0x388)
class ASpotLight : public ALight {
public:

	struct USpotLightComponent* SpotLightComponent; // 0x388(0x08)

	void SetOuterConeAngle(float NewOuterConeAngle); // Function Engine.SpotLight.SetOuterConeAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x9ebbb90
	void SetInnerConeAngle(float NewInnerConeAngle); // Function Engine.SpotLight.SetInnerConeAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x9ebba90
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PointLight
// Size: 0x390 (Inherited: 0x388)
class APointLight : public ALight {
public:

	struct UPointLightComponent* PointLightComponent; // 0x388(0x08)

	void SetRadius(float NewRadius); // Function Engine.PointLight.SetRadius // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9e83b30
	void SetLightFalloffExponent(float NewLightFalloffExponent); // Function Engine.PointLight.SetLightFalloffExponent // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9e839b0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.RectLight
// Size: 0x390 (Inherited: 0x388)
class ARectLight : public ALight {
public:

	struct URectLightComponent* RectLightComponent; // 0x388(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MatineeActorCameraAnim
// Size: 0x428 (Inherited: 0x420)
class AMatineeActorCameraAnim : public AMatineeActor {
public:

	struct UCameraAnim* CameraAnim; // 0x420(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PhysicsConstraintActor
// Size: 0x398 (Inherited: 0x378)
class APhysicsConstraintActor : public ARigidBodyBase {
public:

	struct UPhysicsConstraintComponent* ConstraintComp; // 0x378(0x08)
	struct AActor* ConstraintActor1; // 0x380(0x08)
	struct AActor* ConstraintActor2; // 0x388(0x08)
	char bDisableCollision : 1; // 0x390(0x01)
	char pad_390_1 : 7; // 0x390(0x01)
	char pad_391[0x7]; // 0x391(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PhysicsThruster
// Size: 0x380 (Inherited: 0x378)
class APhysicsThruster : public ARigidBodyBase {
public:

	struct UPhysicsThrusterComponent* ThrusterComponent; // 0x378(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.RadialForceActor
// Size: 0x380 (Inherited: 0x378)
class ARadialForceActor : public ARigidBodyBase {
public:

	struct URadialForceComponent* ForceComponent; // 0x378(0x08)

	void ToggleForce(); // Function Engine.RadialForceActor.ToggleForce // (Native|Public|BlueprintCallable) // @ game+0xbcb880
	void FireImpulse(); // Function Engine.RadialForceActor.FireImpulse // (Native|Public|BlueprintCallable) // @ game+0xbd2900
	void EnableForce(); // Function Engine.RadialForceActor.EnableForce // (Native|Public|BlueprintCallable) // @ game+0xbcc1a0
	void DisableForce(); // Function Engine.RadialForceActor.DisableForce // (Native|Public|BlueprintCallable) // @ game+0xbcb8a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PlanarReflection
// Size: 0x398 (Inherited: 0x388)
class APlanarReflection : public ASceneCapture {
public:

	struct UPlanarReflectionComponent* PlanarReflectionComponent; // 0x388(0x08)
	bool bShowPreviewPlane; // 0x390(0x01)
	char pad_391[0x7]; // 0x391(0x07)

	void OnInterpToggle(bool bEnable); // Function Engine.PlanarReflection.OnInterpToggle // (Final|Native|Public|BlueprintCallable) // @ game+0x9e73d00
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SceneCapture2D
// Size: 0x390 (Inherited: 0x388)
class ASceneCapture2D : public ASceneCapture {
public:

	struct USceneCaptureComponent2D* CaptureComponent2D; // 0x388(0x08)

	void OnInterpToggle(bool bEnable); // Function Engine.SceneCapture2D.OnInterpToggle // (Final|Native|Public|BlueprintCallable) // @ game+0x9e73d00
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SceneCaptureCube
// Size: 0x390 (Inherited: 0x388)
class ASceneCaptureCube : public ASceneCapture {
public:

	struct USceneCaptureComponentCube* CaptureComponentCube; // 0x388(0x08)

	void OnInterpToggle(bool bEnable); // Function Engine.SceneCaptureCube.OnInterpToggle // (Final|Native|Public|BlueprintCallable) // @ game+0x9e73d00
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PrimaryAssetLabel
// Size: 0x80 (Inherited: 0x38)
class UPrimaryAssetLabel : public UPrimaryDataAsset {
public:

	struct FPrimaryAssetRules Rules; // 0x38(0x0c)
	char bLabelAssetsInMyDirectory : 1; // 0x44(0x01)
	char bIsRuntimeLabel : 1; // 0x44(0x01)
	char pad_44_2 : 6; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	/*struct TArray<struct TSoftObjectPtr<UObject>>*/char ExplicitAssets[0x10]; // 0x48(0x10)
	/*struct TArray<struct TSoftClassPtr<UObject>>*/char ExplicitBlueprints[0x10]; // 0x58(0x10)
	struct FCollectionReference AssetCollection; // 0x68(0x08)
	struct TArray<struct FDirectoryPath> ExplicitDirectories; // 0x70(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PrimitiveComponent
// Size: 0x560 (Inherited: 0x240)
class UPrimitiveComponent : public USceneComponent {
public:

	char pad_240[0x8]; // 0x240(0x08)
	float MinDrawDistance; // 0x248(0x04)
	float LDMaxDrawDistance; // 0x24c(0x04)
	float CachedMaxDrawDistance; // 0x250(0x04)
	enum class ESceneDepthPriorityGroup DepthPriorityGroup; // 0x254(0x01)
	enum class ESceneDepthPriorityGroup ViewOwnerDepthPriorityGroup; // 0x255(0x01)
	enum class EIndirectLightingCacheQuality IndirectLightingCacheQuality; // 0x256(0x01)
	enum class ELightmapType LightmapType; // 0x257(0x01)
	char bEnableAOLightmap : 1; // 0x258(0x01)
	char bMobileUseGlobalLocalLights : 1; // 0x258(0x01)
	char bForceUsePrtForHD : 1; // 0x258(0x01)
	char bForceUsePrtForMobile : 1; // 0x258(0x01)
	char bUseMaxLODAsImposter : 1; // 0x258(0x01)
	char bBatchImpostersAsInstances : 1; // 0x258(0x01)
	char bNeverDistanceCull : 1; // 0x258(0x01)
	char pad_258_7 : 1; // 0x258(0x01)
	char pad_259_0 : 3; // 0x259(0x01)
	char bAlwaysCreatePhysicsState : 1; // 0x259(0x01)
	char bGenerateOverlapEvents : 1; // 0x259(0x01)
	char bMultiBodyOverlap : 1; // 0x259(0x01)
	char bTraceComplexOnMove : 1; // 0x259(0x01)
	char bReturnMaterialOnMove : 1; // 0x259(0x01)
	char bUseViewOwnerDepthPriorityGroup : 1; // 0x25a(0x01)
	char bAllowCullDistanceVolume : 1; // 0x25a(0x01)
	char bHasMotionBlurVelocityMeshes : 1; // 0x25a(0x01)
	char bVisibleInReflectionCaptures : 1; // 0x25a(0x01)
	char bReflectionCapturesCubemapBlend : 1; // 0x25a(0x01)
	char bBlendReflectionCapturesPOI : 1; // 0x25a(0x01)
	char bAutoUpdateCachedReflection : 1; // 0x25a(0x01)
	char bForceSkylightReflection : 1; // 0x25a(0x01)
	char bOnlySkylight : 1; // 0x25b(0x01)
	char bVisibleInRayTracing : 1; // 0x25b(0x01)
	char bForceHiddenVisibleInRayTracing : 1; // 0x25b(0x01)
	char bRenderInMainPass : 1; // 0x25b(0x01)
	char bRenderInDepthPass : 1; // 0x25b(0x01)
	char bReceivesDecals : 1; // 0x25b(0x01)
	char bOwnerNoSee : 1; // 0x25b(0x01)
	char bOnlyOwnerSee : 1; // 0x25b(0x01)
	char bTreatAsBackgroundForOcclusion : 1; // 0x25c(0x01)
	char bUseAsOccluder : 1; // 0x25c(0x01)
	char bNotAsSocOccluder : 1; // 0x25c(0x01)
	char bDisallowOcclusionCull : 1; // 0x25c(0x01)
	char bDisallowAuxRHI : 1; // 0x25c(0x01)
	char bSelectable : 1; // 0x25c(0x01)
	char bForceMipStreaming : 1; // 0x25c(0x01)
	char bHasPerInstanceHitProxies : 1; // 0x25c(0x01)
	char CastShadow : 1; // 0x25d(0x01)
	char ForceCastShadowInBake : 1; // 0x25d(0x01)
	char pad_25D_2 : 6; // 0x25d(0x01)
	char pad_25E[0x2]; // 0x25e(0x02)
	uint64_t CastShadowMask; // 0x260(0x08)
	char bAffectDynamicIndirectLighting : 1; // 0x268(0x01)
	char bAffectDistanceFieldLighting : 1; // 0x268(0x01)
	char bCastDynamicShadow : 1; // 0x268(0x01)
	char bCastStationaryPerObjectShadow : 1; // 0x268(0x01)
	char bCastStaticShadow : 1; // 0x268(0x01)
	char bCastVolumetricTranslucentShadow : 1; // 0x268(0x01)
	char bSelfShadowOnly : 1; // 0x268(0x01)
	char bOverrideCastFarShadow : 1; // 0x268(0x01)
	char bCastFarShadow : 1; // 0x269(0x01)
	char bOverrideLODShadowBias : 1; // 0x269(0x01)
	char bLODShadowBias : 1; // 0x269(0x01)
	char pad_269_3 : 5; // 0x269(0x01)
	char pad_26A[0x2]; // 0x26a(0x02)
	float LODShadowBiasScale; // 0x26c(0x04)
	char bCastFirstPersonShadow : 1; // 0x270(0x01)
	char bReceiveFirstPersonShadow : 1; // 0x270(0x01)
	char bCastThirdPersonShadow : 1; // 0x270(0x01)
	char bCastInsetShadow : 1; // 0x270(0x01)
	char bCastCinematicShadow : 1; // 0x270(0x01)
	char bCastHiddenShadow : 1; // 0x270(0x01)
	char bCastShadowAsTwoSided : 1; // 0x270(0x01)
	char bLightAsIfStatic : 1; // 0x270(0x01)
	char bLightAttachmentsAsGroup : 1; // 0x271(0x01)
	char bExcludeFromLightAttachmentGroup : 1; // 0x271(0x01)
	char bReceiveMobileCSMShadows : 1; // 0x271(0x01)
	char bSingleSampleShadowFromStationaryLights : 1; // 0x271(0x01)
	char bIgnoreRadialImpulse : 1; // 0x271(0x01)
	char bIgnoreRadialForce : 1; // 0x271(0x01)
	char bApplyImpulseOnDamage : 1; // 0x271(0x01)
	char bReplicatePhysicsToAutonomousProxy : 1; // 0x271(0x01)
	char AlwaysLoadOnClient : 1; // 0x272(0x01)
	char AlwaysLoadOnServer : 1; // 0x272(0x01)
	char bUseEditorCompositing : 1; // 0x272(0x01)
	char bRenderCustomDepth : 1; // 0x272(0x01)
	char bEvaluateRayTracingWaterCaustics : 1; // 0x272(0x01)
	char bForceHighQualityShading : 1; // 0x272(0x01)
	char bNoBakeLightingMap : 1; // 0x272(0x01)
	char bEnableProbeAnchorOffset : 1; // 0x272(0x01)
	char pad_273[0x1]; // 0x273(0x01)
	enum class EHasCustomNavigableGeometry bHasCustomNavigableGeometry; // 0x274(0x01)
	enum class ERenderMatrixMode RenderMatrixMode; // 0x275(0x01)
	char pad_276[0x2]; // 0x276(0x02)
	float UvdragRatio; // 0x278(0x04)
	bool bThin; // 0x27c(0x01)
	enum class ECanBeCharacterBase CanCharacterStepUpOn; // 0x27d(0x01)
	struct FLightingChannels LightingChannels; // 0x27e(0x01)
	char bUseDecalIgnoreChannel : 1; // 0x27f(0x01)
	char pad_27F_1 : 7; // 0x27f(0x01)
	enum class ERendererStencilMask CustomDepthStencilWriteMask; // 0x280(0x01)
	char pad_281[0x3]; // 0x281(0x03)
	int32_t CustomDepthStencilValue; // 0x284(0x04)
	enum class EPreferredWorldScaleType PreferredWorldScaleType; // 0x288(0x01)
	char pad_289[0x7]; // 0x289(0x07)
	struct FCustomPrimitiveData CustomPrimitiveData; // 0x290(0x10)
	int32_t TranslucencySortPriority; // 0x2a0(0x04)
	int32_t VisibilityId; // 0x2a4(0x04)
	struct TArray<struct URuntimeVirtualTexture*> RuntimeVirtualTextures; // 0x2a8(0x10)
	int8_t VirtualTextureLodBias; // 0x2b8(0x01)
	int8_t VirtualTextureCullMips; // 0x2b9(0x01)
	int8_t VirtualTextureMinCoverage; // 0x2ba(0x01)
	enum class ERuntimeVirtualTextureMainPassType VirtualTextureRenderPassType; // 0x2bb(0x01)
	enum class ERuntimeVirtualTextureLayerType VirtualTextureRenderLayerType; // 0x2bc(0x01)
	char VirtualTextureRenderPriority; // 0x2bd(0x01)
	char pad_2BE[0x6]; // 0x2be(0x06)
	float LpvBiasMultiplier; // 0x2c4(0x04)
	float SoftDepthOffSet; // 0x2c8(0x04)
	char pad_2CC[0x8]; // 0x2cc(0x08)
	float BoundsScale; // 0x2d4(0x04)
	char pad_2D8[0x10]; // 0x2d8(0x10)
	struct TArray<struct AActor*> MoveIgnoreActors; // 0x2e8(0x10)
	struct TArray<struct UPrimitiveComponent*> MoveIgnoreComponents; // 0x2f8(0x10)
	char pad_308[0x10]; // 0x308(0x10)
	struct FBodyInstance BodyInstance; // 0x318(0x120)
	struct FMulticastSparseDelegate OnComponentHit; // 0x438(0x01)
	struct FMulticastSparseDelegate OnComponentBeginOverlap; // 0x439(0x01)
	struct FMulticastSparseDelegate OnComponentEndOverlap; // 0x43a(0x01)
	struct FMulticastSparseDelegate OnComponentWake; // 0x43b(0x01)
	struct FMulticastSparseDelegate OnComponentSleep; // 0x43c(0x01)
	char pad_43D[0x1]; // 0x43d(0x01)
	struct FMulticastSparseDelegate OnBeginCursorOver; // 0x43e(0x01)
	struct FMulticastSparseDelegate OnEndCursorOver; // 0x43f(0x01)
	struct FMulticastSparseDelegate OnClicked; // 0x440(0x01)
	struct FMulticastSparseDelegate OnReleased; // 0x441(0x01)
	struct FMulticastSparseDelegate OnInputTouchBegin; // 0x442(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnd; // 0x443(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnter; // 0x444(0x01)
	struct FMulticastSparseDelegate OnInputTouchLeave; // 0x445(0x01)
	char pad_446[0x1a]; // 0x446(0x1a)
	struct UPrimitiveComponent* LODParentPrimitive; // 0x460(0x08)
	/*LazyObjectProperty*/char LazyLODParent[0x1c]; // 0x468(0x1c)
	char pad_484[0x4]; // 0x484(0x04)
	/*struct TArray<LazyObjectProperty>*/char LazyLODChildren[0x10]; // 0x488(0x10)
	int8_t PrimitiveHLODLevel; // 0x498(0x01)
	char bForceOutputVelocities : 1; // 0x499(0x01)
	char pad_499_1 : 7; // 0x499(0x01)
	char pad_49A[0x2]; // 0x49a(0x02)
	struct FVector ProbeAnchorOffset; // 0x49c(0x0c)
	char bTetContributeGI : 1; // 0x4a8(0x01)
	char bTetReceiveGI : 1; // 0x4a8(0x01)
	char pad_4A8_2 : 6; // 0x4a8(0x01)
	char pad_4A9[0xaf]; // 0x4a9(0xaf)
	float CullingDistance; // 0x558(0x04)
	float CullingScreenSize; // 0x55c(0x04)

	void WakeRigidBody(struct FName BoneName); // Function Engine.PrimitiveComponent.WakeRigidBody // (Native|Public|BlueprintCallable) // @ game+0x9e8c6e0
	void WakeAllRigidBodies(); // Function Engine.PrimitiveComponent.WakeAllRigidBodies // (Native|Public|BlueprintCallable) // @ game+0x3608310
	void SetWalkableSlopeOverride(struct FWalkableSlopeOverride& NewOverride); // Function Engine.PrimitiveComponent.SetWalkableSlopeOverride // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9e8c630
	void SetVisibleInRayTracing(bool bNewVisibleInRayTracing); // Function Engine.PrimitiveComponent.SetVisibleInRayTracing // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8c5a0
	void SetUseCCD(bool InUseCCD, struct FName BoneName); // Function Engine.PrimitiveComponent.SetUseCCD // (Native|Public|BlueprintCallable) // @ game+0x9e8c4d0
	void SetTranslucentSortPriority(int32_t NewTranslucentSortPriority); // Function Engine.PrimitiveComponent.SetTranslucentSortPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8c450
	void SetSpecifyWorldScaleType(enum class EPreferredWorldScaleType WorldScaleType); // Function Engine.PrimitiveComponent.SetSpecifyWorldScaleType // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8c3d0
	void SetSoftDepthOffset(float bValue); // Function Engine.PrimitiveComponent.SetSoftDepthOffset // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8c350
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights); // Function Engine.PrimitiveComponent.SetSingleSampleShadowFromStationaryLights // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8c2c0
	void SetSimulatePhysics(bool bSimulate); // Function Engine.PrimitiveComponent.SetSimulatePhysics // (Native|Public|BlueprintCallable) // @ game+0x9e8c230
	void SetRenderInMainPass(bool bValue); // Function Engine.PrimitiveComponent.SetRenderInMainPass // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8c1a0
	void SetRenderCustomDepth(bool bValue); // Function Engine.PrimitiveComponent.SetRenderCustomDepth // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8c110
	void SetReceivesDecals(bool bNewReceivesDecals); // Function Engine.PrimitiveComponent.SetReceivesDecals // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8c080
	void SetPhysMaterialOverride(struct UPhysicalMaterial* NewPhysMaterial); // Function Engine.PrimitiveComponent.SetPhysMaterialOverride // (Native|Public|BlueprintCallable) // @ game+0x9e8ba50
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8bf70
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8be60
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8be60
	void SetPhysicsLinearVelocity(struct FVector NewVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsLinearVelocity // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e8bd40
	void SetPhysicsAngularVelocityInRadians(struct FVector NewAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInRadians // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e8bc20
	void SetPhysicsAngularVelocityInDegrees(struct FVector NewAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e8bae0
	void SetPhysicsAngularVelocity(struct FVector NewAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e8bae0
	void SetOwnerNoSee(bool bNewOwnerNoSee); // Function Engine.PrimitiveComponent.SetOwnerNoSee // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8b9c0
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee); // Function Engine.PrimitiveComponent.SetOnlyOwnerSee // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8b930
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision); // Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision // (Native|Public|BlueprintCallable) // @ game+0x9e8b8a0
	void SetMaterialSoftPtr(/*int32_t ElementIndex, struct TSoftObjectPtr<UMaterialInterface>& Material*/); // Function Engine.PrimitiveComponent.SetMaterialSoftPtr // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9e8b770
	void SetMaterialByName(struct FName MaterialSlotName, struct UMaterialInterface* Material); // Function Engine.PrimitiveComponent.SetMaterialByName // (Native|Public|BlueprintCallable) // @ game+0x9e8b6a0
	void SetMaterial(int32_t ElementIndex, struct UMaterialInterface* Material); // Function Engine.PrimitiveComponent.SetMaterial // (Native|Public|BlueprintCallable) // @ game+0x9e8b5d0
	void SetMassScale(struct FName BoneName, float InMassScale); // Function Engine.PrimitiveComponent.SetMassScale // (Native|Public|BlueprintCallable) // @ game+0x9e8b500
	void SetMassOverrideInKg(struct FName BoneName, float MassInKg, bool bOverrideMass); // Function Engine.PrimitiveComponent.SetMassOverrideInKg // (Native|Public|BlueprintCallable) // @ game+0x9e8b400
	void SetLinearDamping(float InDamping); // Function Engine.PrimitiveComponent.SetLinearDamping // (Native|Public|BlueprintCallable) // @ game+0x9e8b380
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup); // Function Engine.PrimitiveComponent.SetLightAttachmentsAsGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8b2f0
	void SetLazyLODParentPrimitive(struct UPrimitiveComponent* InLODParentPrimitive); // Function Engine.PrimitiveComponent.SetLazyLODParentPrimitive // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8b270
	void SetHiddenVisibleInRayTracing(bool bNewVisibleInRayTracing); // Function Engine.PrimitiveComponent.SetHiddenVisibleInRayTracing // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8b1e0
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents); // Function Engine.PrimitiveComponent.SetGenerateOverlapEvents // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8b150
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup); // Function Engine.PrimitiveComponent.SetExcludeFromLightAttachmentGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8b0c0
	void SetEnableUpdateShadowCacheState(bool bEnable); // Function Engine.PrimitiveComponent.SetEnableUpdateShadowCacheState // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8b030
	void SetEnableGravity(bool bGravityEnabled); // Function Engine.PrimitiveComponent.SetEnableGravity // (Native|Public|BlueprintCallable) // @ game+0x63b93d0
	void SetCustomPrimitiveDataVector4(int32_t DataIndex, struct FVector4 Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector4 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e8af60
	void SetCustomPrimitiveDataVector3(int32_t DataIndex, struct FVector Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector3 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e8ae90
	void SetCustomPrimitiveDataVector2(int32_t DataIndex, struct FVector2D Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector2 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e8add0
	void SetCustomPrimitiveDataFloat(int32_t DataIndex, float Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataFloat // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8ad10
	void SetCustomDepthStencilWriteMask(enum class ERendererStencilMask WriteMaskBit); // Function Engine.PrimitiveComponent.SetCustomDepthStencilWriteMask // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8ac90
	void SetCustomDepthStencilValue(int32_t Value); // Function Engine.PrimitiveComponent.SetCustomDepthStencilValue // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8ac10
	void SetCullDistance(float NewCullDistance); // Function Engine.PrimitiveComponent.SetCullDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8ab90
	void SetConstraintMode(enum class EDOFMode ConstraintMode); // Function Engine.PrimitiveComponent.SetConstraintMode // (Native|Public|BlueprintCallable) // @ game+0x9e8ab10
	void SetCollisionResponseToChannel(enum class ECollisionChannel Channel, enum class ECollisionResponse NewResponse); // Function Engine.PrimitiveComponent.SetCollisionResponseToChannel // (Native|Public|BlueprintCallable) // @ game+0x9e8aa50
	void SetCollisionResponseToAllChannels(enum class ECollisionResponse NewResponse); // Function Engine.PrimitiveComponent.SetCollisionResponseToAllChannels // (Native|Public|BlueprintCallable) // @ game+0x9e8a9d0
	void SetCollisionProfileName(struct FName InCollisionProfileName); // Function Engine.PrimitiveComponent.SetCollisionProfileName // (Native|Public|BlueprintCallable) // @ game+0x9e8a940
	void SetCollisionObjectType(enum class ECollisionChannel Channel); // Function Engine.PrimitiveComponent.SetCollisionObjectType // (Native|Public|BlueprintCallable) // @ game+0x9e8a8c0
	void SetCollisionEnabled(enum class ECollisionEnabled NewType); // Function Engine.PrimitiveComponent.SetCollisionEnabled // (Native|Public|BlueprintCallable) // @ game+0x9e8a840
	void SetCenterOfMass(struct FVector CenterOfMassOffset, struct FName BoneName); // Function Engine.PrimitiveComponent.SetCenterOfMass // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e8a770
	void SetCastThirdPersonShadow(bool bInCastThirdPersonShadow); // Function Engine.PrimitiveComponent.SetCastThirdPersonShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8a6e0
	void SetCastStationaryPerObjectShadow(bool NewCastShadow); // Function Engine.PrimitiveComponent.SetCastStationaryPerObjectShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8a650
	void SetCastShadow(bool NewCastShadow); // Function Engine.PrimitiveComponent.SetCastShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8a5c0
	void SetCastInsetShadow(bool bInCastInsetShadow); // Function Engine.PrimitiveComponent.SetCastInsetShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8a530
	void SetBoundsScale(float NewBoundsScale); // Function Engine.PrimitiveComponent.SetBoundsScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8a4b0
	void SetAngularDamping(float InDamping); // Function Engine.PrimitiveComponent.SetAngularDamping // (Native|Public|BlueprintCallable) // @ game+0x63d7390
	void SetAllUseCCD(bool InUseCCD); // Function Engine.PrimitiveComponent.SetAllUseCCD // (Native|Public|BlueprintCallable) // @ game+0x9e8a420
	void SetAllPhysicsLinearVelocity(struct FVector NewVel, bool bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e8a340
	void SetAllPhysicsAngularVelocityInRadians(struct FVector& NewAngVel, bool bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInRadians // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e8a260
	void SetAllPhysicsAngularVelocityInDegrees(struct FVector& NewAngVel, bool bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInDegrees // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e8a140
	void SetAllMassScale(float InMassScale); // Function Engine.PrimitiveComponent.SetAllMassScale // (Native|Public|BlueprintCallable) // @ game+0x9e8a0c0
	struct FVector ScaleByMomentOfInertia(struct FVector InputVector, struct FName BoneName); // Function Engine.PrimitiveComponent.ScaleByMomentOfInertia // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e89fc0
	void PutRigidBodyToSleep(struct FName BoneName); // Function Engine.PrimitiveComponent.PutRigidBodyToSleep // (Final|Native|Public|BlueprintCallable) // @ game+0x9e89f40
	bool K2_SphereTraceComponent(struct FVector TraceStart, struct FVector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_SphereTraceComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e89bc0
	bool K2_SphereOverlapComponent(struct FVector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_SphereOverlapComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e89880
	bool K2_LineTraceComponent(struct FVector TraceStart, struct FVector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_LineTraceComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e89540
	bool K2_IsQueryCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e89500
	bool K2_IsPhysicsCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e894c0
	bool K2_IsCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsCollisionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e89480
	bool K2_BoxOverlapComponent(struct FVector InBoxCentre, struct FBox InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_BoxOverlapComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e89130
	bool IsOverlappingComponent(struct UPrimitiveComponent* OtherComp); // Function Engine.PrimitiveComponent.IsOverlappingComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e890a0
	bool IsOverlappingActor(struct AActor* Other); // Function Engine.PrimitiveComponent.IsOverlappingActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e89010
	bool IsGravityEnabled(); // Function Engine.PrimitiveComponent.IsGravityEnabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e88fe0
	bool IsAnyRigidBodyAwake(); // Function Engine.PrimitiveComponent.IsAnyRigidBodyAwake // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e88fb0
	void IgnoreComponentWhenMoving(struct UPrimitiveComponent* Component, bool bShouldIgnore); // Function Engine.PrimitiveComponent.IgnoreComponentWhenMoving // (Final|Native|Public|BlueprintCallable) // @ game+0x9e88ee0
	void IgnoreActorWhenMoving(struct AActor* Actor, bool bShouldIgnore); // Function Engine.PrimitiveComponent.IgnoreActorWhenMoving // (Final|Native|Public|BlueprintCallable) // @ game+0x9e88e10
	struct FWalkableSlopeOverride GetWalkableSlopeOverride(); // Function Engine.PrimitiveComponent.GetWalkableSlopeOverride // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e88dd0
	struct FVector GetPhysicsLinearVelocityAtPoint(struct FVector Point, struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e88ce0
	struct FVector GetPhysicsLinearVelocity(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsLinearVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e88c40
	struct FVector GetPhysicsAngularVelocityInRadians(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInRadians // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e88ba0
	struct FVector GetPhysicsAngularVelocityInDegrees(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e88ae0
	struct FVector GetPhysicsAngularVelocity(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e88ae0
	void GetOverlappingComponents(struct TArray<struct UPrimitiveComponent*>& OutOverlappingComponents); // Function Engine.PrimitiveComponent.GetOverlappingComponents // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e88a10
	void GetOverlappingActors(struct TArray<struct AActor*>& OverlappingActors, struct UClass* ClassFilter); // Function Engine.PrimitiveComponent.GetOverlappingActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e888f0
	int32_t GetNumMaterials(); // Function Engine.PrimitiveComponent.GetNumMaterials // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e888c0
	struct UMaterialInterface* GetMaterialFromCollisionFaceIndex(int32_t FaceIndex, int32_t& SectionIndex); // Function Engine.PrimitiveComponent.GetMaterialFromCollisionFaceIndex // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e887e0
	struct UMaterialInterface* GetMaterial(int32_t ElementIndex); // Function Engine.PrimitiveComponent.GetMaterial // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e88740
	float GetMassScale(struct FName BoneName); // Function Engine.PrimitiveComponent.GetMassScale // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e886a0
	float GetMass(); // Function Engine.PrimitiveComponent.GetMass // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e88660
	struct UPrimitiveComponent* GetLODParentPrimitive(); // Function Engine.PrimitiveComponent.GetLODParentPrimitive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e885c0
	float GetLinearDamping(); // Function Engine.PrimitiveComponent.GetLinearDamping // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e88620
	struct UPrimitiveComponent* GetLazyLODParentPrimitive(); // Function Engine.PrimitiveComponent.GetLazyLODParentPrimitive // (Final|Native|Public|BlueprintCallable) // @ game+0x9e885f0
	struct FVector GetInertiaTensor(struct FName BoneName); // Function Engine.PrimitiveComponent.GetInertiaTensor // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e88510
	bool GetGenerateOverlapEvents(); // Function Engine.PrimitiveComponent.GetGenerateOverlapEvents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e884e0
	float GetCullingDistance(); // Function Engine.PrimitiveComponent.GetCullingDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x9e884b0
	enum class ECollisionResponse GetCollisionResponseToChannel(enum class ECollisionChannel Channel); // Function Engine.PrimitiveComponent.GetCollisionResponseToChannel // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e88420
	struct FName GetCollisionProfileName(); // Function Engine.PrimitiveComponent.GetCollisionProfileName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e883e0
	enum class ECollisionChannel GetCollisionObjectType(); // Function Engine.PrimitiveComponent.GetCollisionObjectType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e883b0
	enum class ECollisionEnabled GetCollisionEnabled(); // Function Engine.PrimitiveComponent.GetCollisionEnabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e88380
	float GetClosestPointOnCollision(struct FVector& Point, struct FVector& OutPointOnBody, struct FName BoneName); // Function Engine.PrimitiveComponent.GetClosestPointOnCollision // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e88240
	struct FVector GetCenterOfMass(struct FName BoneName); // Function Engine.PrimitiveComponent.GetCenterOfMass // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e881a0
	float GetAngularDamping(); // Function Engine.PrimitiveComponent.GetAngularDamping // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e88160
	struct UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int32_t ElementIndex, struct UMaterialInterface* SourceMaterial, struct FName OptionalName); // Function Engine.PrimitiveComponent.CreateDynamicMaterialInstance // (Native|Public|BlueprintCallable) // @ game+0x9e88050
	struct UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int32_t ElementIndex, struct UMaterialInterface* Parent); // Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial // (Native|Public|BlueprintCallable) // @ game+0x9e87f80
	struct UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int32_t ElementIndex); // Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic // (Native|Public|BlueprintCallable) // @ game+0x9e87ee0
	struct TArray<struct UPrimitiveComponent*> CopyArrayOfMoveIgnoreComponents(); // Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x9e87e00
	struct TArray<struct AActor*> CopyArrayOfMoveIgnoreActors(); // Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors // (Final|Native|Public|BlueprintCallable) // @ game+0x9e87d20
	void ClearMoveIgnoreComponents(); // Function Engine.PrimitiveComponent.ClearMoveIgnoreComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x9e87cd0
	void ClearMoveIgnoreActors(); // Function Engine.PrimitiveComponent.ClearMoveIgnoreActors // (Final|Native|Public|BlueprintCallable) // @ game+0x9e87cb0
	void ChangePrimitiveDynamicShadowState(float Duration); // Function Engine.PrimitiveComponent.ChangePrimitiveDynamicShadowState // (Final|Native|Public|BlueprintCallable) // @ game+0x9e87c30
	bool CanCharacterStepUp(struct APawn* Pawn); // Function Engine.PrimitiveComponent.CanCharacterStepUp // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e87b90
	void AddTorqueInRadians(struct FVector Torque, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddTorqueInRadians // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e87930
	void AddTorqueInDegrees(struct FVector Torque, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddTorqueInDegrees // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e87a50
	void AddTorque(struct FVector Torque, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddTorque // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e87930
	void AddRadialImpulse(struct FVector Origin, float radius, float Strength, enum class ERadialImpulseFalloff Falloff, bool bVelChange); // Function Engine.PrimitiveComponent.AddRadialImpulse // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e87770
	void AddRadialForce(struct FVector Origin, float radius, float Strength, enum class ERadialImpulseFalloff Falloff, bool bAccelChange); // Function Engine.PrimitiveComponent.AddRadialForce // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e875b0
	void AddImpulseAtLocation(struct FVector Impulse, struct FVector Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddImpulseAtLocation // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e87480
	void AddImpulse(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddImpulse // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e87360
	void AddForceAtLocationLocal(struct FVector Force, struct FVector Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddForceAtLocationLocal // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e87230
	void AddForceAtLocation(struct FVector Force, struct FVector Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddForceAtLocation // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e87100
	void AddForce(struct FVector Force, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddForce // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e86fe0
	void AddAngularImpulseInRadians(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddAngularImpulseInRadians // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e86ec0
	void AddAngularImpulseInDegrees(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddAngularImpulseInDegrees // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e86d80
	void AddAngularImpulse(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddAngularImpulse // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e86c60
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AudioComponent
// Size: 0x7d0 (Inherited: 0x240)
class UAudioComponent : public USceneComponent {
public:

	struct USoundBase* Sound; // 0x240(0x08)
	struct TArray<struct FAudioComponentParam> InstanceParameters; // 0x248(0x10)
	struct USoundClass* SoundClassOverride; // 0x258(0x08)
	char bAutoDestroy : 1; // 0x260(0x01)
	char bStopWhenOwnerDestroyed : 1; // 0x260(0x01)
	char bShouldRemainActiveIfDropped : 1; // 0x260(0x01)
	char bAllowSpatialization : 1; // 0x260(0x01)
	char bOverrideAttenuation : 1; // 0x260(0x01)
	char bOverrideSubtitlePriority : 1; // 0x260(0x01)
	char bIsUISound : 1; // 0x260(0x01)
	char bEnableLowPassFilter : 1; // 0x260(0x01)
	char bOverridePriority : 1; // 0x261(0x01)
	char bSuppressSubtitles : 1; // 0x261(0x01)
	char pad_261_2 : 6; // 0x261(0x01)
	char pad_262_0 : 4; // 0x262(0x01)
	char bAutoManageAttachment : 1; // 0x262(0x01)
	char pad_262_5 : 3; // 0x262(0x01)
	char pad_263[0x5]; // 0x263(0x05)
	struct FName AudioComponentUserID; // 0x268(0x08)
	float PitchModulationMin; // 0x270(0x04)
	float PitchModulationMax; // 0x274(0x04)
	float VolumeModulationMin; // 0x278(0x04)
	float VolumeModulationMax; // 0x27c(0x04)
	float VolumeMultiplier; // 0x280(0x04)
	int32_t EnvelopeFollowerAttackTime; // 0x284(0x04)
	int32_t EnvelopeFollowerReleaseTime; // 0x288(0x04)
	float Priority; // 0x28c(0x04)
	float SubtitlePriority; // 0x290(0x04)
	char pad_294[0x4]; // 0x294(0x04)
	struct USoundEffectSourcePresetChain* SourceEffectChain; // 0x298(0x08)
	float PitchMultiplier; // 0x2a0(0x04)
	float LowPassFilterFrequency; // 0x2a4(0x04)
	char pad_2A8[0x8]; // 0x2a8(0x08)
	struct USoundAttenuation* AttenuationSettings; // 0x2b0(0x08)
	struct FSoundAttenuationSettings AttenuationOverrides; // 0x2b8(0x350)
	struct USoundConcurrency* ConcurrencySettings; // 0x608(0x08)
	/*struct TSet<struct USoundConcurrency*>*/char ConcurrencySet[0x50]; // 0x610(0x50)
	char pad_660[0xc]; // 0x660(0x0c)
	enum class EAttachmentRule AutoAttachLocationRule; // 0x66c(0x01)
	enum class EAttachmentRule AutoAttachRotationRule; // 0x66d(0x01)
	enum class EAttachmentRule AutoAttachScaleRule; // 0x66e(0x01)
	char pad_66F[0x1]; // 0x66f(0x01)
	/*struct FMulticastInlineDelegate*/char OnAudioFinished[0x10]; // 0x670(0x10)
	char pad_680[0x18]; // 0x680(0x18)
	/*struct FMulticastInlineDelegate*/char OnAudioPlaybackPercent[0x10]; // 0x698(0x10)
	char pad_6A8[0x18]; // 0x6a8(0x18)
	/*struct FMulticastInlineDelegate*/char OnAudioSingleEnvelopeValue[0x10]; // 0x6c0(0x10)
	char pad_6D0[0x18]; // 0x6d0(0x18)
	/*struct FMulticastInlineDelegate*/char OnAudioMultiEnvelopeValue[0x10]; // 0x6e8(0x10)
	char pad_6F8[0x18]; // 0x6f8(0x18)
	struct FSoundModulation Modulation; // 0x710(0x10)
	/*struct FDelegate*/char OnQueueSubtitles[0x10]; // 0x720(0x10)
	struct TWeakObjectPtr<struct USceneComponent> AutoAttachParent; // 0x730(0x08)
	struct FName AutoAttachSocketName; // 0x738(0x08)
	char pad_740[0x90]; // 0x740(0x90)

	void StopDelayed(float DelayTime); // Function Engine.AudioComponent.StopDelayed // (Final|Native|Public|BlueprintCallable) // @ game+0x9d799b0
	void Stop(); // Function Engine.AudioComponent.Stop // (Native|Public|BlueprintCallable) // @ game+0x48e8ae0
	void SetWaveParameter(struct FName InName, struct USoundWave* InWave); // Function Engine.AudioComponent.SetWaveParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x9d798f0
	void SetVolumeMultiplier(float NewVolumeMultiplier); // Function Engine.AudioComponent.SetVolumeMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x9d79870
	void SetUISound(bool bInUISound); // Function Engine.AudioComponent.SetUISound // (Final|Native|Public|BlueprintCallable) // @ game+0x9d797e0
	void SetSubmixSend(struct USoundSubmix* Submix, float SendLevel); // Function Engine.AudioComponent.SetSubmixSend // (Final|Native|Public|BlueprintCallable) // @ game+0x9d796a0
	void SetSourceBusSendPreEffect(struct USoundSourceBus* SoundSourceBus, float SourceBusSendLevel); // Function Engine.AudioComponent.SetSourceBusSendPreEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x9d79560
	void SetSourceBusSendPostEffect(struct USoundSourceBus* SoundSourceBus, float SourceBusSendLevel); // Function Engine.AudioComponent.SetSourceBusSendPostEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x9d794a0
	void SetSound(struct USoundBase* NewSound); // Function Engine.AudioComponent.SetSound // (Final|Native|Public|BlueprintCallable) // @ game+0x9d79420
	void SetPitchMultiplier(float NewPitchMultiplier); // Function Engine.AudioComponent.SetPitchMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x9d79290
	void SetPaused(bool bPause); // Function Engine.AudioComponent.SetPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x9d79200
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency); // Function Engine.AudioComponent.SetLowPassFilterFrequency // (Final|Native|Public|BlueprintCallable) // @ game+0x9d79180
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled); // Function Engine.AudioComponent.SetLowPassFilterEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x9d790f0
	void SetIntParameter(struct FName InName, int32_t inInt); // Function Engine.AudioComponent.SetIntParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x9d79030
	void SetFloatParameter(struct FName InName, float InFloat); // Function Engine.AudioComponent.SetFloatParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x9d78ef0
	void SetBoolParameter(struct FName InName, bool InBool); // Function Engine.AudioComponent.SetBoolParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x9d78b20
	void Play(float StartTime); // Function Engine.AudioComponent.Play // (Native|Public|BlueprintCallable) // @ game+0x227de30
	bool IsPlaying(); // Function Engine.AudioComponent.IsPlaying // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x175ca20
	bool HasCookedFFTData(); // Function Engine.AudioComponent.HasCookedFFTData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d78a70
	bool HasCookedAmplitudeEnvelopeData(); // Function Engine.AudioComponent.HasCookedAmplitudeEnvelopeData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d78a40
	enum class EAudioComponentPlayState GetPlayState(); // Function Engine.AudioComponent.GetPlayState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d78a10
	bool GetCookedFFTDataForAllPlayingSounds(struct TArray<struct FSoundWaveSpectralDataPerSound>& OutSoundWaveSpectralData); // Function Engine.AudioComponent.GetCookedFFTDataForAllPlayingSounds // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9d788e0
	bool GetCookedFFTData(struct TArray<float>& FrequenciesToGet, struct TArray<struct FSoundWaveSpectralData>& OutSoundWaveSpectralData); // Function Engine.AudioComponent.GetCookedFFTData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9d78760
	bool GetCookedEnvelopeDataForAllPlayingSounds(struct TArray<struct FSoundWaveEnvelopeDataPerSound>& OutEnvelopeData); // Function Engine.AudioComponent.GetCookedEnvelopeDataForAllPlayingSounds // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9d78680
	bool GetCookedEnvelopeData(float& OutEnvelopeData); // Function Engine.AudioComponent.GetCookedEnvelopeData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9d785d0
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, enum class EAudioFaderCurve FadeCurve); // Function Engine.AudioComponent.FadeOut // (Native|Public|BlueprintCallable) // @ game+0x9d784c0
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, enum class EAudioFaderCurve FadeCurve); // Function Engine.AudioComponent.FadeIn // (Native|Public|BlueprintCallable) // @ game+0x9d78370
	bool BP_GetAttenuationSettingsToApply(struct FSoundAttenuationSettings& OutAttenuationSettings); // Function Engine.AudioComponent.BP_GetAttenuationSettingsToApply // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9d78140
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, enum class EAudioFaderCurve FadeCurve); // Function Engine.AudioComponent.AdjustVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x9d776a0
	void AdjustAttenuation(struct FSoundAttenuationSettings& InAttenuationSettings); // Function Engine.AudioComponent.AdjustAttenuation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9d77590
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CameraComponent
// Size: 0xc10 (Inherited: 0x240)
class UCameraComponent : public USceneComponent {
public:

	float FieldOfView; // 0x240(0x04)
	float OrthoWidth; // 0x244(0x04)
	float OrthoNearClipPlane; // 0x248(0x04)
	float OrthoFarClipPlane; // 0x24c(0x04)
	float AspectRatio; // 0x250(0x04)
	char bConstrainAspectRatio : 1; // 0x254(0x01)
	char bUseFieldOfViewForLOD : 1; // 0x254(0x01)
	char bLockToHmd : 1; // 0x254(0x01)
	char bUsePawnControlRotation : 1; // 0x254(0x01)
	char pad_254_4 : 4; // 0x254(0x01)
	enum class ECameraProjectionMode ProjectionMode; // 0x255(0x01)
	char pad_256[0x3a]; // 0x256(0x3a)
	float PostProcessBlendWeight; // 0x290(0x04)
	char pad_294[0x2c]; // 0x294(0x2c)
	struct FPostProcessSettings PostProcessSettings; // 0x2c0(0x950)

	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD); // Function Engine.CameraComponent.SetUseFieldOfViewForLOD // (Final|Native|Public|BlueprintCallable) // @ game+0x9d8e660
	void SetProjectionMode(enum class ECameraProjectionMode InProjectionMode); // Function Engine.CameraComponent.SetProjectionMode // (Final|Native|Public|BlueprintCallable) // @ game+0x9d8e560
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight); // Function Engine.CameraComponent.SetPostProcessBlendWeight // (Final|Native|Public|BlueprintCallable) // @ game+0x9d8e4e0
	void SetOrthoWidth(float InOrthoWidth); // Function Engine.CameraComponent.SetOrthoWidth // (Final|Native|Public|BlueprintCallable) // @ game+0x9d8e460
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane); // Function Engine.CameraComponent.SetOrthoNearClipPlane // (Final|Native|Public|BlueprintCallable) // @ game+0x9d8e3e0
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane); // Function Engine.CameraComponent.SetOrthoFarClipPlane // (Final|Native|Public|BlueprintCallable) // @ game+0x9d8e360
	void SetFieldOfView(float InFieldOfView); // Function Engine.CameraComponent.SetFieldOfView // (Native|Public|BlueprintCallable) // @ game+0x227ddb0
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio); // Function Engine.CameraComponent.SetConstraintAspectRatio // (Final|Native|Public|BlueprintCallable) // @ game+0x9d8e250
	void SetAspectRatio(float InAspectRatio); // Function Engine.CameraComponent.SetAspectRatio // (Final|Native|Public|BlueprintCallable) // @ game+0x9d8e1d0
	void RemoveBlendable(/*struct TScriptInterface<IBlendableInterface> InBlendableObject*/); // Function Engine.CameraComponent.RemoveBlendable // (Final|Native|Public|BlueprintCallable) // @ game+0x9d8e080
	void OnCameraMeshHiddenChanged(); // Function Engine.CameraComponent.OnCameraMeshHiddenChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x88f4d0
	void GetCameraView(float DeltaTime, struct FMinimalViewInfo& DesiredView); // Function Engine.CameraComponent.GetCameraView // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9d8c730
	void AddOrUpdateBlendable(/*struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight*/); // Function Engine.CameraComponent.AddOrUpdateBlendable // (Final|Native|Public|BlueprintCallable) // @ game+0x9d8c560
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SpringArmComponent
// Size: 0x2d0 (Inherited: 0x240)
class USpringArmComponent : public USceneComponent {
public:

	float TargetArmLength; // 0x240(0x04)
	struct FVector SocketOffset; // 0x244(0x0c)
	struct FVector TargetOffset; // 0x250(0x0c)
	float ProbeSize; // 0x25c(0x04)
	enum class ECollisionChannel ProbeChannel; // 0x260(0x01)
	char pad_261[0x3]; // 0x261(0x03)
	char bDoCollisionTest : 1; // 0x264(0x01)
	char bUsePawnControlRotation : 1; // 0x264(0x01)
	char bInheritPitch : 1; // 0x264(0x01)
	char bInheritYaw : 1; // 0x264(0x01)
	char bInheritRoll : 1; // 0x264(0x01)
	char bEnableCameraLag : 1; // 0x264(0x01)
	char bEnableCameraRotationLag : 1; // 0x264(0x01)
	char bUseCameraLagSubstepping : 1; // 0x264(0x01)
	char bDrawDebugLagMarkers : 1; // 0x265(0x01)
	char pad_265_1 : 7; // 0x265(0x01)
	char pad_266[0x2]; // 0x266(0x02)
	float CameraLagSpeed; // 0x268(0x04)
	float CameraRotationLagSpeed; // 0x26c(0x04)
	float CameraLagMaxTimeStep; // 0x270(0x04)
	float CameraLagMaxDistance; // 0x274(0x04)
	char pad_278[0x58]; // 0x278(0x58)

	bool IsCollisionFixApplied(); // Function Engine.SpringArmComponent.IsCollisionFixApplied // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebb360
	struct FVector GetUnfixedCameraPosition(); // Function Engine.SpringArmComponent.GetUnfixedCameraPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebb320
	struct FRotator GetTargetRotation(); // Function Engine.SpringArmComponent.GetTargetRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebb2e0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SceneCaptureComponent
// Size: 0x2e8 (Inherited: 0x240)
class USceneCaptureComponent : public USceneComponent {
public:

	enum class ESceneCapturePrimitiveRenderMode PrimitiveRenderMode; // 0x240(0x01)
	enum class ESceneCaptureSource CaptureSource; // 0x241(0x01)
	char pad_242[0x6]; // 0x242(0x06)
	struct TArray<struct TWeakObjectPtr<struct UPrimitiveComponent>> HiddenComponents; // 0x248(0x10)
	struct TArray<struct AActor*> HiddenActors; // 0x258(0x10)
	struct TArray<struct TWeakObjectPtr<struct UPrimitiveComponent>> ShowOnlyComponents; // 0x268(0x10)
	struct TArray<struct AActor*> ShowOnlyActors; // 0x278(0x10)
	bool bCaptureEveryFrame; // 0x288(0x01)
	bool bCaptureOnMovement; // 0x289(0x01)
	bool bAlwaysPersistRenderingState; // 0x28a(0x01)
	char pad_28B[0x1]; // 0x28b(0x01)
	float LODDistanceFactor; // 0x28c(0x04)
	float MaxViewDistanceOverride; // 0x290(0x04)
	int32_t CaptureSortPriority; // 0x294(0x04)
	bool bUseRayTracingIfEnabled; // 0x298(0x01)
	char pad_299[0x7]; // 0x299(0x07)
	struct TArray<struct FEngineShowFlagsSetting> ShowFlagSettings; // 0x2a0(0x10)
	bool bDisablePostProcessVolume; // 0x2b0(0x01)
	bool bUseLiteRenderer; // 0x2b1(0x01)
	bool bForceUseThinGBuffer; // 0x2b2(0x01)
	enum class ELiteRendererUsage LiteRendererUsage; // 0x2b3(0x01)
	float IndependentFOV; // 0x2b4(0x04)
	char UseCaptureTAA : 1; // 0x2b8(0x01)
	char pad_2B8_1 : 7; // 0x2b8(0x01)
	char pad_2B9[0xf]; // 0x2b9(0x0f)
	struct FString ProfilingEventName; // 0x2c8(0x10)
	char pad_2D8[0x10]; // 0x2d8(0x10)

	void ShowOnlyComponent(struct UPrimitiveComponent* InComponent); // Function Engine.SceneCaptureComponent.ShowOnlyComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x9e9bd80
	void ShowOnlyActorComponents(struct AActor* inActor); // Function Engine.SceneCaptureComponent.ShowOnlyActorComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x9e9bd00
	void SetUseLiteRenderer(bool bInUseLiteRenderer); // Function Engine.SceneCaptureComponent.SetUseLiteRenderer // (Final|Native|Public|BlueprintCallable) // @ game+0x9e9ba70
	void SetupIndependentFOV(float& InFOV); // Function Engine.SceneCaptureComponent.SetupIndependentFOV // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9e9bc60
	void SetCaptureSortPriority(int32_t NewCaptureSortPriority); // Function Engine.SceneCaptureComponent.SetCaptureSortPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x9e9b780
	void RemoveShowOnlyComponent(struct UPrimitiveComponent* InComponent); // Function Engine.SceneCaptureComponent.RemoveShowOnlyComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x9e9b5c0
	void RemoveShowOnlyActorComponents(struct AActor* inActor); // Function Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x9e9b540
	void HideComponent(struct UPrimitiveComponent* InComponent); // Function Engine.SceneCaptureComponent.HideComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x9e991e0
	void HideActorComponents(struct AActor* inActor); // Function Engine.SceneCaptureComponent.HideActorComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x9e99160
	void ClearShowOnlyComponents(); // Function Engine.SceneCaptureComponent.ClearShowOnlyComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x9e98780
	void ClearHiddenComponents(); // Function Engine.SceneCaptureComponent.ClearHiddenComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x9e98760
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AtmosphericFogComponent
// Size: 0x4a0 (Inherited: 0x240)
class UAtmosphericFogComponent : public USceneComponent {
public:

	float SunMultiplier; // 0x240(0x04)
	float FogMultiplier; // 0x244(0x04)
	float DensityMultiplier; // 0x248(0x04)
	float DensityOffset; // 0x24c(0x04)
	float DistanceScale; // 0x250(0x04)
	float AltitudeScale; // 0x254(0x04)
	float DistanceOffset; // 0x258(0x04)
	float GroundOffset; // 0x25c(0x04)
	float StartDistance; // 0x260(0x04)
	float SunDiscScale; // 0x264(0x04)
	float DefaultBrightness; // 0x268(0x04)
	struct FColor DefaultLightColor; // 0x26c(0x04)
	char bDisableSunDisk : 1; // 0x270(0x01)
	char bAtmosphereAffectsSunIlluminance : 1; // 0x270(0x01)
	char bDisableGroundScattering : 1; // 0x270(0x01)
	char pad_270_3 : 5; // 0x270(0x01)
	char pad_271[0x3]; // 0x271(0x03)
	struct FAtmospherePrecomputeParameters PrecomputeParams; // 0x274(0x2c)
	struct UTexture2D* TransmittanceTexture; // 0x2a0(0x08)
	struct UTexture2D* IrradianceTexture; // 0x2a8(0x08)
	char pad_2B0[0x1f0]; // 0x2b0(0x1f0)

	void StartPrecompute(); // Function Engine.AtmosphericFogComponent.StartPrecompute // (Final|Native|Public|BlueprintCallable) // @ game+0x88f4d0
	void SetSunMultiplier(float NewSunMultiplier); // Function Engine.AtmosphericFogComponent.SetSunMultiplier // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9d79760
	void SetStartDistance(float NewStartDistance); // Function Engine.AtmosphericFogComponent.SetStartDistance // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9d79620
	void SetPrecomputeParams(float DensityHeight, int32_t MaxScatteringOrder, int32_t InscatterAltitudeSampleNum); // Function Engine.AtmosphericFogComponent.SetPrecomputeParams // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9d79310
	void SetFogMultiplier(float NewFogMultiplier); // Function Engine.AtmosphericFogComponent.SetFogMultiplier // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9d78fb0
	void SetDistanceScale(float NewDistanceScale); // Function Engine.AtmosphericFogComponent.SetDistanceScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9d78e70
	void SetDistanceOffset(float NewDistanceOffset); // Function Engine.AtmosphericFogComponent.SetDistanceOffset // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9d78df0
	void SetDensityOffset(float NewDensityOffset); // Function Engine.AtmosphericFogComponent.SetDensityOffset // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9d78d70
	void SetDensityMultiplier(float NewDensityMultiplier); // Function Engine.AtmosphericFogComponent.SetDensityMultiplier // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9d78cf0
	void SetDefaultLightColor(struct FLinearColor NewLightColor); // Function Engine.AtmosphericFogComponent.SetDefaultLightColor // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9d78c70
	void SetDefaultBrightness(float NewBrightness); // Function Engine.AtmosphericFogComponent.SetDefaultBrightness // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9d78bf0
	void SetAltitudeScale(float NewAltitudeScale); // Function Engine.AtmosphericFogComponent.SetAltitudeScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9d78aa0
	void DisableSunDisk(bool NewSunDisk); // Function Engine.AtmosphericFogComponent.DisableSunDisk // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9d782e0
	void DisableGroundScattering(bool NewGroundScattering); // Function Engine.AtmosphericFogComponent.DisableGroundScattering // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9d78250
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ReflectionCaptureComponent
// Size: 0x4a8 (Inherited: 0x240)
class UReflectionCaptureComponent : public USceneComponent {
public:

	char pad_240[0x8]; // 0x240(0x08)
	struct UBillboardComponent* CaptureOffsetComponent; // 0x248(0x08)
	enum class EReflectionSourceType ReflectionSourceType; // 0x250(0x01)
	char pad_251[0x7]; // 0x251(0x07)
	struct UTextureCube* Cubemap; // 0x258(0x08)
	enum class EReflectionInfluencePrimitiveType ReflectionInfluencePrimitiveType; // 0x260(0x01)
	char pad_261[0x7]; // 0x261(0x07)
	/*struct TMap<struct FString, struct TSoftObjectPtr<UTextureCube>>*/char TodReflectionCubemaps[0x50]; // 0x268(0x50)
	int32_t ReflectionPriority; // 0x2b8(0x04)
	float SourceCubemapAngle; // 0x2bc(0x04)
	float Brightness; // 0x2c0(0x04)
	bool bNeedIrradianceNormalization; // 0x2c4(0x01)
	char pad_2C5[0x3]; // 0x2c5(0x03)
	float IrradianceNormalizationIntensity; // 0x2c8(0x04)
	bool bNeedParallaxCorrection; // 0x2cc(0x01)
	bool bOutdoorReflection; // 0x2cd(0x01)
	bool bSupportDiffuseLighting; // 0x2ce(0x01)
	char pad_2CF[0x1]; // 0x2cf(0x01)
	struct ULocalLightGroupBake* LocalLightGroupBakeObject; // 0x2d0(0x08)
	struct FGuid LocalLightGroupBakeBuildID; // 0x2d8(0x10)
	struct ULocalReflectionGroupBake* LocalReflectionGroupBakeObject; // 0x2e8(0x08)
	struct FGuid LocalReflectionGroupBakeBuildID; // 0x2f0(0x10)
	struct FVector CaptureOffset; // 0x300(0x0c)
	char pad_30C[0x4]; // 0x30c(0x04)
	struct TArray<struct FReflectionRangeInfo> ExtraReflectionRangeInfo; // 0x310(0x10)
	struct FVector Inner; // 0x320(0x0c)
	struct FGuid MapBuildDataId; // 0x32c(0x10)
	char pad_33C[0x16c]; // 0x33c(0x16c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CDLODClipRectComponent
// Size: 0x240 (Inherited: 0x240)
class UCDLODClipRectComponent : public USceneComponent {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ChildActorComponent
// Size: 0x280 (Inherited: 0x240)
class UChildActorComponent : public USceneComponent {
public:

	struct UClass* ChildActorClass; // 0x240(0x08)
	bool bKeepCompInBuildRuntimeRes; // 0x248(0x01)
	char pad_249[0x7]; // 0x249(0x07)
	struct AActor* ChildActor; // 0x250(0x08)
	struct AActor* ChildActorTemplate; // 0x258(0x08)
	char pad_260[0x20]; // 0x260(0x20)

	void SetChildActorClass(struct UClass* InClass); // Function Engine.ChildActorComponent.SetChildActorClass // (Final|Native|Public|BlueprintCallable) // @ game+0x9d99f70
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DecalComponent
// Size: 0x280 (Inherited: 0x240)
class UDecalComponent : public USceneComponent {
public:

	struct UMaterialInterface* DecalMaterial; // 0x240(0x08)
	int32_t SortOrder; // 0x248(0x04)
	float FadeScreenSize; // 0x24c(0x04)
	float FadeStartDelay; // 0x250(0x04)
	float FadeDuration; // 0x254(0x04)
	float FadeInDuration; // 0x258(0x04)
	float FadeInStartDelay; // 0x25c(0x04)
	char bDestroyOwnerAfterFade : 1; // 0x260(0x01)
	char bUseDecalIgnoreChannel : 1; // 0x260(0x01)
	char pad_260_2 : 6; // 0x260(0x01)
	struct FLightingChannels LightingChannels; // 0x261(0x01)
	char pad_262[0x2]; // 0x262(0x02)
	struct FVector DecalSize; // 0x264(0x0c)
	char pad_270[0x10]; // 0x270(0x10)

	void SetSortOrder(int32_t Value); // Function Engine.DecalComponent.SetSortOrder // (Final|Native|Public|BlueprintCallable) // @ game+0x9da0c30
	void SetFadeScreenSize(float NewFadeScreenSize); // Function Engine.DecalComponent.SetFadeScreenSize // (Final|Native|Public|BlueprintCallable) // @ game+0x9da0b30
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade); // Function Engine.DecalComponent.SetFadeOut // (Final|Native|Public|BlueprintCallable) // @ game+0x9da0a20
	void SetFadeIn(float StartDelay, float Duaration); // Function Engine.DecalComponent.SetFadeIn // (Final|Native|Public|BlueprintCallable) // @ game+0x9da0960
	void SetDecalMaterial(struct UMaterialInterface* NewDecalMaterial); // Function Engine.DecalComponent.SetDecalMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x9da08e0
	float GetFadeStartDelay(); // Function Engine.DecalComponent.GetFadeStartDelay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9da06c0
	float GetFadeInStartDelay(); // Function Engine.DecalComponent.GetFadeInStartDelay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9da0690
	float GetFadeInDuration(); // Function Engine.DecalComponent.GetFadeInDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9da0660
	float GetFadeDuration(); // Function Engine.DecalComponent.GetFadeDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9da0630
	struct UMaterialInterface* GetDecalMaterial(); // Function Engine.DecalComponent.GetDecalMaterial // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9da0600
	struct UMaterialInstanceDynamic* CreateDynamicMaterialInstance(); // Function Engine.DecalComponent.CreateDynamicMaterialInstance // (Native|Public|BlueprintCallable) // @ game+0x788eb90
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LightComponentBase
// Size: 0x288 (Inherited: 0x240)
class ULightComponentBase : public USceneComponent {
public:

	struct FGuid LightGuid; // 0x240(0x10)
	struct FGuid LightImportanceGuid; // 0x250(0x10)
	float Brightness; // 0x260(0x04)
	float Intensity; // 0x264(0x04)
	struct FColor LightColor; // 0x268(0x04)
	char bAffectsWorld : 1; // 0x26c(0x01)
	char bAffectVolumetricFogOnly : 1; // 0x26c(0x01)
	char CastShadows : 1; // 0x26c(0x01)
	char AsEnvironment : 1; // 0x26c(0x01)
	char CastStaticShadows : 1; // 0x26c(0x01)
	char CastDynamicShadows : 1; // 0x26c(0x01)
	char IsWeaponLight : 1; // 0x26c(0x01)
	char pad_26C_7 : 1; // 0x26c(0x01)
	char pad_26D[0x3]; // 0x26d(0x03)
	char CastPreShadow : 1; // 0x270(0x01)
	char pad_270_1 : 7; // 0x270(0x01)
	char pad_271[0x3]; // 0x271(0x03)
	char bAffectTranslucentLighting : 1; // 0x274(0x01)
	char bTransmission : 1; // 0x274(0x01)
	char bCastVolumetricShadow : 1; // 0x274(0x01)
	char bCastDeepShadow : 1; // 0x274(0x01)
	char bCastRaytracedShadow : 1; // 0x274(0x01)
	char bAffectReflection : 1; // 0x274(0x01)
	char bAffectGlobalIllumination : 1; // 0x274(0x01)
	char pad_274_7 : 1; // 0x274(0x01)
	char pad_275[0x3]; // 0x275(0x03)
	float IndirectLightingIntensity; // 0x278(0x04)
	float LightingDistanceOffset; // 0x27c(0x04)
	float VolumetricScatteringIntensity; // 0x280(0x04)
	int32_t SamplesPerPixel; // 0x284(0x04)

	void SetSamplesPerPixel(int32_t NewValue); // Function Engine.LightComponentBase.SetSamplesPerPixel // (Final|Native|Public|BlueprintCallable) // @ game+0x9e3a2d0
	void SetCastVolumetricShadow(bool bNewValue); // Function Engine.LightComponentBase.SetCastVolumetricShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x9e3a1c0
	void SetCastShadows(bool bNewValue); // Function Engine.LightComponentBase.SetCastShadows // (Final|Native|Public|BlueprintCallable) // @ game+0x9e3a130
	void SetCastRaytracedShadow(bool bNewValue); // Function Engine.LightComponentBase.SetCastRaytracedShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x9e3a0a0
	void SetCastPreShadow(bool bNewValue); // Function Engine.LightComponentBase.SetCastPreShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x9e3a010
	void SetCastDeepShadow(bool bNewValue); // Function Engine.LightComponentBase.SetCastDeepShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x9e39ef0
	void SetAffectWorlds(bool bNewValue); // Function Engine.LightComponentBase.SetAffectWorlds // (Final|Native|Public|BlueprintCallable) // @ game+0x35d74c0
	void SetAffectVolumetricFogOnly(bool bNewValue); // Function Engine.LightComponentBase.SetAffectVolumetricFogOnly // (Final|Native|Public|BlueprintCallable) // @ game+0x9e39d50
	void SetAffectReflection(bool bNewValue); // Function Engine.LightComponentBase.SetAffectReflection // (Final|Native|Public|BlueprintCallable) // @ game+0x9e39cc0
	void SetAffectGlobalIllumination(bool bNewValue); // Function Engine.LightComponentBase.SetAffectGlobalIllumination // (Final|Native|Public|BlueprintCallable) // @ game+0x9e39c30
	struct FLinearColor GetLightColor(); // Function Engine.LightComponentBase.GetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e39af0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ExponentialHeightFogComponent
// Size: 0x370 (Inherited: 0x240)
class UExponentialHeightFogComponent : public USceneComponent {
public:

	float FogDensity; // 0x240(0x04)
	float DirectionalScale; // 0x244(0x04)
	float FogHeightFalloff; // 0x248(0x04)
	char pad_24C[0x4]; // 0x24c(0x04)
	struct UTexture2D* FogMap; // 0x250(0x08)
	char pad_258[0x8]; // 0x258(0x08)
	struct FVector4 FogMapScaleOffset; // 0x260(0x10)
	float FogMapHeight1; // 0x270(0x04)
	float FogMapHeight2; // 0x274(0x04)
	float FogMapHeight3; // 0x278(0x04)
	struct FExponentialHeightFogData SecondFogData; // 0x27c(0x10)
	bool IntroSecondFog; // 0x28c(0x01)
	char pad_28D[0x3]; // 0x28d(0x03)
	struct FLinearColor FogInscatteringColor; // 0x290(0x10)
	struct UTextureCube* InscatteringColorCubemap; // 0x2a0(0x08)
	float InscatteringColorCubemapAngle; // 0x2a8(0x04)
	struct FLinearColor InscatteringTextureTint; // 0x2ac(0x10)
	float FullyDirectionalInscatteringColorDistance; // 0x2bc(0x04)
	float NonDirectionalInscatteringColorDistance; // 0x2c0(0x04)
	float DirectionalInscatteringExponent; // 0x2c4(0x04)
	float DirectionalInscatteringStartDistance; // 0x2c8(0x04)
	struct FLinearColor DirectionalInscatteringColor; // 0x2cc(0x10)
	float FogMaxOpacity; // 0x2dc(0x04)
	float StartDistance; // 0x2e0(0x04)
	float FogCutoffDistance; // 0x2e4(0x04)
	bool bEnableVolumetricFog; // 0x2e8(0x01)
	bool bEnableVolumetricExclude; // 0x2e9(0x01)
	bool bOnlyLocalLight; // 0x2ea(0x01)
	char pad_2EB[0x1]; // 0x2eb(0x01)
	float VolumetricFogScatteringDistribution; // 0x2ec(0x04)
	struct FColor VolumetricFogAlbedo; // 0x2f0(0x04)
	struct FLinearColor VolumetricFogEmissive; // 0x2f4(0x10)
	float VolumetricFogExtinctionScale; // 0x304(0x04)
	float VolumetricFogDistance; // 0x308(0x04)
	float OverrideVolumetricFogDistance; // 0x30c(0x04)
	float VolumetricFogStaticLightingScatteringIntensity; // 0x310(0x04)
	struct FColor BPFogAlbedoOverride; // 0x314(0x04)
	float BPFogExtinctionScaleOverride; // 0x318(0x04)
	float VolumetricFarStart; // 0x31c(0x04)
	float VolumetricFarEnd; // 0x320(0x04)
	bool bOverrideLightColorsWithFogInscatteringColors; // 0x324(0x01)
	char pad_325[0x3]; // 0x325(0x03)
	struct FGlobalInteriorFogData GlobalInteriorFogData; // 0x328(0x30)
	char pad_358[0x18]; // 0x358(0x18)

	void SetVolumetricLocalLight(bool bNewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricLocalLight // (Final|Native|Public|BlueprintCallable) // @ game+0x9db4970
	void SetVolumetricFogScatteringDistribution(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution // (Final|Native|Public|BlueprintCallable) // @ game+0x9db48f0
	void SetVolumetricFogExtinctionScale(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogExtinctionScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9db4870
	void SetVolumetricFogEmissive(struct FLinearColor NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogEmissive // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9db47f0
	void SetVolumetricFogDistance(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x9db4770
	void SetVolumetricFogAlbedo(struct FColor NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogAlbedo // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9db37c0
	void SetVolumetricFog(bool bNewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFog // (Final|Native|Public|BlueprintCallable) // @ game+0x9db46e0
	void SetVolumetricExclude(bool bNewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricExclude // (Final|Native|Public|BlueprintCallable) // @ game+0x9db4650
	void SetStartDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetStartDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x9db45d0
	void SetSecondFogStartDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetSecondFogStartDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x9db4550
	void SetSecondFogHeightOffset(float Value); // Function Engine.ExponentialHeightFogComponent.SetSecondFogHeightOffset // (Final|Native|Public|BlueprintCallable) // @ game+0x9db44d0
	void SetSecondFogHeightFalloff(float Value); // Function Engine.ExponentialHeightFogComponent.SetSecondFogHeightFalloff // (Final|Native|Public|BlueprintCallable) // @ game+0x9db4450
	void SetSecondFogDensity(float Value); // Function Engine.ExponentialHeightFogComponent.SetSecondFogDensity // (Final|Native|Public|BlueprintCallable) // @ game+0x9db43d0
	void SetOverrideVolumetricFogDistance(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetOverrideVolumetricFogDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x9db4350
	void SetNonDirectionalInscatteringColorDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x9db42d0
	void SetIntroSecondFog(bool Value); // Function Engine.ExponentialHeightFogComponent.SetIntroSecondFog // (Final|Native|Public|BlueprintCallable) // @ game+0x9db4240
	void SetInscatteringTextureTint(struct FLinearColor Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9db4140
	void SetInscatteringColorCubemapAngle(float Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x9db40c0
	void SetInscatteringColorCubemap(struct UTextureCube* Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap // (Final|Native|Public|BlueprintCallable) // @ game+0x9db4040
	void SetFullyDirectionalInscatteringColorDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x9db3fc0
	void SetFogMaxOpacity(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogMaxOpacity // (Final|Native|Public|BlueprintCallable) // @ game+0x9db3ec0
	void SetFogMapScaleOffset(struct FVector4 Value); // Function Engine.ExponentialHeightFogComponent.SetFogMapScaleOffset // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9db3e30
	void SetFogMapHeight3(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogMapHeight3 // (Final|Native|Public|BlueprintCallable) // @ game+0x9db3db0
	void SetFogMapHeight2(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogMapHeight2 // (Final|Native|Public|BlueprintCallable) // @ game+0x9db3d30
	void SetFogMapHeight1(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogMapHeight1 // (Final|Native|Public|BlueprintCallable) // @ game+0x9db3cb0
	void SetFogInscatteringColor(struct FLinearColor Value); // Function Engine.ExponentialHeightFogComponent.SetFogInscatteringColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9db3c30
	void SetFogHeightFalloff(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogHeightFalloff // (Final|Native|Public|BlueprintCallable) // @ game+0x9db3bb0
	void SetFogDensity(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogDensity // (Final|Native|Public|BlueprintCallable) // @ game+0x9db3b30
	void SetFogCutoffDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogCutoffDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x9db3ab0
	void SetDirectionalScale(float Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9db3a30
	void SetDirectionalInscatteringStartDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x9db39b0
	void SetDirectionalInscatteringExponent(float Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent // (Final|Native|Public|BlueprintCallable) // @ game+0x9db3930
	void SetDirectionalInscatteringColor(struct FLinearColor Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9db38b0
	void SetBPFogExtinctionOverride(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetBPFogExtinctionOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x9db3830
	void SetBPFogAlbedoOverride(struct FColor NewValue); // Function Engine.ExponentialHeightFogComponent.SetBPFogAlbedoOverride // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9db37c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ForceFeedbackComponent
// Size: 0x340 (Inherited: 0x240)
class UForceFeedbackComponent : public USceneComponent {
public:

	struct UForceFeedbackEffect* ForceFeedbackEffect; // 0x240(0x08)
	char bAutoDestroy : 1; // 0x248(0x01)
	char bStopWhenOwnerDestroyed : 1; // 0x248(0x01)
	char bLooping : 1; // 0x248(0x01)
	char bIgnoreTimeDilation : 1; // 0x248(0x01)
	char bOverrideAttenuation : 1; // 0x248(0x01)
	char pad_248_5 : 3; // 0x248(0x01)
	char pad_249[0x3]; // 0x249(0x03)
	float IntensityMultiplier; // 0x24c(0x04)
	struct UForceFeedbackAttenuation* AttenuationSettings; // 0x250(0x08)
	struct FForceFeedbackAttenuationSettings AttenuationOverrides; // 0x258(0xc8)
	/*struct FMulticastInlineDelegate*/char OnForceFeedbackFinished[0x10]; // 0x320(0x10)
	char pad_330[0x10]; // 0x330(0x10)

	void Stop(); // Function Engine.ForceFeedbackComponent.Stop // (Native|Public|BlueprintCallable) // @ game+0x3660170
	void SetIntensityMultiplier(float NewIntensityMultiplier); // Function Engine.ForceFeedbackComponent.SetIntensityMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x9db41c0
	void SetForceFeedbackEffect(struct UForceFeedbackEffect* NewForceFeedbackEffect); // Function Engine.ForceFeedbackComponent.SetForceFeedbackEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x9db3f40
	void Play(float StartTime); // Function Engine.ForceFeedbackComponent.Play // (Native|Public|BlueprintCallable) // @ game+0x227ddb0
	bool BP_GetAttenuationSettingsToApply(struct FForceFeedbackAttenuationSettings& OutAttenuationSettings); // Function Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9db3560
	void AdjustAttenuation(struct FForceFeedbackAttenuationSettings& InAttenuationSettings); // Function Engine.ForceFeedbackComponent.AdjustAttenuation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9db3450
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LightmassPortalComponent
// Size: 0x250 (Inherited: 0x240)
class ULightmassPortalComponent : public USceneComponent {
public:

	struct UBoxComponent* PreviewBox; // 0x240(0x08)
	char pad_248[0x8]; // 0x248(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LocalLightGroupBakeComponent
// Size: 0x300 (Inherited: 0x240)
class ULocalLightGroupBakeComponent : public USceneComponent {
public:

	struct FName CustomSubDir; // 0x240(0x08)
	bool bOpenLightMapSizeLimit; // 0x248(0x01)
	char pad_249[0x7]; // 0x249(0x07)
	struct FString GeneratedLevelPackageName; // 0x250(0x10)
	struct FBoxSphereBounds MeshBounds; // 0x260(0x1c)
	char pad_27C[0x4]; // 0x27c(0x04)
	struct ULocalLightGroupBake* LocalLightGroupBakeObject; // 0x280(0x08)
	struct ULocalLightGroupBake* HDLocalLightGroupBakeObject; // 0x288(0x08)
	struct ULocalReflectionGroupBake* LocalReflectionGroupBakeObject; // 0x290(0x08)
	struct ULocalReflectionGroupBake* HDLocalReflectionGroupBakeObject; // 0x298(0x08)
	struct TArray<struct UActorComponent*> LightComponentArray; // 0x2a0(0x10)
	struct TArray<struct UActorComponent*> StaticComponentArray; // 0x2b0(0x10)
	struct TArray<struct UActorComponent*> EnvironmentStaticComponentArray; // 0x2c0(0x10)
	struct TArray<struct UActorComponent*> ReflectionComponentArray; // 0x2d0(0x10)
	char pad_2E0[0x20]; // 0x2e0(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.NZSkyBoxComponent
// Size: 0x96c0 (Inherited: 0x240)
class UNZSkyBoxComponent : public USceneComponent {
public:

	enum class EControllMode ControllMode; // 0x240(0x01)
	bool bOutsideSkyBox; // 0x241(0x01)
	bool bOldSetting; // 0x242(0x01)
	bool bUse24HLerpedSH; // 0x243(0x01)
	char pad_244[0x4]; // 0x244(0x04)
	struct UTextureCube* OverrideCube; // 0x248(0x08)
	char pad_250[0x8]; // 0x250(0x08)
	struct FString TestStr; // 0x258(0x10)
	struct FTOD_Time TodTime; // 0x268(0x04)
	struct FTOD_SkylightCompensate SkylightCompensate; // 0x26c(0x08)
	char pad_274[0x4]; // 0x274(0x04)
	struct FTOD_GiAdjust GiAdjust; // 0x278(0x68)
	struct FTOD_AtmosphereParameters Atmosphere; // 0x2e0(0xa70)
	struct FTOD_WeatherActors WeatherActors; // 0xd50(0x180)
	struct FTOD_DayParameters Day; // 0xed0(0x3088)
	char pad_3F58[0x18]; // 0x3f58(0x18)
	struct FTOD_Animation TodAnimation; // 0x3f70(0x30)
	struct FTOD_Sun TodSunParams; // 0x3fa0(0x34)
	char pad_3FD4[0x26ec]; // 0x3fd4(0x26ec)
	struct FTOD_Exposure TodExposure; // 0x66c0(0x1e48)
	struct FTOD_Actors TodActors; // 0x8508(0x28)
	struct FTOD_Textures TodTextures; // 0x8530(0x28)
	struct UGI2DData* GI2DData; // 0x8558(0x08)
	char pad_8560[0x40]; // 0x8560(0x40)
	struct FTOD_SphericHarmonics Tod_ShContext; // 0x85a0(0x40)
	struct FTOD_Reflections Tod_ReflContext; // 0x85e0(0xe0)
	struct UTextureCube* CachedCube; // 0x86c0(0x08)
	char pad_86C8[0x104]; // 0x86c8(0x104)
	struct FTOD_CycleParameters Cycle; // 0x87cc(0x24)
	bool IsTextureVolumeCloud; // 0x87f0(0x01)
	bool ProbeUpdateDirty; // 0x87f1(0x01)
	char pad_87F2[0x6]; // 0x87f2(0x06)
	struct FTOD_AdditionalPRTMap Tod_AdditionalMap; // 0x87f8(0x388)
	float MinOffset; // 0x8b80(0x04)
	float MaxOffset; // 0x8b84(0x04)
	float LightmapScale; // 0x8b88(0x04)
	char pad_8B8C[0x2c]; // 0x8b8c(0x2c)
	struct FTetLightSetting TetLightSetting; // 0x8bb8(0x0c)
	char pad_8BC4[0x4]; // 0x8bc4(0x04)
	struct UTetLightDataMap* TetLightMap; // 0x8bc8(0x08)
	char pad_8BD0[0x58]; // 0x8bd0(0x58)
	int32_t TODIndex; // 0x8c28(0x04)
	char pad_8C2C[0x378]; // 0x8c2c(0x378)
	bool SequenceBakeKey; // 0x8fa4(0x01)
	char pad_8FA5[0x3]; // 0x8fa5(0x03)
	struct FString SkylightLoadPath; // 0x8fa8(0x10)
	char pad_8FB8[0x708]; // 0x8fb8(0x708)

	void SetFixedCameraStatus(bool bFixed); // Function Engine.NZSkyBoxComponent.SetFixedCameraStatus // (Final|Native|Public|BlueprintCallable) // @ game+0x9e59ae0
	bool GetIsInExposureVolume(); // Function Engine.NZSkyBoxComponent.GetIsInExposureVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x9e59a60
	bool DetectInteriorVolumeGap(float GapSizeToDetect, float GapSizeAllowed); // Function Engine.NZSkyBoxComponent.DetectInteriorVolumeGap // (Final|Native|Public|BlueprintCallable) // @ game+0x9e59990
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PhysicsConstraintComponent
// Size: 0x440 (Inherited: 0x240)
class UPhysicsConstraintComponent : public USceneComponent {
public:

	struct AActor* ConstraintActor1; // 0x240(0x08)
	struct FConstrainComponentPropName ComponentName1; // 0x248(0x08)
	struct AActor* ConstraintActor2; // 0x250(0x08)
	struct FConstrainComponentPropName ComponentName2; // 0x258(0x08)
	char pad_260[0x10]; // 0x260(0x10)
	struct UPhysicsConstraintTemplate* ConstraintSetup; // 0x270(0x08)
	/*struct FMulticastInlineDelegate*/char OnConstraintBroken[0x10]; // 0x278(0x10)
	struct FConstraintInstance ConstraintInstance; // 0x288(0x1b8)

	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive); // Function Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing // (Final|Native|Public|BlueprintCallable) // @ game+0x9e706e0
	void SetOrientationDriveSLERP(bool bEnableSLERP); // Function Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP // (Final|Native|Public|BlueprintCallable) // @ game+0x9e70650
	void SetLinearZLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearZLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x9e70590
	void SetLinearYLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearYLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x9e704d0
	void SetLinearXLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearXLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x9e70410
	void SetLinearVelocityTarget(struct FVector& InVelTarget); // Function Engine.PhysicsConstraintComponent.SetLinearVelocityTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e70380
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Function Engine.PhysicsConstraintComponent.SetLinearVelocityDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x9e70260
	void SetLinearPositionTarget(struct FVector& InPosTarget); // Function Engine.PhysicsConstraintComponent.SetLinearPositionTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e70150
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Function Engine.PhysicsConstraintComponent.SetLinearPositionDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x9e70030
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit); // Function Engine.PhysicsConstraintComponent.SetLinearDriveParams // (Final|Native|Public|BlueprintCallable) // @ game+0x9e6ff20
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold); // Function Engine.PhysicsConstraintComponent.SetLinearBreakable // (Final|Native|Public|BlueprintCallable) // @ game+0x9e6fde0
	void SetDisableCollision(bool bDisableCollision); // Function Engine.PhysicsConstraintComponent.SetDisableCollision // (Final|Native|Public|BlueprintCallable) // @ game+0x9e6fcd0
	void SetConstraintReferencePosition(enum class EConstraintFrame Frame, struct FVector& RefPosition); // Function Engine.PhysicsConstraintComponent.SetConstraintReferencePosition // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e6fc00
	void SetConstraintReferenceOrientation(enum class EConstraintFrame Frame, struct FVector& PriAxis, struct FVector& SecAxis); // Function Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e6fae0
	void SetConstraintReferenceFrame(enum class EConstraintFrame Frame, struct FTransform& RefFrame); // Function Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e6f9c0
	void SetConstrainedComponents(struct UPrimitiveComponent* Component1, struct FName BoneName1, struct UPrimitiveComponent* Component2, struct FName BoneName2); // Function Engine.PhysicsConstraintComponent.SetConstrainedComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x9e6f870
	void SetAngularVelocityTarget(struct FVector& InVelTarget); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e6f7e0
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing // (Final|Native|Public|BlueprintCallable) // @ game+0x9e6f710
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP // (Final|Native|Public|BlueprintCallable) // @ game+0x9e6f680
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x9e6f5b0
	void SetAngularTwistLimit(enum class EAngularConstraintMotion ConstraintType, float TwistLimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularTwistLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x9e6f4f0
	void SetAngularSwing2Limit(enum class EAngularConstraintMotion MotionType, float Swing2LimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularSwing2Limit // (Final|Native|Public|BlueprintCallable) // @ game+0x9e6f430
	void SetAngularSwing1Limit(enum class EAngularConstraintMotion MotionType, float Swing1LimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularSwing1Limit // (Final|Native|Public|BlueprintCallable) // @ game+0x9e6f370
	void SetAngularOrientationTarget(struct FRotator& InPosTarget); // Function Engine.PhysicsConstraintComponent.SetAngularOrientationTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e6f260
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive); // Function Engine.PhysicsConstraintComponent.SetAngularOrientationDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x9e6f190
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit); // Function Engine.PhysicsConstraintComponent.SetAngularDriveParams // (Final|Native|Public|BlueprintCallable) // @ game+0x9e6f080
	void SetAngularDriveMode(enum class EAngularDriveMode DriveMode); // Function Engine.PhysicsConstraintComponent.SetAngularDriveMode // (Final|Native|Public|BlueprintCallable) // @ game+0x9e6f000
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold); // Function Engine.PhysicsConstraintComponent.SetAngularBreakable // (Final|Native|Public|BlueprintCallable) // @ game+0x9e6eec0
	bool IsBroken(); // Function Engine.PhysicsConstraintComponent.IsBroken // (Final|Native|Public|BlueprintCallable) // @ game+0x9e6ee90
	float GetCurrentTwist(); // Function Engine.PhysicsConstraintComponent.GetCurrentTwist // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e6e970
	float GetCurrentSwing2(); // Function Engine.PhysicsConstraintComponent.GetCurrentSwing2 // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e6e940
	float GetCurrentSwing1(); // Function Engine.PhysicsConstraintComponent.GetCurrentSwing1 // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e6e910
	void GetConstraintForce(struct FVector& OutLinearForce, struct FVector& OutAngularForce); // Function Engine.PhysicsConstraintComponent.GetConstraintForce // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e6e830
	void BreakConstraint(); // Function Engine.PhysicsConstraintComponent.BreakConstraint // (Final|Native|Public|BlueprintCallable) // @ game+0x9e6e750
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PhysicsSpringComponent
// Size: 0x270 (Inherited: 0x240)
class UPhysicsSpringComponent : public USceneComponent {
public:

	float SpringStiffness; // 0x240(0x04)
	float SpringDamping; // 0x244(0x04)
	float SpringLengthAtRest; // 0x248(0x04)
	float SpringRadius; // 0x24c(0x04)
	enum class ECollisionChannel SpringChannel; // 0x250(0x01)
	bool bIgnoreSelf; // 0x251(0x01)
	char pad_252[0x2]; // 0x252(0x02)
	float SpringCompression; // 0x254(0x04)
	char pad_258[0x18]; // 0x258(0x18)

	struct FVector GetSpringRestingPoint(); // Function Engine.PhysicsSpringComponent.GetSpringRestingPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e73c60
	struct FVector GetSpringDirection(); // Function Engine.PhysicsSpringComponent.GetSpringDirection // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e73c20
	struct FVector GetSpringCurrentEndPoint(); // Function Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e73be0
	float GetNormalizedCompressionScalar(); // Function Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e73b50
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PhysicsThrusterComponent
// Size: 0x250 (Inherited: 0x240)
class UPhysicsThrusterComponent : public USceneComponent {
public:

	float ThrustStrength; // 0x240(0x04)
	char pad_244[0xc]; // 0x244(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PostProcessComponent
// Size: 0xbb0 (Inherited: 0x240)
class UPostProcessComponent : public USceneComponent {
public:

	char pad_240[0x10]; // 0x240(0x10)
	struct FPostProcessSettings Settings; // 0x250(0x950)
	float Priority; // 0xba0(0x04)
	float BlendRadius; // 0xba4(0x04)
	float BlendWeight; // 0xba8(0x04)
	char bEnabled : 1; // 0xbac(0x01)
	char bUnbound : 1; // 0xbac(0x01)
	char pad_BAC_2 : 6; // 0xbac(0x01)
	char pad_BAD[0x3]; // 0xbad(0x03)

	void AddOrUpdateBlendable(/*struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight*/); // Function Engine.PostProcessComponent.AddOrUpdateBlendable // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9e82660
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.RadialForceComponent
// Size: 0x270 (Inherited: 0x240)
class URadialForceComponent : public USceneComponent {
public:

	float radius; // 0x240(0x04)
	enum class ERadialImpulseFalloff Falloff; // 0x244(0x01)
	char pad_245[0x3]; // 0x245(0x03)
	float ImpulseStrength; // 0x248(0x04)
	char bImpulseVelChange : 1; // 0x24c(0x01)
	char bIgnoreOwningActor : 1; // 0x24c(0x01)
	char pad_24C_2 : 6; // 0x24c(0x01)
	char pad_24D[0x3]; // 0x24d(0x03)
	float ForceStrength; // 0x250(0x04)
	float DestructibleDamage; // 0x254(0x04)
	struct TArray<enum class EObjectTypeQuery> ObjectTypesToAffect; // 0x258(0x10)
	char pad_268[0x8]; // 0x268(0x08)

	void RemoveObjectTypeToAffect(enum class EObjectTypeQuery ObjectType); // Function Engine.RadialForceComponent.RemoveObjectTypeToAffect // (Native|Public|BlueprintCallable) // @ game+0x9e8ebd0
	void FireImpulse(); // Function Engine.RadialForceComponent.FireImpulse // (Native|Public|BlueprintCallable) // @ game+0x365a130
	void AddObjectTypeToAffect(enum class EObjectTypeQuery ObjectType); // Function Engine.RadialForceComponent.AddObjectTypeToAffect // (Native|Public|BlueprintCallable) // @ game+0x785a4f0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ReflectionRangeComponent
// Size: 0x250 (Inherited: 0x240)
class UReflectionRangeComponent : public USceneComponent {
public:

	enum class EReflectionRangeShape ReflectionRangeShape; // 0x240(0x01)
	char pad_241[0x3]; // 0x241(0x03)
	float InfluenceRadius; // 0x244(0x04)
	char pad_248[0x8]; // 0x248(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.RuntimeShadowMaskComponent
// Size: 0x240 (Inherited: 0x240)
class URuntimeShadowMaskComponent : public USceneComponent {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.RuntimeVirtualTextureComponent
// Size: 0x280 (Inherited: 0x240)
class URuntimeVirtualTextureComponent : public USceneComponent {
public:

	struct URuntimeVirtualTexture* VirtualTexture; // 0x240(0x08)
	bool bUseStreamingLowMipsInEditor; // 0x248(0x01)
	char pad_249[0x7]; // 0x249(0x07)
	struct AActor* BoundsSourceActor; // 0x250(0x08)
	struct TArray<struct URuntimeVirtualTextureStreamingProxy*> StreamingTextureSVTs_keepReference; // 0x258(0x10)
	struct UTexture2D* AlbedoTextureToImport; // 0x268(0x08)
	struct UTexture2D* NormalTextureToImport; // 0x270(0x08)
	char pad_278[0x8]; // 0x278(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SkyAtmosphereComponent
// Size: 0x360 (Inherited: 0x240)
class USkyAtmosphereComponent : public USceneComponent {
public:

	float BottomRadius; // 0x240(0x04)
	struct FColor GroundAlbedo; // 0x244(0x04)
	float AtmosphereHeight; // 0x248(0x04)
	float MultiScatteringFactor; // 0x24c(0x04)
	bool bOverride_FakeWorldCameraOrigin; // 0x250(0x01)
	char pad_251[0x3]; // 0x251(0x03)
	struct FVector FakeWorldCameraOrigin; // 0x254(0x0c)
	float RayleighScatteringScale; // 0x260(0x04)
	struct FLinearColor RayleighScattering; // 0x264(0x10)
	float RayleighExponentialDistribution; // 0x274(0x04)
	struct FLinearColor RayleighScatteringLow; // 0x278(0x10)
	float RayleighScaleLow; // 0x288(0x04)
	float MieScatteringScale; // 0x28c(0x04)
	struct FLinearColor MieScattering; // 0x290(0x10)
	float MieAbsorptionScale; // 0x2a0(0x04)
	struct FLinearColor MieAbsorption; // 0x2a4(0x10)
	float MieAnisotropy; // 0x2b4(0x04)
	float MieExponentialDistribution; // 0x2b8(0x04)
	struct FLinearColor MieScatteringLow; // 0x2bc(0x10)
	float MieScaleLow; // 0x2cc(0x04)
	float MieAnisotropyLow; // 0x2d0(0x04)
	float OtherAbsorptionScale; // 0x2d4(0x04)
	struct FLinearColor OtherAbsorption; // 0x2d8(0x10)
	struct FTentDistribution OtherTentDistribution; // 0x2e8(0x0c)
	struct FLinearColor SkyLuminanceFactor; // 0x2f4(0x10)
	float AerialPespectiveViewDistanceScale; // 0x304(0x04)
	float TransmittanceMinLightElevationAngle; // 0x308(0x04)
	float FogDistanceScaleLow; // 0x30c(0x04)
	float FogStartDistance; // 0x310(0x04)
	float FogHeightFalloff; // 0x314(0x04)
	float HeightFogContribution; // 0x318(0x04)
	char pad_31C[0x28]; // 0x31c(0x28)
	struct FGuid bStaticLightingBuiltGUID; // 0x344(0x10)
	char pad_354[0xc]; // 0x354(0x0c)

	void SetSkyLuminanceFactor(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetSkyLuminanceFactor // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9eabb20
	void SetRayleighScatteringScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighScatteringScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9eaba20
	void SetRayleighScattering(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighScattering // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9eab9a0
	void SetRayleighExponentialDistribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighExponentialDistribution // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9eab920
	void SetOtherAbsorptionScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetOtherAbsorptionScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9eab8a0
	void SetOtherAbsorption(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetOtherAbsorption // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9eab820
	void SetMieScatteringScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieScatteringScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9eab590
	void SetMieScattering(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetMieScattering // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9eab510
	void SetMieExponentialDistribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieExponentialDistribution // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9eab490
	void SetMieAnisotropy(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAnisotropy // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9eab410
	void SetMieAbsorptionScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAbsorptionScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9eab390
	void SetMieAbsorption(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAbsorption // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9eab310
	void SetHeightFogContribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetHeightFogContribution // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9eab080
	void SetAerialPespectiveViewDistanceScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetAerialPespectiveViewDistanceScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9eaacf0
	void OverrideAtmosphereLightDirection(int32_t AtmosphereLightIndex, struct FVector& LightDirection); // Function Engine.SkyAtmosphereComponent.OverrideAtmosphereLightDirection // (Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9eaac00
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.StereoLayerComponent
// Size: 0x320 (Inherited: 0x240)
class UStereoLayerComponent : public USceneComponent {
public:

	char bLiveTexture : 1; // 0x240(0x01)
	char bSupportsDepth : 1; // 0x240(0x01)
	char bNoAlphaChannel : 1; // 0x240(0x01)
	char pad_240_3 : 5; // 0x240(0x01)
	char pad_241[0x7]; // 0x241(0x07)
	struct UTexture* Texture; // 0x248(0x08)
	struct UTexture* LeftTexture; // 0x250(0x08)
	char bQuadPreserveTextureRatio : 1; // 0x258(0x01)
	char pad_258_1 : 7; // 0x258(0x01)
	char pad_259[0x3]; // 0x259(0x03)
	struct FVector2D QuadSize; // 0x25c(0x08)
	struct FBox2D UVRect; // 0x264(0x14)
	float CylinderRadius; // 0x278(0x04)
	float CylinderOverlayArc; // 0x27c(0x04)
	int32_t CylinderHeight; // 0x280(0x04)
	struct FEquirectProps EquirectProps; // 0x284(0x48)
	enum class EStereoLayerType StereoLayerType; // 0x2cc(0x01)
	enum class EStereoLayerShape StereoLayerShape; // 0x2cd(0x01)
	char pad_2CE[0x2]; // 0x2ce(0x02)
	int32_t Priority; // 0x2d0(0x04)
	char pad_2D4[0x4c]; // 0x2d4(0x4c)

	void SetUVRect(struct FBox2D InUVRect); // Function Engine.StereoLayerComponent.SetUVRect // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9ebf590
	void SetTexture(struct UTexture* InTexture); // Function Engine.StereoLayerComponent.SetTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x9ebf510
	void SetQuadSize(struct FVector2D InQuadSize); // Function Engine.StereoLayerComponent.SetQuadSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9ebf260
	void SetPriority(int32_t InPriority); // Function Engine.StereoLayerComponent.SetPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x9ebf1e0
	void SetLeftTexture(struct UTexture* InTexture); // Function Engine.StereoLayerComponent.SetLeftTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x9ebf0e0
	void SetEquirectProps(struct FEquirectProps InScaleBiases); // Function Engine.StereoLayerComponent.SetEquirectProps // (Final|Native|Public|BlueprintCallable) // @ game+0x9ebee40
	void MarkTextureForUpdate(); // Function Engine.StereoLayerComponent.MarkTextureForUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x9ebec30
	struct FBox2D GetUVRect(); // Function Engine.StereoLayerComponent.GetUVRect // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebec00
	struct UTexture* GetTexture(); // Function Engine.StereoLayerComponent.GetTexture // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1442380
	struct FVector2D GetQuadSize(); // Function Engine.StereoLayerComponent.GetQuadSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebebd0
	int32_t GetPriority(); // Function Engine.StereoLayerComponent.GetPriority // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebebb0
	struct UTexture* GetLeftTexture(); // Function Engine.StereoLayerComponent.GetLeftTexture // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x14423a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.WindDirectionalSourceComponent
// Size: 0x260 (Inherited: 0x240)
class UWindDirectionalSourceComponent : public USceneComponent {
public:

	float Strength; // 0x240(0x04)
	float Speed; // 0x244(0x04)
	float MinGustAmount; // 0x248(0x04)
	float MaxGustAmount; // 0x24c(0x04)
	float radius; // 0x250(0x04)
	char bPointWind : 1; // 0x254(0x01)
	char pad_254_1 : 7; // 0x254(0x01)
	char pad_255[0xb]; // 0x255(0x0b)

	void SetWindType(enum class EWindSourceType InNewType); // Function Engine.WindDirectionalSourceComponent.SetWindType // (Final|Native|Public|BlueprintCallable) // @ game+0x9eceff0
	void SetStrength(float InNewStrength); // Function Engine.WindDirectionalSourceComponent.SetStrength // (Final|Native|Public|BlueprintCallable) // @ game+0x9eceef0
	void SetSpeed(float InNewSpeed); // Function Engine.WindDirectionalSourceComponent.SetSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x9ecee70
	void SetRadius(float InNewRadius); // Function Engine.WindDirectionalSourceComponent.SetRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x9ecedf0
	void SetMinimumGustAmount(float InNewMinGust); // Function Engine.WindDirectionalSourceComponent.SetMinimumGustAmount // (Final|Native|Public|BlueprintCallable) // @ game+0x9eced70
	void SetMaximumGustAmount(float InNewMaxGust); // Function Engine.WindDirectionalSourceComponent.SetMaximumGustAmount // (Final|Native|Public|BlueprintCallable) // @ game+0x9ecebf0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ProjectileMovementComponent
// Size: 0x220 (Inherited: 0x140)
class UProjectileMovementComponent : public UMovementComponent {
public:

	float InitialSpeed; // 0x140(0x04)
	float MaxSpeed; // 0x144(0x04)
	char bRotationFollowsVelocity : 1; // 0x148(0x01)
	char bRotationRemainsVertical : 1; // 0x148(0x01)
	char bShouldBounce : 1; // 0x148(0x01)
	char bInitialVelocityInLocalSpace : 1; // 0x148(0x01)
	char bForceSubStepping : 1; // 0x148(0x01)
	char bSimulationEnabled : 1; // 0x148(0x01)
	char bSweepCollision : 1; // 0x148(0x01)
	char bIsHomingProjectile : 1; // 0x148(0x01)
	char bBounceAngleAffectsFriction : 1; // 0x149(0x01)
	char bIsSliding : 1; // 0x149(0x01)
	char bInterpMovement : 1; // 0x149(0x01)
	char bInterpRotation : 1; // 0x149(0x01)
	char pad_149_4 : 4; // 0x149(0x01)
	char pad_14A[0x2]; // 0x14a(0x02)
	float PreviousHitTime; // 0x14c(0x04)
	struct FVector PreviousHitNormal; // 0x150(0x0c)
	float ProjectileGravityScale; // 0x15c(0x04)
	float Buoyancy; // 0x160(0x04)
	float Bounciness; // 0x164(0x04)
	float Friction; // 0x168(0x04)
	float BounceVelocityStopSimulatingThreshold; // 0x16c(0x04)
	float MinFrictionFraction; // 0x170(0x04)
	char pad_174[0x4]; // 0x174(0x04)
	/*struct FMulticastInlineDelegate*/char OnProjectileBounce[0x10]; // 0x178(0x10)
	/*struct FMulticastInlineDelegate*/char OnProjectileStop[0x10]; // 0x188(0x10)
	float HomingAccelerationMagnitude; // 0x198(0x04)
	struct TWeakObjectPtr<struct USceneComponent> HomingTargetComponent; // 0x19c(0x08)
	float MaxSimulationTimeStep; // 0x1a4(0x04)
	int32_t MaxSimulationIterations; // 0x1a8(0x04)
	int32_t BounceAdditionalIterations; // 0x1ac(0x04)
	float InterpLocationTime; // 0x1b0(0x04)
	float InterpRotationTime; // 0x1b4(0x04)
	float InterpLocationMaxLagDistance; // 0x1b8(0x04)
	float InterpLocationSnapToTargetDistance; // 0x1bc(0x04)
	char pad_1C0[0x60]; // 0x1c0(0x60)

	void StopSimulating(struct FHitResult& HitResult); // Function Engine.ProjectileMovementComponent.StopSimulating // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9e8eee0
	void SetVelocityInLocalSpace(struct FVector NewVelocity); // Function Engine.ProjectileMovementComponent.SetVelocityInLocalSpace // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x227df30
	void SetInterpolatedComponent(struct USceneComponent* Component); // Function Engine.ProjectileMovementComponent.SetInterpolatedComponent // (Native|Public|BlueprintCallable) // @ game+0x9e8ed50
	void ResetInterpolation(); // Function Engine.ProjectileMovementComponent.ResetInterpolation // (Native|Public|BlueprintCallable) // @ game+0x48e8b40
	void OnProjectileStopDelegate__DelegateSignature(struct FHitResult& ImpactResult); // DelegateFunction Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x7ed88c0
	void OnProjectileBounceDelegate__DelegateSignature(struct FHitResult& ImpactResult, struct FVector& ImpactVelocity); // DelegateFunction Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x7ed88c0
	void MoveInterpolationTarget(struct FVector& NewLocation, struct FRotator& NewRotation); // Function Engine.ProjectileMovementComponent.MoveInterpolationTarget // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e8eae0
	struct FVector LimitVelocity(struct FVector NewVelocity); // Function Engine.ProjectileMovementComponent.LimitVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e8ea30
	bool IsVelocityUnderSimulationThreshold(); // Function Engine.ProjectileMovementComponent.IsVelocityUnderSimulationThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e8e9d0
	bool IsInterpolationComplete(); // Function Engine.ProjectileMovementComponent.IsInterpolationComplete // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e8e9a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.NavMovementComponent
// Size: 0x180 (Inherited: 0x140)
class UNavMovementComponent : public UMovementComponent {
public:

	struct FNavAgentProperties NavAgentProps; // 0x140(0x30)
	float FixedPathBrakingDistance; // 0x170(0x04)
	char bUpdateNavAgentWithOwnersCollision : 1; // 0x174(0x01)
	char bUseAccelerationForPaths : 1; // 0x174(0x01)
	char bUseFixedBrakingDistanceForPaths : 1; // 0x174(0x01)
	char pad_174_3 : 5; // 0x174(0x01)
	struct FMovementProperties MovementState; // 0x175(0x01)
	char pad_176[0x2]; // 0x176(0x02)
	struct UObject* PathFollowingComp; // 0x178(0x08)

	void StopMovementKeepPathing(); // Function Engine.NavMovementComponent.StopMovementKeepPathing // (Final|Native|Public|BlueprintCallable) // @ game+0x9e59c00
	void StopActiveMovement(); // Function Engine.NavMovementComponent.StopActiveMovement // (Native|Public|BlueprintCallable) // @ game+0x63e1590
	bool IsSwimming(); // Function Engine.NavMovementComponent.IsSwimming // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e59ab0
	bool IsMovingOnGround(); // Function Engine.NavMovementComponent.IsMovingOnGround // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d95bd0
	bool IsFlying(); // Function Engine.NavMovementComponent.IsFlying // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x175ca20
	bool IsFalling(); // Function Engine.NavMovementComponent.IsFalling // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x7871f10
	bool IsCrouching(); // Function Engine.NavMovementComponent.IsCrouching // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e59a80
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpToMovementComponent
// Size: 0x1e0 (Inherited: 0x140)
class UInterpToMovementComponent : public UMovementComponent {
public:

	float Duration; // 0x140(0x04)
	char bPauseOnImpact : 1; // 0x144(0x01)
	char pad_144_1 : 7; // 0x144(0x01)
	char pad_145[0x3]; // 0x145(0x03)
	bool bSweep; // 0x148(0x01)
	enum class ETeleportType TeleportType; // 0x149(0x01)
	enum class EInterpToBehaviourType BehaviourType; // 0x14a(0x01)
	bool bCheckIfStillInWorld; // 0x14b(0x01)
	char bForceSubStepping : 1; // 0x14c(0x01)
	char pad_14C_1 : 7; // 0x14c(0x01)
	char pad_14D[0x3]; // 0x14d(0x03)
	/*struct FMulticastInlineDelegate*/char OnInterpToReverse[0x10]; // 0x150(0x10)
	/*struct FMulticastInlineDelegate*/char OnInterpToStop[0x10]; // 0x160(0x10)
	/*struct FMulticastInlineDelegate*/char OnWaitBeginDelegate[0x10]; // 0x170(0x10)
	/*struct FMulticastInlineDelegate*/char OnWaitEndDelegate[0x10]; // 0x180(0x10)
	/*struct FMulticastInlineDelegate*/char OnResetDelegate[0x10]; // 0x190(0x10)
	float MaxSimulationTimeStep; // 0x1a0(0x04)
	int32_t MaxSimulationIterations; // 0x1a4(0x04)
	struct TArray<struct FInterpControlPoint> ControlPoints; // 0x1a8(0x10)
	char pad_1B8[0x28]; // 0x1b8(0x28)

	void StopSimulating(struct FHitResult& HitResult); // Function Engine.InterpToMovementComponent.StopSimulating // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9dd5640
	void RestartMovement(float InitialDirection); // Function Engine.InterpToMovementComponent.RestartMovement // (Final|Native|Public|BlueprintCallable) // @ game+0x9dd55c0
	void OnInterpToWaitEndDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x7ed88c0
	void OnInterpToWaitBeginDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x7ed88c0
	void OnInterpToStopDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x7ed88c0
	void OnInterpToReverseDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x7ed88c0
	void OnInterpToResetDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x7ed88c0
	void FinaliseControlPoints(); // Function Engine.InterpToMovementComponent.FinaliseControlPoints // (Final|Native|Public|BlueprintCallable) // @ game+0x9dd55a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.RotatingMovementComponent
// Size: 0x160 (Inherited: 0x140)
class URotatingMovementComponent : public UMovementComponent {
public:

	struct FRotator RotationRate; // 0x140(0x0c)
	struct FVector PivotTranslation; // 0x14c(0x0c)
	char bRotationInLocalSpace : 1; // 0x158(0x01)
	char pad_158_1 : 7; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimBlueprint
// Size: 0xd0 (Inherited: 0xa8)
class UAnimBlueprint : public UBlueprint {
public:

	char pad_A8[0x8]; // 0xa8(0x08)
	struct USkeleton* TargetSkeleton; // 0xb0(0x08)
	struct TArray<struct FAnimGroupInfo> Groups; // 0xb8(0x10)
	bool bUseMultiThreadedAnimationUpdate; // 0xc8(0x01)
	bool bWarnAboutBlueprintUsage; // 0xc9(0x01)
	char pad_CA[0x6]; // 0xca(0x06)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LevelScriptBlueprint
// Size: 0xa8 (Inherited: 0xa8)
class ULevelScriptBlueprint : public UBlueprint {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AsyncActionLoadPrimaryAsset
// Size: 0x90 (Inherited: 0x80)
class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase {
public:

	/*struct FMulticastInlineDelegate*/char Completed[0x10]; // 0x80(0x10)

	struct UAsyncActionLoadPrimaryAsset* STATIC_AsyncLoadPrimaryAsset(struct UObject* WorldContextObject, struct FPrimaryAssetId PrimaryAsset, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9d77b60
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AsyncActionLoadPrimaryAssetClass
// Size: 0x90 (Inherited: 0x80)
class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase {
public:

	/*struct FMulticastInlineDelegate*/char Completed[0x10]; // 0x80(0x10)

	struct UAsyncActionLoadPrimaryAssetClass* STATIC_AsyncLoadPrimaryAssetClass(struct UObject* WorldContextObject, struct FPrimaryAssetId PrimaryAsset, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9d77cc0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AsyncActionLoadPrimaryAssetList
// Size: 0x90 (Inherited: 0x80)
class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase {
public:

	/*struct FMulticastInlineDelegate*/char Completed[0x10]; // 0x80(0x10)

	struct UAsyncActionLoadPrimaryAssetList* STATIC_AsyncLoadPrimaryAssetList(struct UObject* WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9d77fb0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AsyncActionLoadPrimaryAssetClassList
// Size: 0x90 (Inherited: 0x80)
class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase {
public:

	/*struct FMulticastInlineDelegate*/char Completed[0x10]; // 0x80(0x10)

	struct UAsyncActionLoadPrimaryAssetClassList* STATIC_AsyncLoadPrimaryAssetClassList(struct UObject* WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9d77e20
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AsyncActionChangePrimaryAssetBundles
// Size: 0x90 (Inherited: 0x80)
class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase {
public:

	/*struct FMulticastInlineDelegate*/char Completed[0x10]; // 0x80(0x10)

	struct UAsyncActionChangePrimaryAssetBundles* STATIC_AsyncChangeBundleStateForPrimaryAssetList(struct UObject* WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& AddBundles, struct TArray<struct FName>& RemoveBundles); // Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9d77930
	struct UAsyncActionChangePrimaryAssetBundles* STATIC_AsyncChangeBundleStateForMatchingPrimaryAssets(struct UObject* WorldContextObject, struct TArray<struct FName>& NewBundles, struct TArray<struct FName>& OldBundles); // Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForMatchingPrimaryAssets // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9d777a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Texture2DDynamic
// Size: 0x158 (Inherited: 0x140)
class UTexture2DDynamic : public UTexture {
public:

	char pad_140[0x8]; // 0x140(0x08)
	enum class EPixelFormat Format; // 0x148(0x01)
	char pad_149[0xf]; // 0x149(0x0f)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Clipmap
// Size: 0x2c8 (Inherited: 0x140)
class UClipmap : public UTexture {
public:

	struct FIntPoint OriginTextureSize; // 0x140(0x08)
	bool bIsWeightmapClipmap; // 0x148(0x01)
	bool bGenerateSubTextureButton; // 0x149(0x01)
	char pad_14A[0x2]; // 0x14a(0x02)
	int32_t PatchSize; // 0x14c(0x04)
	int32_t PatchCount; // 0x150(0x04)
	char pad_154[0x4]; // 0x154(0x04)
	/*struct TSet<uint32_t>*/char DiscardLayerId[0x50]; // 0x158(0x50)
	struct TMap<uint32_t, uint32_t> ValidTextureLayerId; // 0x1a8(0x50)
	int32_t ReservedPatchCount; // 0x1f8(0x04)
	char pad_1FC[0x4]; // 0x1fc(0x04)
	int32_t ClipmapSize; // 0x200(0x04)
	int32_t MipCount; // 0x204(0x04)
	enum class EPixelFormat CachedPF; // 0x208(0x01)
	enum class TextureAddress AddressX; // 0x209(0x01)
	enum class TextureAddress AddressY; // 0x20a(0x01)
	enum class TextureAddress AddressZ; // 0x20b(0x01)
	char pad_20C[0x4]; // 0x20c(0x04)
	/*struct TMap<struct FIntVector, struct TSoftObjectPtr<UTexture2D>>*/char SubTexture[0x50]; // 0x210(0x50)
	struct TMap<struct FIntVector, struct UTexture2D*> BackupTextures; // 0x260(0x50)
	struct TArray<struct FIntPoint> SizeInPatchs; // 0x2b0(0x10)
	char pad_2C0[0x8]; // 0x2c0(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TextureCube
// Size: 0x1e0 (Inherited: 0x140)
class UTextureCube : public UTexture {
public:

	char pad_140[0x90]; // 0x140(0x90)
	struct FString SaveName; // 0x1d0(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BillboardBatchTexture2DArray
// Size: 0x170 (Inherited: 0x140)
class UBillboardBatchTexture2DArray : public UTexture {
public:

	/*struct TArray<struct TSoftObjectPtr<UTexture2D>>*/char TextureArray[0x10]; // 0x140(0x10)
	uint32_t SlotCount; // 0x150(0x04)
	enum class TextureAddress AddressX; // 0x154(0x01)
	enum class TextureAddress AddressY; // 0x155(0x01)
	enum class TextureAddress AddressZ; // 0x156(0x01)
	char pad_157[0x1]; // 0x157(0x01)
	struct FIntVector CachedSize; // 0x158(0x0c)
	int32_t CachedNumMip; // 0x164(0x04)
	enum class EPixelFormat CachedPF; // 0x168(0x01)
	bool bResetSubTexture; // 0x169(0x01)
	bool bCheckSubTextureButton; // 0x16a(0x01)
	char pad_16B[0x5]; // 0x16b(0x05)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TextureRenderTarget
// Size: 0x148 (Inherited: 0x140)
class UTextureRenderTarget : public UTexture {
public:

	float TargetGamma; // 0x140(0x04)
	char pad_144[0x4]; // 0x144(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Texture2D
// Size: 0x1a8 (Inherited: 0x140)
class UTexture2D : public UTexture {
public:

	int32_t LevelIndex; // 0x140(0x04)
	int32_t FirstResourceMemMip; // 0x144(0x04)
	char bTemporarilyDisableStreaming : 1; // 0x148(0x01)
	char pad_148_1 : 7; // 0x148(0x01)
	enum class TextureAddress AddressX; // 0x149(0x01)
	enum class TextureAddress AddressY; // 0x14a(0x01)
	char pad_14B[0x1]; // 0x14b(0x01)
	struct FIntPoint ImportedSize; // 0x14c(0x08)
	char pad_154[0x1c]; // 0x154(0x1c)
	struct FTextureMergingInfo TextureMergingInfo; // 0x170(0x18)
	char pad_188[0x20]; // 0x188(0x20)

	int32_t Blueprint_GetSizeY(); // Function Engine.Texture2D.Blueprint_GetSizeY // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ec5c20
	int32_t Blueprint_GetSizeX(); // Function Engine.Texture2D.Blueprint_GetSizeX // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ec5bf0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DynamicTexture2DArray
// Size: 0x198 (Inherited: 0x140)
class UDynamicTexture2DArray : public UTexture {
public:

	/*struct TArray<struct TSoftObjectPtr<UTexture2D>>*/char TextureArray[0x10]; // 0x140(0x10)
	uint32_t SlotCount; // 0x150(0x04)
	enum class TextureAddress AddressX; // 0x154(0x01)
	enum class TextureAddress AddressY; // 0x155(0x01)
	enum class TextureAddress AddressZ; // 0x156(0x01)
	char pad_157[0x1]; // 0x157(0x01)
	struct FIntVector CachedSize; // 0x158(0x0c)
	int32_t CachedNumMip; // 0x164(0x04)
	char pad_168[0x4]; // 0x168(0x04)
	enum class EPixelFormat CachedPF; // 0x16c(0x01)
	bool bResetSubTexture; // 0x16d(0x01)
	bool bCheckSubTextureButton; // 0x16e(0x01)
	char pad_16F[0x29]; // 0x16f(0x29)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Texture2DArray
// Size: 0x198 (Inherited: 0x140)
class UTexture2DArray : public UTexture {
public:

	char pad_140[0x58]; // 0x140(0x58)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.VolumeTexture
// Size: 0x198 (Inherited: 0x140)
class UVolumeTexture : public UTexture {
public:

	char pad_140[0x58]; // 0x140(0x58)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.StaticLabelMesh
// Size: 0x188 (Inherited: 0x188)
class UStaticLabelMesh : public UStaticMesh {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.RuntimeStaticMesh
// Size: 0x278 (Inherited: 0x188)
class URuntimeStaticMesh : public UStaticMesh {
public:

	char pad_188[0xf0]; // 0x188(0xf0)

	struct URuntimeStaticMesh* STATIC_CreateRuntimeStaticMesh(struct UPackage* Package); // Function Engine.RuntimeStaticMesh.CreateRuntimeStaticMesh // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x9e933d0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.StaticMeshProxy
// Size: 0x1c8 (Inherited: 0x188)
class UStaticMeshProxy : public UStaticMesh {
public:

	char pad_188[0x40]; // 0x188(0x40)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.RuntimeSkeletalMesh
// Size: 0x538 (Inherited: 0x3b8)
class URuntimeSkeletalMesh : public USkeletalMesh {
public:

	char pad_3B8[0xb8]; // 0x3b8(0xb8)
	struct TArray<struct FSkelMeshMaterials> SubSkeletalMeshMaterials; // 0x470(0x10)
	struct UMaterialInterface* UsedMergeMaterial; // 0x480(0x08)
	char pad_488[0xb0]; // 0x488(0xb0)

	struct URuntimeSkeletalMesh* STATIC_CreateRuntimeSkeletalMesh(struct UPackage* Package); // Function Engine.RuntimeSkeletalMesh.CreateRuntimeSkeletalMesh // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x9e93350
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimCompress_BitwiseCompressOnly
// Size: 0x48 (Inherited: 0x48)
class UAnimCompress_BitwiseCompressOnly : public UAnimCompress {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimCompress_RemoveLinearKeys
// Size: 0x68 (Inherited: 0x48)
class UAnimCompress_RemoveLinearKeys : public UAnimCompress {
public:

	float MaxPosDiff; // 0x48(0x04)
	float MaxAngleDiff; // 0x4c(0x04)
	float MaxScaleDiff; // 0x50(0x04)
	float MaxEffectorDiff; // 0x54(0x04)
	float MinEffectorDiff; // 0x58(0x04)
	float EffectorDiffSocket; // 0x5c(0x04)
	float ParentKeyScale; // 0x60(0x04)
	char bRetarget : 1; // 0x64(0x01)
	char bActuallyFilterLinearKeys : 1; // 0x64(0x01)
	char bOptimizeForForwardPlayback : 1; // 0x64(0x01)
	char bUseDecompression : 1; // 0x64(0x01)
	char bUseMultithreading : 1; // 0x64(0x01)
	char pad_64_5 : 3; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimCompress_RemoveEverySecondKey
// Size: 0x50 (Inherited: 0x48)
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress {
public:

	int32_t MinKeys; // 0x48(0x04)
	char bStartAtSecondKey : 1; // 0x4c(0x01)
	char pad_4C_1 : 7; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimCompress_RemoveTrivialKeys
// Size: 0x58 (Inherited: 0x48)
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress {
public:

	float MaxPosDiff; // 0x48(0x04)
	float MaxAngleDiff; // 0x4c(0x04)
	float MaxScaleDiff; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialInstanceConstant
// Size: 0x2c8 (Inherited: 0x2c8)
class UMaterialInstanceConstant : public UMaterialInstance {
public:


	struct FLinearColor K2_GetVectorParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetVectorParameterValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e4ea40
	struct UTexture* K2_GetTextureParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetTextureParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x9e4e9b0
	float K2_GetScalarParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetScalarParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x9e4e910
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialInstanceDynamic
// Size: 0x318 (Inherited: 0x2c8)
class UMaterialInstanceDynamic : public UMaterialInstance {
public:

	char pad_2C8[0x50]; // 0x2c8(0x50)

	void SetVectorParameterValue(struct FName ParameterName, struct FLinearColor Value); // Function Engine.MaterialInstanceDynamic.SetVectorParameterValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e4efc0
	void SetTextureParameterValue(struct FName ParameterName, struct UTexture* Value); // Function Engine.MaterialInstanceDynamic.SetTextureParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x9e4ef00
	void SetSpriteTextureParameterValue(struct FName ParameterName, struct UObject* Value); // Function Engine.MaterialInstanceDynamic.SetSpriteTextureParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x9e4ee40
	void SetScalarParameterValue(struct FName ParameterName, float Value); // Function Engine.MaterialInstanceDynamic.SetScalarParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x9e4ed80
	void K2_InterpolateMaterialInstanceParams(struct UMaterialInstance* SourceA, struct UMaterialInstance* SourceB, float Alpha); // Function Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams // (Final|Native|Public|BlueprintCallable) // @ game+0x9e4eae0
	struct FLinearColor K2_GetVectorParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e4ea40
	struct UTexture* K2_GetTextureParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x9e4e9b0
	float K2_GetScalarParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x9e4e910
	void K2_CopyMaterialInstanceParameters(struct UMaterialInterface* Source, bool bQuickParametersOnly); // Function Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters // (Final|Native|Public|BlueprintCallable) // @ game+0x9e4e840
	void CopyParameterOverrides(struct UMaterialInstance* MaterialInstance); // Function Engine.MaterialInstanceDynamic.CopyParameterOverrides // (Final|Native|Public|BlueprintCallable) // @ game+0x9e4e790
	void CopyInterpParameters(struct UMaterialInstance* Source); // Function Engine.MaterialInstanceDynamic.CopyInterpParameters // (Final|Native|Public) // @ game+0x9e4e710
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackAudioMaster
// Size: 0x98 (Inherited: 0x98)
class UInterpTrackAudioMaster : public UInterpTrackVectorBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackColorProp
// Size: 0xa0 (Inherited: 0x98)
class UInterpTrackColorProp : public UInterpTrackVectorBase {
public:

	struct FName PropertyName; // 0x98(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackColorScale
// Size: 0x98 (Inherited: 0x98)
class UInterpTrackColorScale : public UInterpTrackVectorBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackSound
// Size: 0xb0 (Inherited: 0x98)
class UInterpTrackSound : public UInterpTrackVectorBase {
public:

	struct TArray<struct FSoundTrackKey> Sounds; // 0x98(0x10)
	char bPlayOnReverse : 1; // 0xa8(0x01)
	char bContinueSoundOnMatineeEnd : 1; // 0xa8(0x01)
	char bSuppressSubtitles : 1; // 0xa8(0x01)
	char bTreatAsDialogue : 1; // 0xa8(0x01)
	char bAttach : 1; // 0xa8(0x01)
	char pad_A8_5 : 3; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackVectorMaterialParam
// Size: 0xb0 (Inherited: 0x98)
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase {
public:

	struct TArray<struct UMaterialInterface*> TargetMaterials; // 0x98(0x10)
	struct FName ParamName; // 0xa8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackVectorProp
// Size: 0xa0 (Inherited: 0x98)
class UInterpTrackVectorProp : public UInterpTrackVectorBase {
public:

	struct FName PropertyName; // 0x98(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackAnimControl
// Size: 0xb8 (Inherited: 0x98)
class UInterpTrackAnimControl : public UInterpTrackFloatBase {
public:

	struct FName SlotName; // 0x98(0x08)
	struct TArray<struct FAnimControlTrackKey> AnimSeqs; // 0xa0(0x10)
	char bSkipAnimNotifiers : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackFade
// Size: 0xb0 (Inherited: 0x98)
class UInterpTrackFade : public UInterpTrackFloatBase {
public:

	char bPersistFade : 1; // 0x98(0x01)
	char bFadeAudio : 1; // 0x98(0x01)
	char pad_98_2 : 6; // 0x98(0x01)
	char pad_99[0x3]; // 0x99(0x03)
	struct FLinearColor FadeColor; // 0x9c(0x10)
	char pad_AC[0x4]; // 0xac(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackFloatAnimBPParam
// Size: 0xb8 (Inherited: 0x98)
class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase {
public:

	struct UAnimBlueprintGeneratedClass* AnimBlueprintClass; // 0x98(0x08)
	struct UClass* AnimClass; // 0xa0(0x08)
	struct FName ParamName; // 0xa8(0x08)
	char pad_B0[0x8]; // 0xb0(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackFloatMaterialParam
// Size: 0xb0 (Inherited: 0x98)
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase {
public:

	struct TArray<struct UMaterialInterface*> TargetMaterials; // 0x98(0x10)
	struct FName ParamName; // 0xa8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackFloatParticleParam
// Size: 0xa0 (Inherited: 0x98)
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase {
public:

	struct FName ParamName; // 0x98(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackFloatProp
// Size: 0xa0 (Inherited: 0x98)
class UInterpTrackFloatProp : public UInterpTrackFloatBase {
public:

	struct FName PropertyName; // 0x98(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackMoveAxis
// Size: 0xb0 (Inherited: 0x98)
class UInterpTrackMoveAxis : public UInterpTrackFloatBase {
public:

	enum class EInterpMoveAxis MoveAxis; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
	struct FInterpLookupTrack LookupTrack; // 0xa0(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackSlomo
// Size: 0x98 (Inherited: 0x98)
class UInterpTrackSlomo : public UInterpTrackFloatBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackLinearColorProp
// Size: 0xa0 (Inherited: 0x98)
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase {
public:

	struct FName PropertyName; // 0x98(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackInstBoolProp
// Size: 0x70 (Inherited: 0x58)
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty {
public:

	char pad_58[0x10]; // 0x58(0x10)
	bool ResetBool; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackInstColorProp
// Size: 0x68 (Inherited: 0x58)
class UInterpTrackInstColorProp : public UInterpTrackInstProperty {
public:

	char pad_58[0x8]; // 0x58(0x08)
	struct FColor ResetColor; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackInstFloatProp
// Size: 0x68 (Inherited: 0x58)
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty {
public:

	char pad_58[0x8]; // 0x58(0x08)
	float ResetFloat; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackInstLinearColorProp
// Size: 0x70 (Inherited: 0x58)
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty {
public:

	char pad_58[0x8]; // 0x58(0x08)
	struct FLinearColor ResetColor; // 0x60(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InterpTrackInstVectorProp
// Size: 0x70 (Inherited: 0x58)
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty {
public:

	char pad_58[0x8]; // 0x58(0x08)
	struct FVector ResetVector; // 0x60(0x0c)
	char pad_6C[0x4]; // 0x6c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DemoNetConnection
// Size: 0x1df0 (Inherited: 0x1d80)
class UDemoNetConnection : public UNetConnection {
public:

	char pad_1D80[0x70]; // 0x1d80(0x70)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ChildConnection
// Size: 0x1d88 (Inherited: 0x1d80)
class UChildConnection : public UNetConnection {
public:

	struct UNetConnection* Parent; // 0x1d80(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SimulatedClientNetConnection
// Size: 0x1d80 (Inherited: 0x1d80)
class USimulatedClientNetConnection : public UNetConnection {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionTextureSample
// Size: 0xe0 (Inherited: 0x60)
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase {
public:

	struct FExpressionInput Coordinates; // 0x60(0x0c)
	char pad_6C[0x8]; // 0x6c(0x08)
	struct FExpressionInput TextureObject; // 0x74(0x0c)
	char pad_80[0x8]; // 0x80(0x08)
	struct FExpressionInput MipValue; // 0x88(0x0c)
	char pad_94[0x8]; // 0x94(0x08)
	struct FExpressionInput CoordinatesDX; // 0x9c(0x0c)
	char pad_A8[0x8]; // 0xa8(0x08)
	struct FExpressionInput CoordinatesDY; // 0xb0(0x0c)
	char pad_BC[0x8]; // 0xbc(0x08)
	struct FExpressionInput AutomaticViewMipBiasValue; // 0xc4(0x0c)
	char pad_D0[0x8]; // 0xd0(0x08)
	enum class ETextureMipValueMode MipValueMode; // 0xd8(0x01)
	enum class ESamplerSourceMode SamplerSource; // 0xd9(0x01)
	char AutomaticViewMipBias : 1; // 0xda(0x01)
	char pad_DA_1 : 7; // 0xda(0x01)
	char ConstCoordinate; // 0xdb(0x01)
	int32_t ConstMipValue; // 0xdc(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionAtlasTextureSample
// Size: 0x98 (Inherited: 0x60)
class UMaterialExpressionAtlasTextureSample : public UMaterialExpressionTextureBase {
public:

	int32_t MaterialLayerIndex; // 0x60(0x04)
	enum class EMaterialAtlasUsage AtlasTextureMode; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
	struct FExpressionInput Coordinates; // 0x68(0x0c)
	char pad_74[0x8]; // 0x74(0x08)
	struct FExpressionInput TextureObject; // 0x7c(0x0c)
	char pad_88[0x8]; // 0x88(0x08)
	enum class ESamplerSourceMode SamplerSource; // 0x90(0x01)
	char pad_91[0x1]; // 0x91(0x01)
	char ConstCoordinate; // 0x92(0x01)
	char pad_93[0x5]; // 0x93(0x05)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionTextureObject
// Size: 0x60 (Inherited: 0x60)
class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionBentNormalCustomOutput
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionExtraOutput
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionExtraOutput : public UMaterialExpressionCustomOutput {
public:

	struct TArray<struct FExtraOutputPin> CustomOutputs; // 0x48(0x10)
	bool ForVertexShader; // 0x58(0x01)
	enum class EVertexPhase VertexPhase; // 0x59(0x01)
	enum class EShadingPhase ShadingPhase; // 0x5a(0x01)
	char pad_5B[0x5]; // 0x5b(0x05)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionGbufferDepthOffsetOutput
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionGbufferDepthOffsetOutput : public UMaterialExpressionCustomOutput {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureOutput
// Size: 0xe8 (Inherited: 0x48)
class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput {
public:

	struct FExpressionInput BaseColor; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput Specular; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	struct FExpressionInput Roughness; // 0x70(0x0c)
	char pad_7C[0x8]; // 0x7c(0x08)
	struct FExpressionInput Normal; // 0x84(0x0c)
	char pad_90[0x8]; // 0x90(0x08)
	struct FExpressionInput WorldHeight; // 0x98(0x0c)
	char pad_A4[0x8]; // 0xa4(0x08)
	struct FExpressionInput Opacity; // 0xac(0x0c)
	char pad_B8[0x8]; // 0xb8(0x08)
	struct FExpressionInput Mask; // 0xc0(0x0c)
	char pad_CC[0x8]; // 0xcc(0x08)
	struct FExpressionInput AO; // 0xd4(0x0c)
	char pad_E0[0x8]; // 0xe0(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput
// Size: 0x98 (Inherited: 0x48)
class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput {
public:

	struct FExpressionInput ScatteringCoefficients; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FExpressionInput AbsorptionCoefficients; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	struct FExpressionInput PhaseG; // 0x70(0x0c)
	char pad_7C[0x8]; // 0x7c(0x08)
	struct FExpressionInput ColorScaleBehindWater; // 0x84(0x0c)
	char pad_90[0x8]; // 0x90(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionTangentOutput
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionThinTranslucentMaterialOutput
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput {
public:

	struct FExpressionInput TransmittanceColor; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionVertexInterpolator
// Size: 0x70 (Inherited: 0x48)
class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	bool ExcludeInDepthOnly; // 0x5c(0x01)
	char pad_5D[0x13]; // 0x5d(0x13)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionVectorParameter
// Size: 0x78 (Inherited: 0x60)
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter {
public:

	struct FLinearColor DefaultValue; // 0x60(0x10)
	bool bUseCustomPrimitiveData; // 0x70(0x01)
	char PrimitiveDataIndex; // 0x71(0x01)
	char pad_72[0x6]; // 0x72(0x06)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionScalarParameter
// Size: 0x68 (Inherited: 0x60)
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter {
public:

	float DefaultValue; // 0x60(0x04)
	bool bUseCustomPrimitiveData; // 0x64(0x01)
	char PrimitiveDataIndex; // 0x65(0x01)
	char pad_66[0x2]; // 0x66(0x02)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionStaticBoolParameter
// Size: 0x68 (Inherited: 0x60)
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter {
public:

	char DefaultValue : 1; // 0x60(0x01)
	char pad_60_1 : 7; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionStaticComponentMaskParameter
// Size: 0x78 (Inherited: 0x60)
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter {
public:

	struct FExpressionInput Input; // 0x60(0x0c)
	char pad_6C[0x8]; // 0x6c(0x08)
	char DefaultR : 1; // 0x74(0x01)
	char DefaultG : 1; // 0x74(0x01)
	char DefaultB : 1; // 0x74(0x01)
	char DefaultA : 1; // 0x74(0x01)
	char pad_74_4 : 4; // 0x74(0x01)
	char pad_75[0x3]; // 0x75(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionFontSampleParameter
// Size: 0x78 (Inherited: 0x58)
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample {
public:

	struct FName ParameterName; // 0x58(0x08)
	struct FGuid ExpressionGUID; // 0x60(0x10)
	struct FName Group; // 0x70(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionMaterialLayerOutput
// Size: 0x90 (Inherited: 0x90)
class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionLocalVariableBase
// Size: 0x48 (Inherited: 0x48)
class UMaterialExpressionLocalVariableBase : public UMaterialExpressionRerouteBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionReroute
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionReroute : public UMaterialExpressionRerouteBase {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0xc]; // 0x54(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
// Size: 0xa0 (Inherited: 0x80)
class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample {
public:

	struct FName ParameterName; // 0x80(0x08)
	struct FGuid ExpressionGUID; // 0x88(0x10)
	struct FName Group; // 0x98(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InputActionDelegateBinding
// Size: 0x40 (Inherited: 0x30)
class UInputActionDelegateBinding : public UInputDelegateBinding {
public:

	struct TArray<struct FBlueprintInputActionDelegateBinding> InputActionDelegateBindings; // 0x30(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InputAxisDelegateBinding
// Size: 0x40 (Inherited: 0x30)
class UInputAxisDelegateBinding : public UInputDelegateBinding {
public:

	struct TArray<struct FBlueprintInputAxisDelegateBinding> InputAxisDelegateBindings; // 0x30(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InputAxisKeyDelegateBinding
// Size: 0x40 (Inherited: 0x30)
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding {
public:

	struct TArray<struct FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings; // 0x30(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InputKeyDelegateBinding
// Size: 0x40 (Inherited: 0x30)
class UInputKeyDelegateBinding : public UInputDelegateBinding {
public:

	struct TArray<struct FBlueprintInputKeyDelegateBinding> InputKeyDelegateBindings; // 0x30(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InputTouchDelegateBinding
// Size: 0x40 (Inherited: 0x30)
class UInputTouchDelegateBinding : public UInputDelegateBinding {
public:

	struct TArray<struct FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings; // 0x30(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundWaveProcedural
// Size: 0x3e0 (Inherited: 0x388)
class USoundWaveProcedural : public USoundWave {
public:

	char pad_388[0x58]; // 0x388(0x58)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundSourceBus
// Size: 0x3a0 (Inherited: 0x388)
class USoundSourceBus : public USoundWave {
public:

	enum class ESourceBusChannels SourceBusChannels; // 0x388(0x01)
	char pad_389[0x3]; // 0x389(0x03)
	float SourceBusDuration; // 0x38c(0x04)
	char bAutoDeactivateWhenSilent : 1; // 0x390(0x01)
	char pad_390_1 : 7; // 0x390(0x01)
	char pad_391[0xf]; // 0x391(0x0f)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundCueTemplate
// Size: 0x4e8 (Inherited: 0x4e8)
class USoundCueTemplate : public USoundCue {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BlendSpace
// Size: 0x158 (Inherited: 0x150)
class UBlendSpace : public UBlendSpaceBase {
public:

	enum class EBlendSpaceAxis AxisToScaleAnimation; // 0x150(0x01)
	char pad_151[0x7]; // 0x151(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BlendSpace1D
// Size: 0x158 (Inherited: 0x150)
class UBlendSpace1D : public UBlendSpaceBase {
public:

	bool bScaleAnimation; // 0x150(0x01)
	char pad_151[0x7]; // 0x151(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimCompositeBase
// Size: 0xb0 (Inherited: 0xb0)
class UAnimCompositeBase : public UAnimSequenceBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimSequence
// Size: 0x1a8 (Inherited: 0xb0)
class UAnimSequence : public UAnimSequenceBase {
public:

	int32_t NumFrames; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
	struct TArray<struct FTrackToSkeletonMap> TrackToSkeletonMapTable; // 0xb8(0x10)
	char pad_C8[0x10]; // 0xc8(0x10)
	struct UAnimBoneCompressionSettings* BoneCompressionSettings; // 0xd8(0x08)
	struct UAnimCurveCompressionSettings* CurveCompressionSettings; // 0xe0(0x08)
	char pad_E8[0x70]; // 0xe8(0x70)
	enum class EAdditiveAnimationType AdditiveAnimType; // 0x158(0x01)
	enum class EAdditiveBasePoseType RefPoseType; // 0x159(0x01)
	char pad_15A[0x6]; // 0x15a(0x06)
	struct UAnimSequence* RefPoseSeq; // 0x160(0x08)
	int32_t RefFrameIndex; // 0x168(0x04)
	struct FName RetargetSource; // 0x16c(0x08)
	enum class EAnimInterpolationType Interpolation; // 0x174(0x01)
	bool bEnableRootMotion; // 0x175(0x01)
	enum class ERootMotionRootLock RootMotionRootLock; // 0x176(0x01)
	bool bForceRootLock; // 0x177(0x01)
	bool bUseNormalizedRootMotionScale; // 0x178(0x01)
	bool bRootMotionSettingsCopiedFromMontage; // 0x179(0x01)
	char pad_17A[0x6]; // 0x17a(0x06)
	struct TArray<struct FAnimSyncMarker> AuthoredSyncMarkers; // 0x180(0x10)
	char pad_190[0x18]; // 0x190(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimStreamable
// Size: 0xe8 (Inherited: 0xb0)
class UAnimStreamable : public UAnimSequenceBase {
public:

	int32_t NumFrames; // 0xb0(0x04)
	enum class EAnimInterpolationType Interpolation; // 0xb4(0x01)
	char pad_B5[0x3]; // 0xb5(0x03)
	struct FName RetargetSource; // 0xb8(0x08)
	char pad_C0[0x10]; // 0xc0(0x10)
	struct UAnimBoneCompressionSettings* BoneCompressionSettings; // 0xd0(0x08)
	struct UAnimCurveCompressionSettings* CurveCompressionSettings; // 0xd8(0x08)
	bool bEnableRootMotion; // 0xe0(0x01)
	enum class ERootMotionRootLock RootMotionRootLock; // 0xe1(0x01)
	bool bForceRootLock; // 0xe2(0x01)
	bool bUseNormalizedRootMotionScale; // 0xe3(0x01)
	char pad_E4[0x4]; // 0xe4(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DistributionFloatConstant
// Size: 0x48 (Inherited: 0x40)
class UDistributionFloatConstant : public UDistributionFloat {
public:

	float Constant; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DistributionFloatConstantCurve
// Size: 0x58 (Inherited: 0x40)
class UDistributionFloatConstantCurve : public UDistributionFloat {
public:

	struct FInterpCurveFloat ConstantCurve; // 0x40(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DistributionFloatUniform
// Size: 0x48 (Inherited: 0x40)
class UDistributionFloatUniform : public UDistributionFloat {
public:

	float Min; // 0x40(0x04)
	float Max; // 0x44(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DistributionFloatUniformCurve
// Size: 0x58 (Inherited: 0x40)
class UDistributionFloatUniformCurve : public UDistributionFloat {
public:

	struct FInterpCurveVector2D ConstantCurve; // 0x40(0x18)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DistributionVectorConstant
// Size: 0x58 (Inherited: 0x40)
class UDistributionVectorConstant : public UDistributionVector {
public:

	struct FVector Constant; // 0x40(0x0c)
	char bLockAxes : 1; // 0x4c(0x01)
	char pad_4C_1 : 7; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	enum class EDistributionVectorLockFlags LockedAxes; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DistributionVectorConstantCurve
// Size: 0x60 (Inherited: 0x40)
class UDistributionVectorConstantCurve : public UDistributionVector {
public:

	struct FInterpCurveVector ConstantCurve; // 0x40(0x18)
	char bLockAxes : 1; // 0x58(0x01)
	char pad_58_1 : 7; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	enum class EDistributionVectorLockFlags LockedAxes; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DistributionVectorUniform
// Size: 0x68 (Inherited: 0x40)
class UDistributionVectorUniform : public UDistributionVector {
public:

	struct FVector Max; // 0x40(0x0c)
	struct FVector Min; // 0x4c(0x0c)
	char bLockAxes : 1; // 0x58(0x01)
	char pad_58_1 : 7; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	enum class EDistributionVectorLockFlags LockedAxes; // 0x5c(0x01)
	enum class EDistributionVectorMirrorFlags MirrorFlags[0x3]; // 0x5d(0x03)
	char bUseExtremes : 1; // 0x60(0x01)
	char pad_60_1 : 7; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DistributionVectorUniformCurve
// Size: 0x68 (Inherited: 0x40)
class UDistributionVectorUniformCurve : public UDistributionVector {
public:

	struct FInterpCurveTwoVectors ConstantCurve; // 0x40(0x18)
	char bLockAxes1 : 1; // 0x58(0x01)
	char bLockAxes2 : 1; // 0x58(0x01)
	char pad_58_2 : 6; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	enum class EDistributionVectorLockFlags LockedAxes[0x2]; // 0x5c(0x02)
	enum class EDistributionVectorMirrorFlags MirrorFlags[0x3]; // 0x5e(0x03)
	char pad_61[0x3]; // 0x61(0x03)
	char bUseExtremes : 1; // 0x64(0x01)
	char pad_64_1 : 7; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialFunctionMaterialLayer
// Size: 0x70 (Inherited: 0x70)
class UMaterialFunctionMaterialLayer : public UMaterialFunction {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialFunctionMaterialLayerBlend
// Size: 0x70 (Inherited: 0x70)
class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialFunctionMaterialLayerInstance
// Size: 0xd8 (Inherited: 0xd8)
class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialFunctionMaterialLayerBlendInstance
// Size: 0xd8 (Inherited: 0xd8)
class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleAcceleration
// Size: 0x90 (Inherited: 0x40)
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase {
public:

	struct FRawDistributionVector Acceleration; // 0x40(0x48)
	char bApplyOwnerScale : 1; // 0x88(0x01)
	char pad_88_1 : 7; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleAccelerationConstant
// Size: 0x50 (Inherited: 0x40)
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase {
public:

	struct FVector Acceleration; // 0x40(0x0c)
	char pad_4C[0x4]; // 0x4c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleAccelerationDrag
// Size: 0x78 (Inherited: 0x40)
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase {
public:

	struct UDistributionFloat* DragCoefficient; // 0x40(0x08)
	struct FRawDistributionFloat DragCoefficientRaw; // 0x48(0x30)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleAccelerationDragScaleOverLife
// Size: 0x78 (Inherited: 0x40)
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase {
public:

	struct UDistributionFloat* DragScale; // 0x40(0x08)
	struct FRawDistributionFloat DragScaleRaw; // 0x48(0x30)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleAccelerationOverLifetime
// Size: 0x88 (Inherited: 0x40)
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase {
public:

	struct FRawDistributionVector AccelOverLife; // 0x40(0x48)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleAttractorLine
// Size: 0xb0 (Inherited: 0x38)
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase {
public:

	struct FVector EndPoint0; // 0x38(0x0c)
	struct FVector EndPoint1; // 0x44(0x0c)
	struct FRawDistributionFloat Range; // 0x50(0x30)
	struct FRawDistributionFloat Strength; // 0x80(0x30)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleAttractorParticle
// Size: 0xb8 (Inherited: 0x38)
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase {
public:

	struct FName EmitterName; // 0x38(0x08)
	struct FRawDistributionFloat Range; // 0x40(0x30)
	char bStrengthByDistance : 1; // 0x70(0x01)
	char pad_70_1 : 7; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
	struct FRawDistributionFloat Strength; // 0x78(0x30)
	char bAffectBaseVelocity : 1; // 0xa8(0x01)
	char pad_A8_1 : 7; // 0xa8(0x01)
	char pad_A9[0x3]; // 0xa9(0x03)
	enum class EAttractorParticleSelectionMethod SelectionMethod; // 0xac(0x01)
	char pad_AD[0x3]; // 0xad(0x03)
	char bRenewSource : 1; // 0xb0(0x01)
	char bInheritSourceVel : 1; // 0xb0(0x01)
	char pad_B0_2 : 6; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	int32_t LastSelIndex; // 0xb4(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleAttractorPoint
// Size: 0xe8 (Inherited: 0x38)
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase {
public:

	struct FRawDistributionVector Position; // 0x38(0x48)
	struct FRawDistributionFloat Range; // 0x80(0x30)
	struct FRawDistributionFloat Strength; // 0xb0(0x30)
	char StrengthByDistance : 1; // 0xe0(0x01)
	char bAffectBaseVelocity : 1; // 0xe0(0x01)
	char bOverrideVelocity : 1; // 0xe0(0x01)
	char bUseWorldSpacePosition : 1; // 0xe0(0x01)
	char Positive_X : 1; // 0xe0(0x01)
	char Positive_Y : 1; // 0xe0(0x01)
	char Positive_Z : 1; // 0xe0(0x01)
	char Negative_X : 1; // 0xe0(0x01)
	char Negative_Y : 1; // 0xe1(0x01)
	char Negative_Z : 1; // 0xe1(0x01)
	char pad_E1_2 : 6; // 0xe1(0x01)
	char pad_E2[0x6]; // 0xe2(0x06)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleAttractorPointGravity
// Size: 0x80 (Inherited: 0x38)
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase {
public:

	struct FVector Position; // 0x38(0x0c)
	float radius; // 0x44(0x04)
	struct UDistributionFloat* Strength; // 0x48(0x08)
	struct FRawDistributionFloat StrengthRaw; // 0x50(0x30)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleBeamModifier
// Size: 0x110 (Inherited: 0x38)
class UParticleModuleBeamModifier : public UParticleModuleBeamBase {
public:

	enum class BeamModifierType ModifierType; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FBeamModifierOptions PositionOptions; // 0x3c(0x04)
	struct FRawDistributionVector Position; // 0x40(0x48)
	struct FBeamModifierOptions TangentOptions; // 0x88(0x04)
	char pad_8C[0x4]; // 0x8c(0x04)
	struct FRawDistributionVector Tangent; // 0x90(0x48)
	char bAbsoluteTangent : 1; // 0xd8(0x01)
	char pad_D8_1 : 7; // 0xd8(0x01)
	char pad_D9[0x3]; // 0xd9(0x03)
	struct FBeamModifierOptions StrengthOptions; // 0xdc(0x04)
	struct FRawDistributionFloat Strength; // 0xe0(0x30)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleBeamNoise
// Size: 0x198 (Inherited: 0x38)
class UParticleModuleBeamNoise : public UParticleModuleBeamBase {
public:

	char bLowFreq_Enabled : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	int32_t frequency; // 0x3c(0x04)
	int32_t Frequency_LowRange; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct FRawDistributionVector NoiseRange; // 0x48(0x48)
	struct FRawDistributionFloat NoiseRangeScale; // 0x90(0x30)
	char bNRScaleEmitterTime : 1; // 0xc0(0x01)
	char pad_C0_1 : 7; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)
	struct FRawDistributionVector NoiseSpeed; // 0xc8(0x48)
	char bSmooth : 1; // 0x110(0x01)
	char pad_110_1 : 7; // 0x110(0x01)
	char pad_111[0x3]; // 0x111(0x03)
	float NoiseLockRadius; // 0x114(0x04)
	char bNoiseLock : 1; // 0x118(0x01)
	char bOscillate : 1; // 0x118(0x01)
	char pad_118_2 : 6; // 0x118(0x01)
	char pad_119[0x3]; // 0x119(0x03)
	float NoiseLockTime; // 0x11c(0x04)
	float NoiseTension; // 0x120(0x04)
	char bUseNoiseTangents : 1; // 0x124(0x01)
	char pad_124_1 : 7; // 0x124(0x01)
	char pad_125[0x3]; // 0x125(0x03)
	struct FRawDistributionFloat NoiseTangentStrength; // 0x128(0x30)
	int32_t NoiseTessellation; // 0x158(0x04)
	char bTargetNoise : 1; // 0x15c(0x01)
	char pad_15C_1 : 7; // 0x15c(0x01)
	char pad_15D[0x3]; // 0x15d(0x03)
	float FrequencyDistance; // 0x160(0x04)
	char bApplyNoiseScale : 1; // 0x164(0x01)
	char pad_164_1 : 7; // 0x164(0x01)
	char pad_165[0x3]; // 0x165(0x03)
	struct FRawDistributionFloat NoiseScale; // 0x168(0x30)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleBeamSource
// Size: 0x120 (Inherited: 0x38)
class UParticleModuleBeamSource : public UParticleModuleBeamBase {
public:

	enum class Beam2SourceTargetMethod SourceMethod; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FName SourceName; // 0x3c(0x08)
	char bSourceAbsolute : 1; // 0x44(0x01)
	char pad_44_1 : 7; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	struct FRawDistributionVector Source; // 0x48(0x48)
	char bLockSource : 1; // 0x90(0x01)
	char pad_90_1 : 7; // 0x90(0x01)
	char pad_91[0x3]; // 0x91(0x03)
	enum class Beam2SourceTargetTangentMethod SourceTangentMethod; // 0x94(0x01)
	char pad_95[0x3]; // 0x95(0x03)
	struct FRawDistributionVector SourceTangent; // 0x98(0x48)
	char bLockSourceTangent : 1; // 0xe0(0x01)
	char pad_E0_1 : 7; // 0xe0(0x01)
	char pad_E1[0x7]; // 0xe1(0x07)
	struct FRawDistributionFloat SourceStrength; // 0xe8(0x30)
	char bLockSourceStength : 1; // 0x118(0x01)
	char pad_118_1 : 7; // 0x118(0x01)
	char pad_119[0x7]; // 0x119(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleBeamTarget
// Size: 0x128 (Inherited: 0x38)
class UParticleModuleBeamTarget : public UParticleModuleBeamBase {
public:

	enum class Beam2SourceTargetMethod TargetMethod; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FName TargetName; // 0x3c(0x08)
	char pad_44[0x4]; // 0x44(0x04)
	struct FRawDistributionVector Target; // 0x48(0x48)
	char bTargetAbsolute : 1; // 0x90(0x01)
	char bLockTarget : 1; // 0x90(0x01)
	char pad_90_2 : 6; // 0x90(0x01)
	char pad_91[0x3]; // 0x91(0x03)
	enum class Beam2SourceTargetTangentMethod TargetTangentMethod; // 0x94(0x01)
	char pad_95[0x3]; // 0x95(0x03)
	struct FRawDistributionVector TargetTangent; // 0x98(0x48)
	char bLockTargetTangent : 1; // 0xe0(0x01)
	char pad_E0_1 : 7; // 0xe0(0x01)
	char pad_E1[0x7]; // 0xe1(0x07)
	struct FRawDistributionFloat TargetStrength; // 0xe8(0x30)
	char bLockTargetStength : 1; // 0x118(0x01)
	char pad_118_1 : 7; // 0x118(0x01)
	char pad_119[0x3]; // 0x119(0x03)
	float LockRadius; // 0x11c(0x04)
	char pad_120[0x8]; // 0x120(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleCameraOffset
// Size: 0x70 (Inherited: 0x38)
class UParticleModuleCameraOffset : public UParticleModuleCameraBase {
public:

	struct FRawDistributionFloat CameraOffset; // 0x38(0x30)
	char bSpawnTimeOnly : 1; // 0x68(0x01)
	char pad_68_1 : 7; // 0x68(0x01)
	char pad_69[0x3]; // 0x69(0x03)
	enum class EParticleCameraOffsetUpdateMethod UpdateMethod; // 0x6c(0x01)
	char pad_6D[0x3]; // 0x6d(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleCollision
// Size: 0x198 (Inherited: 0x38)
class UParticleModuleCollision : public UParticleModuleCollisionBase {
public:

	struct FRawDistributionVector DampingFactor; // 0x38(0x48)
	struct FRawDistributionVector DampingFactorRotation; // 0x80(0x48)
	struct FRawDistributionFloat MaxCollisions; // 0xc8(0x30)
	enum class EParticleCollisionComplete CollisionCompletionOption; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)
	struct TArray<enum class EObjectTypeQuery> CollisionTypes; // 0x100(0x10)
	bool bUseCollisionChannel; // 0x110(0x01)
	enum class ECollisionChannel CollisionChannel; // 0x111(0x01)
	char pad_112[0xa]; // 0x112(0x0a)
	char bApplyPhysics : 1; // 0x11c(0x01)
	char bIgnoreTriggerVolumes : 1; // 0x11c(0x01)
	char pad_11C_2 : 6; // 0x11c(0x01)
	char pad_11D[0x3]; // 0x11d(0x03)
	struct FRawDistributionFloat ParticleMass; // 0x120(0x30)
	float DirScalar; // 0x150(0x04)
	char bPawnsDoNotDecrementCount : 1; // 0x154(0x01)
	char bOnlyVerticalNormalsDecrementCount : 1; // 0x154(0x01)
	char pad_154_2 : 6; // 0x154(0x01)
	char pad_155[0x3]; // 0x155(0x03)
	float VerticalFudgeFactor; // 0x158(0x04)
	char pad_15C[0x4]; // 0x15c(0x04)
	struct FRawDistributionFloat DelayAmount; // 0x160(0x30)
	char bDropDetail : 1; // 0x190(0x01)
	char bCollideOnlyIfVisible : 1; // 0x190(0x01)
	char bIgnoreSourceActor : 1; // 0x190(0x01)
	char pad_190_3 : 5; // 0x190(0x01)
	char pad_191[0x3]; // 0x191(0x03)
	float MaxCollisionDistance; // 0x194(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleCollisionGPU
// Size: 0xb0 (Inherited: 0x38)
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase {
public:

	struct FRawDistributionFloat Resilience; // 0x38(0x30)
	struct FRawDistributionFloat ResilienceScaleOverLife; // 0x68(0x30)
	float Friction; // 0x98(0x04)
	float RandomSpread; // 0x9c(0x04)
	float RandomDistribution; // 0xa0(0x04)
	float RadiusScale; // 0xa4(0x04)
	float RadiusBias; // 0xa8(0x04)
	enum class EParticleCollisionResponse Response; // 0xac(0x01)
	enum class EParticleCollisionMode CollisionMode; // 0xad(0x01)
	char pad_AE[0x2]; // 0xae(0x02)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleColor
// Size: 0xb8 (Inherited: 0x38)
class UParticleModuleColor : public UParticleModuleColorBase {
public:

	struct FRawDistributionVector StartColor; // 0x38(0x48)
	struct FRawDistributionFloat StartAlpha; // 0x80(0x30)
	char bClampAlpha : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleColorOverLife
// Size: 0xb8 (Inherited: 0x38)
class UParticleModuleColorOverLife : public UParticleModuleColorBase {
public:

	struct FRawDistributionVector ColorOverLife; // 0x38(0x48)
	struct FRawDistributionFloat AlphaOverLife; // 0x80(0x30)
	char bClampAlpha : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleColorScaleOverLife
// Size: 0xb8 (Inherited: 0x38)
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase {
public:

	struct FRawDistributionVector ColorScaleOverLife; // 0x38(0x48)
	struct FRawDistributionFloat AlphaScaleOverLife; // 0x80(0x30)
	char bEmitterTime : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleEventGenerator
// Size: 0x48 (Inherited: 0x38)
class UParticleModuleEventGenerator : public UParticleModuleEventBase {
public:

	struct TArray<struct FParticleEvent_GenerateInfo> Events; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleEventReceiverBase
// Size: 0x48 (Inherited: 0x38)
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase {
public:

	enum class EParticleEventType EventGeneratorType; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FName EventName; // 0x3c(0x08)
	char pad_44[0x4]; // 0x44(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleKillBox
// Size: 0xd0 (Inherited: 0x38)
class UParticleModuleKillBox : public UParticleModuleKillBase {
public:

	struct FRawDistributionVector LowerLeftCorner; // 0x38(0x48)
	struct FRawDistributionVector UpperRightCorner; // 0x80(0x48)
	char bAbsolute : 1; // 0xc8(0x01)
	char bKillInside : 1; // 0xc8(0x01)
	char bAxisAlignedAndFixedSize : 1; // 0xc8(0x01)
	char pad_C8_3 : 5; // 0xc8(0x01)
	char pad_C9[0x7]; // 0xc9(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleKillHeight
// Size: 0x70 (Inherited: 0x38)
class UParticleModuleKillHeight : public UParticleModuleKillBase {
public:

	struct FRawDistributionFloat Height; // 0x38(0x30)
	char bAbsolute : 1; // 0x68(0x01)
	char bFloor : 1; // 0x68(0x01)
	char bApplyPSysScale : 1; // 0x68(0x01)
	char pad_68_3 : 5; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleLifetime
// Size: 0x68 (Inherited: 0x38)
class UParticleModuleLifetime : public UParticleModuleLifetimeBase {
public:

	struct FRawDistributionFloat LifeTime; // 0x38(0x30)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleLight
// Size: 0x128 (Inherited: 0x38)
class UParticleModuleLight : public UParticleModuleLightBase {
public:

	bool bUseInverseSquaredFalloff; // 0x38(0x01)
	bool bAffectsTranslucency; // 0x39(0x01)
	bool bPreviewLightRadius; // 0x3a(0x01)
	char pad_3B[0x1]; // 0x3b(0x01)
	float SpawnFraction; // 0x3c(0x04)
	struct FRawDistributionVector ColorScaleOverLife; // 0x40(0x48)
	struct FRawDistributionFloat BrightnessOverLife; // 0x88(0x30)
	struct FRawDistributionFloat RadiusScale; // 0xb8(0x30)
	struct FRawDistributionFloat LightExponent; // 0xe8(0x30)
	struct FLightingChannels LightingChannels; // 0x118(0x01)
	char pad_119[0x3]; // 0x119(0x03)
	float VolumetricScatteringIntensity; // 0x11c(0x04)
	bool bHighQualityLights; // 0x120(0x01)
	bool bShadowCastingLights; // 0x121(0x01)
	char pad_122[0x6]; // 0x122(0x06)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleLocation
// Size: 0x88 (Inherited: 0x38)
class UParticleModuleLocation : public UParticleModuleLocationBase {
public:

	struct FRawDistributionVector StartLocation; // 0x38(0x48)
	float DistributeOverNPoints; // 0x80(0x04)
	float DistributeThreshold; // 0x84(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleLocationBoneSocket
// Size: 0x78 (Inherited: 0x38)
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase {
public:

	enum class ELocationBoneSocketSource SourceType; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FVector UniversalOffset; // 0x3c(0x0c)
	struct TArray<struct FLocationBoneSocketInfo> SourceLocations; // 0x48(0x10)
	enum class ELocationBoneSocketSelectionMethod SelectionMethod; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	char bUpdatePositionEachFrame : 1; // 0x5c(0x01)
	char bOrientMeshEmitters : 1; // 0x5c(0x01)
	char bInheritBoneVelocity : 1; // 0x5c(0x01)
	char pad_5C_3 : 5; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
	float InheritVelocityScale; // 0x60(0x04)
	struct FName SkelMeshActorParamName; // 0x64(0x08)
	int32_t NumPreSelectedIndices; // 0x6c(0x04)
	char pad_70[0x8]; // 0x70(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleLocationDirect
// Size: 0x158 (Inherited: 0x38)
class UParticleModuleLocationDirect : public UParticleModuleLocationBase {
public:

	struct FRawDistributionVector Location; // 0x38(0x48)
	struct FRawDistributionVector LocationOffset; // 0x80(0x48)
	struct FRawDistributionVector ScaleFactor; // 0xc8(0x48)
	struct FRawDistributionVector Direction; // 0x110(0x48)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleLocationEmitter
// Size: 0x58 (Inherited: 0x38)
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase {
public:

	struct FName EmitterName; // 0x38(0x08)
	enum class ELocationEmitterSelectionMethod SelectionMethod; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	char InheritSourceVelocity : 1; // 0x44(0x01)
	char pad_44_1 : 7; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	float InheritSourceVelocityScale; // 0x48(0x04)
	char bInheritSourceRotation : 1; // 0x4c(0x01)
	char pad_4C_1 : 7; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	float InheritSourceRotationScale; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleLocationEmitterDirect
// Size: 0x40 (Inherited: 0x38)
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase {
public:

	struct FName EmitterName; // 0x38(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleLocationPrimitiveBase
// Size: 0xb8 (Inherited: 0x38)
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase {
public:

	char Positive_X : 1; // 0x38(0x01)
	char Positive_Y : 1; // 0x38(0x01)
	char Positive_Z : 1; // 0x38(0x01)
	char Negative_X : 1; // 0x38(0x01)
	char Negative_Y : 1; // 0x38(0x01)
	char Negative_Z : 1; // 0x38(0x01)
	char SurfaceOnly : 1; // 0x38(0x01)
	char Velocity : 1; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct FRawDistributionFloat VelocityScale; // 0x40(0x30)
	struct FRawDistributionVector StartLocation; // 0x70(0x48)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleLocationPrimitiveTriangle
// Size: 0x110 (Inherited: 0x38)
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase {
public:

	struct FRawDistributionVector StartOffset; // 0x38(0x48)
	struct FRawDistributionFloat Height; // 0x80(0x30)
	struct FRawDistributionFloat Angle; // 0xb0(0x30)
	struct FRawDistributionFloat Thickness; // 0xe0(0x30)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleLocationSkelVertSurface
// Size: 0x98 (Inherited: 0x38)
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase {
public:

	enum class ELocationSkelVertSurfaceSource SourceType; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FVector UniversalOffset; // 0x3c(0x0c)
	char bUpdatePositionEachFrame : 1; // 0x48(0x01)
	char bOrientMeshEmitters : 1; // 0x48(0x01)
	char bInheritBoneVelocity : 1; // 0x48(0x01)
	char pad_48_3 : 5; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	float InheritVelocityScale; // 0x4c(0x04)
	struct FName SkelMeshActorParamName; // 0x50(0x08)
	struct TArray<struct FName> ValidAssociatedBones; // 0x58(0x10)
	char bEnforceNormalCheck : 1; // 0x68(0x01)
	char pad_68_1 : 7; // 0x68(0x01)
	char pad_69[0x3]; // 0x69(0x03)
	struct FVector NormalToCompare; // 0x6c(0x0c)
	float NormalCheckToleranceDegrees; // 0x78(0x04)
	float NormalCheckTolerance; // 0x7c(0x04)
	struct TArray<int32_t> ValidMaterialIndices; // 0x80(0x10)
	char bInheritVertexColor : 1; // 0x90(0x01)
	char bInheritUV : 1; // 0x90(0x01)
	char pad_90_2 : 6; // 0x90(0x01)
	char pad_91[0x3]; // 0x91(0x03)
	uint32_t InheritUVChannel; // 0x94(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModulePivotOffset
// Size: 0x40 (Inherited: 0x38)
class UParticleModulePivotOffset : public UParticleModuleLocationBase {
public:

	struct FVector2D PivotOffset; // 0x38(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleSourceMovement
// Size: 0x80 (Inherited: 0x38)
class UParticleModuleSourceMovement : public UParticleModuleLocationBase {
public:

	struct FRawDistributionVector SourceMovementScale; // 0x38(0x48)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleMeshMaterial
// Size: 0x48 (Inherited: 0x38)
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase {
public:

	struct TArray<struct UMaterialInterface*> MeshMaterials; // 0x38(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleMeshRotation
// Size: 0x88 (Inherited: 0x38)
class UParticleModuleMeshRotation : public UParticleModuleRotationBase {
public:

	struct FRawDistributionVector StartRotation; // 0x38(0x48)
	char bInheritParent : 1; // 0x80(0x01)
	char pad_80_1 : 7; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleRotation
// Size: 0x68 (Inherited: 0x38)
class UParticleModuleRotation : public UParticleModuleRotationBase {
public:

	struct FRawDistributionFloat StartRotation; // 0x38(0x30)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleRotationOverLifetime
// Size: 0x70 (Inherited: 0x38)
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase {
public:

	struct FRawDistributionFloat RotationOverLife; // 0x38(0x30)
	char Scale : 1; // 0x68(0x01)
	char pad_68_1 : 7; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleMeshRotationRate
// Size: 0x80 (Inherited: 0x38)
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase {
public:

	struct FRawDistributionVector StartRotationRate; // 0x38(0x48)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// Size: 0x80 (Inherited: 0x38)
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase {
public:

	struct FRawDistributionVector LifeMultiplier; // 0x38(0x48)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleMeshRotationRateOverLife
// Size: 0x88 (Inherited: 0x38)
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase {
public:

	struct FRawDistributionVector RotRate; // 0x38(0x48)
	char bScaleRotRate : 1; // 0x80(0x01)
	char pad_80_1 : 7; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleRotationRate
// Size: 0x68 (Inherited: 0x38)
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase {
public:

	struct FRawDistributionFloat StartRotationRate; // 0x38(0x30)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleRotationRateMultiplyLife
// Size: 0x68 (Inherited: 0x38)
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase {
public:

	struct FRawDistributionFloat LifeMultiplier; // 0x38(0x30)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleOrbit
// Size: 0x138 (Inherited: 0x40)
class UParticleModuleOrbit : public UParticleModuleOrbitBase {
public:

	enum class EOrbitChainMode ChainMode; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
	struct FRawDistributionVector OffsetAmount; // 0x48(0x48)
	struct FOrbitOptions OffsetOptions; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)
	struct FRawDistributionVector RotationAmount; // 0x98(0x48)
	struct FOrbitOptions RotationOptions; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)
	struct FRawDistributionVector RotationRateAmount; // 0xe8(0x48)
	struct FOrbitOptions RotationRateOptions; // 0x130(0x04)
	char pad_134[0x4]; // 0x134(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleOrientationAxisLock
// Size: 0x40 (Inherited: 0x38)
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase {
public:

	enum class EParticleAxisLock LockAxisFlags; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleParameterDynamic
// Size: 0x50 (Inherited: 0x38)
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase {
public:

	struct TArray<struct FEmitterDynamicParameter> DynamicParams; // 0x38(0x10)
	int32_t UpdateFlags; // 0x48(0x04)
	char bUsesVelocity : 1; // 0x4c(0x01)
	char pad_4C_1 : 7; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleSize
// Size: 0x98 (Inherited: 0x38)
class UParticleModuleSize : public UParticleModuleSizeBase {
public:

	struct FRawDistributionVector StartSize; // 0x38(0x48)
	bool bConsiderCameraDistanceSizeScalar; // 0x80(0x01)
	char pad_81[0x3]; // 0x81(0x03)
	float StartCameraDistance; // 0x84(0x04)
	float EndCameraDistance; // 0x88(0x04)
	float StartSizeScalar; // 0x8c(0x04)
	float EndSizeScalar; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleSizeMultiplyLife
// Size: 0x88 (Inherited: 0x38)
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase {
public:

	struct FRawDistributionVector LifeMultiplier; // 0x38(0x48)
	char MultiplyX : 1; // 0x80(0x01)
	char MultiplyY : 1; // 0x80(0x01)
	char MultiplyZ : 1; // 0x80(0x01)
	char pad_80_3 : 5; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleSizeScale
// Size: 0x98 (Inherited: 0x38)
class UParticleModuleSizeScale : public UParticleModuleSizeBase {
public:

	struct FRawDistributionVector SizeScale; // 0x38(0x48)
	bool bConsiderCameraDistanceSizeScalar; // 0x80(0x01)
	char pad_81[0x3]; // 0x81(0x03)
	float StartCameraDistance; // 0x84(0x04)
	float EndCameraDistance; // 0x88(0x04)
	float StartSizeScalar; // 0x8c(0x04)
	float EndSizeScalar; // 0x90(0x04)
	char EnableX : 1; // 0x94(0x01)
	char EnableY : 1; // 0x94(0x01)
	char EnableZ : 1; // 0x94(0x01)
	char pad_94_3 : 5; // 0x94(0x01)
	char pad_95[0x3]; // 0x95(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleSizeScaleBySpeed
// Size: 0x48 (Inherited: 0x38)
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase {
public:

	struct FVector2D SpeedScale; // 0x38(0x08)
	struct FVector2D MaxScale; // 0x40(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleSpawn
// Size: 0xf0 (Inherited: 0x40)
class UParticleModuleSpawn : public UParticleModuleSpawnBase {
public:

	struct FRawDistributionFloat Rate; // 0x40(0x30)
	struct FRawDistributionFloat RateScale; // 0x70(0x30)
	enum class EParticleBurstMethod ParticleBurstMethod; // 0xa0(0x01)
	char pad_A1[0x7]; // 0xa1(0x07)
	struct TArray<struct FParticleBurst> BurstList; // 0xa8(0x10)
	struct FRawDistributionFloat BurstScale; // 0xb8(0x30)
	char bApplyGlobalSpawnRateScale : 1; // 0xe8(0x01)
	char pad_E8_1 : 7; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleSpawnPerUnit
// Size: 0x80 (Inherited: 0x40)
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase {
public:

	float UnitScalar; // 0x40(0x04)
	float MovementTolerance; // 0x44(0x04)
	struct FRawDistributionFloat SpawnPerUnit; // 0x48(0x30)
	float MaxFrameDistance; // 0x78(0x04)
	char bIgnoreSpawnRateWhenMoving : 1; // 0x7c(0x01)
	char bIgnoreMovementAlongX : 1; // 0x7c(0x01)
	char bIgnoreMovementAlongY : 1; // 0x7c(0x01)
	char bIgnoreMovementAlongZ : 1; // 0x7c(0x01)
	char pad_7C_4 : 4; // 0x7c(0x01)
	char pad_7D[0x3]; // 0x7d(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleSubUV
// Size: 0x78 (Inherited: 0x38)
class UParticleModuleSubUV : public UParticleModuleSubUVBase {
public:

	struct USubUVAnimation* Animation; // 0x38(0x08)
	struct FRawDistributionFloat SubImageIndex; // 0x40(0x30)
	char bUseRealTime : 1; // 0x70(0x01)
	char pad_70_1 : 7; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleTrailSource
// Size: 0x98 (Inherited: 0x38)
class UParticleModuleTrailSource : public UParticleModuleTrailBase {
public:

	enum class ETrail2SourceMethod SourceMethod; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FName SourceName; // 0x3c(0x08)
	char pad_44[0x4]; // 0x44(0x04)
	struct FRawDistributionFloat SourceStrength; // 0x48(0x30)
	char bLockSourceStength : 1; // 0x78(0x01)
	char pad_78_1 : 7; // 0x78(0x01)
	char pad_79[0x3]; // 0x79(0x03)
	int32_t SourceOffsetCount; // 0x7c(0x04)
	struct TArray<struct FVector> SourceOffsetDefaults; // 0x80(0x10)
	enum class EParticleSourceSelectionMethod SelectionMethod; // 0x90(0x01)
	char pad_91[0x3]; // 0x91(0x03)
	char bInheritRotation : 1; // 0x94(0x01)
	char pad_94_1 : 7; // 0x94(0x01)
	char pad_95[0x3]; // 0x95(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleTypeDataAnimTrail
// Size: 0x50 (Inherited: 0x38)
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase {
public:

	char bDeadTrailsOnDeactivate : 1; // 0x38(0x01)
	char bEnablePreviousTangentRecalculation : 1; // 0x38(0x01)
	char bTangentRecalculationEveryFrame : 1; // 0x38(0x01)
	char pad_38_3 : 5; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	float TilingDistance; // 0x3c(0x04)
	float DistanceTessellationStepSize; // 0x40(0x04)
	float TangentTessellationStepSize; // 0x44(0x04)
	float WidthTessellationStepSize; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleTypeDataBeam2
// Size: 0x158 (Inherited: 0x38)
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase {
public:

	enum class EBeam2Method BeamMethod; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	int32_t TextureTile; // 0x3c(0x04)
	float TextureTileDistance; // 0x40(0x04)
	int32_t Sheets; // 0x44(0x04)
	int32_t MaxBeamCount; // 0x48(0x04)
	float Speed; // 0x4c(0x04)
	int32_t InterpolationPoints; // 0x50(0x04)
	char bAlwaysOn : 1; // 0x54(0x01)
	char pad_54_1 : 7; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
	int32_t UpVectorStepSize; // 0x58(0x04)
	struct FName BranchParentName; // 0x5c(0x08)
	char pad_64[0x4]; // 0x64(0x04)
	struct FRawDistributionFloat Distance; // 0x68(0x30)
	enum class EBeamTaperMethod TaperMethod; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
	struct FRawDistributionFloat TaperFactor; // 0xa0(0x30)
	struct FRawDistributionFloat TaperScale; // 0xd0(0x30)
	char RenderGeometry : 1; // 0x100(0x01)
	char RenderDirectLine : 1; // 0x100(0x01)
	char RenderLines : 1; // 0x100(0x01)
	char RenderTessellation : 1; // 0x100(0x01)
	char pad_100_4 : 4; // 0x100(0x01)
	char pad_101[0x57]; // 0x101(0x57)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleTypeDataGpu
// Size: 0x430 (Inherited: 0x38)
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase {
public:

	char pad_38[0x8]; // 0x38(0x08)
	struct FGPUSpriteEmitterInfo EmitterInfo; // 0x40(0x280)
	struct FGPUSpriteResourceData ResourceData; // 0x2c0(0x160)
	float CameraMotionBlurAmount; // 0x420(0x04)
	char bClearExistingParticlesOnInit : 1; // 0x424(0x01)
	char pad_424_1 : 7; // 0x424(0x01)
	char pad_425[0xb]; // 0x425(0x0b)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleTypeDataMesh
// Size: 0xa0 (Inherited: 0x38)
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase {
public:

	struct UStaticMesh* Mesh; // 0x38(0x08)
	char pad_40[0x8]; // 0x40(0x08)
	float LODSizeScale; // 0x48(0x04)
	char bUseStaticMeshLODs : 1; // 0x4c(0x01)
	char CastShadows : 1; // 0x4c(0x01)
	char DoCollisions : 1; // 0x4c(0x01)
	char pad_4C_3 : 5; // 0x4c(0x01)
	enum class EMeshScreenAlignment MeshAlignment; // 0x4d(0x01)
	char bOverrideMaterial : 1; // 0x4e(0x01)
	char bOverrideDefaultMotionBlurSettings : 1; // 0x4e(0x01)
	char bEnableMotionBlur : 1; // 0x4e(0x01)
	char pad_4E_3 : 5; // 0x4e(0x01)
	char pad_4F[0x1]; // 0x4f(0x01)
	struct FRawDistributionVector RollPitchYawRange; // 0x50(0x48)
	enum class EParticleAxisLock AxisLockOption; // 0x98(0x01)
	char bCameraFacing : 1; // 0x99(0x01)
	char pad_99_1 : 7; // 0x99(0x01)
	enum class EMeshCameraFacingUpAxis CameraFacingUpAxisOption; // 0x9a(0x01)
	enum class EMeshCameraFacingOptions CameraFacingOption; // 0x9b(0x01)
	char bApplyParticleRotationAsSpin : 1; // 0x9c(0x01)
	char bFaceCameraDirectionRatherThanPosition : 1; // 0x9c(0x01)
	char bCollisionsConsiderPartilceSize : 1; // 0x9c(0x01)
	char pad_9C_3 : 5; // 0x9c(0x01)
	char pad_9D[0x3]; // 0x9d(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleTypeDataRibbon
// Size: 0x68 (Inherited: 0x38)
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase {
public:

	int32_t MaxTessellationBetweenParticles; // 0x38(0x04)
	int32_t SheetsPerTrail; // 0x3c(0x04)
	int32_t MaxTrailCount; // 0x40(0x04)
	int32_t MaxParticleInTrailCount; // 0x44(0x04)
	char bDeadTrailsOnDeactivate : 1; // 0x48(0x01)
	char bDeadTrailsOnSourceLoss : 1; // 0x48(0x01)
	char bClipSourceSegement : 1; // 0x48(0x01)
	char bEnablePreviousTangentRecalculation : 1; // 0x48(0x01)
	char bTangentRecalculationEveryFrame : 1; // 0x48(0x01)
	char bSpawnInitialParticle : 1; // 0x48(0x01)
	char pad_48_6 : 2; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	enum class ETrailsRenderAxisOption RenderAxis; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	float TangentSpawningScalar; // 0x50(0x04)
	char bRenderGeometry : 1; // 0x54(0x01)
	char bRenderSpawnPoints : 1; // 0x54(0x01)
	char bRenderTangents : 1; // 0x54(0x01)
	char bRenderTessellation : 1; // 0x54(0x01)
	char pad_54_4 : 4; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
	float TilingDistance; // 0x58(0x04)
	float DistanceTessellationStepSize; // 0x5c(0x04)
	char bEnableTangentDiffInterpScale : 1; // 0x60(0x01)
	char pad_60_1 : 7; // 0x60(0x01)
	char pad_61[0x3]; // 0x61(0x03)
	float TangentTessellationScalar; // 0x64(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleVectorFieldGlobal
// Size: 0x48 (Inherited: 0x38)
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase {
public:

	char bOverrideGlobalVectorFieldTightness : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	float GlobalVectorFieldScale; // 0x3c(0x04)
	float GlobalVectorFieldTightness; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleVectorFieldLocal
// Size: 0x70 (Inherited: 0x38)
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase {
public:

	struct UVectorField* VectorField; // 0x38(0x08)
	struct FVector RelativeTranslation; // 0x40(0x0c)
	struct FRotator RelativeRotation; // 0x4c(0x0c)
	struct FVector RelativeScale3D; // 0x58(0x0c)
	float Intensity; // 0x64(0x04)
	float Tightness; // 0x68(0x04)
	char bIgnoreComponentTransform : 1; // 0x6c(0x01)
	char bTileX : 1; // 0x6c(0x01)
	char bTileY : 1; // 0x6c(0x01)
	char bTileZ : 1; // 0x6c(0x01)
	char bUseFixDT : 1; // 0x6c(0x01)
	char pad_6C_5 : 3; // 0x6c(0x01)
	char pad_6D[0x3]; // 0x6d(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleVectorFieldRotation
// Size: 0x50 (Inherited: 0x38)
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase {
public:

	struct FVector MinInitialRotation; // 0x38(0x0c)
	struct FVector MaxInitialRotation; // 0x44(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleVectorFieldRotationRate
// Size: 0x48 (Inherited: 0x38)
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase {
public:

	struct FVector RotationRate; // 0x38(0x0c)
	char pad_44[0x4]; // 0x44(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleVectorFieldScale
// Size: 0x70 (Inherited: 0x38)
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase {
public:

	struct UDistributionFloat* VectorFieldScale; // 0x38(0x08)
	struct FRawDistributionFloat VectorFieldScaleRaw; // 0x40(0x30)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleVectorFieldScaleOverLife
// Size: 0x70 (Inherited: 0x38)
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase {
public:

	struct UDistributionFloat* VectorFieldScaleOverLife; // 0x38(0x08)
	struct FRawDistributionFloat VectorFieldScaleOverLifeRaw; // 0x40(0x30)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleVelocity
// Size: 0xb8 (Inherited: 0x40)
class UParticleModuleVelocity : public UParticleModuleVelocityBase {
public:

	struct FRawDistributionVector StartVelocity; // 0x40(0x48)
	struct FRawDistributionFloat StartVelocityRadial; // 0x88(0x30)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleVelocityCone
// Size: 0xb0 (Inherited: 0x40)
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase {
public:

	struct FRawDistributionFloat Angle; // 0x40(0x30)
	struct FRawDistributionFloat Velocity; // 0x70(0x30)
	struct FVector Direction; // 0xa0(0x0c)
	char pad_AC[0x4]; // 0xac(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleVelocityInheritParent
// Size: 0x88 (Inherited: 0x40)
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase {
public:

	struct FRawDistributionVector Scale; // 0x40(0x48)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleVelocityOverLifetime
// Size: 0x90 (Inherited: 0x40)
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase {
public:

	struct FRawDistributionVector VelOverLife; // 0x40(0x48)
	char Absolute : 1; // 0x88(0x01)
	char pad_88_1 : 7; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleWindDirectionalSource
// Size: 0x38 (Inherited: 0x38)
class UParticleModuleWindDirectionalSource : public UParticleModuleWindBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleWindMpc
// Size: 0x58 (Inherited: 0x38)
class UParticleModuleWindMpc : public UParticleModuleWindBase {
public:

	struct UMaterialParameterCollection* ParameterCollection_Destop; // 0x38(0x08)
	struct UMaterialParameterCollection* ParameterCollection_Mobile; // 0x40(0x08)
	struct FName WindDirectionName; // 0x48(0x08)
	struct FName WindStrengthName; // 0x50(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNodeWavePlayer
// Size: 0x80 (Inherited: 0x48)
class USoundNodeWavePlayer : public USoundNodeAssetReferencer {
public:

	/*struct TSoftObjectPtr<USoundWave>*/char SoundWaveAssetPtr[0x28]; // 0x48(0x28)
	struct USoundWave* SoundWave; // 0x70(0x08)
	char pad_78_0 : 1; // 0x78(0x01)
	char bLooping : 1; // 0x78(0x01)
	char pad_78_2 : 6; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SoundNodeParamCrossFade
// Size: 0x60 (Inherited: 0x58)
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade {
public:

	struct FName ParamName; // 0x58(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.GameMode
// Size: 0x460 (Inherited: 0x418)
class AGameMode : public AGameModeBase {
public:

	struct FName MatchState; // 0x418(0x08)
	char bDelayedStart : 1; // 0x420(0x01)
	char pad_420_1 : 7; // 0x420(0x01)
	char pad_421[0x3]; // 0x421(0x03)
	int32_t NumSpectators; // 0x424(0x04)
	int32_t NumPlayers; // 0x428(0x04)
	int32_t NumBots; // 0x42c(0x04)
	float MinRespawnDelay; // 0x430(0x04)
	int32_t NumTravellingPlayers; // 0x434(0x04)
	struct UClass* EngineMessageClass; // 0x438(0x08)
	struct TArray<struct APlayerState*> InactivePlayerArray; // 0x440(0x10)
	float InactivePlayerStateLifeSpan; // 0x450(0x04)
	int32_t MaxInactivePlayers; // 0x454(0x04)
	bool bHandleDedicatedServerReplays; // 0x458(0x01)
	char pad_459[0x7]; // 0x459(0x07)

	void StartMatch(); // Function Engine.GameMode.StartMatch // (Native|Public|BlueprintCallable) // @ game+0x64225d0
	void SetBandwidthLimit(float AsyncIOBandwidthLimit); // Function Engine.GameMode.SetBandwidthLimit // (Exec|Native|Public) // @ game+0x9dc05e0
	void Say(struct FString Msg); // Function Engine.GameMode.Say // (Exec|Native|Public|BlueprintCallable) // @ game+0x9dc0510
	void RestartGame(); // Function Engine.GameMode.RestartGame // (Native|Public|BlueprintCallable) // @ game+0x9dc01c0
	bool ReadyToStartMatch(); // Function Engine.GameMode.ReadyToStartMatch // (Native|Event|Protected|BlueprintEvent) // @ game+0x9dbff10
	bool ReadyToEndMatch(); // Function Engine.GameMode.ReadyToEndMatch // (Native|Event|Protected|BlueprintEvent) // @ game+0x9dbfee0
	void K2_OnSetMatchState(struct FName NewState); // Function Engine.GameMode.K2_OnSetMatchState // (Event|Protected|BlueprintEvent) // @ game+0x7ed88c0
	bool IsMatchInProgress(); // Function Engine.GameMode.IsMatchInProgress // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c6ee0
	bool HasMatchEnded(); // Function Engine.GameMode.HasMatchEnded // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c7360
	struct FName GetMatchState(); // Function Engine.GameMode.GetMatchState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dbce50
	void EndMatch(); // Function Engine.GameMode.EndMatch // (Native|Public|BlueprintCallable) // @ game+0x9dbb7c0
	void AbortMatch(); // Function Engine.GameMode.AbortMatch // (Native|Public|BlueprintCallable) // @ game+0x62e5350
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.GameState
// Size: 0x3d8 (Inherited: 0x3b8)
class AGameState : public AGameStateBase {
public:

	struct FName MatchState; // 0x3b8(0x08)
	struct FName PreviousMatchState; // 0x3c0(0x08)
	int32_t ElapsedTime; // 0x3c8(0x04)
	char pad_3CC[0xc]; // 0x3cc(0x0c)

	void OnRep_MatchState(); // Function Engine.GameState.OnRep_MatchState // (Native|Public) // @ game+0x128d870
	void OnRep_ElapsedTime(); // Function Engine.GameState.OnRep_ElapsedTime // (Native|Public) // @ game+0xbcc840
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PhysicsVolume
// Size: 0x3c0 (Inherited: 0x3b0)
class APhysicsVolume : public AVolume {
public:

	float TerminalVelocity; // 0x3b0(0x04)
	int32_t Priority; // 0x3b4(0x04)
	float FluidFriction; // 0x3b8(0x04)
	char bWaterVolume : 1; // 0x3bc(0x01)
	char bPhysicsOnContact : 1; // 0x3bc(0x01)
	char pad_3BC_2 : 6; // 0x3bc(0x01)
	char pad_3BD[0x3]; // 0x3bd(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AudioVolume
// Size: 0x400 (Inherited: 0x3b0)
class AAudioVolume : public AVolume {
public:

	float Priority; // 0x3b0(0x04)
	char bEnabled : 1; // 0x3b4(0x01)
	char pad_3B4_1 : 7; // 0x3b4(0x01)
	char pad_3B5[0x3]; // 0x3b5(0x03)
	struct FReverbSettings Settings; // 0x3b8(0x20)
	struct FInteriorSettings AmbientZoneSettings; // 0x3d8(0x24)
	char pad_3FC[0x4]; // 0x3fc(0x04)

	void SetReverbSettings(struct FReverbSettings& NewReverbSettings); // Function Engine.AudioVolume.SetReverbSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9d7cdb0
	void SetPriority(float NewPriority); // Function Engine.AudioVolume.SetPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x9d7cd30
	void SetInteriorSettings(struct FInteriorSettings& NewInteriorSettings); // Function Engine.AudioVolume.SetInteriorSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9d7cc90
	void SetEnabled(bool bNewEnabled); // Function Engine.AudioVolume.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x9d7cc00
	void OnRep_bEnabled(); // Function Engine.AudioVolume.OnRep_bEnabled // (Final|Native|Private) // @ game+0xbcb8c0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BlockingVolume
// Size: 0x3b0 (Inherited: 0x3b0)
class ABlockingVolume : public AVolume {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CameraBlockingVolume
// Size: 0x3b0 (Inherited: 0x3b0)
class ACameraBlockingVolume : public AVolume {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CullDistanceVolume
// Size: 0x3c8 (Inherited: 0x3b0)
class ACullDistanceVolume : public AVolume {
public:

	struct TArray<struct FCullDistanceSizePair> CullDistances; // 0x3b0(0x10)
	char bEnabled : 1; // 0x3c0(0x01)
	char pad_3C0_1 : 7; // 0x3c0(0x01)
	char pad_3C1[0x7]; // 0x3c1(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LevelStreamingVolume
// Size: 0x3c8 (Inherited: 0x3b0)
class ALevelStreamingVolume : public AVolume {
public:

	struct TArray<struct FName> StreamingLevelNames; // 0x3b0(0x10)
	char bEditorPreVisOnly : 1; // 0x3c0(0x01)
	char bDisabled : 1; // 0x3c0(0x01)
	char pad_3C0_2 : 6; // 0x3c0(0x01)
	char pad_3C1[0x3]; // 0x3c1(0x03)
	enum class EStreamingVolumeUsage StreamingUsage; // 0x3c4(0x01)
	char pad_3C5[0x3]; // 0x3c5(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LightImportanceVolume
// Size: 0x4e0 (Inherited: 0x3b0)
class ALightImportanceVolume : public AVolume {
public:

	/*struct TSoftObjectPtr<ULightImportanceAsset>*/char LightImportanceDataSoftPtr[0x28]; // 0x3b0(0x28)
	char pad_3D8[0xe8]; // 0x3d8(0xe8)
	struct FGuid LightImportanceVolumeGuid; // 0x4c0(0x10)
	bool bDrawDebugBox; // 0x4d0(0x01)
	char pad_4D1[0xf]; // 0x4d1(0x0f)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LightmassCharacterIndirectDetailVolume
// Size: 0x3b0 (Inherited: 0x3b0)
class ALightmassCharacterIndirectDetailVolume : public AVolume {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LightmassImportanceVolume
// Size: 0x3b0 (Inherited: 0x3b0)
class ALightmassImportanceVolume : public AVolume {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LightShadowVolume
// Size: 0x3b8 (Inherited: 0x3b0)
class ALightShadowVolume : public AVolume {
public:

	bool bEnableShadowVolume; // 0x3b0(0x01)
	char pad_3B1[0x7]; // 0x3b1(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LocalLightBakeVolume
// Size: 0x450 (Inherited: 0x3b0)
class ALocalLightBakeVolume : public AVolume {
public:

	enum class ELocalLightBakeMode BakeMode; // 0x3b0(0x01)
	bool bReflectionCaptureDirectionalLight; // 0x3b1(0x01)
	bool bReflectionCaptureSkyLight; // 0x3b2(0x01)
	bool bReflectionCaptureExponentialHeightFog; // 0x3b3(0x01)
	int32_t ReflectionCaptureBounces; // 0x3b4(0x04)
	bool bOpenLightMapSizeLimit; // 0x3b8(0x01)
	bool bEnableEnvironmentScene; // 0x3b9(0x01)
	char pad_3BA[0x2]; // 0x3ba(0x02)
	struct FLightMapAtlasPackingSettings LightMapAtlasPackingSettings; // 0x3bc(0x20)
	struct FLightMapAtlasPackingSettings HDLightMapAtlasPackingSettings; // 0x3dc(0x20)
	struct FColor ReplaceAlbedo; // 0x3fc(0x04)
	float AlphaBoost; // 0x400(0x04)
	float DiffuseBoost; // 0x404(0x04)
	struct TArray<struct FSoftObjectPath> BakingLevelList; // 0x408(0x10)
	struct TArray<struct FSoftObjectPath> BakingLevelList_AddingForHD; // 0x418(0x10)
	struct TArray<struct FSoftObjectPath> BakingLevelList_AddingForMobile; // 0x428(0x10)
	enum class EStaticShadowmapScale StaticSHDirectionScale; // 0x438(0x01)
	bool bUseAmbientOcclusion; // 0x439(0x01)
	char pad_43A[0x2]; // 0x43a(0x02)
	float MaxOcclusionDistance; // 0x43c(0x04)
	float OcclusionExponent; // 0x440(0x04)
	float SkipDistance; // 0x444(0x04)
	bool bBakeLoadGIVolume; // 0x448(0x01)
	char pad_449[0x7]; // 0x449(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MeshMergeCullingVolume
// Size: 0x3b0 (Inherited: 0x3b0)
class AMeshMergeCullingVolume : public AVolume {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PostProcessVolume
// Size: 0xd70 (Inherited: 0x3b0)
class APostProcessVolume : public AVolume {
public:

	char pad_3B0[0x10]; // 0x3b0(0x10)
	struct FPostProcessSettings Settings; // 0x3c0(0x950)
	float Priority; // 0xd10(0x04)
	float BlendRadius; // 0xd14(0x04)
	float BlendWeight; // 0xd18(0x04)
	char bEnabled : 1; // 0xd1c(0x01)
	char bUnbound : 1; // 0xd1c(0x01)
	char pad_D1C_2 : 6; // 0xd1c(0x01)
	char pad_D1D[0x3]; // 0xd1d(0x03)
	/*struct TSoftObjectPtr<UTexture>*/char AsyncColorGradingLUT[0x28]; // 0xd20(0x28)
	/*struct TSoftObjectPtr<UTexture>*/char AsyncLMT_LUT[0x28]; // 0xd48(0x28)

	void SetAsyncLMT_LUT(/*struct TSoftObjectPtr<UTexture> NewTexture*/); // Function Engine.PostProcessVolume.SetAsyncLMT_LUT // (Final|Native|Public|BlueprintCallable) // @ game+0x9e83290
	void SetAsyncColorGradingLUT(/*struct TSoftObjectPtr<UTexture> NewTexture*/); // Function Engine.PostProcessVolume.SetAsyncColorGradingLUT // (Final|Native|Public|BlueprintCallable) // @ game+0x9e83100
	void AddOrUpdateBlendableViewSize(/*struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight, struct FVector2D ViewportLeftTop, struct FVector2D ViewportSize*/); // Function Engine.PostProcessVolume.AddOrUpdateBlendableViewSize // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e82800
	void AddOrUpdateBlendable(/*struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight*/); // Function Engine.PostProcessVolume.AddOrUpdateBlendable // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9e82490
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PrecomputedVisibilityOverrideVolume
// Size: 0x3e0 (Inherited: 0x3b0)
class APrecomputedVisibilityOverrideVolume : public AVolume {
public:

	struct TArray<struct AActor*> OverrideVisibleActors; // 0x3b0(0x10)
	struct TArray<struct AActor*> OverrideInvisibleActors; // 0x3c0(0x10)
	struct TArray<struct FName> OverrideInvisibleLevels; // 0x3d0(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PrecomputedVisibilityVolume
// Size: 0x3b0 (Inherited: 0x3b0)
class APrecomputedVisibilityVolume : public AVolume {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ExposureOverrideVolume
// Size: 0x3f8 (Inherited: 0x3b0)
class AExposureOverrideVolume : public AVolume {
public:

	bool UseAsEV_Volume; // 0x3b0(0x01)
	bool isInRoom; // 0x3b1(0x01)
	char pad_3B2[0x2]; // 0x3b2(0x02)
	float Priority; // 0x3b4(0x04)
	float Compensation; // 0x3b8(0x04)
	float MinEV; // 0x3bc(0x04)
	float MaxEV; // 0x3c0(0x04)
	struct FExposureSpeedOverrides SpeedOverrides; // 0x3c4(0x0c)
	float AverageVolume; // 0x3d0(0x04)
	char pad_3D4[0x24]; // 0x3d4(0x24)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.GIReplaceVolume
// Size: 0x3d0 (Inherited: 0x3b0)
class AGIReplaceVolume : public AVolume {
public:

	bool EnableReplace; // 0x3b0(0x01)
	char pad_3B1[0x3]; // 0x3b1(0x03)
	float FadeLength; // 0x3b4(0x04)
	float ReplaceSkyAO; // 0x3b8(0x04)
	struct FLinearColor ReplaceBounce; // 0x3bc(0x10)
	char pad_3CC[0x4]; // 0x3cc(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TriggerVolume
// Size: 0x3b0 (Inherited: 0x3b0)
class ATriggerVolume : public AVolume {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.VolumetricLightmapDensityVolume
// Size: 0x3b8 (Inherited: 0x3b0)
class AVolumetricLightmapDensityVolume : public AVolume {
public:

	struct FInt32Interval AllowedMipLevelRange; // 0x3b0(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SpectatorPawn
// Size: 0x400 (Inherited: 0x400)
class ASpectatorPawn : public ADefaultPawn {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DebugCameraController
// Size: 0x7d0 (Inherited: 0x6d0)
class ADebugCameraController : public APlayerController {
public:

	char bShowSelectedInfo : 1; // 0x6d0(0x01)
	char bIsFrozenRendering : 1; // 0x6d0(0x01)
	char bIsOrbitingSelectedActor : 1; // 0x6d0(0x01)
	char bOrbitPivotUseCenter : 1; // 0x6d0(0x01)
	char bEnableBufferVisualization : 1; // 0x6d0(0x01)
	char bEnableBufferVisualizationFullMode : 1; // 0x6d0(0x01)
	char bIsBufferVisualizationInputSetup : 1; // 0x6d0(0x01)
	char bLastDisplayEnabled : 1; // 0x6d0(0x01)
	char pad_6D1[0x7]; // 0x6d1(0x07)
	struct UDrawFrustumComponent* DrawFrustum; // 0x6d8(0x08)
	struct AActor* SelectedActor; // 0x6e0(0x08)
	struct UPrimitiveComponent* SelectedComponent; // 0x6e8(0x08)
	struct FHitResult SelectedHitPoint; // 0x6f0(0x88)
	struct APlayerController* OriginalControllerRef; // 0x778(0x08)
	struct UPlayer* OriginalPlayer; // 0x780(0x08)
	float SpeedScale; // 0x788(0x04)
	float InitialMaxSpeed; // 0x78c(0x04)
	float InitialAccel; // 0x790(0x04)
	float InitialDecel; // 0x794(0x04)
	char pad_798[0x38]; // 0x798(0x38)

	void ToggleDisplay(); // Function Engine.DebugCameraController.ToggleDisplay // (Final|Native|Public|BlueprintCallable) // @ game+0x9da0cd0
	void ShowDebugSelectedInfo(); // Function Engine.DebugCameraController.ShowDebugSelectedInfo // (Exec|Native|Public) // @ game+0x9da0cb0
	void SetPawnMovementSpeedScale(float NewSpeedScale); // Function Engine.DebugCameraController.SetPawnMovementSpeedScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9da0bb0
	void ReceiveOnDeactivate(struct APlayerController* RestoredPC); // Function Engine.DebugCameraController.ReceiveOnDeactivate // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveOnActorSelected(struct AActor* NewSelectedActor, struct FVector& SelectHitLocation, struct FVector& SelectHitNormal, struct FHitResult& Hit); // Function Engine.DebugCameraController.ReceiveOnActorSelected // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x7ed88c0
	void ReceiveOnActivate(struct APlayerController* OriginalPC); // Function Engine.DebugCameraController.ReceiveOnActivate // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	struct AActor* GetSelectedActor(); // Function Engine.DebugCameraController.GetSelectedActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9da0790
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PlayerStartPIE
// Size: 0x3a8 (Inherited: 0x3a8)
class APlayerStartPIE : public APlayerStart {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.GeneratedMeshAreaLight
// Size: 0x390 (Inherited: 0x390)
class AGeneratedMeshAreaLight : public ASpotLight {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SplineComponent
// Size: 0x650 (Inherited: 0x560)
class USplineComponent : public UPrimitiveComponent {
public:

	struct FSplineCurves SplineCurves; // 0x560(0x68)
	struct FInterpCurveVector SplineInfo; // 0x5c8(0x18)
	struct FInterpCurveQuat SplineRotInfo; // 0x5e0(0x18)
	struct FInterpCurveVector SplineScaleInfo; // 0x5f8(0x18)
	struct FInterpCurveFloat SplineReparamTable; // 0x610(0x18)
	bool bAllowSplineEditingPerInstance; // 0x628(0x01)
	char pad_629[0x3]; // 0x629(0x03)
	int32_t ReparamStepsPerSegment; // 0x62c(0x04)
	float Duration; // 0x630(0x04)
	bool bStationaryEndpoints; // 0x634(0x01)
	bool bSplineHasBeenEdited; // 0x635(0x01)
	bool bModifiedByConstructionScript; // 0x636(0x01)
	bool bInputSplinePointsToConstructionScript; // 0x637(0x01)
	bool bDrawDebug; // 0x638(0x01)
	bool bClosedLoop; // 0x639(0x01)
	bool bLoopPositionOverride; // 0x63a(0x01)
	char pad_63B[0x1]; // 0x63b(0x01)
	float LoopPosition; // 0x63c(0x04)
	struct FVector DefaultUpVector; // 0x640(0x0c)
	char pad_64C[0x4]; // 0x64c(0x04)

	void UpdateSpline(); // Function Engine.SplineComponent.UpdateSpline // (Native|Public|BlueprintCallable) // @ game+0x3578900
	void SetWorldLocationAtSplinePoint(int32_t PointIndex, struct FVector& InLocation); // Function Engine.SplineComponent.SetWorldLocationAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9eb80a0
	void SetUpVectorAtSplinePoint(int32_t PointIndex, struct FVector& InUpVector, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetUpVectorAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9eb7f40
	void SetUnselectedSplineSegmentColor(struct FLinearColor& SegmentColor); // Function Engine.SplineComponent.SetUnselectedSplineSegmentColor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9eb75f0
	void SetTangentsAtSplinePoint(int32_t PointIndex, struct FVector& InArriveTangent, struct FVector& InLeaveTangent, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetTangentsAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9eb7d80
	void SetTangentAtSplinePoint(int32_t PointIndex, struct FVector& InTangent, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetTangentAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9eb7c20
	void SetSplineWorldPoints(struct TArray<struct FVector>& Points); // Function Engine.SplineComponent.SetSplineWorldPoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9eb7a80
	void SetSplinePointType(int32_t PointIndex, enum class ESplinePointType Type, bool bUpdateSpline); // Function Engine.SplineComponent.SetSplinePointType // (Final|Native|Public|BlueprintCallable) // @ game+0x9eb7830
	void SetSplinePoints(struct TArray<struct FVector>& Points, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetSplinePoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9eb7930
	void SetSplineLocalPoints(struct TArray<struct FVector>& Points); // Function Engine.SplineComponent.SetSplineLocalPoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9eb7750
	void SetSelectedSplineSegmentColor(struct FLinearColor& SegmentColor); // Function Engine.SplineComponent.SetSelectedSplineSegmentColor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9eb75f0
	void SetLocationAtSplinePoint(int32_t PointIndex, struct FVector& InLocation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetLocationAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9eb7490
	void SetDrawDebug(bool bShow); // Function Engine.SplineComponent.SetDrawDebug // (Final|Native|Public|BlueprintCallable) // @ game+0x9eb7400
	void SetDefaultUpVector(struct FVector& UpVector, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.SetDefaultUpVector // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9eb7320
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline); // Function Engine.SplineComponent.SetClosedLoopAtPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x9eb7210
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline); // Function Engine.SplineComponent.SetClosedLoop // (Final|Native|Public|BlueprintCallable) // @ game+0x9eb7140
	void RemoveSplinePoint(int32_t Index, bool bUpdateSpline); // Function Engine.SplineComponent.RemoveSplinePoint // (Final|Native|Public|BlueprintCallable) // @ game+0x9eb7080
	bool IsClosedLoop(); // Function Engine.SplineComponent.IsClosedLoop // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb7050
	struct FVector GetWorldTangentAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb6fa0
	struct FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldRotationAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb6eb0
	struct FRotator GetWorldRotationAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb6e00
	struct FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldLocationAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb6d10
	struct FVector GetWorldLocationAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetWorldLocationAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb6c60
	struct FVector GetWorldLocationAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb6bb0
	struct FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldDirectionAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb6ac0
	struct FVector GetWorldDirectionAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb6a10
	struct FVector GetVectorPropertyAtSplinePoint(int32_t Index, struct FName PropertyName); // Function Engine.SplineComponent.GetVectorPropertyAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb6940
	struct FVector GetVectorPropertyAtSplineInputKey(float InKey, struct FName PropertyName); // Function Engine.SplineComponent.GetVectorPropertyAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb6860
	struct FVector GetUpVectorAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetUpVectorAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb6740
	struct FVector GetUpVectorAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb6670
	struct FVector GetUpVectorAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb6590
	struct FVector GetUpVectorAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb64b0
	struct FTransform GetTransformAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb6320
	struct FTransform GetTransformAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb61e0
	struct FTransform GetTransformAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb6090
	struct FTransform GetTransformAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb5f40
	struct FVector GetTangentAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetTangentAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb5e20
	struct FVector GetTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb4600
	struct FVector GetTangentAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb5d40
	struct FVector GetTangentAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb5c60
	enum class ESplinePointType GetSplinePointType(int32_t PointIndex); // Function Engine.SplineComponent.GetSplinePointType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb5bd0
	float GetSplineLength(); // Function Engine.SplineComponent.GetSplineLength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb5ba0
	struct FVector GetScaleAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetScaleAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb5a30
	struct FVector GetScaleAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetScaleAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb5990
	struct FVector GetScaleAtSplineInputKey(float InKey); // Function Engine.SplineComponent.GetScaleAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb58f0
	struct FVector GetScaleAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetScaleAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb5850
	struct FRotator GetRotationAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetRotationAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb5730
	struct FRotator GetRotationAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb5660
	struct FRotator GetRotationAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb5580
	struct FRotator GetRotationAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb54a0
	float GetRollAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetRollAtTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb5390
	float GetRollAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRollAtSplinePoint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb52d0
	float GetRollAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRollAtSplineInputKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb5200
	float GetRollAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRollAtDistanceAlongSpline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb5130
	struct FVector GetRightVectorAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetRightVectorAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb5010
	struct FVector GetRightVectorAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb4f40
	struct FVector GetRightVectorAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb4e60
	struct FVector GetRightVectorAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb4d80
	int32_t GetNumberOfSplineSegments(); // Function Engine.SplineComponent.GetNumberOfSplineSegments // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb4d50
	int32_t GetNumberOfSplinePoints(); // Function Engine.SplineComponent.GetNumberOfSplinePoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb4d20
	struct FVector GetLocationAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetLocationAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb4c00
	struct FVector GetLocationAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb4b30
	struct FVector GetLocationAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb4a50
	struct FVector GetLocationAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb4970
	void GetLocationAndTangentAtSplinePoint(int32_t PointIndex, struct FVector& Location, struct FVector& Tangent, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAndTangentAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb4800
	void GetLocalLocationAndTangentAtSplinePoint(int32_t PointIndex, struct FVector& LocalLocation, struct FVector& LocalTangent); // Function Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb46d0
	struct FVector GetLeaveTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLeaveTangentAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb4600
	float GetInputKeyAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb4570
	float GetFloatPropertyAtSplinePoint(int32_t Index, struct FName PropertyName); // Function Engine.SplineComponent.GetFloatPropertyAtSplinePoint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb44b0
	float GetFloatPropertyAtSplineInputKey(float InKey, struct FName PropertyName); // Function Engine.SplineComponent.GetFloatPropertyAtSplineInputKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb43e0
	float GetDistanceAlongSplineAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb4350
	struct FVector GetDirectionAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetDirectionAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb4230
	struct FVector GetDirectionAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb4160
	struct FVector GetDirectionAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb4080
	struct FVector GetDirectionAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb3fa0
	struct FVector GetDefaultUpVector(enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDefaultUpVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb3f00
	struct FVector GetArriveTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetArriveTangentAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb3e30
	struct FVector FindUpVectorClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindUpVectorClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb3d40
	struct FTransform FindTransformClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.FindTransformClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb3bf0
	struct FVector FindTangentClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindTangentClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb3b00
	struct FVector FindScaleClosestToWorldLocation(struct FVector& WorldLocation); // Function Engine.SplineComponent.FindScaleClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb3a50
	struct FRotator FindRotationClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindRotationClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb3960
	float FindRollClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindRollClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb3880
	struct FVector FindRightVectorClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindRightVectorClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb3790
	struct FVector FindLocationClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindLocationClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb36a0
	float FindInputKeyClosestToWorldLocation(struct FVector& WorldLocation); // Function Engine.SplineComponent.FindInputKeyClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb3600
	struct FVector FindDirectionClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindDirectionClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb3510
	void ClearSplinePoints(bool bUpdateSpline); // Function Engine.SplineComponent.ClearSplinePoints // (Final|Native|Public|BlueprintCallable) // @ game+0x9eb3480
	void AddSplineWorldPoint(struct FVector& Position); // Function Engine.SplineComponent.AddSplineWorldPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9eb33e0
	void AddSplinePointAtIndex(struct FVector& Position, int32_t Index, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.AddSplinePointAtIndex // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9eb3280
	void AddSplinePoint(struct FVector& Position, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.AddSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9eb3170
	void AddSplineLocalPoint(struct FVector& Position); // Function Engine.SplineComponent.AddSplineLocalPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9eb30e0
	void AddPoints(struct TArray<struct FSplinePoint>& Points, bool bUpdateSpline); // Function Engine.SplineComponent.AddPoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9eb2fc0
	void AddPoint(struct FSplinePoint& Point, bool bUpdateSpline); // Function Engine.SplineComponent.AddPoint // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9eb2eb0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MeshComponent
// Size: 0x6c8 (Inherited: 0x560)
class UMeshComponent : public UPrimitiveComponent {
public:

	struct TArray<struct UMaterialInterface*> OverrideMaterials; // 0x560(0x10)
	/*struct TArray<struct TSoftObjectPtr<UMaterialInterface>>*/char OverrideMaterialSoftPtrArray[0x10]; // 0x570(0x10)
	char pad_580[0x140]; // 0x580(0x140)
	char bEnableMaterialParameterCaching : 1; // 0x6c0(0x01)
	char pad_6C0_1 : 7; // 0x6c0(0x01)
	char pad_6C1[0x7]; // 0x6c1(0x07)

	void SetVectorParameterValueOnMaterials(struct FName ParameterName, struct FVector ParameterValue); // Function Engine.MeshComponent.SetVectorParameterValueOnMaterials // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e522e0
	void SetScalarParameterValueOnMaterials(struct FName ParameterName, float ParameterValue); // Function Engine.MeshComponent.SetScalarParameterValueOnMaterials // (Final|Native|Public|BlueprintCallable) // @ game+0x9e52220
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int32_t CinematicTextureGroups); // Function Engine.MeshComponent.PrestreamTextures // (Native|Public|BlueprintCallable) // @ game+0x9e51fd0
	bool IsMaterialSlotNameValid(struct FName MaterialSlotName); // Function Engine.MeshComponent.IsMaterialSlotNameValid // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e51c70
	struct TArray<struct FName> GetMaterialSlotNames(); // Function Engine.MeshComponent.GetMaterialSlotNames // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e51ab0
	struct TArray<struct UMaterialInterface*> GetMaterials(); // Function Engine.MeshComponent.GetMaterials // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e51b90
	int32_t GetMaterialIndex(struct FName MaterialSlotName); // Function Engine.MeshComponent.GetMaterialIndex // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e51a10
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.FXSystemComponent
// Size: 0x560 (Inherited: 0x560)
class UFXSystemComponent : public UPrimitiveComponent {
public:


	void SetVectorParameter(struct FName ParameterName, struct FVector Param); // Function Engine.FXSystemComponent.SetVectorParameter // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e690e0
	void SetUseAutoManageAttachment(bool bAutoManage); // Function Engine.FXSystemComponent.SetUseAutoManageAttachment // (Native|Public|BlueprintCallable) // @ game+0x9e69050
	void SetFloatParameter(struct FName ParameterName, float Param); // Function Engine.FXSystemComponent.SetFloatParameter // (Native|Public|BlueprintCallable) // @ game+0x9e68cf0
	void SetEmitterEnable(struct FName EmitterName, bool bNewEnableState); // Function Engine.FXSystemComponent.SetEmitterEnable // (Native|Public|BlueprintCallable) // @ game+0x9e68c20
	void SetColorParameter(struct FName ParameterName, struct FLinearColor Param); // Function Engine.FXSystemComponent.SetColorParameter // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e68b50
	void SetAutoAttachmentParameters(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule); // Function Engine.FXSystemComponent.SetAutoAttachmentParameters // (Native|Public|BlueprintCallable) // @ game+0x9e682e0
	void SetActorParameter(struct FName ParameterName, struct AActor* Param); // Function Engine.FXSystemComponent.SetActorParameter // (Native|Public|BlueprintCallable) // @ game+0x9e680f0
	void ReleaseToPool(); // Function Engine.FXSystemComponent.ReleaseToPool // (Native|Public|BlueprintCallable) // @ game+0x6250270
	struct UFXSystemAsset* GetFXSystemAsset(); // Function Engine.FXSystemComponent.GetFXSystemAsset // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e67f90
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ShapeComponent
// Size: 0x578 (Inherited: 0x560)
class UShapeComponent : public UPrimitiveComponent {
public:

	struct UBodySetup* ShapeBodySetup; // 0x560(0x08)
	struct UClass* AreaClass; // 0x568(0x08)
	struct FColor ShapeColor; // 0x570(0x04)
	char bDrawOnlyIfSelected : 1; // 0x574(0x01)
	char bShouldCollideWhenPlacing : 1; // 0x574(0x01)
	char bDynamicObstacle : 1; // 0x574(0x01)
	char pad_574_3 : 5; // 0x574(0x01)
	char pad_575[0x3]; // 0x575(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ArrowComponent
// Size: 0x570 (Inherited: 0x560)
class UArrowComponent : public UPrimitiveComponent {
public:

	struct FColor ArrowColor; // 0x560(0x04)
	float ArrowSize; // 0x564(0x04)
	float ScreenSize; // 0x568(0x04)
	char bIsScreenSizeScaled : 1; // 0x56c(0x01)
	char bTreatAsASprite : 1; // 0x56c(0x01)
	char pad_56C_2 : 6; // 0x56c(0x01)
	char pad_56D[0x3]; // 0x56d(0x03)

	void SetArrowColor(struct FLinearColor NewColor); // Function Engine.ArrowComponent.SetArrowColor // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9d74e20
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BillboardComponent
// Size: 0x580 (Inherited: 0x560)
class UBillboardComponent : public UPrimitiveComponent {
public:

	struct UTexture2D* Sprite; // 0x560(0x08)
	char bIsScreenSizeScaled : 1; // 0x568(0x01)
	char pad_568_1 : 7; // 0x568(0x01)
	char pad_569[0x3]; // 0x569(0x03)
	float ScreenSize; // 0x56c(0x04)
	float U; // 0x570(0x04)
	float UL; // 0x574(0x04)
	float V; // 0x578(0x04)
	float VL; // 0x57c(0x04)

	void SetUV(int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL); // Function Engine.BillboardComponent.SetUV // (Native|Public|BlueprintCallable) // @ game+0x9d7d070
	void SetSpriteAndUV(struct UTexture2D* NewSprite, int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL); // Function Engine.BillboardComponent.SetSpriteAndUV // (Native|Public|BlueprintCallable) // @ game+0x9d7cef0
	void SetSprite(struct UTexture2D* NewSprite); // Function Engine.BillboardComponent.SetSprite // (Native|Public|BlueprintCallable) // @ game+0x9d7ce60
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BrushComponent
// Size: 0x570 (Inherited: 0x560)
class UBrushComponent : public UPrimitiveComponent {
public:

	struct UModel* Brush; // 0x560(0x08)
	struct UBodySetup* BrushBodySetup; // 0x568(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DrawFrustumComponent
// Size: 0x580 (Inherited: 0x560)
class UDrawFrustumComponent : public UPrimitiveComponent {
public:

	struct FColor FrustumColor; // 0x560(0x04)
	float FrustumAngle; // 0x564(0x04)
	float FrustumAspectRatio; // 0x568(0x04)
	float FrustumStartDist; // 0x56c(0x04)
	float FrustumEndDist; // 0x570(0x04)
	char pad_574[0x4]; // 0x574(0x04)
	struct UTexture* Texture; // 0x578(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LineBatchComponent
// Size: 0x5a0 (Inherited: 0x560)
class ULineBatchComponent : public UPrimitiveComponent {
public:

	char pad_560[0x40]; // 0x560(0x40)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialBillboardComponent
// Size: 0x570 (Inherited: 0x560)
class UMaterialBillboardComponent : public UPrimitiveComponent {
public:

	struct TArray<struct FMaterialSpriteElement> Elements; // 0x560(0x10)

	void SetElements(struct TArray<struct FMaterialSpriteElement>& NewElements); // Function Engine.MaterialBillboardComponent.SetElements // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9e3ee80
	void AddElement(struct UMaterialInterface* Material, struct UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, struct UCurveFloat* DistanceToSizeCurve); // Function Engine.MaterialBillboardComponent.AddElement // (Final|Native|Public|BlueprintCallable) // @ game+0x9e3ecb0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ModelComponent
// Size: 0x5a0 (Inherited: 0x560)
class UModelComponent : public UPrimitiveComponent {
public:

	char pad_560[0x18]; // 0x560(0x18)
	struct UBodySetup* ModelBodySetup; // 0x578(0x08)
	char pad_580[0x20]; // 0x580(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PhysicsStaticSceneComponent
// Size: 0x560 (Inherited: 0x560)
class UPhysicsStaticSceneComponent : public UPrimitiveComponent {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TextRenderComponent
// Size: 0x5b0 (Inherited: 0x560)
class UTextRenderComponent : public UPrimitiveComponent {
public:

	struct FText Text; // 0x560(0x18)
	struct UMaterialInterface* TextMaterial; // 0x578(0x08)
	struct UFont* Font; // 0x580(0x08)
	enum class EHorizTextAligment HorizontalAlignment; // 0x588(0x01)
	enum class EVerticalTextAligment VerticalAlignment; // 0x589(0x01)
	char pad_58A[0x2]; // 0x58a(0x02)
	struct FColor TextRenderColor; // 0x58c(0x04)
	float XScale; // 0x590(0x04)
	float YScale; // 0x594(0x04)
	float WorldSize; // 0x598(0x04)
	float InvDefaultSize; // 0x59c(0x04)
	float HorizSpacingAdjust; // 0x5a0(0x04)
	float VertSpacingAdjust; // 0x5a4(0x04)
	char bAlwaysRenderAsText : 1; // 0x5a8(0x01)
	char pad_5A8_1 : 7; // 0x5a8(0x01)
	char pad_5A9[0x7]; // 0x5a9(0x07)

	void SetYScale(float Value); // Function Engine.TextRenderComponent.SetYScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9ec2a80
	void SetXScale(float Value); // Function Engine.TextRenderComponent.SetXScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9ec2a00
	void SetWorldSize(float Value); // Function Engine.TextRenderComponent.SetWorldSize // (Final|Native|Public|BlueprintCallable) // @ game+0x9ec2980
	void SetVertSpacingAdjust(float Value); // Function Engine.TextRenderComponent.SetVertSpacingAdjust // (Final|Native|Public|BlueprintCallable) // @ game+0x9ec2880
	void SetVerticalAlignment(enum class EVerticalTextAligment Value); // Function Engine.TextRenderComponent.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x9ec2900
	void SetTextRenderColor(struct FColor Value); // Function Engine.TextRenderComponent.SetTextRenderColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9ec2810
	void SetTextMaterial(struct UMaterialInterface* Material); // Function Engine.TextRenderComponent.SetTextMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x9ec2790
	void SetText(struct FString Value); // Function Engine.TextRenderComponent.SetText // (Final|Native|Public|BlueprintCallable) // @ game+0x9ec26d0
	void SetHorizSpacingAdjust(float Value); // Function Engine.TextRenderComponent.SetHorizSpacingAdjust // (Final|Native|Public|BlueprintCallable) // @ game+0x9ec25d0
	void SetHorizontalAlignment(enum class EHorizTextAligment Value); // Function Engine.TextRenderComponent.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x9ec2650
	void SetFont(struct UFont* Value); // Function Engine.TextRenderComponent.SetFont // (Final|Native|Public|BlueprintCallable) // @ game+0x9ec24b0
	void K2_SetText(struct FText& Value); // Function Engine.TextRenderComponent.K2_SetText // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9ec23e0
	struct FVector GetTextWorldSize(); // Function Engine.TextRenderComponent.GetTextWorldSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ec22e0
	struct FVector GetTextLocalSize(); // Function Engine.TextRenderComponent.GetTextLocalSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ec22a0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.VectorFieldComponent
// Size: 0x590 (Inherited: 0x560)
class UVectorFieldComponent : public UPrimitiveComponent {
public:

	struct UVectorField* VectorField; // 0x560(0x08)
	float Intensity; // 0x568(0x04)
	float Tightness; // 0x56c(0x04)
	char bPreviewVectorField : 1; // 0x570(0x01)
	char pad_570_1 : 7; // 0x570(0x01)
	char pad_571[0x1f]; // 0x571(0x1f)

	void SetIntensity(float NewIntensity); // Function Engine.VectorFieldComponent.SetIntensity // (Native|Public|BlueprintCallable) // @ game+0x9eceb70
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SceneCaptureComponent2D
// Size: 0xcf0 (Inherited: 0x2e8)
class USceneCaptureComponent2D : public USceneCaptureComponent {
public:

	enum class ECameraProjectionMode ProjectionType; // 0x2e8(0x01)
	char pad_2E9[0x3]; // 0x2e9(0x03)
	float FOVAngle; // 0x2ec(0x04)
	float OrthoWidth; // 0x2f0(0x04)
	char pad_2F4[0x4]; // 0x2f4(0x04)
	struct UTextureRenderTarget2D* TextureTarget; // 0x2f8(0x08)
	enum class ESceneCaptureCompositeMode CompositeMode; // 0x300(0x01)
	char pad_301[0xf]; // 0x301(0x0f)
	struct FPostProcessSettings PostProcessSettings; // 0x310(0x950)
	float PostProcessBlendWeight; // 0xc60(0x04)
	char bOverride_CustomNearClippingPlane : 1; // 0xc64(0x01)
	char pad_C64_1 : 7; // 0xc64(0x01)
	char pad_C65[0x3]; // 0xc65(0x03)
	float CustomNearClippingPlane; // 0xc68(0x04)
	bool bUseCustomProjectionMatrix; // 0xc6c(0x01)
	char pad_C6D[0x3]; // 0xc6d(0x03)
	struct FMatrix CustomProjectionMatrix; // 0xc70(0x40)
	bool bEnableClipPlane; // 0xcb0(0x01)
	char pad_CB1[0x3]; // 0xcb1(0x03)
	struct FVector ClipPlaneBase; // 0xcb4(0x0c)
	struct FVector ClipPlaneNormal; // 0xcc0(0x0c)
	char bCameraCutThisFrame : 1; // 0xccc(0x01)
	char bConsiderUnrenderedOpaquePixelAsFullyTranslucent : 1; // 0xccc(0x01)
	char bSRGBtoLinear : 1; // 0xccc(0x01)
	char pad_CCC_3 : 5; // 0xccc(0x01)
	char pad_CCD[0x3]; // 0xccd(0x03)
	enum class ESSAA SSAALevel; // 0xcd0(0x01)
	char pad_CD1[0x3]; // 0xcd1(0x03)
	char bCustomShadowMapSize : 1; // 0xcd4(0x01)
	char pad_CD4_1 : 7; // 0xcd4(0x01)
	char pad_CD5[0x1b]; // 0xcd5(0x1b)

	void CaptureScene(); // Function Engine.SceneCaptureComponent2D.CaptureScene // (Final|Native|Public|BlueprintCallable) // @ game+0x9e98720
	void AddOrUpdateBlendable(/*struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight*/); // Function Engine.SceneCaptureComponent2D.AddOrUpdateBlendable // (Final|Native|Public|BlueprintCallable) // @ game+0x9e98580
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PlanarReflectionComponent
// Size: 0x3f0 (Inherited: 0x2e8)
class UPlanarReflectionComponent : public USceneCaptureComponent {
public:

	struct UBoxComponent* PreviewBox; // 0x2e8(0x08)
	bool bUseMobilePPR; // 0x2f0(0x01)
	char pad_2F1[0xf]; // 0x2f1(0x0f)
	struct FVector4 NormalizedFactor; // 0x300(0x10)
	float NormalDistortionStrength; // 0x310(0x04)
	float PrefilterRoughness; // 0x314(0x04)
	float PrefilterRoughnessDistance; // 0x318(0x04)
	int32_t ScreenPercentage; // 0x31c(0x04)
	float ExtraFOV; // 0x320(0x04)
	float DistanceFromPlaneFadeStart; // 0x324(0x04)
	float DistanceFromPlaneFadeEnd; // 0x328(0x04)
	float DistanceFromPlaneFadeoutStart; // 0x32c(0x04)
	float DistanceFromPlaneFadeoutEnd; // 0x330(0x04)
	float AngleFromPlaneFadeStart; // 0x334(0x04)
	float AngleFromPlaneFadeEnd; // 0x338(0x04)
	bool bShowPreviewPlane; // 0x33c(0x01)
	bool bUseSimplifiedRenderPass; // 0x33d(0x01)
	bool bRenderSceneTwoSided; // 0x33e(0x01)
	char pad_33F[0xb1]; // 0x33f(0xb1)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SceneCaptureComponentCube
// Size: 0x320 (Inherited: 0x2e8)
class USceneCaptureComponentCube : public USceneCaptureComponent {
public:

	struct UTextureRenderTargetCube* TextureTarget; // 0x2e8(0x08)
	bool bCaptureRotation; // 0x2f0(0x01)
	char pad_2F1[0x7]; // 0x2f1(0x07)
	struct UTextureRenderTargetCube* TextureTargetLeft; // 0x2f8(0x08)
	struct UTextureRenderTargetCube* TextureTargetRight; // 0x300(0x08)
	struct UTextureRenderTarget2D* TextureTargetODS; // 0x308(0x08)
	float IPD; // 0x310(0x04)
	char pad_314[0xc]; // 0x314(0x0c)

	void CaptureScene(); // Function Engine.SceneCaptureComponentCube.CaptureScene // (Final|Native|Public|BlueprintCallable) // @ game+0x9e98740
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BoxReflectionCaptureComponent
// Size: 0x4c0 (Inherited: 0x4a8)
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent {
public:

	float BoxTransitionDistance; // 0x4a8(0x04)
	float ExteriorBoxTransitionDistance; // 0x4ac(0x04)
	struct UBoxComponent* PreviewInfluenceBox; // 0x4b0(0x08)
	struct UBoxComponent* PreviewCaptureBox; // 0x4b8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PlaneReflectionCaptureComponent
// Size: 0x4c0 (Inherited: 0x4a8)
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent {
public:

	float InfluenceRadiusScale; // 0x4a8(0x04)
	char pad_4AC[0x4]; // 0x4ac(0x04)
	struct UDrawSphereComponent* PreviewInfluenceRadius; // 0x4b0(0x08)
	struct UBoxComponent* PreviewCaptureBox; // 0x4b8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SphereReflectionCaptureComponent
// Size: 0x4c0 (Inherited: 0x4a8)
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent {
public:

	float InfluenceRadius; // 0x4a8(0x04)
	float CaptureDistanceScale; // 0x4ac(0x04)
	struct UDrawSphereComponent* PreviewInfluenceRadius; // 0x4b0(0x08)
	char pad_4B8[0x8]; // 0x4b8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LightComponent
// Size: 0x410 (Inherited: 0x288)
class ULightComponent : public ULightComponentBase {
public:

	float Temperature; // 0x288(0x04)
	float MaxDrawDistance; // 0x28c(0x04)
	float MaxDistanceFadeRange; // 0x290(0x04)
	char bUseTemperature : 1; // 0x294(0x01)
	char pad_294_1 : 7; // 0x294(0x01)
	char pad_295[0x3]; // 0x295(0x03)
	int32_t ShadowMapChannel; // 0x298(0x04)
	char pad_29C[0x4]; // 0x29c(0x04)
	float MinRoughness; // 0x2a0(0x04)
	int32_t GlobalLightPriority; // 0x2a4(0x04)
	float SpecularScale; // 0x2a8(0x04)
	float ShadowResolutionScale; // 0x2ac(0x04)
	float ShadowBias; // 0x2b0(0x04)
	float FirstPersonShadowDepthBias; // 0x2b4(0x04)
	float ShadowSlopeBias; // 0x2b8(0x04)
	float ShadowSharpen; // 0x2bc(0x04)
	float ContactShadowLength; // 0x2c0(0x04)
	char ContactShadowLengthInWS : 1; // 0x2c4(0x01)
	char pad_2C4_1 : 7; // 0x2c4(0x01)
	char pad_2C5[0x3]; // 0x2c5(0x03)
	float ScreenSpaceShadowLength; // 0x2c8(0x04)
	char InverseSquaredFalloff : 1; // 0x2cc(0x01)
	char CastTranslucentShadows : 1; // 0x2cc(0x01)
	char bCastShadowsFromCinematicObjectsOnly : 1; // 0x2cc(0x01)
	char bAffectDynamicIndirectLighting : 1; // 0x2cc(0x01)
	char bForceCachedShadowsForMovablePrimitives : 1; // 0x2cc(0x01)
	char pad_2CC_5 : 3; // 0x2cc(0x01)
	char pad_2CD[0x3]; // 0x2cd(0x03)
	struct FLightingChannels LightingChannels; // 0x2d0(0x01)
	bool bOnlyUsedForSceneCapture; // 0x2d1(0x01)
	char pad_2D2[0x6]; // 0x2d2(0x06)
	struct UMaterialInterface* LightFunctionMaterial; // 0x2d8(0x08)
	/*struct TSoftObjectPtr<UMaterialInterface>*/char AsyncLightFunctionMaterial[0x28]; // 0x2e0(0x28)
	struct FVector LightFunctionScale; // 0x308(0x0c)
	char pad_314[0x4]; // 0x314(0x04)
	struct UTextureLightProfile* IESTexture; // 0x318(0x08)
	char bUseIESBrightness : 1; // 0x320(0x01)
	char pad_320_1 : 7; // 0x320(0x01)
	char pad_321[0x3]; // 0x321(0x03)
	float IESBrightnessScale; // 0x324(0x04)
	float LightFunctionFadeDistance; // 0x328(0x04)
	float DisabledBrightness; // 0x32c(0x04)
	char bEnableLightShaftBloom : 1; // 0x330(0x01)
	char pad_330_1 : 7; // 0x330(0x01)
	char pad_331[0x3]; // 0x331(0x03)
	float BloomScale; // 0x334(0x04)
	float BloomThreshold; // 0x338(0x04)
	float BloomMaxBrightness; // 0x33c(0x04)
	float DepthThreshold; // 0x340(0x04)
	struct FColor BloomTint; // 0x344(0x04)
	bool bUseRayTracedDistanceFieldShadows; // 0x348(0x01)
	char pad_349[0x3]; // 0x349(0x03)
	float RayStartOffsetDepthScale; // 0x34c(0x04)
	char bAffectMeshCaustics : 1; // 0x350(0x01)
	char pad_350_1 : 7; // 0x350(0x01)
	char pad_351[0x3]; // 0x351(0x03)
	enum class ERayTracingMeshCausticsResolution MeshCausticsResolution; // 0x354(0x01)
	char pad_355[0x3]; // 0x355(0x03)
	float MeshCausticsSoftness; // 0x358(0x04)
	char bAffectWaterCaustics : 1; // 0x35c(0x01)
	char pad_35C_1 : 7; // 0x35c(0x01)
	char pad_35D[0x3]; // 0x35d(0x03)
	float WaterCausticsPrecision; // 0x360(0x04)
	int32_t NumWaterCausticsMapCascades; // 0x364(0x04)
	float WaterCausticsMapCascadeScale; // 0x368(0x04)
	bool bDynamicSpecularLighting; // 0x36c(0x01)
	char pad_36D[0x3]; // 0x36d(0x03)
	int32_t MobileDynamicShadowMapResolution; // 0x370(0x04)
	char pad_374[0x4]; // 0x374(0x04)
	struct ULocalLightGroupBake* LocalLightGroupBakeObject; // 0x378(0x08)
	struct FGuid LocalLightGUID; // 0x380(0x10)
	char pad_390[0x80]; // 0x390(0x80)

	void SetWaterCausticsPrecision(float NewValue); // Function Engine.LightComponent.SetWaterCausticsPrecision // (Final|Native|Public|BlueprintCallable) // @ game+0x9e370a0
	void SetWaterCausticsMapCascadeScale(float NewValue); // Function Engine.LightComponent.SetWaterCausticsMapCascadeScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9e37020
	void SetVolumetricScatteringIntensity(float NewIntensity); // Function Engine.LightComponent.SetVolumetricScatteringIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x9e36fa0
	void SetUseIESBrightness(bool bNewValue); // Function Engine.LightComponent.SetUseIESBrightness // (Final|Native|Public|BlueprintCallable) // @ game+0x9e36f10
	void SetTransmission(bool bNewValue); // Function Engine.LightComponent.SetTransmission // (Final|Native|Public|BlueprintCallable) // @ game+0x9e36e80
	void SetTemperature(float NewTemperature); // Function Engine.LightComponent.SetTemperature // (Final|Native|Public|BlueprintCallable) // @ game+0x9e36e00
	void SetSpecularScale(float NewValue); // Function Engine.LightComponent.SetSpecularScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9e36d80
	void SetShadowSlopeBias(float NewValue); // Function Engine.LightComponent.SetShadowSlopeBias // (Final|Native|Public|BlueprintCallable) // @ game+0x9e36c70
	void SetShadowBias(float NewValue); // Function Engine.LightComponent.SetShadowBias // (Final|Native|Public|BlueprintCallable) // @ game+0x9e36bf0
	void SetNumWaterCausticsMapCascades(int32_t NewValue); // Function Engine.LightComponent.SetNumWaterCausticsMapCascades // (Final|Native|Public|BlueprintCallable) // @ game+0x9e36af0
	void SetMeshCausticsResolution(enum class ERayTracingMeshCausticsResolution NewValue); // Function Engine.LightComponent.SetMeshCausticsResolution // (Final|Native|Public|BlueprintCallable) // @ game+0x9e36a70
	void SetMaxDrawDistance(float NewValue); // Function Engine.LightComponent.SetMaxDrawDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x9e369f0
	void SetLightFunctionScale(struct FVector NewLightFunctionScale); // Function Engine.LightComponent.SetLightFunctionScale // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e36960
	void SetLightFunctionMaterial(struct UMaterialInterface* NewLightFunctionMaterial); // Function Engine.LightComponent.SetLightFunctionMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x9e36850
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance); // Function Engine.LightComponent.SetLightFunctionFadeDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x9e36750
	void SetLightFunctionDisabledBrightness(float NewValue); // Function Engine.LightComponent.SetLightFunctionDisabledBrightness // (Final|Native|Public|BlueprintCallable) // @ game+0x9e36650
	void SetLightColor(struct FLinearColor NewLightColor, bool bSRGB); // Function Engine.LightComponent.SetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e36580
	void SetIsUseTemperature(bool UseTemperature); // Function Engine.LightComponent.SetIsUseTemperature // (Final|Native|Public|BlueprintCallable) // @ game+0x9e363f0
	void SetIntensity(float NewIntensity); // Function Engine.LightComponent.SetIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x9e36370
	void SetIndirectLightingIntensity(float NewIntensity); // Function Engine.LightComponent.SetIndirectLightingIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x9e362f0
	void SetIESTexture(struct UTextureLightProfile* NewValue); // Function Engine.LightComponent.SetIESTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x9e36270
	void SetIESBrightnessScale(float NewValue); // Function Engine.LightComponent.SetIESBrightnessScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9e361f0
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue); // Function Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives // (Final|Native|Public|BlueprintCallable) // @ game+0x9e36160
	void SetEnableLightShaftBloom(bool bNewValue); // Function Engine.LightComponent.SetEnableLightShaftBloom // (Final|Native|Public|BlueprintCallable) // @ game+0x9e36040
	void SetBloomTint(struct FColor NewValue); // Function Engine.LightComponent.SetBloomTint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e35d00
	void SetBloomThreshold(float NewValue); // Function Engine.LightComponent.SetBloomThreshold // (Final|Native|Public|BlueprintCallable) // @ game+0x9e35c80
	void SetBloomScale(float NewValue); // Function Engine.LightComponent.SetBloomScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9e35c00
	void SetBloomMaxBrightness(float NewValue); // Function Engine.LightComponent.SetBloomMaxBrightness // (Final|Native|Public|BlueprintCallable) // @ game+0x9e35b80
	void SetAsyncLightFunctionMaterial(/*struct TSoftObjectPtr<UMaterialInterface> NewAsyncLightFunctionMaterial*/); // Function Engine.LightComponent.SetAsyncLightFunctionMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x9e359f0
	void SetAffectWaterCaustics(bool bNewValue); // Function Engine.LightComponent.SetAffectWaterCaustics // (Final|Native|Public|BlueprintCallable) // @ game+0x9e35960
	void SetAffectTranslucentLighting(bool bNewValue); // Function Engine.LightComponent.SetAffectTranslucentLighting // (Final|Native|Public|BlueprintCallable) // @ game+0x9e358d0
	void SetAffectMeshCaustics(bool bNewValue); // Function Engine.LightComponent.SetAffectMeshCaustics // (Final|Native|Public|BlueprintCallable) // @ game+0x9e357b0
	void SetAffectDynamicIndirectLighting(bool bNewValue); // Function Engine.LightComponent.SetAffectDynamicIndirectLighting // (Final|Native|Public|BlueprintCallable) // @ game+0x9e35720
	float GetMaxDrawDistance(); // Function Engine.LightComponent.GetMaxDrawDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x9e35130
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SkyLightComponent
// Size: 0x540 (Inherited: 0x288)
class USkyLightComponent : public ULightComponentBase {
public:

	enum class ESkyLightSourceType SourceType; // 0x288(0x01)
	char pad_289[0x7]; // 0x289(0x07)
	struct UTextureCube* Cubemap; // 0x290(0x08)
	struct UTextureCube* ReflectionCubemap; // 0x298(0x08)
	/*struct TSoftObjectPtr<UTextureCube>*/char AsyncLoadCubemap[0x28]; // 0x2a0(0x28)
	struct UTextureCube* AdditiveCubemap; // 0x2c8(0x08)
	/*struct TMap<struct FString, struct TSoftObjectPtr<UTextureCube>>*/char TodReflectionCubemaps[0x50]; // 0x2d0(0x50)
	float AdditiveReflectionIntensity; // 0x320(0x04)
	float SourceCubemapAngle; // 0x324(0x04)
	int32_t CubemapResolution; // 0x328(0x04)
	float SkyDistanceThreshold; // 0x32c(0x04)
	bool bNeedIrradianceNormalization; // 0x330(0x01)
	char pad_331[0x3]; // 0x331(0x03)
	float IrradianceNormalizationIntensity; // 0x334(0x04)
	bool bCaptureEmissiveOnly; // 0x338(0x01)
	bool bLowerHemisphereIsBlack; // 0x339(0x01)
	char pad_33A[0x2]; // 0x33a(0x02)
	struct FLinearColor LowerHemisphereColor; // 0x33c(0x10)
	bool bLowerUseGrayScale; // 0x34c(0x01)
	bool bUseCubemapInJadeSnake; // 0x34d(0x01)
	char pad_34E[0x2]; // 0x34e(0x02)
	float OcclusionMaxDistance; // 0x350(0x04)
	float Contrast; // 0x354(0x04)
	float OcclusionExponent; // 0x358(0x04)
	float MinOcclusion; // 0x35c(0x04)
	struct FColor OcclusionTint; // 0x360(0x04)
	enum class EOcclusionCombineMode OcclusionCombineMode; // 0x364(0x01)
	char pad_365[0xcb]; // 0x365(0xcb)
	struct TArray<float> PreProcessedIrradianceEnvironmentMap; // 0x430(0x10)
	float PreProcessedAverageBrightness; // 0x440(0x04)
	char pad_444[0x4]; // 0x444(0x04)
	struct UTextureCube* BlendDestinationCubemap; // 0x448(0x08)
	char pad_450[0xa8]; // 0x450(0xa8)
	struct TArray<float> PreProcessedBlendDestinationIrradianceEnvironmentMap; // 0x4f8(0x10)
	float PreProcessedBlendDestinationAverageBrightness; // 0x508(0x04)
	char pad_50C[0x34]; // 0x50c(0x34)

	void SetVolumetricScatteringIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetVolumetricScatteringIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x9eabba0
	void SetReflectionCubemap(struct UTextureCube* NewCubemap); // Function Engine.SkyLightComponent.SetReflectionCubemap // (Final|Native|Public|BlueprintCallable) // @ game+0x9eabaa0
	void SetOcclusionTint(struct FColor& InTint); // Function Engine.SkyLightComponent.SetOcclusionTint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9eab790
	void SetOcclusionExponent(float InOcclusionExponent); // Function Engine.SkyLightComponent.SetOcclusionExponent // (Final|Native|Public|BlueprintCallable) // @ game+0x9eab710
	void SetOcclusionContrast(float InOcclusionContrast); // Function Engine.SkyLightComponent.SetOcclusionContrast // (Final|Native|Public|BlueprintCallable) // @ game+0x9eab690
	void SetMinOcclusion(float InMinOcclusion); // Function Engine.SkyLightComponent.SetMinOcclusion // (Final|Native|Public|BlueprintCallable) // @ game+0x9eab610
	void SetLowerHemisphereColor(struct FLinearColor& InLowerHemisphereColor); // Function Engine.SkyLightComponent.SetLowerHemisphereColor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9eab280
	void SetLightColor(struct FLinearColor NewLightColor); // Function Engine.SkyLightComponent.SetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9eab200
	void SetIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x9eab180
	void SetIndirectLightingIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetIndirectLightingIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x9eab100
	void SetCubemapBlend(struct UTextureCube* SourceCubemap, struct UTextureCube* DestinationCubemap, float InBlendFraction); // Function Engine.SkyLightComponent.SetCubemapBlend // (Final|Native|Public|BlueprintCallable) // @ game+0x9eaaf80
	void SetCubemap(struct UTextureCube* NewCubemap); // Function Engine.SkyLightComponent.SetCubemap // (Final|Native|Public|BlueprintCallable) // @ game+0x9eaaf00
	void SetAsyncLoadCubemap(/*struct TSoftObjectPtr<UTextureCube> NewCubemap*/); // Function Engine.SkyLightComponent.SetAsyncLoadCubemap // (Final|Native|Public|BlueprintCallable) // @ game+0x9eaad70
	void RecaptureSky(); // Function Engine.SkyLightComponent.RecaptureSky // (Final|Native|Public|BlueprintCallable) // @ game+0x9eaacd0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PawnMovementComponent
// Size: 0x188 (Inherited: 0x180)
class UPawnMovementComponent : public UNavMovementComponent {
public:

	struct APawn* PawnOwner; // 0x180(0x08)

	struct FVector K2_GetInputVector(); // Function Engine.PawnMovementComponent.K2_GetInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e6c210
	bool IsMoveInputIgnored(); // Function Engine.PawnMovementComponent.IsMoveInputIgnored // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e6c2f0
	struct FVector GetPendingInputVector(); // Function Engine.PawnMovementComponent.GetPendingInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e6c210
	struct APawn* GetPawnOwner(); // Function Engine.PawnMovementComponent.GetPawnOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e6c1e0
	struct FVector GetLastInputVector(); // Function Engine.PawnMovementComponent.GetLastInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e6c090
	struct FVector ConsumeInputVector(); // Function Engine.PawnMovementComponent.ConsumeInputVector // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e6bf90
	void AddInputVector(struct FVector WorldVector, bool bForce); // Function Engine.PawnMovementComponent.AddInputVector // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e6bd90
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TextureRenderTarget2D
// Size: 0x178 (Inherited: 0x148)
class UTextureRenderTarget2D : public UTextureRenderTarget {
public:

	int32_t SizeX; // 0x148(0x04)
	int32_t SizeY; // 0x14c(0x04)
	struct FLinearColor ClearColor; // 0x150(0x10)
	enum class TextureAddress AddressX; // 0x160(0x01)
	enum class TextureAddress AddressY; // 0x161(0x01)
	char bForceLinearGamma : 1; // 0x162(0x01)
	char bHDR : 1; // 0x162(0x01)
	char bGPUSharedFlag : 1; // 0x162(0x01)
	char pad_162_3 : 5; // 0x162(0x01)
	enum class ETextureRenderTargetFormat RenderTargetFormat; // 0x163(0x01)
	char bAutoGenerateMips : 1; // 0x164(0x01)
	char pad_164_1 : 7; // 0x164(0x01)
	enum class TextureFilter MipsSamplerFilter; // 0x165(0x01)
	enum class TextureAddress MipsAddressU; // 0x166(0x01)
	enum class TextureAddress MipsAddressV; // 0x167(0x01)
	enum class EPixelFormat OverrideFormat; // 0x168(0x01)
	char pad_169[0xf]; // 0x169(0x0f)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TextureRenderTargetCube
// Size: 0x160 (Inherited: 0x148)
class UTextureRenderTargetCube : public UTextureRenderTarget {
public:

	int32_t SizeX; // 0x148(0x04)
	struct FLinearColor ClearColor; // 0x14c(0x10)
	enum class EPixelFormat OverrideFormat; // 0x15c(0x01)
	char bHDR : 1; // 0x15d(0x01)
	char bForceLinearGamma : 1; // 0x15d(0x01)
	char pad_15D_2 : 6; // 0x15d(0x01)
	char pad_15E[0x2]; // 0x15e(0x02)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CurveLinearColorAtlas
// Size: 0x1c8 (Inherited: 0x1a8)
class UCurveLinearColorAtlas : public UTexture2D {
public:

	uint32_t TextureSize; // 0x1a8(0x04)
	char bSquareResolution : 1; // 0x1ac(0x01)
	char pad_1AC_1 : 7; // 0x1ac(0x01)
	char pad_1AD[0x3]; // 0x1ad(0x03)
	uint32_t TextureHeight; // 0x1b0(0x04)
	char pad_1B4[0x4]; // 0x1b4(0x04)
	struct TArray<struct UCurveLinearColor*> GradientCurves; // 0x1b8(0x10)

	bool GetCurvePosition(struct UCurveLinearColor* InCurve, float& Position); // Function Engine.CurveLinearColorAtlas.GetCurvePosition // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9d9fe10
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.GpuMergedTexture
// Size: 0x1d8 (Inherited: 0x1a8)
class UGpuMergedTexture : public UTexture2D {
public:

	char pad_1A8[0x20]; // 0x1a8(0x20)
	struct UGpuMergeTextureTask* PendingStreamInTask; // 0x1c8(0x08)
	bool bStopPendingStreamInHasBeenStarted; // 0x1d0(0x01)
	char pad_1D1[0x7]; // 0x1d1(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LightMapTexture2D
// Size: 0x1b0 (Inherited: 0x1a8)
class ULightMapTexture2D : public UTexture2D {
public:

	char pad_1A8[0x4]; // 0x1a8(0x04)
	bool UseAsLightmapAO; // 0x1ac(0x01)
	char pad_1AD[0x3]; // 0x1ad(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.RuntimeVirtualTextureStreamingProxy
// Size: 0x1e0 (Inherited: 0x1a8)
class URuntimeVirtualTextureStreamingProxy : public UTexture2D {
public:

	struct FVirtualTextureBuildSettings Settings; // 0x1a8(0x10)
	bool bSinglePhysicalSpace; // 0x1b8(0x01)
	char pad_1B9[0x7]; // 0x1b9(0x07)
	struct TArray<uint32_t> BuildHash; // 0x1c0(0x10)
	struct TArray<uint32_t> RTCHash; // 0x1d0(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ShadowMapTexture2D
// Size: 0x1b0 (Inherited: 0x1a8)
class UShadowMapTexture2D : public UTexture2D {
public:

	enum class EShadowMapFlags ShadowmapFlags; // 0x1a8(0x01)
	char pad_1A9[0x7]; // 0x1a9(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.Texture2DSpriteAtlas
// Size: 0x1b0 (Inherited: 0x1a8)
class UTexture2DSpriteAtlas : public UTexture2D {
public:

	bool bHDOverridePowerOfTwo; // 0x1a8(0x01)
	enum class ETexturePowerOfTwoSetting PowerOfTwoModeHD; // 0x1a9(0x01)
	char bIgnoreRescale : 1; // 0x1aa(0x01)
	char pad_1AA_1 : 7; // 0x1aa(0x01)
	char pad_1AB[0x5]; // 0x1ab(0x05)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.TextureLightProfile
// Size: 0x1b0 (Inherited: 0x1a8)
class UTextureLightProfile : public UTexture2D {
public:

	float Brightness; // 0x1a8(0x04)
	float TextureMultiplier; // 0x1ac(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LightMapVirtualTexture2D
// Size: 0x1c0 (Inherited: 0x1a8)
class ULightMapVirtualTexture2D : public UTexture2D {
public:

	struct TArray<int8_t> TypeToLayer; // 0x1a8(0x10)
	float TexelPerMeter; // 0x1b8(0x04)
	char pad_1BC[0x4]; // 0x1bc(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DestructibleStaticMesh
// Size: 0x1c8 (Inherited: 0x188)
class UDestructibleStaticMesh : public UStaticLabelMesh {
public:

	char pad_188[0x10]; // 0x188(0x10)
	struct TArray<struct UBodySetup*> BodySetups; // 0x198(0x10)
	char pad_1A8[0x20]; // 0x1a8(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimCompress_LeastDestructive
// Size: 0x48 (Inherited: 0x48)
class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimCompress_PerTrackCompression
// Size: 0xe0 (Inherited: 0x68)
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys {
public:

	float MaxZeroingThreshold; // 0x68(0x04)
	float MaxPosDiffBitwise; // 0x6c(0x04)
	float MaxAngleDiffBitwise; // 0x70(0x04)
	float MaxScaleDiffBitwise; // 0x74(0x04)
	struct TArray<enum class AnimationCompressionFormat> AllowedRotationFormats; // 0x78(0x10)
	struct TArray<enum class AnimationCompressionFormat> AllowedTranslationFormats; // 0x88(0x10)
	struct TArray<enum class AnimationCompressionFormat> AllowedScaleFormats; // 0x98(0x10)
	char bResampleAnimation : 1; // 0xa8(0x01)
	char pad_A8_1 : 7; // 0xa8(0x01)
	char pad_A9[0x3]; // 0xa9(0x03)
	float ResampledFramerate; // 0xac(0x04)
	int32_t MinKeysForResampling; // 0xb0(0x04)
	char bUseAdaptiveError : 1; // 0xb4(0x01)
	char bUseOverrideForEndEffectors : 1; // 0xb4(0x01)
	char pad_B4_2 : 6; // 0xb4(0x01)
	char pad_B5[0x3]; // 0xb5(0x03)
	int32_t TrackHeightBias; // 0xb8(0x04)
	float ParentingDivisor; // 0xbc(0x04)
	float ParentingDivisorExponent; // 0xc0(0x04)
	char bUseAdaptiveError2 : 1; // 0xc4(0x01)
	char pad_C4_1 : 7; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
	float RotationErrorSourceRatio; // 0xc8(0x04)
	float TranslationErrorSourceRatio; // 0xcc(0x04)
	float ScaleErrorSourceRatio; // 0xd0(0x04)
	float MaxErrorPerTrackRatio; // 0xd4(0x04)
	float PerturbationProbeSize; // 0xd8(0x04)
	char pad_DC[0x4]; // 0xdc(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionTextureSampleParameter
// Size: 0x100 (Inherited: 0xe0)
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample {
public:

	struct FName ParameterName; // 0xe0(0x08)
	struct FGuid ExpressionGUID; // 0xe8(0x10)
	struct FName Group; // 0xf8(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionParticleSubUV
// Size: 0xe8 (Inherited: 0xe0)
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample {
public:

	char bBlend : 1; // 0xe0(0x01)
	char pad_E0_1 : 7; // 0xe0(0x01)
	char pad_E1[0x7]; // 0xe1(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionSpriteTextureSample
// Size: 0x120 (Inherited: 0xe0)
class UMaterialExpressionSpriteTextureSample : public UMaterialExpressionTextureSample {
public:

	struct FExpressionInput StartUV; // 0xe0(0x0c)
	char pad_EC[0x8]; // 0xec(0x08)
	struct FExpressionInput SizeUV; // 0xf4(0x0c)
	char pad_100[0x8]; // 0x100(0x08)
	struct FExpressionInput UVFunction; // 0x108(0x0c)
	char pad_114[0x8]; // 0x114(0x08)
	enum class ESamplerSourceMode SpiritSamplerMode; // 0x11c(0x01)
	char pad_11D[0x3]; // 0x11d(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionChannelMaskParameter
// Size: 0x90 (Inherited: 0x78)
class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter {
public:

	enum class EChannelMaskParameterColor MaskChannel; // 0x78(0x01)
	char pad_79[0x3]; // 0x79(0x03)
	struct FExpressionInput Input; // 0x7c(0x0c)
	char pad_88[0x8]; // 0x88(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionCurveAtlasRowParameter
// Size: 0x90 (Inherited: 0x68)
class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter {
public:

	struct UCurveLinearColor* Curve; // 0x68(0x08)
	struct UCurveLinearColorAtlas* Atlas; // 0x70(0x08)
	struct FExpressionInput InputTime; // 0x78(0x0c)
	char pad_84[0xc]; // 0x84(0x0c)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionStaticSwitchParameter
// Size: 0x90 (Inherited: 0x68)
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter {
public:

	struct FExpressionInput A; // 0x68(0x0c)
	char pad_74[0x8]; // 0x74(0x08)
	struct FExpressionInput B; // 0x7c(0x0c)
	char pad_88[0x8]; // 0x88(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionLocalVariableDeclaration
// Size: 0x78 (Inherited: 0x48)
class UMaterialExpressionLocalVariableDeclaration : public UMaterialExpressionLocalVariableBase {
public:

	struct FExpressionInput Input; // 0x48(0x0c)
	char pad_54[0x8]; // 0x54(0x08)
	struct FName Name; // 0x5c(0x08)
	struct FGuid VariableGuid; // 0x64(0x10)
	char pad_74[0x4]; // 0x74(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionLocalVariableUsage
// Size: 0x60 (Inherited: 0x48)
class UMaterialExpressionLocalVariableUsage : public UMaterialExpressionLocalVariableBase {
public:

	struct UMaterialExpressionLocalVariableDeclaration* Declaration; // 0x48(0x08)
	struct FGuid DeclarationGuid; // 0x50(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InputVectorAxisDelegateBinding
// Size: 0x40 (Inherited: 0x40)
class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AimOffsetBlendSpace
// Size: 0x158 (Inherited: 0x158)
class UAimOffsetBlendSpace : public UBlendSpace {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AimOffsetBlendSpace1D
// Size: 0x158 (Inherited: 0x158)
class UAimOffsetBlendSpace1D : public UBlendSpace1D {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimComposite
// Size: 0xc0 (Inherited: 0xb0)
class UAnimComposite : public UAnimCompositeBase {
public:

	struct FAnimTrack AnimationTrack; // 0xb0(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AnimMontage
// Size: 0x1d8 (Inherited: 0xb0)
class UAnimMontage : public UAnimCompositeBase {
public:

	struct FAlphaBlend blendIn; // 0xb0(0x30)
	float BlendInTime; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)
	struct FAlphaBlend blendOut; // 0xe8(0x30)
	float BlendOutTime; // 0x118(0x04)
	float BlendOutTriggerTime; // 0x11c(0x04)
	struct FName SyncGroup; // 0x120(0x08)
	int32_t SyncSlotIndex; // 0x128(0x04)
	char pad_12C[0x4]; // 0x12c(0x04)
	struct FMarkerSyncData MarkerData; // 0x130(0x20)
	struct TArray<struct FCompositeSection> CompositeSections; // 0x150(0x10)
	struct TArray<struct FSlotAnimationTrack> SlotAnimTracks; // 0x160(0x10)
	struct TArray<struct FBranchingPoint> BranchingPoints; // 0x170(0x10)
	bool bEnableRootMotionTranslation; // 0x180(0x01)
	bool bEnableRootMotionRotation; // 0x181(0x01)
	bool bEnableAutoBlendOut; // 0x182(0x01)
	enum class ERootMotionRootLock RootMotionRootLock; // 0x183(0x01)
	char pad_184[0x4]; // 0x184(0x04)
	struct TArray<struct FBranchingPointMarker> BranchingPointMarkers; // 0x188(0x10)
	struct TArray<int32_t> BranchingPointStateNotifyIndices; // 0x198(0x10)
	struct FTimeStretchCurve TimeStretchCurve; // 0x1a8(0x28)
	struct FName TimeStretchCurveName; // 0x1d0(0x08)

	float GetDefaultBlendOutTime(); // Function Engine.AnimMontage.GetDefaultBlendOutTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d6d190
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DistributionFloatParameterBase
// Size: 0x68 (Inherited: 0x48)
class UDistributionFloatParameterBase : public UDistributionFloatConstant {
public:

	struct FName ParameterName; // 0x48(0x08)
	float MinInput; // 0x50(0x04)
	float MaxInput; // 0x54(0x04)
	float MinOutput; // 0x58(0x04)
	float MaxOutput; // 0x5c(0x04)
	enum class DistributionParamMode ParamMode; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DistributionVectorParameterBase
// Size: 0x98 (Inherited: 0x58)
class UDistributionVectorParameterBase : public UDistributionVectorConstant {
public:

	struct FName ParameterName; // 0x58(0x08)
	struct FVector MinInput; // 0x60(0x0c)
	struct FVector MaxInput; // 0x6c(0x0c)
	struct FVector MinOutput; // 0x78(0x0c)
	struct FVector MaxOutput; // 0x84(0x0c)
	enum class DistributionParamMode ParamModes[0x3]; // 0x90(0x03)
	char pad_93[0x5]; // 0x93(0x05)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleColor_Seeded
// Size: 0xd8 (Inherited: 0xb8)
class UParticleModuleColor_Seeded : public UParticleModuleColor {
public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0xb8(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleEventReceiverKillParticles
// Size: 0x50 (Inherited: 0x48)
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase {
public:

	char bStopSpawning : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleEventReceiverSpawn
// Size: 0xe0 (Inherited: 0x48)
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase {
public:

	struct FRawDistributionFloat SpawnCount; // 0x48(0x30)
	char bUseParticleTime : 1; // 0x78(0x01)
	char bUsePSysLocation : 1; // 0x78(0x01)
	char bInheritVelocity : 1; // 0x78(0x01)
	char pad_78_3 : 5; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
	struct FRawDistributionVector InheritVelocityScale; // 0x80(0x48)
	struct TArray<struct UPhysicalMaterial*> PhysicalMaterials; // 0xc8(0x10)
	char bBanPhysicalMaterials : 1; // 0xd8(0x01)
	char pad_D8_1 : 7; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleLifetime_Seeded
// Size: 0x88 (Inherited: 0x68)
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime {
public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x68(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleLight_Seeded
// Size: 0x148 (Inherited: 0x128)
class UParticleModuleLight_Seeded : public UParticleModuleLight {
public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x128(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleLocation_Seeded
// Size: 0xa8 (Inherited: 0x88)
class UParticleModuleLocation_Seeded : public UParticleModuleLocation {
public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x88(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleLocationWorldOffset
// Size: 0x88 (Inherited: 0x88)
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleLocationPrimitiveCylinder
// Size: 0x128 (Inherited: 0xb8)
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase {
public:

	char RadialVelocity : 1; // 0xb8(0x01)
	char pad_B8_1 : 7; // 0xb8(0x01)
	char pad_B9[0x7]; // 0xb9(0x07)
	struct FRawDistributionFloat StartRadius; // 0xc0(0x30)
	struct FRawDistributionFloat StartHeight; // 0xf0(0x30)
	enum class CylinderHeightAxis HeightAxis; // 0x120(0x01)
	char pad_121[0x7]; // 0x121(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleLocationPrimitiveSphere
// Size: 0xe8 (Inherited: 0xb8)
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase {
public:

	struct FRawDistributionFloat StartRadius; // 0xb8(0x30)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleMeshRotation_Seeded
// Size: 0xa8 (Inherited: 0x88)
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation {
public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x88(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleRotation_Seeded
// Size: 0x88 (Inherited: 0x68)
class UParticleModuleRotation_Seeded : public UParticleModuleRotation {
public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x68(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleMeshRotationRate_Seeded
// Size: 0xa0 (Inherited: 0x80)
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate {
public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x80(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleRotationRate_Seeded
// Size: 0x88 (Inherited: 0x68)
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate {
public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x68(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleParameterDynamic_Seeded
// Size: 0x70 (Inherited: 0x50)
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic {
public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x50(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleSize_Seeded
// Size: 0xb8 (Inherited: 0x98)
class UParticleModuleSize_Seeded : public UParticleModuleSize {
public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x98(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleSubUVMovie
// Size: 0xb8 (Inherited: 0x78)
class UParticleModuleSubUVMovie : public UParticleModuleSubUV {
public:

	char bUseEmitterTime : 1; // 0x78(0x01)
	char pad_78_1 : 7; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
	struct FRawDistributionFloat FrameRate; // 0x80(0x30)
	int32_t StartingFrame; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleVelocity_Seeded
// Size: 0xd8 (Inherited: 0xb8)
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity {
public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0xb8(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.KillZVolume
// Size: 0x3c0 (Inherited: 0x3c0)
class AKillZVolume : public APhysicsVolume {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DefaultPhysicsVolume
// Size: 0x3c0 (Inherited: 0x3c0)
class ADefaultPhysicsVolume : public APhysicsVolume {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PainCausingVolume
// Size: 0x3e8 (Inherited: 0x3c0)
class APainCausingVolume : public APhysicsVolume {
public:

	char bPainCausing : 1; // 0x3c0(0x01)
	char pad_3C0_1 : 7; // 0x3c0(0x01)
	char pad_3C1[0x3]; // 0x3c1(0x03)
	float DamagePerSec; // 0x3c4(0x04)
	struct UClass* DamageType; // 0x3c8(0x08)
	float PainInterval; // 0x3d0(0x04)
	char bEntryPain : 1; // 0x3d4(0x01)
	char BACKUP_bPainCausing : 1; // 0x3d4(0x01)
	char pad_3D4_2 : 6; // 0x3d4(0x01)
	char pad_3D5[0x3]; // 0x3d5(0x03)
	struct AController* DamageInstigator; // 0x3d8(0x08)
	char pad_3E0[0x8]; // 0x3e0(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InteriorVolume
// Size: 0x548 (Inherited: 0x3f8)
class AInteriorVolume : public AExposureOverrideVolume {
public:

	bool AntiLightLeak; // 0x3f8(0x01)
	bool JustBox; // 0x3f9(0x01)
	char pad_3FA[0x6]; // 0x3fa(0x06)
	struct TArray<float> PointDotNormal_Local; // 0x400(0x10)
	struct TArray<struct FVector> Normals; // 0x410(0x10)
	struct TArray<int32_t> PointNumPerSection; // 0x420(0x10)
	struct TArray<struct FVector> AllTrianglePoints; // 0x430(0x10)
	struct TArray<struct FVector> LocalMeshCenters; // 0x440(0x10)
	struct TArray<struct FVector> LocalMeshExtents; // 0x450(0x10)
	char pad_460[0xe8]; // 0x460(0xe8)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.StaticMeshComponent
// Size: 0x7f0 (Inherited: 0x6c8)
class UStaticMeshComponent : public UMeshComponent {
public:

	char pad_6C8[0x8]; // 0x6c8(0x08)
	int32_t ForcedLodModel; // 0x6d0(0x04)
	int32_t PreviousLODLevel; // 0x6d4(0x04)
	int32_t MinLOD; // 0x6d8(0x04)
	int32_t SubDivisionStepSize; // 0x6dc(0x04)
	struct UStaticMesh* StaticMesh; // 0x6e0(0x08)
	struct FColor WireframeColorOverride; // 0x6e8(0x04)
	char bEvaluateWorldPositionOffset : 1; // 0x6ec(0x01)
	char bEvaluateWorldPositionOffsetInRayTracing : 1; // 0x6ec(0x01)
	char pad_6EC_2 : 1; // 0x6ec(0x01)
	char bOverrideWireframeColor : 1; // 0x6ec(0x01)
	char bOverrideMinLOD : 1; // 0x6ec(0x01)
	char bOverrideNavigationExport : 1; // 0x6ec(0x01)
	char bForceNavigationObstacle : 1; // 0x6ec(0x01)
	char bDisallowMeshPaintPerInstance : 1; // 0x6ec(0x01)
	char bIgnoreInstanceForTextureStreaming : 1; // 0x6ed(0x01)
	char bOverrideLightMapRes : 1; // 0x6ed(0x01)
	char bCastDistanceFieldIndirectShadow : 1; // 0x6ed(0x01)
	char bOverrideDistanceFieldSelfShadowBias : 1; // 0x6ed(0x01)
	char bUseSubDivisions : 1; // 0x6ed(0x01)
	char bUseDefaultCollision : 1; // 0x6ed(0x01)
	char bReverseCulling : 1; // 0x6ed(0x01)
	char bCustomizedPhysicsCreating : 1; // 0x6ed(0x01)
	char pad_6EE[0x2]; // 0x6ee(0x02)
	int32_t OverriddenLightMapRes; // 0x6f0(0x04)
	enum class EReflectionCachePolicy ReflectionCachePolicy; // 0x6f4(0x01)
	char pad_6F5[0x3]; // 0x6f5(0x03)
	struct AReflectionCapture* CachedReflectionCapture; // 0x6f8(0x08)
	char bForceTranslucentReceiveCSM : 1; // 0x700(0x01)
	char pad_700_1 : 7; // 0x700(0x01)
	char pad_701[0x3]; // 0x701(0x03)
	float DistanceFieldIndirectShadowMinVisibility; // 0x704(0x04)
	float DistanceFieldSelfShadowBias; // 0x708(0x04)
	char pad_70C[0x4]; // 0x70c(0x04)
	struct ULocalLightGroupBake* LocalLightGroupBakeObject; // 0x710(0x08)
	struct TMap<int32_t, struct FGuid> LocalLightGroupBakeBuildIDMap; // 0x718(0x50)
	char bEnableLightmapRotation : 1; // 0x768(0x01)
	char pad_768_1 : 7; // 0x768(0x01)
	char pad_769[0x7]; // 0x769(0x07)
	struct FQuat RotationWhenBake; // 0x770(0x10)
	float StreamingDistanceMultiplier; // 0x780(0x04)
	char pad_784[0x4]; // 0x784(0x04)
	struct TArray<struct FStaticMeshComponentLODInfo> LODData; // 0x788(0x10)
	struct TArray<struct FStreamingTextureBuildInfo> StreamingTextureData; // 0x798(0x10)
	struct FLightmassPrimitiveSettings LightmassSettings; // 0x7a8(0x20)
	char bOverrideCullScreenSize : 1; // 0x7c8(0x01)
	char bOverrideCastShadow : 1; // 0x7c8(0x01)
	char pad_7C8_2 : 6; // 0x7c8(0x01)
	char pad_7C9[0x1]; // 0x7c9(0x01)
	char bForceDynamicforShadowcache : 1; // 0x7ca(0x01)
	char pad_7CA_1 : 7; // 0x7ca(0x01)
	char pad_7CB[0x1d]; // 0x7cb(0x1d)
	struct UPrimitiveComponent* LODFollowedComponent; // 0x7e8(0x08)

	bool SetStaticMesh(struct UStaticMesh* NewMesh); // Function Engine.StaticMeshComponent.SetStaticMesh // (Native|Public|BlueprintCallable) // @ game+0x1bf12d0
	void SetReverseCulling(bool ReverseCulling); // Function Engine.StaticMeshComponent.SetReverseCulling // (Final|Native|Public|BlueprintCallable) // @ game+0x9ebf2e0
	void SetForcedLodModel(int32_t NewForcedLodModel); // Function Engine.StaticMeshComponent.SetForcedLodModel // (Final|Native|Public|BlueprintCallable) // @ game+0x9ebf060
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue); // Function Engine.StaticMeshComponent.SetEvaluateWorldPositionOffsetInRayTracing // (Final|Native|Public|BlueprintCallable) // @ game+0x9ebefd0
	void SetEvaluateWorldPositionOffset(bool NewValue); // Function Engine.StaticMeshComponent.SetEvaluateWorldPositionOffset // (Final|Native|Public|BlueprintCallable) // @ game+0x9ebef40
	void SetDistanceFieldSelfShadowBias(float NewValue); // Function Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias // (Final|Native|Public|BlueprintCallable) // @ game+0x9ebedc0
	void SetCustomLocalBoundsForLOD(bool bUseCustomBounds, struct FBoxSphereBounds NewBounds); // Function Engine.StaticMeshComponent.SetCustomLocalBoundsForLOD // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9ebecd0
	void OnRep_StaticMesh(struct UStaticMesh* OldStaticMesh); // Function Engine.StaticMeshComponent.OnRep_StaticMesh // (Final|Native|Public) // @ game+0x9ebec50
	void GetLocalBounds(struct FVector& Min, struct FVector& Max); // Function Engine.StaticMeshComponent.GetLocalBounds // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebead0
	bool GetInitialEvaluateWorldPositionOffset(); // Function Engine.StaticMeshComponent.GetInitialEvaluateWorldPositionOffset // (Final|Native|Public|BlueprintCallable) // @ game+0x9ebeaa0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SkinnedMeshComponent
// Size: 0x920 (Inherited: 0x6c8)
class USkinnedMeshComponent : public UMeshComponent {
public:

	char pad_6C8[0x8]; // 0x6c8(0x08)
	struct USkeletalMesh* SkeletalMesh; // 0x6d0(0x08)
	struct UMaterialInterface* EfffectPassMaterial; // 0x6d8(0x08)
	char bDrawEffectPass : 1; // 0x6e0(0x01)
	char bReverseDrawEffectPassCulling : 1; // 0x6e0(0x01)
	char bEffectPassNeedDepth : 1; // 0x6e0(0x01)
	char bDrawSecondPassMaterial : 1; // 0x6e0(0x01)
	char pad_6E0_4 : 4; // 0x6e0(0x01)
	char pad_6E1[0x7]; // 0x6e1(0x07)
	struct TArray<struct UMaterialInterface*> SecondPassMaterials; // 0x6e8(0x10)
	struct TWeakObjectPtr<struct USkinnedMeshComponent> MasterPoseComponent; // 0x6f8(0x08)
	char pad_700[0xf8]; // 0x700(0xf8)
	struct UPhysicsAsset* PhysicsAssetOverride; // 0x7f8(0x08)
	int32_t ForcedLodModel; // 0x800(0x04)
	int32_t MinLodModel; // 0x804(0x04)
	char pad_808[0x10]; // 0x808(0x10)
	float StreamingDistanceMultiplier; // 0x818(0x04)
	int32_t MinURO; // 0x81c(0x04)
	int32_t ExplicitlyURO; // 0x820(0x04)
	int32_t ExplicitlyRate; // 0x824(0x04)
	char pad_828[0x8]; // 0x828(0x08)
	struct TArray<struct FSkelMeshComponentLODInfo> LODInfo; // 0x830(0x10)
	char pad_840[0x24]; // 0x840(0x24)
	enum class EVisibilityBasedAnimTickOption VisibilityBasedAnimTickOption; // 0x864(0x01)
	char pad_865[0x1]; // 0x865(0x01)
	char pad_866_0 : 2; // 0x866(0x01)
	char bServerOnlyTickMontage : 1; // 0x866(0x01)
	char bOverrideMinLOD : 1; // 0x866(0x01)
	char bUseBoundsFromMasterPoseComponent : 1; // 0x866(0x01)
	char bForceWireframe : 1; // 0x866(0x01)
	char bDisplayBones : 1; // 0x866(0x01)
	char bDisableMorphTarget : 1; // 0x866(0x01)
	char bHideSkin : 1; // 0x867(0x01)
	char bPerBoneMotionBlur : 1; // 0x867(0x01)
	char bComponentUseFixedSkelBounds : 1; // 0x867(0x01)
	char bConsiderAllBodiesForBounds : 1; // 0x867(0x01)
	char bSyncAttachParentLOD : 1; // 0x867(0x01)
	char bCanHighlightSelectedSections : 1; // 0x867(0x01)
	char bRecentlyRendered : 1; // 0x867(0x01)
	char bRecentlyRenderedOnScreen : 1; // 0x867(0x01)
	char bCastCapsuleDirectShadow : 1; // 0x868(0x01)
	char bCastCapsuleIndirectShadow : 1; // 0x868(0x01)
	char bCPUSkinning : 1; // 0x868(0x01)
	char bEnableUpdateRateOptimizations : 1; // 0x868(0x01)
	char bDisplayDebugUpdateRateOptimizations : 1; // 0x868(0x01)
	char pad_868_5 : 3; // 0x868(0x01)
	bool bForceDynamicforShadowcache; // 0x869(0x01)
	bool bEnableUpdateShadowCacheState; // 0x86a(0x01)
	char bRenderStatic : 1; // 0x86b(0x01)
	char bIgnoreMasterPoseComponentLOD : 1; // 0x86b(0x01)
	char bForceTranslucentReceiveCSM : 1; // 0x86b(0x01)
	char pad_86B_3 : 2; // 0x86b(0x01)
	char bCachedLocalBoundsUpToDate : 1; // 0x86b(0x01)
	char pad_86B_6 : 1; // 0x86b(0x01)
	char bForceMeshObjectUpdate : 1; // 0x86b(0x01)
	char pad_86C[0x4]; // 0x86c(0x04)
	float CapsuleIndirectShadowMinVisibility; // 0x870(0x04)
	char pad_874[0x24]; // 0x874(0x24)
	struct FBoxSphereBounds CachedWorldSpaceBounds; // 0x898(0x1c)
	char pad_8B4[0xc]; // 0x8b4(0x0c)
	struct FMatrix CachedWorldToLocalTransform; // 0x8c0(0x40)
	char pad_900[0x20]; // 0x900(0x20)

	void UnloadSkinWeightProfile(struct FName InProfileName); // Function Engine.SkinnedMeshComponent.UnloadSkinWeightProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea85d0
	void UnHideBoneByName(struct FName BoneName); // Function Engine.SkinnedMeshComponent.UnHideBoneByName // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea8550
	void TransformToBoneSpace(struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector& OutPosition, struct FRotator& OutRotation); // Function Engine.SkinnedMeshComponent.TransformToBoneSpace // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea8390
	void TransformFromBoneSpace(struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector& OutPosition, struct FRotator& OutRotation); // Function Engine.SkinnedMeshComponent.TransformFromBoneSpace // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9ea81d0
	void ShowMaterialSection(int32_t MaterialID, int32_t SectionIndex, bool bShow, int32_t LodIndex); // Function Engine.SkinnedMeshComponent.ShowMaterialSection // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea8090
	void ShowAllMaterialSections(int32_t LodIndex); // Function Engine.SkinnedMeshComponent.ShowAllMaterialSections // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea8010
	void SetVertexColorOverride_LinearColor(int32_t LodIndex, struct TArray<struct FLinearColor>& VertexColors); // Function Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9ea7f00
	bool SetSkinWeightProfile(struct FName InProfileName); // Function Engine.SkinnedMeshComponent.SetSkinWeightProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea7e70
	void SetSkinWeightOverride(int32_t LodIndex, struct TArray<struct FSkelMeshSkinWeightInfo>& SkinWeights); // Function Engine.SkinnedMeshComponent.SetSkinWeightOverride // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9ea7d60
	void SetSkeletalMesh(struct USkeletalMesh* NewMesh, bool bReinitPose); // Function Engine.SkinnedMeshComponent.SetSkeletalMesh // (Native|Public|BlueprintCallable) // @ game+0x9ea7c90
	void SetSecondPassMaterial(struct TArray<struct UMaterialInterface*> InSecondPassMaterial, bool bInDrawSecondPass); // Function Engine.SkinnedMeshComponent.SetSecondPassMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea7b20
	void SetRenderStatic(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetRenderStatic // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea7a90
	void SetPhysicsAsset(struct UPhysicsAsset* NewPhysicsAsset, bool bForceReInit, bool bForceRefreshBone); // Function Engine.SkinnedMeshComponent.SetPhysicsAsset // (Native|Public|BlueprintCallable) // @ game+0x9ea7980
	void SetMultiDrawEffect(bool bDrawMultiEffect, bool bReverseCulling); // Function Engine.SkinnedMeshComponent.SetMultiDrawEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea78b0
	void SetMinLOD(int32_t InNewMinLOD); // Function Engine.SkinnedMeshComponent.SetMinLOD // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea7830
	void SetMasterPoseComponent(struct USkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate); // Function Engine.SkinnedMeshComponent.SetMasterPoseComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea7760
	void SetForcedLOD(int32_t InNewForcedLOD); // Function Engine.SkinnedMeshComponent.SetForcedLOD // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea76e0
	void SetCastCapsuleIndirectShadow(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea7650
	void SetCastCapsuleDirectShadow(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea75c0
	void SetCapsuleIndirectShadowMinVisibility(float NewValue); // Function Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea7540
	bool IsUsingSkinWeightProfile(); // Function Engine.SkinnedMeshComponent.IsUsingSkinWeightProfile // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea7510
	bool IsMaterialSectionShown(int32_t MaterialID, int32_t LodIndex); // Function Engine.SkinnedMeshComponent.IsMaterialSectionShown // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea7450
	bool IsBoneHiddenByName(struct FName BoneName); // Function Engine.SkinnedMeshComponent.IsBoneHiddenByName // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea73c0
	void HideBoneByName(struct FName BoneName, enum class EPhysBodyOp PhysBodyOption); // Function Engine.SkinnedMeshComponent.HideBoneByName // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea71e0
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(struct FName BoneName, float& OutTwistAngle, float& OutSwingAngle); // Function Engine.SkinnedMeshComponent.GetTwistAndSwingAngleOfDeltaRotationFromRefPose // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea70c0
	struct FName GetSocketBoneName(struct FName InSocketName); // Function Engine.SkinnedMeshComponent.GetSocketBoneName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea6f90
	struct FVector GetRefPosePosition(int32_t BoneIndex); // Function Engine.SkinnedMeshComponent.GetRefPosePosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9ea6ef0
	struct FName GetParentBone(struct FName BoneName); // Function Engine.SkinnedMeshComponent.GetParentBone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea6e60
	int32_t GetNumLODs(); // Function Engine.SkinnedMeshComponent.GetNumLODs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea6e30
	int32_t GetNumBones(); // Function Engine.SkinnedMeshComponent.GetNumBones // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea6e00
	int32_t GetForcedLOD(); // Function Engine.SkinnedMeshComponent.GetForcedLOD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea6dd0
	struct FTransform GetDeltaTransformFromRefPose(struct FName BoneName, struct FName BaseName); // Function Engine.SkinnedMeshComponent.GetDeltaTransformFromRefPose // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea6cd0
	struct FName GetCurrentSkinWeightProfileName(); // Function Engine.SkinnedMeshComponent.GetCurrentSkinWeightProfileName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea6cb0
	struct FName GetBoneName(int32_t BoneIndex); // Function Engine.SkinnedMeshComponent.GetBoneName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea6c20
	int32_t GetBoneIndex(struct FName BoneName); // Function Engine.SkinnedMeshComponent.GetBoneIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea6b90
	struct FName FindClosestBone_K2(struct FVector TestLocation, struct FVector& BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset); // Function Engine.SkinnedMeshComponent.FindClosestBone_K2 // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea6a00
	void ClearVertexColorOverride(int32_t LodIndex); // Function Engine.SkinnedMeshComponent.ClearVertexColorOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea6980
	void ClearSkinWeightProfile(); // Function Engine.SkinnedMeshComponent.ClearSkinWeightProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea6960
	void ClearSkinWeightOverride(int32_t LodIndex); // Function Engine.SkinnedMeshComponent.ClearSkinWeightOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea68e0
	bool BoneIsChildOf(struct FName BoneName, struct FName ParentBoneName); // Function Engine.SkinnedMeshComponent.BoneIsChildOf // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea6820
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleSystemComponent
// Size: 0x7d0 (Inherited: 0x560)
class UParticleSystemComponent : public UFXSystemComponent {
public:

	struct UParticleSystem* Template; // 0x560(0x08)
	struct TArray<struct UMaterialInterface*> EmitterMaterials; // 0x568(0x10)
	struct TArray<struct USkeletalMeshComponent*> SkelMeshComponents; // 0x578(0x10)
	char pad_588[0x1]; // 0x588(0x01)
	char bResetOnDetach : 1; // 0x589(0x01)
	char bUpdateOnDedicatedServer : 1; // 0x589(0x01)
	char pad_589_2 : 2; // 0x589(0x01)
	char bAllowRecycling : 1; // 0x589(0x01)
	char bAutoManageAttachment : 1; // 0x589(0x01)
	char pad_589_6 : 2; // 0x589(0x01)
	char bWarmingUp : 1; // 0x58a(0x01)
	char bOverrideLODMethod : 1; // 0x58a(0x01)
	char bSkipUpdateDynamicDataDuringTick : 1; // 0x58a(0x01)
	char pad_58A_3 : 4; // 0x58a(0x01)
	char bForceTranslucentReceiveCSM : 1; // 0x58a(0x01)
	char bForceUpdateForSceneCapture : 1; // 0x58b(0x01)
	char pad_58B_1 : 7; // 0x58b(0x01)
	char pad_58C[0x9]; // 0x58c(0x09)
	enum class ParticleSystemLODMethod LODMethod; // 0x595(0x01)
	enum class EParticleSignificanceLevel RequiredSignificance; // 0x596(0x01)
	char pad_597[0x1]; // 0x597(0x01)
	struct TArray<struct FParticleSysParam> InstanceParameters; // 0x598(0x10)
	/*struct FMulticastInlineDelegate*/char OnParticleSpawn[0x10]; // 0x5a8(0x10)
	/*struct FMulticastInlineDelegate*/char OnParticleBurst[0x10]; // 0x5b8(0x10)
	/*struct FMulticastInlineDelegate*/char OnParticleDeath[0x10]; // 0x5c8(0x10)
	/*struct FMulticastInlineDelegate*/char OnParticleCollide[0x10]; // 0x5d8(0x10)
	struct FVector OldPosition; // 0x5e8(0x0c)
	struct FVector PartSysVelocity; // 0x5f4(0x0c)
	float WarmupTime; // 0x600(0x04)
	float WarmupTickRate; // 0x604(0x04)
	char pad_608[0x4]; // 0x608(0x04)
	float SecondsBeforeInactive; // 0x60c(0x04)
	char pad_610[0x4]; // 0x610(0x04)
	float MaxTimeBeforeForceUpdateTransform; // 0x614(0x04)
	char pad_618[0x20]; // 0x618(0x20)
	struct TArray<struct UParticleSystemReplay*> ReplayClips; // 0x638(0x10)
	char pad_648[0x8]; // 0x648(0x08)
	float CustomTimeDilation; // 0x650(0x04)
	char pad_654[0x54]; // 0x654(0x54)
	struct TWeakObjectPtr<struct USceneComponent> AutoAttachParent; // 0x6a8(0x08)
	struct FName AutoAttachSocketName; // 0x6b0(0x08)
	enum class EAttachmentRule AutoAttachLocationRule; // 0x6b8(0x01)
	enum class EAttachmentRule AutoAttachRotationRule; // 0x6b9(0x01)
	enum class EAttachmentRule AutoAttachScaleRule; // 0x6ba(0x01)
	char pad_6BB[0x2d]; // 0x6bb(0x2d)
	/*struct FMulticastInlineDelegate*/char OnSystemFinished[0x10]; // 0x6e8(0x10)
	char pad_6F8[0x58]; // 0x6f8(0x58)
	bool bCannotSkipTickDueToVisibility; // 0x750(0x01)
	char pad_751[0x7f]; // 0x751(0x7f)

	void SetTrailSourceData(struct FName InFirstSocketName, struct FName InSecondSocketName, enum class ETrailWidthMode InWidthMode, float InWidth); // Function Engine.ParticleSystemComponent.SetTrailSourceData // (Final|Native|Public|BlueprintCallable) // @ game+0x9e68f00
	void SetTemplate(struct UParticleSystem* NewTemplate); // Function Engine.ParticleSystemComponent.SetTemplate // (Final|Native|Public|BlueprintCallable) // @ game+0x9e68e80
	void SetMaterialParameter(struct FName ParameterName, struct UMaterialInterface* Param); // Function Engine.ParticleSystemComponent.SetMaterialParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x9e68dc0
	void SetBeamTargetTangent(int32_t EmitterIndex, struct FVector NewTangentPoint, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetTangent // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e68a40
	void SetBeamTargetStrength(int32_t EmitterIndex, float NewTargetStrength, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetStrength // (Native|Public|BlueprintCallable) // @ game+0x9e68950
	void SetBeamTargetPoint(int32_t EmitterIndex, struct FVector NewTargetPoint, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetPoint // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e68840
	void SetBeamSourceTangent(int32_t EmitterIndex, struct FVector NewTangentPoint, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourceTangent // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e68730
	void SetBeamSourceStrength(int32_t EmitterIndex, float NewSourceStrength, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourceStrength // (Native|Public|BlueprintCallable) // @ game+0x9e68640
	void SetBeamSourcePoint(int32_t EmitterIndex, struct FVector NewSourcePoint, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourcePoint // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e68530
	void SetBeamEndPoint(int32_t EmitterIndex, struct FVector NewEndPoint); // Function Engine.ParticleSystemComponent.SetBeamEndPoint // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e68460
	void SetAutoAttachParams(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachLocation LocationType); // Function Engine.ParticleSystemComponent.SetAutoAttachParams // (Final|Native|Public|BlueprintCallable) // @ game+0x9e681c0
	int32_t GetNumActiveParticles(); // Function Engine.ParticleSystemComponent.GetNumActiveParticles // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e68060
	struct UMaterialInterface* GetNamedMaterial(struct FName InName); // Function Engine.ParticleSystemComponent.GetNamedMaterial // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e67fc0
	bool GetBeamTargetTangent(int32_t EmitterIndex, int32_t TargetIndex, struct FVector& OutTangentPoint); // Function Engine.ParticleSystemComponent.GetBeamTargetTangent // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e67e80
	bool GetBeamTargetStrength(int32_t EmitterIndex, int32_t TargetIndex, float& OutTargetStrength); // Function Engine.ParticleSystemComponent.GetBeamTargetStrength // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e67d70
	bool GetBeamTargetPoint(int32_t EmitterIndex, int32_t TargetIndex, struct FVector& OutTargetPoint); // Function Engine.ParticleSystemComponent.GetBeamTargetPoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e67c60
	bool GetBeamSourceTangent(int32_t EmitterIndex, int32_t SourceIndex, struct FVector& OutTangentPoint); // Function Engine.ParticleSystemComponent.GetBeamSourceTangent // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e67b50
	bool GetBeamSourceStrength(int32_t EmitterIndex, int32_t SourceIndex, float& OutSourceStrength); // Function Engine.ParticleSystemComponent.GetBeamSourceStrength // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e67a40
	bool GetBeamSourcePoint(int32_t EmitterIndex, int32_t SourceIndex, struct FVector& OutSourcePoint); // Function Engine.ParticleSystemComponent.GetBeamSourcePoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e67930
	bool GetBeamEndPoint(int32_t EmitterIndex, struct FVector& OutEndPoint); // Function Engine.ParticleSystemComponent.GetBeamEndPoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9e67850
	void GenerateParticleEvent(struct FName InEventName, float InEmitterTime, struct FVector InLocation, struct FVector InDirection, struct FVector InVelocity); // Function Engine.ParticleSystemComponent.GenerateParticleEvent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e676b0
	void EndTrails(); // Function Engine.ParticleSystemComponent.EndTrails // (Final|Native|Public|BlueprintCallable) // @ game+0x9e67690
	struct UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(struct FName InName, struct UMaterialInterface* SourceMaterial); // Function Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance // (Native|Public|BlueprintCallable) // @ game+0x9e675c0
	void BeginTrails(struct FName InFirstSocketName, struct FName InSecondSocketName, enum class ETrailWidthMode InWidthMode, float InWidth); // Function Engine.ParticleSystemComponent.BeginTrails // (Final|Native|Public|BlueprintCallable) // @ game+0x9e673e0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CapsuleComponent
// Size: 0x588 (Inherited: 0x578)
class UCapsuleComponent : public UShapeComponent {
public:

	float CapsuleHalfHeight; // 0x578(0x04)
	float CapsuleRadius; // 0x57c(0x04)
	char pad_580[0x8]; // 0x580(0x08)

	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleSize // (Native|Public|BlueprintCallable) // @ game+0x9d942c0
	void SetCapsuleRadius(float radius, bool bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x9d941e0
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleHalfHeight // (Final|Native|Public|BlueprintCallable) // @ game+0x9d94100
	void GetUnscaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere); // Function Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d92760
	void GetUnscaledCapsuleSize(float& OutRadius, float& OutHalfHeight); // Function Engine.CapsuleComponent.GetUnscaledCapsuleSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d92670
	float GetUnscaledCapsuleRadius(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d92650
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d92620
	float GetUnscaledCapsuleHalfHeight(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xaa1840
	float GetShapeScale(); // Function Engine.CapsuleComponent.GetShapeScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d92500
	void GetScaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere); // Function Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d923e0
	void GetScaledCapsuleSize(float& OutRadius, float& OutHalfHeight); // Function Engine.CapsuleComponent.GetScaledCapsuleSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d922d0
	float GetScaledCapsuleRadius(); // Function Engine.CapsuleComponent.GetScaledCapsuleRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d92290
	float GetScaledCapsuleHalfHeight_WithoutHemisphere(); // Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d92240
	float GetScaledCapsuleHalfHeight(); // Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d92210
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SphereComponent
// Size: 0x580 (Inherited: 0x578)
class USphereComponent : public UShapeComponent {
public:

	float SphereRadius; // 0x578(0x04)
	char pad_57C[0x4]; // 0x57c(0x04)

	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps); // Function Engine.SphereComponent.SetSphereRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x9eb7680
	float GetUnscaledSphereRadius(); // Function Engine.SphereComponent.GetUnscaledSphereRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xaa1840
	float GetShapeScale(); // Function Engine.SphereComponent.GetShapeScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb5b60
	float GetScaledSphereRadius(); // Function Engine.SphereComponent.GetScaledSphereRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9eb5b10
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.BoxComponent
// Size: 0x590 (Inherited: 0x578)
class UBoxComponent : public UShapeComponent {
public:

	struct FVector BoxExtent; // 0x578(0x0c)
	float LineThickness; // 0x584(0x04)
	bool bAutoDynamicObstacle; // 0x588(0x01)
	bool bBuildContour; // 0x589(0x01)
	char pad_58A[0x6]; // 0x58a(0x06)

	void SetBoxExtent(struct FVector InBoxExtent, bool bUpdateOverlaps); // Function Engine.BoxComponent.SetBoxExtent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9d89020
	struct FVector GetUnscaledBoxExtent(); // Function Engine.BoxComponent.GetUnscaledBoxExtent // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d88ff0
	struct FVector GetScaledBoxExtent(); // Function Engine.BoxComponent.GetScaledBoxExtent // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d88f90
	void ForceNavMeshUpdate(); // Function Engine.BoxComponent.ForceNavMeshUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x9d88f70
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DirectionalLightComponent
// Size: 0x710 (Inherited: 0x410)
class UDirectionalLightComponent : public ULightComponent {
public:

	float ShadowCascadeBiasDistribution; // 0x410(0x04)
	char pad_414[0x4]; // 0x414(0x04)
	struct TMap<enum class ELODShadowBiasType, float> LODShadowBiases; // 0x418(0x50)
	struct TMap<enum class EPrebakeShadowCascadeIndex, float> PrebakeShadowBias; // 0x468(0x50)
	struct TMap<enum class EPrebakeShadowCascadeIndex, float> FoliagePrebakeShadowBias; // 0x4b8(0x50)
	char bEnableLightShaftOcclusion : 1; // 0x508(0x01)
	char pad_508_1 : 7; // 0x508(0x01)
	char pad_509[0x3]; // 0x509(0x03)
	float OcclusionMaskDarkness; // 0x50c(0x04)
	float OcclusionDepthRange; // 0x510(0x04)
	bool bForceManualOverrideLightShaftDir; // 0x514(0x01)
	char pad_515[0x3]; // 0x515(0x03)
	struct FVector LightShaftOverrideDirection; // 0x518(0x0c)
	float WholeSceneDynamicShadowRadius; // 0x524(0x04)
	struct ALightShadowVolume* DirectionalLightShadowVolume; // 0x528(0x08)
	struct TArray<struct ALightShadowVolume*> ExtraDirectionalLightShadowVolumes; // 0x530(0x10)
	bool bEnableShadowCache; // 0x540(0x01)
	bool bForceUseCSMForStaticObjects; // 0x541(0x01)
	char pad_542[0x2]; // 0x542(0x02)
	float DynamicShadowDistanceMovableLight; // 0x544(0x04)
	float DynamicShadowDistanceStationaryLight; // 0x548(0x04)
	int32_t DynamicShadowCascades; // 0x54c(0x04)
	float CascadeDistributionExponent; // 0x550(0x04)
	float CascadeTransitionFraction; // 0x554(0x04)
	float ShadowDistanceFadeoutFraction; // 0x558(0x04)
	struct FDirectionalShadowUseSkylightAOParameters DirectionalShadowUseSkylightAOParameters; // 0x55c(0x10)
	char bUseInsetShadowsForMovableObjects : 1; // 0x56c(0x01)
	char pad_56C_1 : 7; // 0x56c(0x01)
	char pad_56D[0x3]; // 0x56d(0x03)
	int32_t FarShadowCascadeCount; // 0x570(0x04)
	float FarShadowDistance; // 0x574(0x04)
	bool bUsePreBakeShadowDepthMap; // 0x578(0x01)
	char pad_579[0x3]; // 0x579(0x03)
	int32_t PreBakeShadowCascadeCount; // 0x57c(0x04)
	float PreBakeShadowBiasScale; // 0x580(0x04)
	int32_t PreBakeShadowDepthMapTileResolution; // 0x584(0x04)
	float PreBakeShadowDepthTileSize; // 0x588(0x04)
	char pad_58C[0x4]; // 0x58c(0x04)
	struct ALightShadowVolume* PreBakeShadowDepthVolume; // 0x590(0x08)
	struct UPreBakeTODDirectionalShadowDepthMap* PreBakeTODDirectionalShadowDepthMap; // 0x598(0x08)
	float DistanceFieldShadowDistance; // 0x5a0(0x04)
	float LightSourceAngle; // 0x5a4(0x04)
	float LightSourceSoftAngle; // 0x5a8(0x04)
	float TraceDistance; // 0x5ac(0x04)
	struct FLightmassDirectionalLightSettings LightmassSettings; // 0x5b0(0x10)
	char bCastModulatedShadows : 1; // 0x5c0(0x01)
	char pad_5C0_1 : 7; // 0x5c0(0x01)
	char pad_5C1[0x3]; // 0x5c1(0x03)
	struct FColor ModulatedShadowColor; // 0x5c4(0x04)
	float ShadowAmount; // 0x5c8(0x04)
	char bFixedMeshCausticsPosition : 1; // 0x5cc(0x01)
	char pad_5CC_1 : 7; // 0x5cc(0x01)
	char pad_5CD[0x3]; // 0x5cd(0x03)
	struct FVector MeshCausticsRange; // 0x5d0(0x0c)
	char bUsedAsAtmosphereSunLight : 1; // 0x5dc(0x01)
	char pad_5DC_1 : 7; // 0x5dc(0x01)
	char pad_5DD[0x3]; // 0x5dd(0x03)
	int32_t AtmosphereSunLightIndex; // 0x5e0(0x04)
	char pad_5E4[0x54]; // 0x5e4(0x54)
	struct TMap<struct FIntPoint, struct FShadowDataItem> ShadowDatas; // 0x638(0x50)
	char pad_688[0x88]; // 0x688(0x88)

	void SetUseInsetShadowsForMovableObjects(bool NewValue); // Function Engine.DirectionalLightComponent.SetUseInsetShadowsForMovableObjects // (Final|Native|Public|BlueprintCallable) // @ game+0x9da43f0
	void SetShadowDistanceFadeoutFraction(float NewValue); // Function Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction // (Final|Native|Public|BlueprintCallable) // @ game+0x9da41d0
	void SetShadowAmount(float NewValue); // Function Engine.DirectionalLightComponent.SetShadowAmount // (Final|Native|Public|BlueprintCallable) // @ game+0x9da4150
	void SetOcclusionMaskDarkness(float NewValue); // Function Engine.DirectionalLightComponent.SetOcclusionMaskDarkness // (Final|Native|Public|BlueprintCallable) // @ game+0x9da40d0
	void SetLightShaftOverrideDirection(struct FVector NewValue); // Function Engine.DirectionalLightComponent.SetLightShaftOverrideDirection // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9da4040
	void SetEnableLightShaftOcclusion(bool bNewValue); // Function Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion // (Final|Native|Public|BlueprintCallable) // @ game+0x9da3fb0
	void SetDynamicShadowDistanceStationaryLight(float NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight // (Final|Native|Public|BlueprintCallable) // @ game+0x9da3f30
	void SetDynamicShadowDistanceMovableLight(float NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight // (Final|Native|Public|BlueprintCallable) // @ game+0x9da3eb0
	void SetDynamicShadowCascades(int32_t NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowCascades // (Final|Native|Public|BlueprintCallable) // @ game+0x9da3e30
	void SetCascadeTransitionFraction(float NewValue); // Function Engine.DirectionalLightComponent.SetCascadeTransitionFraction // (Final|Native|Public|BlueprintCallable) // @ game+0x9da3db0
	void SetCascadeDistributionExponent(float NewValue); // Function Engine.DirectionalLightComponent.SetCascadeDistributionExponent // (Final|Native|Public|BlueprintCallable) // @ game+0x9da3d30
	void BakeShadowDepth(); // Function Engine.DirectionalLightComponent.BakeShadowDepth // (Final|Native|Public|BlueprintCallable) // @ game+0x88f4d0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.LocalLightComponent
// Size: 0x430 (Inherited: 0x410)
class ULocalLightComponent : public ULightComponent {
public:

	enum class ELightUnits IntensityUnits; // 0x410(0x01)
	char pad_411[0x3]; // 0x411(0x03)
	float radius; // 0x414(0x04)
	float AttenuationRadius; // 0x418(0x04)
	struct FLightmassPointLightSettings LightmassSettings; // 0x41c(0x0c)
	bool bCacheStaticShadow; // 0x428(0x01)
	bool bCastPerObjectShadow; // 0x429(0x01)
	char pad_42A[0x2]; // 0x42a(0x02)
	float ShadowRadiusScale; // 0x42c(0x04)

	void SetShadowRadiusScale(float NewValue); // Function Engine.LocalLightComponent.SetShadowRadiusScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9e3a350
	void SetIntensityUnits(enum class ELightUnits NewIntensityUnits); // Function Engine.LocalLightComponent.SetIntensityUnits // (Final|Native|Public|BlueprintCallable) // @ game+0x9e3a250
	void SetCastPerObjectShadow(bool NewValue); // Function Engine.LocalLightComponent.SetCastPerObjectShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x9e39f80
	void SetCacheStaticShadow(bool NewValue); // Function Engine.LocalLightComponent.SetCacheStaticShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x9e39e60
	void SetAttenuationRadius(float NewRadius); // Function Engine.LocalLightComponent.SetAttenuationRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x9e39de0
	float STATIC_GetUnitsConversionFactor(enum class ELightUnits SrcUnits, enum class ELightUnits TargetUnits, float CosHalfConeAngle); // Function Engine.LocalLightComponent.GetUnitsConversionFactor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9e39b30
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CharacterMovementComponent
// Size: 0x7a0 (Inherited: 0x188)
class UCharacterMovementComponent : public UPawnMovementComponent {
public:

	char pad_188[0x10]; // 0x188(0x10)
	struct ACHARACTER* CharacterOwner; // 0x198(0x08)
	float GravityScale; // 0x1a0(0x04)
	float MaxStepHeight; // 0x1a4(0x04)
	float JumpZVelocity; // 0x1a8(0x04)
	float JumpOffJumpZFactor; // 0x1ac(0x04)
	char pad_1B0[0x8]; // 0x1b0(0x08)
	float WalkableFloorAngle; // 0x1b8(0x04)
	float WalkableFloorZ; // 0x1bc(0x04)
	enum class EMovementMode MovementMode; // 0x1c0(0x01)
	char CustomMovementMode; // 0x1c1(0x01)
	enum class ENetworkSmoothingMode NetworkSmoothingMode; // 0x1c2(0x01)
	char pad_1C3[0x1]; // 0x1c3(0x01)
	float GroundFriction; // 0x1c4(0x04)
	char pad_1C8[0x24]; // 0x1c8(0x24)
	float MaxWalkSpeed; // 0x1ec(0x04)
	float MaxWalkSpeedCrouched; // 0x1f0(0x04)
	float MaxSwimSpeed; // 0x1f4(0x04)
	float MaxFlySpeed; // 0x1f8(0x04)
	float MaxCustomMovementSpeed; // 0x1fc(0x04)
	float MaxAcceleration; // 0x200(0x04)
	float MinAnalogWalkSpeed; // 0x204(0x04)
	float BrakingFrictionFactor; // 0x208(0x04)
	float BrakingFriction; // 0x20c(0x04)
	float BrakingSubStepTime; // 0x210(0x04)
	float BrakingDecelerationWalking; // 0x214(0x04)
	float BrakingDecelerationFalling; // 0x218(0x04)
	float BrakingDecelerationSwimming; // 0x21c(0x04)
	float BrakingDecelerationFlying; // 0x220(0x04)
	float AirControl; // 0x224(0x04)
	float AirControlBoostMultiplier; // 0x228(0x04)
	float AirControlBoostVelocityThreshold; // 0x22c(0x04)
	float FallingLateralFriction; // 0x230(0x04)
	float CrouchedHalfHeight; // 0x234(0x04)
	float Buoyancy; // 0x238(0x04)
	float PerchRadiusThreshold; // 0x23c(0x04)
	float PerchAdditionalHeight; // 0x240(0x04)
	struct FRotator RotationRate; // 0x244(0x0c)
	char bUseSeparateBrakingFriction : 1; // 0x250(0x01)
	char bApplyGravityWhileJumping : 1; // 0x250(0x01)
	char bUseControllerDesiredRotation : 1; // 0x250(0x01)
	char bOrientRotationToMovement : 1; // 0x250(0x01)
	char bSweepWhileNavWalking : 1; // 0x250(0x01)
	char pad_250_5 : 1; // 0x250(0x01)
	char bMovementInProgress : 1; // 0x250(0x01)
	char bEnableScopedMovementUpdates : 1; // 0x250(0x01)
	char bEnableServerDualMoveScopedMovementUpdates : 1; // 0x251(0x01)
	char bForceMaxAccel : 1; // 0x251(0x01)
	char bRunPhysicsWithNoController : 1; // 0x251(0x01)
	char bForceNextFloorCheck : 1; // 0x251(0x01)
	char bShrinkProxyCapsule : 1; // 0x251(0x01)
	char bCanWalkOffLedges : 1; // 0x251(0x01)
	char bCanWalkOffLedgesWhenCrouching : 1; // 0x251(0x01)
	char pad_251_7 : 1; // 0x251(0x01)
	char pad_252_0 : 1; // 0x252(0x01)
	char bNetworkSkipProxyPredictionOnNetUpdate : 1; // 0x252(0x01)
	char bNetworkAlwaysReplicateTransformUpdateTimestamp : 1; // 0x252(0x01)
	char bDeferUpdateMoveComponent : 1; // 0x252(0x01)
	char bEnablePhysicsInteraction : 1; // 0x252(0x01)
	char bTouchForceScaledToMass : 1; // 0x252(0x01)
	char bPushForceScaledToMass : 1; // 0x252(0x01)
	char bPushForceUsingZOffset : 1; // 0x252(0x01)
	char bScalePushForceToVelocity : 1; // 0x253(0x01)
	char pad_253_1 : 7; // 0x253(0x01)
	char pad_254[0x4]; // 0x254(0x04)
	struct USceneComponent* DeferredUpdatedMoveComponent; // 0x258(0x08)
	float MaxOutOfWaterStepHeight; // 0x260(0x04)
	float OutofWaterZ; // 0x264(0x04)
	float Mass; // 0x268(0x04)
	float StandingDownwardForceScale; // 0x26c(0x04)
	float InitialPushForceFactor; // 0x270(0x04)
	float PushForceFactor; // 0x274(0x04)
	float PushForcePointZOffsetFactor; // 0x278(0x04)
	float TouchForceFactor; // 0x27c(0x04)
	float MinTouchForce; // 0x280(0x04)
	float MaxTouchForce; // 0x284(0x04)
	float RepulsionForce; // 0x288(0x04)
	struct FVector Acceleration; // 0x28c(0x0c)
	char pad_298[0x8]; // 0x298(0x08)
	struct FQuat LastUpdateRotation; // 0x2a0(0x10)
	struct FVector LastUpdateLocation; // 0x2b0(0x0c)
	struct FVector LastUpdateVelocity; // 0x2bc(0x0c)
	float ServerLastTransformUpdateTimeStamp; // 0x2c8(0x04)
	float ServerLastClientGoodMoveAckTime; // 0x2cc(0x04)
	float ServerLastClientAdjustmentTime; // 0x2d0(0x04)
	struct FVector PendingImpulseToApply; // 0x2d4(0x0c)
	struct FVector PendingForceToApply; // 0x2e0(0x0c)
	float AnalogInputModifier; // 0x2ec(0x04)
	char pad_2F0[0xc]; // 0x2f0(0x0c)
	float MaxSimulationTimeStep; // 0x2fc(0x04)
	int32_t MaxSimulationIterations; // 0x300(0x04)
	int32_t MaxJumpApexAttemptsPerSimulation; // 0x304(0x04)
	float MaxDepenetrationWithGeometry; // 0x308(0x04)
	float MaxDepenetrationWithGeometryAsProxy; // 0x30c(0x04)
	float MaxDepenetrationWithPawn; // 0x310(0x04)
	float MaxDepenetrationWithPawnAsProxy; // 0x314(0x04)
	float NetworkSimulatedSmoothLocationTime; // 0x318(0x04)
	float NetworkSimulatedSmoothRotationTime; // 0x31c(0x04)
	float ListenServerNetworkSimulatedSmoothLocationTime; // 0x320(0x04)
	float ListenServerNetworkSimulatedSmoothRotationTime; // 0x324(0x04)
	float NetProxyShrinkRadius; // 0x328(0x04)
	float NetProxyShrinkHalfHeight; // 0x32c(0x04)
	float NetworkMaxSmoothUpdateDistance; // 0x330(0x04)
	float NetworkNoSmoothUpdateDistance; // 0x334(0x04)
	float NetworkMinTimeBetweenClientAckGoodMoves; // 0x338(0x04)
	float NetworkMinTimeBetweenClientAdjustments; // 0x33c(0x04)
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection; // 0x340(0x04)
	float NetworkLargeClientCorrectionDistance; // 0x344(0x04)
	float LedgeCheckThreshold; // 0x348(0x04)
	float JumpOutOfWaterPitch; // 0x34c(0x04)
	struct FFindFloorResult CurrentFloor; // 0x350(0x94)
	enum class EMovementMode DefaultLandMovementMode; // 0x3e4(0x01)
	enum class EMovementMode DefaultWaterMovementMode; // 0x3e5(0x01)
	enum class EMovementMode GroundMovementMode; // 0x3e6(0x01)
	char bMaintainHorizontalGroundVelocity : 1; // 0x3e7(0x01)
	char bImpartBaseVelocityX : 1; // 0x3e7(0x01)
	char bImpartBaseVelocityY : 1; // 0x3e7(0x01)
	char bImpartBaseVelocityZ : 1; // 0x3e7(0x01)
	char bImpartBaseAngularVelocity : 1; // 0x3e7(0x01)
	char bJustTeleported : 1; // 0x3e7(0x01)
	char bNetworkUpdateReceived : 1; // 0x3e7(0x01)
	char bNetworkMovementModeChanged : 1; // 0x3e7(0x01)
	char bIgnoreClientMovementErrorChecksAndCorrection : 1; // 0x3e8(0x01)
	char bServerAcceptClientAuthoritativePosition : 1; // 0x3e8(0x01)
	char bNotifyApex : 1; // 0x3e8(0x01)
	char bCheatFlying : 1; // 0x3e8(0x01)
	char bWantsToCrouch : 1; // 0x3e8(0x01)
	char bCrouchMaintainsBaseLocation : 1; // 0x3e8(0x01)
	char bIgnoreBaseRotation : 1; // 0x3e8(0x01)
	char bFastAttachedMove : 1; // 0x3e8(0x01)
	char bAlwaysCheckFloor : 1; // 0x3e9(0x01)
	char bUseFlatBaseForFloorChecks : 1; // 0x3e9(0x01)
	char bPerformingJumpOff : 1; // 0x3e9(0x01)
	char bWantsToLeaveNavWalking : 1; // 0x3e9(0x01)
	char bUseRVOAvoidance : 1; // 0x3e9(0x01)
	char bRequestedMoveUseAcceleration : 1; // 0x3e9(0x01)
	char pad_3E9_6 : 1; // 0x3e9(0x01)
	char bWasSimulatingRootMotion : 1; // 0x3e9(0x01)
	char bAllowPhysicsRotationDuringAnimRootMotion : 1; // 0x3ea(0x01)
	char bHasRequestedVelocity : 1; // 0x3ea(0x01)
	char bRequestedMoveWithMaxSpeed : 1; // 0x3ea(0x01)
	char bWasAvoidanceUpdated : 1; // 0x3ea(0x01)
	char pad_3EA_4 : 2; // 0x3ea(0x01)
	char bProjectNavMeshWalking : 1; // 0x3ea(0x01)
	char bProjectNavMeshOnBothWorldChannels : 1; // 0x3ea(0x01)
	char bNavMeshWalkingAvoidBumpy : 1; // 0x3eb(0x01)
	char pad_3EB_1 : 7; // 0x3eb(0x01)
	char pad_3EC[0x10]; // 0x3ec(0x10)
	float AvoidanceConsiderationRadius; // 0x3fc(0x04)
	struct FVector RequestedVelocity; // 0x400(0x0c)
	int32_t AvoidanceUID; // 0x40c(0x04)
	struct FNavAvoidanceMask AvoidanceGroup; // 0x410(0x04)
	struct FNavAvoidanceMask GroupsToAvoid; // 0x414(0x04)
	struct FNavAvoidanceMask GroupsToIgnore; // 0x418(0x04)
	float AvoidanceWeight; // 0x41c(0x04)
	struct FVector PendingLaunchVelocity; // 0x420(0x0c)
	char pad_42C[0xb4]; // 0x42c(0xb4)
	float NavMeshProjectionInterval; // 0x4e0(0x04)
	float NavMeshProjectionTimer; // 0x4e4(0x04)
	float NavMeshEnterInterval; // 0x4e8(0x04)
	float NavMeshEnterTimer; // 0x4ec(0x04)
	float NavMeshProjectionInterpSpeed; // 0x4f0(0x04)
	float NavMeshProjectionHeightScaleUp; // 0x4f4(0x04)
	float NavMeshProjectionHeightScaleDown; // 0x4f8(0x04)
	float NavWalkingFloorDistTolerance; // 0x4fc(0x04)
	float NavWalkingLerpHeight; // 0x500(0x04)
	float NavWalkingLerpDist; // 0x504(0x04)
	char pad_508[0x10]; // 0x508(0x10)
	struct FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction; // 0x518(0x68)
	char pad_580[0x18]; // 0x580(0x18)
	float MinTimeBetweenTimeStampResets; // 0x598(0x04)
	char pad_59C[0x4]; // 0x59c(0x04)
	struct FRootMotionSourceGroup CurrentRootMotion; // 0x5a0(0xf8)
	char pad_698[0x98]; // 0x698(0x98)
	struct FRootMotionMovementParams RootMotionParams; // 0x730(0x40)
	struct FVector AnimRootMotionVelocity; // 0x770(0x0c)
	char pad_77C[0x24]; // 0x77c(0x24)

	void SetWalkableFloorZ(float InWalkableFloorZ); // Function Engine.CharacterMovementComponent.SetWalkableFloorZ // (Final|Native|Public|BlueprintCallable) // @ game+0x9d964e0
	void SetWalkableFloorAngle(float InWalkableFloorAngle); // Function Engine.CharacterMovementComponent.SetWalkableFloorAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x9d96460
	void SetMovementMode(enum class EMovementMode NewMovementMode, char NewCustomMode); // Function Engine.CharacterMovementComponent.SetMovementMode // (Native|Public|BlueprintCallable) // @ game+0x9d963a0
	void SetGroupsToIgnoreMask(struct FNavAvoidanceMask& GroupMask); // Function Engine.CharacterMovementComponent.SetGroupsToIgnoreMask // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9d96310
	void SetGroupsToIgnore(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetGroupsToIgnore // (Final|Native|Public|BlueprintCallable) // @ game+0x9d96290
	void SetGroupsToAvoidMask(struct FNavAvoidanceMask& GroupMask); // Function Engine.CharacterMovementComponent.SetGroupsToAvoidMask // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9d96200
	void SetGroupsToAvoid(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetGroupsToAvoid // (Final|Native|Public|BlueprintCallable) // @ game+0x9d96180
	void SetAvoidanceGroupMask(struct FNavAvoidanceMask& GroupMask); // Function Engine.CharacterMovementComponent.SetAvoidanceGroupMask // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9d960f0
	void SetAvoidanceGroup(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetAvoidanceGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x9d96070
	void SetAvoidanceEnabled(bool bEnable); // Function Engine.CharacterMovementComponent.SetAvoidanceEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x9d95fe0
	float K2_GetWalkableFloorZ(); // Function Engine.CharacterMovementComponent.K2_GetWalkableFloorZ // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d95fb0
	float K2_GetWalkableFloorAngle(); // Function Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d95f80
	float K2_GetModifiedMaxAcceleration(); // Function Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d95f40
	void K2_FindFloor(struct FVector CapsuleLocation, struct FFindFloorResult& FloorResult); // Function Engine.CharacterMovementComponent.K2_FindFloor // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d95e00
	void K2_ComputeFloorDist(struct FVector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FFindFloorResult& FloorResult); // Function Engine.CharacterMovementComponent.K2_ComputeFloorDist // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d95c00
	bool IsWalking(); // Function Engine.CharacterMovementComponent.IsWalking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d95bd0
	bool IsWalkable(struct FHitResult& Hit); // Function Engine.CharacterMovementComponent.IsWalkable // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d95af0
	float GetValidPerchRadius(); // Function Engine.CharacterMovementComponent.GetValidPerchRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d95ac0
	float GetPerchRadiusThreshold(); // Function Engine.CharacterMovementComponent.GetPerchRadiusThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d95a90
	struct UPrimitiveComponent* GetMovementBase(); // Function Engine.CharacterMovementComponent.GetMovementBase // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d95a60
	float GetMinAnalogSpeed(); // Function Engine.CharacterMovementComponent.GetMinAnalogSpeed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d95a20
	float GetMaxJumpHeightWithJumpTime(); // Function Engine.CharacterMovementComponent.GetMaxJumpHeightWithJumpTime // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d959e0
	float GetMaxJumpHeight(); // Function Engine.CharacterMovementComponent.GetMaxJumpHeight // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d959a0
	float GetMaxBrakingDeceleration(); // Function Engine.CharacterMovementComponent.GetMaxBrakingDeceleration // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d95960
	float GetMaxAcceleration(); // Function Engine.CharacterMovementComponent.GetMaxAcceleration // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x6402a80
	struct FVector GetLastUpdateVelocity(); // Function Engine.CharacterMovementComponent.GetLastUpdateVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d95930
	struct FRotator GetLastUpdateRotation(); // Function Engine.CharacterMovementComponent.GetLastUpdateRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d958e0
	struct FVector GetLastUpdateLocation(); // Function Engine.CharacterMovementComponent.GetLastUpdateLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d958b0
	struct FVector GetImpartedMovementBaseVelocity(); // Function Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d95870
	struct FVector GetCurrentAcceleration(); // Function Engine.CharacterMovementComponent.GetCurrentAcceleration // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d95830
	struct ACHARACTER* GetCharacterOwner(); // Function Engine.CharacterMovementComponent.GetCharacterOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d95810
	float GetAnalogInputModifier(); // Function Engine.CharacterMovementComponent.GetAnalogInputModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9d957e0
	void DisableMovement(); // Function Engine.CharacterMovementComponent.DisableMovement // (Native|Public|BlueprintCallable) // @ game+0x48e8b80
	void ClearAccumulatedForces(); // Function Engine.CharacterMovementComponent.ClearAccumulatedForces // (Native|Public|BlueprintCallable) // @ game+0x2278f90
	void CapsuleTouched(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Engine.CharacterMovementComponent.CapsuleTouched // (Native|Protected|HasOutParms) // @ game+0x9d955e0
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration); // Function Engine.CharacterMovementComponent.CalcVelocity // (Native|Public|BlueprintCallable) // @ game+0x9d95480
	void AddImpulse(struct FVector Impulse, bool bVelocityChange); // Function Engine.CharacterMovementComponent.AddImpulse // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9d953a0
	void AddForce(struct FVector Force); // Function Engine.CharacterMovementComponent.AddForce // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9d95310
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.FloatingPawnMovement
// Size: 0x1a0 (Inherited: 0x188)
class UFloatingPawnMovement : public UPawnMovementComponent {
public:

	float MaxSpeed; // 0x188(0x04)
	float Acceleration; // 0x18c(0x04)
	float Deceleration; // 0x190(0x04)
	float TurningBoost; // 0x194(0x04)
	char bPositionCorrected : 1; // 0x198(0x01)
	char pad_198_1 : 7; // 0x198(0x01)
	char pad_199[0x7]; // 0x199(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.CanvasRenderTarget2D
// Size: 0x198 (Inherited: 0x178)
class UCanvasRenderTarget2D : public UTextureRenderTarget2D {
public:

	/*struct FMulticastInlineDelegate*/char OnCanvasRenderTargetUpdate[0x10]; // 0x178(0x10)
	struct TWeakObjectPtr<struct UWorld> World; // 0x188(0x08)
	bool bShouldClearRenderTargetOnReceiveUpdate; // 0x190(0x01)
	char pad_191[0x7]; // 0x191(0x07)

	void UpdateResource(); // Function Engine.CanvasRenderTarget2D.UpdateResource // (Native|Public|BlueprintCallable) // @ game+0x1759020
	void ReceiveUpdate(struct UCanvas* Canvas, int32_t Width, int32_t Height); // Function Engine.CanvasRenderTarget2D.ReceiveUpdate // (Event|Public|BlueprintEvent) // @ game+0x7ed88c0
	void GetSize(int32_t& Width, int32_t& Height); // Function Engine.CanvasRenderTarget2D.GetSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9d92540
	struct UCanvasRenderTarget2D* STATIC_CreateCanvasRenderTarget2D(struct UObject* WorldContextObject, struct UClass* CanvasRenderTarget2DClass, int32_t Width, int32_t Height); // Function Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9d91f70
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionTextureSampleParameter2D
// Size: 0x100 (Inherited: 0x100)
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionTextureObjectParameter
// Size: 0x100 (Inherited: 0x100)
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionTextureSampleParameter2DArray
// Size: 0x100 (Inherited: 0x100)
class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionTextureSampleParameterCube
// Size: 0x100 (Inherited: 0x100)
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionTextureSampleParameterVolume
// Size: 0x100 (Inherited: 0x100)
class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionTextureSprite2DSampleParameter
// Size: 0x108 (Inherited: 0x100)
class UMaterialExpressionTextureSprite2DSampleParameter : public UMaterialExpressionTextureSampleParameter {
public:

	struct UMaterialExpressionVectorParameter* UVSizeVectorParameter; // 0x100(0x08)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DistributionFloatParticleParameter
// Size: 0x68 (Inherited: 0x68)
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DistributionVectorParticleParameter
// Size: 0x98 (Inherited: 0x98)
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleLocationWorldOffset_Seeded
// Size: 0xa8 (Inherited: 0x88)
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset {
public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x88(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
// Size: 0x148 (Inherited: 0x128)
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder {
public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x128(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
// Size: 0x108 (Inherited: 0xe8)
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere {
public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0xe8(0x20)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AsyncStaticMeshComponent
// Size: 0x818 (Inherited: 0x7f0)
class UAsyncStaticMeshComponent : public UStaticMeshComponent {
public:

	char pad_7F0[0x8]; // 0x7f0(0x08)
	struct FSoftObjectPath StaticMeshPath; // 0x7f8(0x18)
	bool bNeedAsyncLoad; // 0x810(0x01)
	char pad_811[0x7]; // 0x811(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.InstancedStaticMeshComponent
// Size: 0x9a8 (Inherited: 0x7f0)
class UInstancedStaticMeshComponent : public UStaticMeshComponent {
public:

	struct TArray<struct FInstancedStaticMeshInstanceData> PerInstanceSMData; // 0x7f0(0x10)
	int32_t NumCustomDataFloats; // 0x800(0x04)
	char pad_804[0x4]; // 0x804(0x04)
	struct TArray<float> PerInstanceSMCustomData; // 0x808(0x10)
	struct TArray<struct FGuid> PerInstanceBuildDataIds; // 0x818(0x10)
	int32_t InstancingRandomSeed; // 0x828(0x04)
	bool bUsePerInstanceVertexData; // 0x82c(0x01)
	bool bUseInstancedBoundsForScreenSizeCulling; // 0x82d(0x01)
	char pad_82E[0x2]; // 0x82e(0x02)
	struct TArray<float> InstancedScreenSizes; // 0x830(0x10)
	bool bUseInstancedBoundsForLOD; // 0x840(0x01)
	bool bOverrideScreenSizeForLOD; // 0x841(0x01)
	char pad_842[0x2]; // 0x842(0x02)
	int32_t InstanceStartCullDistance; // 0x844(0x04)
	int32_t InstanceEndCullDistance; // 0x848(0x04)
	char pad_84C[0x4]; // 0x84c(0x04)
	struct TArray<int32_t> InstanceReorderTable; // 0x850(0x10)
	char pad_860[0x130]; // 0x860(0x130)
	int32_t NumPendingLightmaps; // 0x990(0x04)
	char pad_994[0x4]; // 0x994(0x04)
	struct TArray<struct FInstancedStaticMeshMappingInfo> CachedMappings; // 0x998(0x10)

	bool UpdateInstanceTransform(int32_t InstanceIndex, struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Function Engine.InstancedStaticMeshComponent.UpdateInstanceTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9dd20b0
	bool SetNumCustomDataFloats(int32_t InNumCustomDataFloats, bool bMarkRenderStateDirty); // Function Engine.InstancedStaticMeshComponent.SetNumCustomDataFloats // (Native|Public|BlueprintCallable) // @ game+0x9dd1fe0
	bool SetCustomDataValue(int32_t InstanceIndex, int32_t CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty); // Function Engine.InstancedStaticMeshComponent.SetCustomDataValue // (Native|Public|BlueprintCallable) // @ game+0x9dd1ea0
	void SetCullDistances(int32_t StartCullDistance, int32_t EndCullDistance); // Function Engine.InstancedStaticMeshComponent.SetCullDistances // (Final|Native|Public|BlueprintCallable) // @ game+0x9dd1de0
	bool RemoveInstance(int32_t InstanceIndex, bool bAllowSlack); // Function Engine.InstancedStaticMeshComponent.RemoveInstance // (Native|Public|BlueprintCallable) // @ game+0x9dd1cf0
	bool GetInstanceTransform(int32_t InstanceIndex, struct FTransform& OutInstanceTransform, bool bWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstanceTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dd1380
	struct TArray<int32_t> GetInstancesOverlappingSphere(struct FVector& Center, float radius, bool bSphereInWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dd1610
	struct TArray<int32_t> GetInstancesOverlappingBox(struct FBox& Box, bool bBoxInWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dd14e0
	int32_t GetInstanceCount(); // Function Engine.InstancedStaticMeshComponent.GetInstanceCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9dd1350
	void ClearInstances(); // Function Engine.InstancedStaticMeshComponent.ClearInstances // (Native|Public|BlueprintCallable) // @ game+0x35d45c0
	bool BatchUpdateInstancesTransforms(int32_t StartInstanceIndex, struct TArray<struct FTransform>& NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransforms // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9dd08d0
	bool BatchUpdateInstancesTransform(int32_t StartInstanceIndex, int32_t NumInstances, struct FTransform& NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9dd06a0
	int32_t AddInstanceWorldSpace(struct FTransform& WorldTransform); // Function Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9dd05c0
	int32_t AddInstance(struct FTransform& InstanceTransform); // Function Engine.InstancedStaticMeshComponent.AddInstance // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9dd04e0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DestructibleStaticMeshComponent
// Size: 0x818 (Inherited: 0x7f0)
class UDestructibleStaticMeshComponent : public UStaticMeshComponent {
public:

	struct TArray<struct FBodyInstance> BodyInstances; // 0x7f0(0x10)
	char bBodyInstancesCreated : 1; // 0x800(0x01)
	char pad_800_1 : 7; // 0x800(0x01)
	char pad_801[0x7]; // 0x801(0x07)
	struct TArray<uint16_t> MeshDestructionStatus; // 0x808(0x10)

	void SetSubMeshesDestructed(struct TArray<int32_t> InMeshes); // Function Engine.DestructibleStaticMeshComponent.SetSubMeshesDestructed // (Final|Native|Public|BlueprintCallable) // @ game+0x9da42d0
	void SetSubMeshDestructed(int32_t MeshIndex); // Function Engine.DestructibleStaticMeshComponent.SetSubMeshDestructed // (Final|Native|Public|BlueprintCallable) // @ game+0x9da4250
	void OnRep_ChangeMeshDestructionStatus(); // Function Engine.DestructibleStaticMeshComponent.OnRep_ChangeMeshDestructionStatus // (Final|Native|Public) // @ game+0x9da3d10
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MultiSubboundsStaticMeshComponent
// Size: 0x850 (Inherited: 0x7f0)
class UMultiSubboundsStaticMeshComponent : public UStaticMeshComponent {
public:

	struct TArray<struct FBoxSphereBounds> SubBounds; // 0x7f0(0x10)
	struct TArray<struct UMaterialInterface*> NoDepthFetchMaterials; // 0x800(0x10)
	struct TArray<struct FVector4> DiscreteLinePoints; // 0x810(0x10)
	char pad_820[0x20]; // 0x820(0x20)
	struct TArray<struct UMaterialInterface*> DepthFetchMaterials; // 0x840(0x10)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SplineMeshComponent
// Size: 0x890 (Inherited: 0x7f0)
class USplineMeshComponent : public UStaticMeshComponent {
public:

	char pad_7F0[0x8]; // 0x7f0(0x08)
	struct FSplineMeshParams SplineParams; // 0x7f8(0x58)
	struct FVector SplineUpDir; // 0x850(0x0c)
	float SplineBoundaryMin; // 0x85c(0x04)
	struct FGuid CachedMeshBodySetupGuid; // 0x860(0x10)
	struct UBodySetup* BodySetup; // 0x870(0x08)
	float SplineBoundaryMax; // 0x878(0x04)
	char bAllowSplineEditingPerInstance : 1; // 0x87c(0x01)
	char bSmoothInterpRollScale : 1; // 0x87c(0x01)
	char bMeshDirty : 1; // 0x87c(0x01)
	char pad_87C_3 : 5; // 0x87c(0x01)
	enum class ESplineMeshAxis ForwardAxis; // 0x87d(0x01)
	char pad_87E[0x2]; // 0x87e(0x02)
	float VirtualTextureMainPassMaxDrawDistance; // 0x880(0x04)
	char pad_884[0xc]; // 0x884(0x0c)

	void UpdateMesh(); // Function Engine.SplineMeshComponent.UpdateMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x9ebc420
	void SetStartTangent(struct FVector StartTangent, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartTangent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9ebc260
	void SetStartScale(struct FVector2D StartScale, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartScale // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9ebc1a0
	void SetStartRoll(float StartRoll, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartRoll // (Final|Native|Public|BlueprintCallable) // @ game+0x9ebc0d0
	void SetStartPosition(struct FVector StartPos, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartPosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9ebbff0
	void SetStartOffset(struct FVector2D StartOffset, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartOffset // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9ebbf30
	void SetStartAndEnd(struct FVector StartPos, struct FVector StartTangent, struct FVector EndPos, struct FVector EndTangent, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartAndEnd // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9ebbd70
	void SetSplineUpDir(struct FVector& InSplineUpDir, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetSplineUpDir // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9ebbc90
	void SetForwardAxis(enum class ESplineMeshAxis InForwardAxis, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetForwardAxis // (Final|Native|Public|BlueprintCallable) // @ game+0x9ebb9c0
	void SetEndTangent(struct FVector EndTangent, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndTangent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9ebb8e0
	void SetEndScale(struct FVector2D EndScale, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndScale // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9ebb820
	void SetEndRoll(float EndRoll, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndRoll // (Final|Native|Public|BlueprintCallable) // @ game+0x9ebb750
	void SetEndPosition(struct FVector EndPos, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndPosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9ebb670
	void SetEndOffset(struct FVector2D EndOffset, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndOffset // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9ebb5b0
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetBoundaryMin // (Final|Native|Public|BlueprintCallable) // @ game+0x9ebb4e0
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetBoundaryMax // (Final|Native|Public|BlueprintCallable) // @ game+0x9ebb410
	struct FVector GetStartTangent(); // Function Engine.SplineMeshComponent.GetStartTangent // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebb270
	struct FVector2D GetStartScale(); // Function Engine.SplineMeshComponent.GetStartScale // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebb230
	float GetStartRoll(); // Function Engine.SplineMeshComponent.GetStartRoll // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebb200
	struct FVector GetStartPosition(); // Function Engine.SplineMeshComponent.GetStartPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebb1c0
	struct FVector2D GetStartOffset(); // Function Engine.SplineMeshComponent.GetStartOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebb180
	struct FVector GetSplineUpDir(); // Function Engine.SplineMeshComponent.GetSplineUpDir // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebb140
	enum class ESplineMeshAxis GetForwardAxis(); // Function Engine.SplineMeshComponent.GetForwardAxis // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebadc0
	struct FVector GetEndTangent(); // Function Engine.SplineMeshComponent.GetEndTangent // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebad80
	struct FVector2D GetEndScale(); // Function Engine.SplineMeshComponent.GetEndScale // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebad40
	float GetEndRoll(); // Function Engine.SplineMeshComponent.GetEndRoll // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebad10
	struct FVector GetEndPosition(); // Function Engine.SplineMeshComponent.GetEndPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebacd0
	struct FVector2D GetEndOffset(); // Function Engine.SplineMeshComponent.GetEndOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebac90
	float GetBoundaryMin(); // Function Engine.SplineMeshComponent.GetBoundaryMin // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebabc0
	float GetBoundaryMax(); // Function Engine.SplineMeshComponent.GetBoundaryMax // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ebab90
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SkeletalMeshComponent
// Size: 0xf28 (Inherited: 0x920)
class USkeletalMeshComponent : public USkinnedMeshComponent {
public:

	char pad_920[0x8]; // 0x920(0x08)
	struct UAnimBlueprintGeneratedClass* AnimBlueprintGeneratedClass; // 0x928(0x08)
	struct UClass* AnimClass; // 0x930(0x08)
	struct UAnimInstance* AnimScriptInstance; // 0x938(0x08)
	struct UAnimInstance* PostProcessAnimInstance; // 0x940(0x08)
	struct FSingleAnimationPlayData AnimationData; // 0x948(0x18)
	char pad_960[0x10]; // 0x960(0x10)
	struct FVector RootBoneTranslation; // 0x970(0x0c)
	struct FVector LineCheckBoundsScale; // 0x97c(0x0c)
	char pad_988[0x20]; // 0x988(0x20)
	struct TArray<struct UAnimInstance*> LinkedInstances; // 0x9a8(0x10)
	struct TArray<struct FTransform> CachedBoneSpaceTransforms; // 0x9b8(0x10)
	struct TArray<struct FTransform> CachedComponentSpaceTransforms; // 0x9c8(0x10)
	char pad_9D8[0x20]; // 0x9d8(0x20)
	float GlobalAnimRateScale; // 0x9f8(0x04)
	enum class EKinematicBonesUpdateToPhysics KinematicBonesUpdateType; // 0x9fc(0x01)
	enum class EPhysicsTransformUpdateMode PhysicsTransformUpdateMode; // 0x9fd(0x01)
	char pad_9FE[0x1]; // 0x9fe(0x01)
	enum class EAnimationMode AnimationMode; // 0x9ff(0x01)
	char pad_A00[0x1]; // 0xa00(0x01)
	char bDisablePostProcessBlueprint : 1; // 0xa01(0x01)
	char pad_A01_1 : 1; // 0xa01(0x01)
	char bUpdateOverlapsOnAnimationFinalize : 1; // 0xa01(0x01)
	char pad_A01_3 : 1; // 0xa01(0x01)
	char bHasValidBodies : 1; // 0xa01(0x01)
	char pad_A01_5 : 1; // 0xa01(0x01)
	char bBlendPhysics : 1; // 0xa01(0x01)
	char bEnableAnimInstanceSkeletalCompatibleCheck : 1; // 0xa01(0x01)
	char bEnablePhysicsOnDedicatedServer : 1; // 0xa02(0x01)
	char bUpdateJointsFromAnimation : 1; // 0xa02(0x01)
	char bDisableClothSimulation : 1; // 0xa02(0x01)
	char bAllowAnimCurveEvaluation : 1; // 0xa02(0x01)
	char bDisableAnimCurves : 1; // 0xa02(0x01)
	char pad_A02_5 : 3; // 0xa02(0x01)
	char bCollideWithEnvironment : 1; // 0xa03(0x01)
	char bCollideWithAttachedChildren : 1; // 0xa03(0x01)
	char bLocalSpaceSimulation : 1; // 0xa03(0x01)
	char bResetAfterTeleport : 1; // 0xa03(0x01)
	char pad_A03_4 : 1; // 0xa03(0x01)
	char bDeferKinematicBoneUpdate : 1; // 0xa03(0x01)
	char bNoSkeletonUpdate : 1; // 0xa03(0x01)
	char bPauseAnims : 1; // 0xa03(0x01)
	char bUseRefPoseOnInitAnim : 1; // 0xa04(0x01)
	char bEnablePerPolyCollision : 1; // 0xa04(0x01)
	char bForceRefpose : 1; // 0xa04(0x01)
	char bOnlyAllowAutonomousTickPose : 1; // 0xa04(0x01)
	char bIsAutonomousTickPose : 1; // 0xa04(0x01)
	char bOldForceRefPose : 1; // 0xa04(0x01)
	char bShowPrePhysBones : 1; // 0xa04(0x01)
	char bRequiredBonesUpToDate : 1; // 0xa04(0x01)
	char bAnimTreeInitialised : 1; // 0xa05(0x01)
	char bIncludeComponentLocationIntoBounds : 1; // 0xa05(0x01)
	char bEnableLineCheckWithBounds : 1; // 0xa05(0x01)
	char bUseBendingElements : 1; // 0xa05(0x01)
	char bUseTetrahedralConstraints : 1; // 0xa05(0x01)
	char bUseThinShellVolumeConstraints : 1; // 0xa05(0x01)
	char bUseSelfCollisions : 1; // 0xa05(0x01)
	char bUseContinuousCollisionDetection : 1; // 0xa05(0x01)
	char bPropagateCurvesToSlaves : 1; // 0xa06(0x01)
	char bSkipKinematicUpdateWhenInterpolating : 1; // 0xa06(0x01)
	char bSkipBoundsUpdateWhenInterpolating : 1; // 0xa06(0x01)
	char bAggregateSelfCollision : 1; // 0xa06(0x01)
	char bShouldTickAnimationDuringInitAnim : 1; // 0xa06(0x01)
	char pad_A06_5 : 3; // 0xa06(0x01)
	char pad_A07[0x1]; // 0xa07(0x01)
	uint32_t LastPoseTickFrame; // 0xa08(0x04)
	char bNeedsQueuedAnimEventsDispatched : 1; // 0xa0c(0x01)
	char pad_A0C_1 : 7; // 0xa0c(0x01)
	char pad_A0D[0x1]; // 0xa0d(0x01)
	uint16_t CachedAnimCurveUidVersion; // 0xa0e(0x02)
	enum class EClothMassMode MassMode; // 0xa10(0x01)
	char pad_A11[0x3]; // 0xa11(0x03)
	float UniformMass; // 0xa14(0x04)
	float TotalMass; // 0xa18(0x04)
	float Density; // 0xa1c(0x04)
	float MinPerParticleMass; // 0xa20(0x04)
	float ClothBlendWeight; // 0xa24(0x04)
	float EdgeStiffness; // 0xa28(0x04)
	float BendingStiffness; // 0xa2c(0x04)
	float AreaStiffness; // 0xa30(0x04)
	float VolumeStiffness; // 0xa34(0x04)
	float StrainLimitingStiffness; // 0xa38(0x04)
	float ShapeTargetStiffness; // 0xa3c(0x04)
	struct TArray<struct FName> DisallowedAnimCurves; // 0xa40(0x10)
	struct UBodySetup* BodySetup; // 0xa50(0x08)
	char pad_A58[0x8]; // 0xa58(0x08)
	/*struct FMulticastInlineDelegate*/char OnConstraintBroken[0x10]; // 0xa60(0x10)
	struct UClass* ClothingSimulationFactory; // 0xa70(0x08)
	char pad_A78[0x108]; // 0xa78(0x108)
	float TeleportDistanceThreshold; // 0xb80(0x04)
	float TeleportRotationThreshold; // 0xb84(0x04)
	char pad_B88[0x58]; // 0xb88(0x58)
	struct UClothingSimulationInteractor* ClothingInteractor; // 0xbe0(0x08)
	char pad_BE8[0xc8]; // 0xbe8(0xc8)
	/*struct FMulticastInlineDelegate*/char OnAnimInitialized[0x10]; // 0xcb0(0x10)
	char pad_CC0[0x260]; // 0xcc0(0x260)
	char bOverrideCullScreenSize : 1; // 0xf20(0x01)
	char pad_F20_1 : 7; // 0xf20(0x01)
	char pad_F21[0x7]; // 0xf21(0x07)

	void UnlinkAnimClassLayers(struct UClass* InClass); // Function Engine.SkeletalMeshComponent.UnlinkAnimClassLayers // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea35e0
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace); // Function Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea3550
	void ToggleDisablePostProcessBlueprint(); // Function Engine.SkeletalMeshComponent.ToggleDisablePostProcessBlueprint // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea3530
	void TermBodiesBelow(struct FName ParentBoneName); // Function Engine.SkeletalMeshComponent.TermBodiesBelow // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea34b0
	void SuspendClothingSimulation(); // Function Engine.SkeletalMeshComponent.SuspendClothingSimulation // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea3490
	void Stop(); // Function Engine.SkeletalMeshComponent.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea3470
	void SnapshotPose(struct FPoseSnapshot& Snapshot); // Function Engine.SkeletalMeshComponent.SnapshotPose // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9ea3350
	void SetUpdateAnimationInEditor(bool NewUpdateState); // Function Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor // (Final|Native|Public|BlueprintCallable) // @ game+0x35d74c0
	void SetTeleportRotationThreshold(float ThresHold); // Function Engine.SkeletalMeshComponent.SetTeleportRotationThreshold // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea32d0
	void SetTeleportDistanceThreshold(float ThresHold); // Function Engine.SkeletalMeshComponent.SetTeleportDistanceThreshold // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea3250
	void SetPosition(float InPos, bool bFireNotifies); // Function Engine.SkeletalMeshComponent.SetPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea3180
	void SetPlayRate(float Rate); // Function Engine.SkeletalMeshComponent.SetPlayRate // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea3100
	void SetPhysicsBlendWeight(float PhysicsBlendWeight); // Function Engine.SkeletalMeshComponent.SetPhysicsBlendWeight // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea3080
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, struct FName BoneName, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow // (Native|Public|BlueprintCallable) // @ game+0x9ea2f70
	void SetMorphTarget(struct FName MorphTargetName, float Value, bool bRemoveZeroWeight); // Function Engine.SkeletalMeshComponent.SetMorphTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea2e60
	void SetEnablePhysicsBlending(bool bNewBlendPhysics); // Function Engine.SkeletalMeshComponent.SetEnablePhysicsBlending // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea2dd0
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, struct FName BoneName, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea2cc0
	void SetEnableBodyGravity(bool bEnableGravity, struct FName BoneName); // Function Engine.SkeletalMeshComponent.SetEnableBodyGravity // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea2c00
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess); // Function Engine.SkeletalMeshComponent.SetDisablePostProcessBlueprint // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea2b70
	void SetDisableAnimCurves(bool bInDisableAnimCurves); // Function Engine.SkeletalMeshComponent.SetDisableAnimCurves // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea2ae0
	void SetConstraintProfileForAll(struct FName ProfileName, bool bDefaultIfNotFound); // Function Engine.SkeletalMeshComponent.SetConstraintProfileForAll // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea2a10
	void SetConstraintProfile(struct FName JointName, struct FName ProfileName, bool bDefaultIfNotFound); // Function Engine.SkeletalMeshComponent.SetConstraintProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea2900
	void SetClothMaxDistanceScale(float Scale); // Function Engine.SkeletalMeshComponent.SetClothMaxDistanceScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea2880
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, struct FName BoneName); // Function Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision // (Native|Public|BlueprintCallable) // @ game+0x9ea27b0
	void SetAnimClass(struct UClass* NewClass); // Function Engine.SkeletalMeshComponent.SetAnimClass // (Native|Public|BlueprintCallable) // @ game+0x9ea2620
	void SetAnimationMode(enum class EAnimationMode InAnimationMode); // Function Engine.SkeletalMeshComponent.SetAnimationMode // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea2730
	void SetAnimation(struct UAnimationAsset* NewAnimToPlay); // Function Engine.SkeletalMeshComponent.SetAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea26b0
	void SetAngularLimits(struct FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle); // Function Engine.SkeletalMeshComponent.SetAngularLimits // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea24d0
	void SetAllowedAnimCurvesEvaluation(struct TArray<struct FName>& List, bool bAllow); // Function Engine.SkeletalMeshComponent.SetAllowedAnimCurvesEvaluation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9ea23b0
	void SetAllowAnimCurveEvaluation(bool bInAllow); // Function Engine.SkeletalMeshComponent.SetAllowAnimCurveEvaluation // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea2320
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea2200
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea20e0
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea1f80
	void SetAllBodiesSimulatePhysics(bool bNewSimulate); // Function Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea1ef0
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea1e20
	void SetAllBodiesBelowSimulatePhysics(struct FName& InBoneName, bool bNewSimulate, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9ea1d00
	void SetAllBodiesBelowPhysicsBlendWeight(struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9ea1b90
	void ResumeClothingSimulation(); // Function Engine.SkeletalMeshComponent.ResumeClothingSimulation // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea1b70
	void ResetClothTeleportMode(); // Function Engine.SkeletalMeshComponent.ResetClothTeleportMode // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea1b50
	void ResetAnimInstanceDynamics(enum class ETeleportType InTeleportType); // Function Engine.SkeletalMeshComponent.ResetAnimInstanceDynamics // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea1ad0
	void ResetAllowedAnimCurveEvaluation(); // Function Engine.SkeletalMeshComponent.ResetAllowedAnimCurveEvaluation // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea1ab0
	void ResetAllBodiesSimulatePhysics(); // Function Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea1a90
	void PlayAnimation(struct UAnimationAsset* NewAnimToPlay, bool bLooping); // Function Engine.SkeletalMeshComponent.PlayAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea19c0
	void Play(bool bLooping); // Function Engine.SkeletalMeshComponent.Play // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea1930
	void OverrideAnimationData(struct UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate); // Function Engine.SkeletalMeshComponent.OverrideAnimationData // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea1790
	void OnMontageStarted(struct UAnimMontage* Montage); // Function Engine.SkeletalMeshComponent.OnMontageStarted // (Final|Native|Public) // @ game+0x9ea1710
	void OnAllMontageEnded(); // Function Engine.SkeletalMeshComponent.OnAllMontageEnded // (Final|Native|Public) // @ game+0x9ea16f0
	void LinkAnimGraphByTag(struct FName InTag, struct UClass* InClass); // Function Engine.SkeletalMeshComponent.LinkAnimGraphByTag // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea1630
	void LinkAnimClassLayers(struct UClass* InClass); // Function Engine.SkeletalMeshComponent.LinkAnimClassLayers // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea15b0
	bool K2_GetClosestPointOnPhysicsAsset(struct FVector& WorldPosition, struct FVector& ClosestWorldPosition, struct FVector& Normal, struct FName& BoneName, float& Distance); // Function Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea13b0
	bool IsPlaying(); // Function Engine.SkeletalMeshComponent.IsPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea1380
	bool IsClothingSimulationSuspended(); // Function Engine.SkeletalMeshComponent.IsClothingSimulationSuspended // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea1350
	bool IsBodyGravityEnabled(struct FName BoneName); // Function Engine.SkeletalMeshComponent.IsBodyGravityEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea12c0
	bool HasValidAnimationInstance(); // Function Engine.SkeletalMeshComponent.HasValidAnimationInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea1290
	float GetTeleportRotationThreshold(); // Function Engine.SkeletalMeshComponent.GetTeleportRotationThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea1260
	float GetTeleportDistanceThreshold(); // Function Engine.SkeletalMeshComponent.GetTeleportDistanceThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea1260
	struct FVector GetSkeletalCenterOfMass(); // Function Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea1220
	struct UAnimInstance* GetPostProcessInstance(); // Function Engine.SkeletalMeshComponent.GetPostProcessInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea11f0
	float GetPosition(); // Function Engine.SkeletalMeshComponent.GetPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea11c0
	float GetPlayRate(); // Function Engine.SkeletalMeshComponent.GetPlayRate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea1190
	float GetMorphTarget(struct FName MorphTargetName); // Function Engine.SkeletalMeshComponent.GetMorphTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea10f0
	struct UAnimInstance* GetLinkedAnimLayerInstanceByGroup(struct FName InGroup); // Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByGroup // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea1060
	struct UAnimInstance* GetLinkedAnimLayerInstanceByClass(struct UClass* InClass); // Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea0fd0
	void GetLinkedAnimGraphInstancesByTag(struct FName InTag, struct TArray<struct UAnimInstance*>& OutLinkedInstances); // Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstancesByTag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea0ec0
	struct UAnimInstance* GetLinkedAnimGraphInstanceByTag(struct FName InTag); // Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstanceByTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea0e30
	bool GetDisablePostProcessBlueprint(); // Function Engine.SkeletalMeshComponent.GetDisablePostProcessBlueprint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea0e00
	bool GetDisableAnimCurves(); // Function Engine.SkeletalMeshComponent.GetDisableAnimCurves // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea0dd0
	void GetCurrentJointAngles(struct FName InBoneName, float& Swing1Angle, float& TwistAngle, float& Swing2Angle); // Function Engine.SkeletalMeshComponent.GetCurrentJointAngles // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9ea0c50
	float GetClothMaxDistanceScale(); // Function Engine.SkeletalMeshComponent.GetClothMaxDistanceScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea0bf0
	struct UClothingSimulationInteractor* GetClothingSimulationInteractor(); // Function Engine.SkeletalMeshComponent.GetClothingSimulationInteractor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea0c20
	float GetBoneMass(struct FName BoneName, bool bScaleMass); // Function Engine.SkeletalMeshComponent.GetBoneMass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea0b20
	struct UAnimInstance* GetAnimInstance(); // Function Engine.SkeletalMeshComponent.GetAnimInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea0ac0
	struct UClass* GetAnimClass(); // Function Engine.SkeletalMeshComponent.GetAnimClass // (Final|Native|Public) // @ game+0x9ea0a90
	enum class EAnimationMode GetAnimationMode(); // Function Engine.SkeletalMeshComponent.GetAnimationMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea0af0
	bool GetAllowedAnimCurveEvaluate(); // Function Engine.SkeletalMeshComponent.GetAllowedAnimCurveEvaluate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9ea0a60
	void ForceClothNextUpdateTeleportAndReset(); // Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea0a40
	void ForceClothNextUpdateTeleport(); // Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea0a20
	struct FName FindConstraintBoneName(int32_t ConstraintIndex); // Function Engine.SkeletalMeshComponent.FindConstraintBoneName // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea0990
	void ClearMorphTargets(); // Function Engine.SkeletalMeshComponent.ClearMorphTargets // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea0970
	void BreakConstraint(struct FVector Impulse, struct FVector HitLocation, struct FName InBoneName); // Function Engine.SkeletalMeshComponent.BreakConstraint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9ea0840
	void BindClothToMasterPoseComponent(); // Function Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea0820
	void AllowAnimCurveEvaluation(struct FName NameOfCurve, bool bAllow); // Function Engine.SkeletalMeshComponent.AllowAnimCurveEvaluation // (Final|Native|Public|BlueprintCallable) // @ game+0x9ea0750
	void AddImpulseToAllBodiesBelow(struct FVector Impulse, struct FName BoneName, bool bVelChange, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9ea05e0
	void AddForceToAllBodiesBelow(struct FVector Force, struct FName BoneName, bool bAccelChange, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9ea0470
	void AccumulateAllBodiesBelowPhysicsBlendWeight(struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9ea0360
	FVector GetBoneWorldPos(const int32_t& boneId) const; // Dumper_Generated_Function // () // @ game+0x000000
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PoseableMeshComponent
// Size: 0xa80 (Inherited: 0x920)
class UPoseableMeshComponent : public USkinnedMeshComponent {
public:

	char pad_920[0x160]; // 0x920(0x160)

	void SetBoneTransformByName(struct FName BoneName, struct FTransform& InTransform, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneTransformByName // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9e83850
	void SetBoneScaleByName(struct FName BoneName, struct FVector InScale3D, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneScaleByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e83740
	void SetBoneRotationByName(struct FName BoneName, struct FRotator InRotation, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneRotationByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e83630
	void SetBoneLocationByName(struct FName BoneName, struct FVector InLocation, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneLocationByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e83520
	void ResetBoneTransformByName(struct FName BoneName); // Function Engine.PoseableMeshComponent.ResetBoneTransformByName // (Final|Native|Public|BlueprintCallable) // @ game+0x9e83080
	struct FTransform GetBoneTransformByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneTransformByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e82da0
	struct FVector GetBoneScaleByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneScaleByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e82cd0
	struct FRotator GetBoneRotationByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneRotationByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e82c00
	struct FVector GetBoneLocationByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneLocationByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9e82b30
	void CopyPoseFromSkeletalComponent(struct USkeletalMeshComponent* InComponentToCopy); // Function Engine.PoseableMeshComponent.CopyPoseFromSkeletalComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x9e82ab0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PhysCharacterMovement
// Size: 0x710 (Inherited: 0x588)
class UPhysCharacterMovement : public UCapsuleComponent {
public:

	char bCollidWithOtherController : 1; // 0x588(0x01)
	char pad_588_1 : 7; // 0x588(0x01)
	char pad_589[0x187]; // 0x589(0x187)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.DrawSphereComponent
// Size: 0x580 (Inherited: 0x580)
class UDrawSphereComponent : public USphereComponent {
public:


	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.PointLightComponent
// Size: 0x458 (Inherited: 0x430)
class UPointLightComponent : public ULocalLightComponent {
public:

	char bUseInverseSquaredFalloff : 1; // 0x430(0x01)
	char pad_430_1 : 7; // 0x430(0x01)
	char pad_431[0x3]; // 0x431(0x03)
	float LightFalloffExponent; // 0x434(0x04)
	float SourceRadius; // 0x438(0x04)
	float SoftSourceRadius; // 0x43c(0x04)
	struct TArray<bool> ShadowSwitchForEachFace; // 0x440(0x10)
	float SourceLength; // 0x450(0x04)
	char bUseUnrealIntensity : 1; // 0x454(0x01)
	char pad_454_1 : 7; // 0x454(0x01)
	char pad_455[0x3]; // 0x455(0x03)

	void SetUseInverseSquaredFalloff(bool NewValue); // Function Engine.PointLightComponent.SetUseInverseSquaredFalloff // (Final|Native|Public|BlueprintCallable) // @ game+0x9e83d30
	void SetSourceRadius(float bNewValue); // Function Engine.PointLightComponent.SetSourceRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x9e83cb0
	void SetSourceLength(float NewValue); // Function Engine.PointLightComponent.SetSourceLength // (Final|Native|Public|BlueprintCallable) // @ game+0x9e83c30
	void SetSoftSourceRadius(float bNewValue); // Function Engine.PointLightComponent.SetSoftSourceRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x9e83bb0
	void SetLightFalloffExponent(float NewLightFalloffExponent); // Function Engine.PointLightComponent.SetLightFalloffExponent // (Final|Native|Public|BlueprintCallable) // @ game+0x9e83a30
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.RectLightComponent
// Size: 0x450 (Inherited: 0x430)
class URectLightComponent : public ULocalLightComponent {
public:

	float SourceWidth; // 0x430(0x04)
	float SourceHeight; // 0x434(0x04)
	float BarnDoorAngle; // 0x438(0x04)
	float BarnDoorLength; // 0x43c(0x04)
	struct UTexture* SourceTexture; // 0x440(0x08)
	char pad_448[0x8]; // 0x448(0x08)

	void SetSourceWidth(float bNewValue); // Function Engine.RectLightComponent.SetSourceWidth // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8ee60
	void SetSourceTexture(struct UTexture* bNewValue); // Function Engine.RectLightComponent.SetSourceTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8ede0
	void SetSourceHeight(float NewValue); // Function Engine.RectLightComponent.SetSourceHeight // (Final|Native|Public|BlueprintCallable) // @ game+0x9e83a30
	void SetBarnDoorLength(float NewValue); // Function Engine.RectLightComponent.SetBarnDoorLength // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8ecd0
	void SetBarnDoorAngle(float NewValue); // Function Engine.RectLightComponent.SetBarnDoorAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x9e8ec50
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SpectatorPawnMovement
// Size: 0x1a8 (Inherited: 0x1a0)
class USpectatorPawnMovement : public UFloatingPawnMovement {
public:

	char bIgnoreTimeDilation : 1; // 0x1a0(0x01)
	char pad_1A0_1 : 7; // 0x1a0(0x01)
	char pad_1A1[0x7]; // 0x1a1(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionAntialiasedTextureMask
// Size: 0x108 (Inherited: 0x100)
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D {
public:

	float ThresHold; // 0x100(0x04)
	enum class ETextureColorChannel Channel; // 0x104(0x01)
	char pad_105[0x3]; // 0x105(0x03)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// Size: 0x108 (Inherited: 0x100)
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D {
public:

	char bBlend : 1; // 0x100(0x01)
	char pad_100_1 : 7; // 0x100(0x01)
	char pad_101[0x7]; // 0x101(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.HierarchicalInstancedStaticMeshComponent
// Size: 0xaa8 (Inherited: 0x9a8)
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent {
public:

	char pad_9A8[0x10]; // 0x9a8(0x10)
	struct TArray<int32_t> SortedInstances; // 0x9b8(0x10)
	int32_t NumBuiltInstances; // 0x9c8(0x04)
	char pad_9CC[0x4]; // 0x9cc(0x04)
	struct FBox BuiltInstanceBounds; // 0x9d0(0x1c)
	struct FBox UnbuiltInstanceBounds; // 0x9ec(0x1c)
	struct TArray<struct FBox> UnbuiltInstanceBoundsList; // 0xa08(0x10)
	char bEnableDensityScaling : 1; // 0xa18(0x01)
	char pad_A18_1 : 7; // 0xa18(0x01)
	char pad_A19[0x7]; // 0xa19(0x07)
	int32_t OcclusionLayerNumNodes; // 0xa20(0x04)
	struct FBoxSphereBounds CacheMeshExtendedBounds; // 0xa24(0x1c)
	char pad_A40[0x4]; // 0xa40(0x04)
	bool bDisableCollision; // 0xa44(0x01)
	char pad_A45[0x3]; // 0xa45(0x03)
	int32_t InstanceCountToRender; // 0xa48(0x04)
	bool bEnableLODBillboardBatch; // 0xa4c(0x01)
	char pad_A4D[0x3]; // 0xa4d(0x03)
	int32_t BillboardLOD; // 0xa50(0x04)
	char pad_A54[0x54]; // 0xa54(0x54)

	bool RemoveInstances(struct TArray<int32_t>& InstancesToRemove, bool bAllowSlack); // Function Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9dcc940
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.AsyncSkeletalMeshComponent
// Size: 0xf50 (Inherited: 0xf28)
class UAsyncSkeletalMeshComponent : public USkeletalMeshComponent {
public:

	char pad_F28[0x8]; // 0xf28(0x08)
	struct FSoftObjectPath SkeletalMeshPath; // 0xf30(0x18)
	bool bNeedAsyncLoad; // 0xf48(0x01)
	char pad_F49[0x7]; // 0xf49(0x07)

	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};

// Class Engine.SpotLightComponent
// Size: 0x490 (Inherited: 0x458)
class USpotLightComponent : public UPointLightComponent {
public:

	float InnerConeAngle; // 0x458(0x04)
	float OuterConeAngle; // 0x45c(0x04)
	float LightShaftConeAngle; // 0x460(0x04)
	char pad_464[0x4]; // 0x464(0x04)
	struct ALightShadowVolume* SpotLightShadowVolume; // 0x468(0x08)
	struct TArray<struct ALightShadowVolume*> ExtraSpotLightShadowVolumes; // 0x470(0x10)
	bool bEnableShadowCache; // 0x480(0x01)
	bool bUsePreBakeShadowDepthMap; // 0x481(0x01)
	char pad_482[0x2]; // 0x482(0x02)
	int32_t PreBakeShadowDepthMapResolution; // 0x484(0x04)
	struct UPreBakeShadowDepthMap* PreBakeShadowDepthMap; // 0x488(0x08)

	void SetOuterConeAngle(float NewOuterConeAngle); // Function Engine.SpotLightComponent.SetOuterConeAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x9ebbc10
	void SetInnerConeAngle(float NewInnerConeAngle); // Function Engine.SpotLightComponent.SetInnerConeAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x9ebbb10
	void BakeShadowDepth(); // Function Engine.SpotLightComponent.BakeShadowDepth // (Final|Native|Public|BlueprintCallable) // @ game+0x88f4d0
	static UClass* StaticClass(); // Dumper_Generated_Function // () // @ game+0x000000
};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
